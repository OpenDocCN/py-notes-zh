- en: P4：Barry_Warsaw_-_Get_your_resources_faster_with_importlibresources_-_PyCon_2018
    - 哒哒哒儿尔 - BV1Ms411H7Hn
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P4：Barry_Warsaw_-_通过importlibresources更快获取资源_-_PyCon_2018 - 哒哒哒儿尔 - BV1Ms411H7Hn
- en: \>\> All right。 If you're going to go ahead and get started， this is Barry Warsaw。
    Let's。 give him a round of applause。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: \>\> 好的。如果你准备开始，那么这是巴里·华沙。让我们为他热烈鼓掌。
- en: '![](img/ecc9b04739c400ddd2bccbcab3f01b61_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ecc9b04739c400ddd2bccbcab3f01b61_1.png)'
- en: \>\> Microphone。 Hey， check one two。 Is it working？ Okay， great。 Awesome。 \>\>
    Okay。 So， yeah。 Barry Warsaw， I work at LinkedIn on the Python Foundation team。
    You certainly are welcome to come up to me and talk about how we use Python at
    LinkedIn。 So。 I'm going to talk today about this new library that's in Python
    3。7。 This is kind。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: \>\> 麦克风。嘿，检查一下，一二。它工作吗？好的，太好了。 \>\> 好的。所以，巴里·华沙，我在 LinkedIn 的 Python 基金会团队工作。你当然可以来找我，谈谈我们如何在
    LinkedIn 使用 Python。所以。今天我将谈论这个新库，它在 Python 3.7 中。这种。
- en: of my catch phrase。 It's not completely accurate， but I couldn't come up with
    anything better。 So。 that's what you get。 So， here's the problem， right？ You have
    your code and you have your。 code and you have some static files in the code。
    And you want to be able to read them， at runtime。 The question is， how hard can
    it really be to do that， right？ Yeah， it's easy。 So。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我的口头禅。虽然不完全准确，但我想不出更好的东西。所以，这就是你得到的。那么问题是什么呢？你有代码，还有一些静态文件在代码中。你希望在运行时能够读取它们。问题是，这真的有多难呢？对吧？是的，这很简单。
- en: just a couple of examples。 I'm sure you can come up with your own。 You might
    have templates。 a big wall of text that has some placeholders。 And at runtime，
    you'd like to be able to read。 that template， fill in those placeholders and use
    that to generate an email or other files。 Sample data for tests， either a data
    that you're reading in and using in your test or。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 只举了几个例子。我相信你也能想出自己的。你可能有模板，一个包含占位符的大段文本。在运行时，你希望能够读取该模板，填充占位符，并用它生成电子邮件或其他文件。测试的示例数据，无论是你正在读取并使用的，还是。
- en: comparing against the results of your tests。 You may have， for example， some
    certificates。 to connect to a self-signed certificate to connect to an HTTPS server
    or something like， that。 Internationalization， there's these get text translation
    catalogs where you are translating。 from the English source to Italian or Spanish
    or whatever it might be。 So， these are all。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 与你的测试结果进行比较。你可能有，例如，一些证书，用于连接自签名证书以连接到 HTTPS 服务器或类似的东西。国际化方面，有这些 gettext 翻译目录，你正在从英语源翻译成意大利语或西班牙语等。因此，这些都是。
- en: types of static files that you want to ship with your library or your application
    and。 be able to read those at runtime。 So， here's， for example， what a file system，
    very simple。 file system layout might look like。 You've got your package called
    the package。 And it's。 a package because it's got a dunder and it。py file in there。
    And it might have a couple of。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你希望与库或应用程序一起打包的静态文件，并能够在运行时读取它们。因此，以下是一个文件系统，非常简单的文件系统布局的示例。你有一个名为“包”的包。它是一个包，因为其中有一个
    dunder 和 it.py 文件。它可能还有几个。
- en: other source code files in there and another directory。 And inside that directory，
    there's。 some sample data that you want to read at runtime。 So， if we look at
    sort of a naive。 approach to this， and you see this in a lot of code， you import
    the package and then you。 use the packages dunder file attribute which actually
    points to the dunder and it。py file。 So。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 其他源代码文件和另一个目录。在该目录内，有一些你希望在运行时读取的示例数据。因此，如果我们看一下这种朴素的方法，你会在很多代码中看到这一点，你导入包，然后使用包的
    dunder file 属性，它实际上指向 dunder 和 it.py 文件。
- en: you want to get to the parent so you can get to the directory and then you want
    to traverse。 down to wherever the sample data is。 You open it in binary mode。
    You read the bytes out， of it。 And you've got your sample data。 So， we're done。
    So， I think I've got like probably。 20 minutes for questions。 Well， we're obviously
    not quite done because things get complicated。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你想到父目录，这样你就可以到达目录，然后向下遍历，直到找到示例数据。你以二进制模式打开它，读取其中的字节。这样，你就得到了你的示例数据。所以，我们完成了。我想我大概有20分钟的时间来回答问题。好吧，我们显然还没有完全结束，因为事情变得复杂。
- en: when you take that， those files and you stick them in a zip file or another
    type of an archive。 And why is that a problem？ Well， it's a problem because of
    this little red bit of code。 Dunder。 file doesn't actually point to a real file
    system path in this case。 So， when you use。 this naive approach， you get an exception。
    So， now along comes a well known， maybe infamous。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将那些文件放入一个压缩文件或其他类型的归档时。那为什么会是个问题？嗯，这是因为这段小红色代码。Dunder。file在这种情况下实际上并不指向真实的文件系统路径。所以，当你使用这种幼稚的方法时，会抛出一个异常。因此，接下来出现了一个众所周知，甚至可能是臭名昭著的。
- en: package called package resources。 And package resources has this thing called
    the basic resource。 access API。 And we can use this instead of accessing the dunder
    file directly to read the。 sample data。 So， we import this function。 It has this
    function called resource string。 It's a little weird because in Python 3 it actually
    returns bytes。 So， okay， so we'll tell。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一个叫做包资源的包。包资源有一个叫基本资源访问API的东西。我们可以使用这个来代替直接访问dunder file来读取示例数据。所以，我们导入这个函数。它有一个叫resource
    string的函数。这有点奇怪，因为在Python 3中，它实际上返回字节。所以，好的，我们会告诉。
- en: the truth， we'll import it as resource bytes。 We pass in the name of the package
    that has。 our sample data and then sort of a path from that directory down to
    the sample data。 We call。 the function and it returns us the bytes。 So， the cool
    thing is that works for both the。 file system paths and for zip file paths。 So，
    now we're done。 We have 19 minutes for， questions。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，我们将其导入为资源字节。我们传入包含我们示例数据的包的名称，然后是一条从该目录到示例数据的路径。我们调用该函数，它返回字节。所以，酷的是，这对文件系统路径和压缩文件路径都适用。所以，现在我们完成了。我们还有19分钟用于提问。
- en: Of course， there's still a problem。 So， what are some of the problems with package，
    resource？ Now。 package resource has been around for a long time。 Comes sort of
    in setup tools。 and you see it in tons of things。 The biggest problem with package
    resources is that it has。 import time side effects。 So， even if you're never going
    to access your sample data， you're。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，仍然存在一个问题。那么，包资源有哪些问题呢？现在。包资源已经存在很长时间了。它来自setup工具，并且你在许多东西中都能看到。包资源最大的一个问题是它具有导入时的副作用。因此，即使你永远不会访问你的示例数据，你也会。
- en: paying the cost of it because as soon as you import package resources， you pay
    this penalty。 Package resource is one of the things it does is it crawls over
    every entry in your sys path。 and it builds up these working sets and does all
    this sort of runtime work。 So， even if。 you don't need it， you're paying for that。
    And if you have a lot of things on your sys， path。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 付出代价，因为一旦你导入包资源，你就要承担这个惩罚。包资源所做的一件事是遍历你sys路径中的每一个条目，并建立这些工作集，做所有这种运行时的工作。因此，即使你不需要它，你也在为此付费。如果你在sys路径上有很多东西。
- en: it can be very， very slow as we at LinkedIn have discovered。 Package resources
    is kind of this weird amalgam of functionality。 It does a lot of things。 It has
    the resource access API。 It also kind of supports namespace packages pre-pept4
    or， 20。 It handles entry points and just like all this weird stuff that is kind
    of thrown。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在LinkedIn，我们发现它可能非常慢。包资源有点像功能的奇怪混合体。它做了很多事情。它有资源访问API。它还支持预PEP 420的命名空间包。它处理入口点，还有所有这些奇怪的东西。
- en: in there which combined with the backwards compatibility guarantees and sort
    of the complication。 of package resources makes it very difficult to fix some
    of these runtime import time side， effects。 As I mentioned， it has some funky
    APIs。 Resource string is resource bytes。 It also。 has this API to guarantee that
    it will return you a path on the physical file system。 So。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，结合向后兼容的保证以及包资源的复杂性，使得修复这些运行时导入时副作用非常困难。正如我提到的，它有一些奇怪的API。资源字符串是资源字节。它还具有这个API，以保证它将返回一个在物理文件系统上的路径。所以。
- en: if it's in a zip file， it will take that data， the contents of that file， stick
    it。 in a temporary file and return you the path to the temporary file。 But the
    problem is package resources predates context managers and with statements。 So，
    you。 really have no idea when or even if that temporary file is ever going to
    get cleaned up。 So， it's。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它在一个压缩文件中，它会将那部分数据，也就是该文件的内容，放入一个临时文件并返回临时文件的路径。但问题是，包资源早于上下文管理器和with语句的出现。因此，你实际上根本不知道那个临时文件什么时候，甚至是否会被清理掉。所以，它是。
- en: got some weird APIs。 It's kind of everywhere。 So， you sort of have to pay the
    penalty even。 if you're just， you know， you have some dependency that is using
    package resources。 We'd like。 to kill off package resources because of this。 And
    it still supports Python 2 which I。 think is the number one bug with package resources。
    You all agree， right？ Yeah。 Awesome。 Cool。 So。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些奇怪的 API。到处都是。因此，即使你只是，有一些依赖项使用包资源，你也不得不承担这个代价。我们希望取消包资源，因为这个原因。它仍然支持 Python
    2，我认为这就是包资源的头号问题。大家都同意吧？是的。太棒了。酷。所以。
- en: if you get nothing else out of this talk， I hope you at least start to realize
    that you'd。 like to replace your uses of the dunder file directly or package resources
    with our new， thing。 And we can do better。 So， we can do better because we have
    Python's awesome optimized。 import system to help us。 And so， we've built this
    new library on top of Python's import。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从这次演讲中没有其他收获，我希望你至少开始意识到你希望用我们的新东西来替代直接使用 dunder 文件或包资源。我们可以做得更好。因此，我们能够做得更好，因为我们有
    Python 出色的优化导入系统来帮助我们。因此，我们在 Python 的导入基础上构建了这个新库。
- en: '![](img/ecc9b04739c400ddd2bccbcab3f01b61_3.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ecc9b04739c400ddd2bccbcab3f01b61_3.png)'
- en: system and it's highly optimized for finding modules and packages and so we're
    going to。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 系统经过高度优化，用于查找模块和包，因此我们将会。
- en: '![](img/ecc9b04739c400ddd2bccbcab3f01b61_5.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ecc9b04739c400ddd2bccbcab3f01b61_5.png)'
- en: build on top of that。 So， import lib resources。 This is how the same call would
    look in import。 lib resources。 So， there's a function called read binary。 It does
    exactly that。 You give。 it the name of the package that has your sample data and
    the name of the resource inside that。 package and read binary returns you the
    bytes。 The kind of the other way you can do it is you。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在此基础上构建。因此，导入库资源。这是导入库资源中的相同调用的样子。因此，有一个叫做 read binary 的函数。它正是这样做的。你给它包含样本数据的包的名称和包内资源的名称，read
    binary 会返回字节。你可以做到的另一种方式是你。
- en: can actually import the package and you can pass that as the first argument。
    You'll see。 this is a very common pattern。 We either accept the module object
    or the package object as。 the first argument or the string naming the package。
    And obviously， because we're using。 Python's import system， if it hasn't been
    imported yet， import lib resources will import。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上可以导入包，你可以将其作为第一个参数传递。你会看到。这是一种非常常见的模式。我们要么接受模块对象或包对象作为第一个参数，要么接受包的名称字符串。显然，因为我们使用的是
    Python 的导入系统，如果尚未导入，导入库资源将进行导入。
- en: the package。 Now， if you've kind of been paying attention， you'll notice there's
    an important。 difference here。 In the original example， if you notice the data
    directory is not a Python。 package because it doesn't have a dunder init。py file
    in it。 And that's one explicit difference。 between package resources and import
    lib resources。 We require that the resources live inside。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这个包。现在，如果你稍微关注一下，你会注意到这里有一个重要的区别。在原始示例中，如果你注意到数据目录不是一个 Python 包，因为它没有一个 dunder
    init.py 文件。这是包资源和导入库资源之间的一个明确区别。我们要求资源必须位于其中。
- en: a Python package。 So， it's a pretty easy fix。 You just stick an empty dunder
    init。py file。 in there and it should all work。 So， I'm going to take a quick detour
    and talk about exactly。 what a resource is and what a package is in our terminology
    here。 So， a package is any。 importable module with a dunder path attribute。 So，
    how many people know what the difference。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Python 包。因此，这是一个相当简单的修复。你只需在其中放入一个空的 dunder init.py 文件，它就应该可以正常工作。因此，我将稍作偏离，具体谈谈在我们的术语中资源是什么，包又是什么。因此，包是任何具有
    dunder path 属性的可导入模块。那么，有多少人知道模块和包之间的区别。
- en: between a module and a package is in Python？ Of course， red does。 And a package
    is a package。 is have a dunder path attribute。 That's really the only difference
    between a module and a。 package as far as the object goes。 So， one way to think
    of it， although you shouldn't get。 caught up in this， this is sort of the mental
    model of it， a package is essentially a directory。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，模块和包之间的区别是什么？当然，red 确实如此。而包就是包。是拥有一个 dunder path 属性。这实际上是模块和包在对象层面上唯一的区别。因此，一种思考方式，尽管你不应该被困住，这有点像是它的心理模型，包本质上是一个目录。
- en: containing a dunder init。py file。 Now， of course， it doesn't have to be a physical
    directory。 on the file system。 That's kind of the whole point of this。 But your
    mental model can sort。 of think about it like that。 So， what's a resource？ That's
    just any readable object contained。 inside a package。 Such as a file， right？ But
    again， it doesn't have to be a physical file。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 包含一个 `__init__.py` 文件。现在，当然，它不必是文件系统中的物理目录。这正是这一切的意义所在。但你的思维模型可以这样考虑。那么，什么是资源？那只是包内任何可读对象，例如文件，对吧？但再次强调，它不必是一个物理文件。
- en: You can think of it this way as files inside of directories， but they can live
    sort of。 anywhere that Python's import system can reach。 An important distinction
    here is that sub。 directories and sub packages are not resources。 That's a deliberate
    choice。 Also， namespace。 packages， sort of the pet 420 namespace packages cannot
    contain resources。 They don't actually。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以这样看待它，作为目录中的文件，但它们可以在 Python 的导入系统可以到达的任何地方存在。这里一个重要的区别是子目录和子包不是资源。这是一个故意的选择。此外，命名空间包，比如
    pet 420 命名空间包不能包含资源。它们实际上不。
- en: have a physical location anywhere。 So， there's no place to put things。 So， that's
    the terminology。 So if we look at our example again， we can see that the package
    in this case has three， resources。 It has three dunder init。py files。 And the
    sub package， the package。data， has， two resources。 Dunder init。py and the sample
    data。 Right？ So， it all makes sense。 It's all， pretty clear。 So。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何地方都没有物理位置。因此，没有地方可以放东西。这就是术语的来源。如果我们再看一下我们的示例，我们可以看到，在这种情况下，包有三个资源。它有三个 `__init__.py`
    文件。而子包 `package.data` 有两个资源：`__init__.py` 和示例数据，对吧？所以，这一切都很合理，很清楚。
- en: now that we sort of understand how this all works and we've seen a little， example
    of it。 we're going to now look at the API that you have available to you。 We love。
    type annotations because it's Python 3。 So， the API defines two types。 Obviously，
    package。 and resource。 So， you can see here where the union of the stirrer or
    the module type gives。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们大致了解了这一切是如何运作的，并且看到了一个小示例，我们现在将看看你可以使用的 API。我们喜欢类型注解，因为这是 Python 3。所以，API
    定义了两种类型。显然，包和资源。因此，你可以在这里看到，字符串或模块类型的联合给。
- en: you that API where the first argument can either be the name of the package
    or can be。 the actual module object that you've imported。 And similarly， with
    a resource， any place that。 accepts a resource type， accepts a string or sort
    of this new Python 3。0s path like thing。 Okay。 so now we're going to dive in a
    little bit into the API and look at the details of， that。 So。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以想象这个 API，其中第一个参数可以是包的名称，也可以是你已导入的实际模块对象。同样，对于资源，任何接受资源类型的地方，都接受字符串或类似于这种新的
    Python 3.0 路径的东西。好吧，现在我们将稍微深入了解 API，看看它的细节。
- en: one of the first things you want to do is just get the contents of a resource。
    You've got your sample data file over there and you want to just read everything
    out of， it。 The first way you've already seen is read binary。 It takes a package
    and a resource。 and it returns you the bytes。 So， it reads everything out of it
    and returns you the entire。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你首先想做的事情之一就是获取资源的内容。你那边有你的示例数据文件，你想读取它的所有内容。你已经看到的第一种方法是以二进制方式读取。它接受一个包和一个资源，并返回字节。所以，它会读取所有内容并返回整个内容。
- en: contents。 The important distinction here and this was also a deliberate API
    choice is that。 that is only for bytes and there's a separate API for text。 Again，
    package and resource are。 the first two arguments but you see sort of the expected
    encoding， obviously UTF-8 by default。 and what you should do with errors。 And
    that returns a stirrer。 So， in our API， we have。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 内容。这里重要的区别是，这也是一个故意的 API 选择，那就是这仅适用于字节，而文本有一个单独的 API。同样，包和资源是前两个参数，但你可以看到预期的编码，显然默认是
    UTF-8，以及你应该如何处理错误。它返回一个字符串。因此，在我们的 API 中，我们有。
- en: a distinction between binary and text because we didn't want to do anything
    weird like， oh。 if the encoding is none， we're going to return the bytes like
    that。 We want to be。 explicit about this。 So， the second kind of thing that you
    might want to do is say， I。 don't want to read all the contents of it。 I want
    to get sort of a file handle， that file。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 区分二进制和文本是因为我们不想做一些奇怪的事情，比如说，如果编码为空，我们将以那种方式返回字节。我们希望对此保持明确。所以，你可能想做的第二件事是说，我不想读取它的所有内容。我想获得某种文件句柄，即该文件。
- en: handle like thing that I can stream the bytes out of or the text out of and
    that's the second。 set of API。 It looks a lot like， it's going to look a lot like
    the built-in open， open， binary。 This is sort of the type annotation way of describing
    what gets returned but you。 pass in a package and a resource and it returns you
    a object that you can use in a with statement。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 处理可以流出字节或文本的东西，这就是第二组API。它看起来非常像内置的`open`，`open binary`。这是一种描述返回内容的类型注释方式，但你传入一个包和一个资源，它返回给你一个可以在`with`语句中使用的对象。
- en: Right？ So， just like built-in open， you use with open binary， you read as many
    bytes out。 of it as you want and then as soon as the with statement or the context
    manager exits。 it closes that file handler。 Obviously， what's next？ Open text。
    Same kind of thing。 This returns。 text。 All makes sense， right？ Now， as I mentioned，
    package resources provides this really useful。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 对吧？所以，就像内置的`open`，你使用`with open binary`，你可以从中读取你想要的字节，然后一旦`with`语句或上下文管理器退出，它就会关闭该文件句柄。显然，接下来是什么？`Open
    text`。同样的事情。这返回文本。所有这一切都说得通，对吧？现在，正如我提到的，包资源提供了这个非常有用的。
- en: API for guaranteeing that it's going to return you the path to a concrete to
    a file on the。 concrete file system。 So， if you're in a zip file， let's say your
    resource is in a zip file。 and you really need the file system path， you're going
    to use this API。 And you may find this， for。 for example， getting a 。so file where
    dlopen will only import from a physical file， system path。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: API保证它会返回到具体文件系统中具体文件的路径。因此，如果你在zip文件中，假设你的资源在zip文件中，而你确实需要文件系统路径，你将使用这个API。你可能会发现，例如，获取`.so`文件时，`dlopen`只能从物理文件系统路径导入。
- en: It can't import from a zip file or there may be some certificates and things。
    like that that often other APIs that require a physical file system path。 And
    so， this is。 what it looks like。 You pass in the package and the resource and
    it returns you this weird。 iterator over a path thing。 That's really just sort
    of the type annotation for saying。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 它不能从zip文件导入，或者可能有一些证书等，这通常是其他API需要物理文件系统路径的情况。因此，这就是它的样子。你传入包和资源，它返回给你这个奇怪的迭代器，它实际上只是类型注释，说明。
- en: you can pass whatever path returns to a context manager or it is a context manager。
    So， you。 can pass it to a with statement。 And that's how it would look。 So， unlike
    package resources。 you now have a guarantee for when that temporary file， if it
    needs to create a temporary file。 how when that temporary file will get deleted
    as soon as the with statement exits， right？
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将任何路径传递给上下文管理器，或者它本身就是一个上下文管理器。因此，你可以将其传递给`with`语句。这就是它的样子。因此，与包资源不同，你现在有了一个保证：当需要创建临时文件时，这个临时文件会在`with`语句退出时被删除，对吧？
- en: This makes sense， yes？ So， modern APIs give you all these guarantees that you
    really want。 Now you want to sort of say， "Hey， I've got this package over here
    and I'd like to see。 what's inside of it。" Kind of think of it like as an OS lister
    of the package。 The。 API for that is content。 And all you obviously， all you have
    to pass in is the package and。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这很有道理，是吧？因此，现代API给你提供了你真正想要的所有保证。现在你想说，“嘿，我这里有一个包，我想看看里面有什么。”可以把它看作是包的操作系统列出工具。它的API是`content`。而且你显然只需传入包和。
- en: it returns you a list of strings。 Now， you'll notice that it doesn't return
    a list of resources。 and that's again a deliberate choice because here's an example
    in the interactive interpreter。 where you're getting all the contents of the package。data。
    And you'll notice because。 it got imported， there's a dunder pi cache directory，
    right？ That's why you get a list。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 它返回给你一个字符串列表。现在，你会注意到它并不返回资源列表。这又是一个故意的选择，因为这里有一个在交互式解释器中的示例，你正在获取包的所有内容。你会注意到因为它已被导入，有一个`__pycache__`目录，对吧？这就是你获得列表的原因。
- en: of strings because the items that contents returns are not guaranteed to be
    resources。 It's just sort of like an OS lister。 You get everything that's in there。
    So now you're。 asking the question， "Well， if all I want are the resources， like
    I'm using this in。 my plugin system， how do I know which ones are resources and
    which ones are not resources？"。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的内容是字符串，因为内容返回的项目并不保证是资源。它就像一个操作系统的列出工具。你获取到里面的所有内容。因此，现在你在问，“好吧，如果我只想要资源，比如我在我的插件系统中使用这个，我怎么知道哪些是资源，哪些不是资源？”
- en: We have an answer for that。 And that is this function call， is resource。 So
    you can use， this。 you can use is resource along with contents to iterate over
    all the resources in， a package。 So in this case， if you passed in under pi cache
    to this call， you'd get false。 and everything else would return true。 Unlike package
    resources。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对此有答案。那就是这个函数调用 is resource。所以你可以使用这个函数，结合 contents 来遍历包中的所有资源。因此在这种情况下，如果你传递给这个调用的是
    under pi cache，你会得到 false，其他所有内容都会返回 true。这与包资源不同。
- en: we actually provide an API for loaders。 How many people know what。 loaders are
    in Python's import system？ Okay。 So the way Python kind of， especially Python，
    3。 for example， the way it actually ends up importing a module or a package is
    that there。 are things called finders and there are things called loaders。 So
    when you say something like。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实际上为加载器提供了一个 API。有多少人知道 Python 导入系统中的加载器是什么？好吧。Python，特别是 Python 3 的工作方式是，实际上导入模块或包时，有称为查找器和加载器的东西。因此，当你说类似于。
- en: import the package。data， the first thing that happens is Python's import system
    tries to。 find a finder that knows where that package lives。 Okay？ And it can
    live on the file system。 in a zip file。 It can live on the network。 It can live
    in a database。 As long as you have。 a finder that can find the package or the
    module， Python's import system can usually， load it。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 导入包数据时，首先发生的事情是 Python 的导入系统尝试找到一个知道该包位置的查找器。好的？它可以位于文件系统中，在 zip 文件中，也可以在网络上或数据库中。只要你有一个可以找到包或模块的查找器，Python
    的导入系统通常可以加载它。
- en: But the thing that actually loads the thing that loads the package or the module，
    is a loader。 And so what we've done is we've said we can let any loader， even
    custom loaders。 play along with this whole higher level API。 So now we're not
    limited to just zip files。 and file system pads。 Any loader can optionally import
    this thing， this function called get。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 但实际上加载包或模块的东西是加载器。因此，我们所做的是允许任何加载器，甚至是自定义加载器，与整个高级 API 一起工作。因此，我们不再局限于仅使用 zip
    文件和文件系统路径。任何加载器都可以选择性地导入这个称为 get 的函数。
- en: resource reader。 If it exists， it gets past the package name and it returns
    an implementation。 of an ABC。 So an ABC is an abstract base class。 So you don't
    have to derive from this。 You。 just have to implement the functions in this ABC。
    And now your custom loader that loads。 from a SQLite database or whatever it happens
    to be can play along just fine and the higher。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 资源读取器。如果存在，它会传递包名，并返回一个 ABC 的实现。所以 ABC 是一个抽象基类。因此，你不必从这个派生。你只需要实现这个 ABC 中的函数。现在，你的自定义加载器可以从
    SQLite 数据库或其他任何地方加载，并正常工作。
- en: level API works as expected。 I'm not going to go into a lot of detail because
    most people。 don't have to actually implement loaders。 This is all documented
    in the Python documentation。 Python 3。7 documentation。 So if you are implementing
    a loader and you want to play along。 just check， out the documentation。 But I'll
    give you a quick flavor for what this looks like。 This。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 高级 API 的工作如预期。我不会详细讲述，因为大多数人不需要实际实现加载器。这一切都在 Python 文档中有说明，Python 3.7 文档中。如果你正在实现加载器并希望参与其中，请查看文档。但我会给你一个快速的概述，让你了解它是什么样的。这。
- en: is the low level API。 So import live resources is the high level API that consumers
    are going。 to use。 And anybody who implements a loader would implement this lower
    level API。 So it's。 things like open the resource， get something you can read
    stuff out of。 Resource path。 I'll。 talk about that in a little bit more detail
    in a moment。 That returns the string which。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 是低级 API。因此，导入实时资源是消费者将使用的高级 API。任何实现加载器的人都会实现这个低级 API。所以，这包括打开资源，获取一些可以读取的内容。资源路径。我稍后会更详细地讲一下。这将返回一个字符串。
- en: points to the file is resource。 Obviously that maps almost directly to is resource
    in。 the higher level API。 And contents also maps to the higher level API pretty
    directly。 The。 kind of the weird one is resource path。 So with all these API's，
    the low level API's。 they are expected to raise a file not found error when the
    resource doesn't exist。 So， for example。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 指向文件的是资源。显然，这几乎直接映射到高级 API 中的资源。而内容也几乎直接映射到高级 API。奇怪的是资源路径。因此，对于所有这些 API，低级
    API 预期在资源不存在时会引发文件未找到错误。例如。
- en: if you say open resource， foo and foo is not a resource in the pack in that，
    the loader knows about。 it's expected to raise a file not found error。 And similarly，
    resource。 path requires a concrete file system path。 So if， so if you think about
    the implementation。 when you say I want the path to a resource in a package that's
    in a zip file， what will。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你说打开资源foo，而foo在包中并不是加载器知道的资源，那么它会预期引发文件未找到错误。同样，资源路径需要一个具体的文件系统路径。因此，如果你考虑实现，当你说我想要zip文件中包的资源路径时，会发生什么。
- en: happen is that import live resources will call resource path on the loader。
    And that will。 raise a file not found error because it's not in a physical file
    system location。 It's。 in the zip file。 And then import live resources will say，
    okay， I know what that means。 I have。 to create a temporary file and I have to
    read the resource all the bytes out of it。 And I。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 发生的事情是，导入实时资源会在加载器上调用资源路径。这将引发文件未找到错误，因为它不在物理文件系统位置。它在zip文件中。然后导入实时资源会说，好的，我知道这意味着什么。我必须创建一个临时文件，并且必须将资源中的所有字节读出来。我。
- en: have to stick those bytes in the temporary file。 And now I have to return you
    the path。 to the temporary file。 And it does that by because the low level API
    raises the file not。 found error。 And again， just like with the high level API，
    contents can return non-resources。 So just a quick word about kind of why we did
    this。 So we've got， at LinkedIn we use a ton。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须将这些字节存入临时文件。然后我需要将路径返回给你。它是通过低级API引发文件未找到错误来实现的。同样，高级API也可以返回非资源的内容。所以我们来谈谈我们为什么这样做。在LinkedIn，我们使用了大量的资源。
- en: of Python everywhere because we love Python。 But we use it a lot in our command
    line tools。 Right？
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python的每一个地方，因为我们热爱Python。但我们在命令行工具中大量使用它。对吧？
- en: So just the nice little tools that people write to do a particular task from
    the， command line。 And we notice that in many cases you say food dash dash help，
    it takes multiple， seconds。 like way faster than it should take。 And so if you're
    not familiar with Python， 3。7。 it has a very nice way of getting a listing of
    the time to import the cost to import all。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是人们编写的小工具，用于从命令行执行特定任务。我们注意到，在许多情况下，你输入food --help时，响应时间需要几秒，远远快于应有的时间。因此，如果你不熟悉Python
    3.7，它有一种很好的方式来获取导入成本的时间列表。
- en: your packages and your modules。 And so we did some analysis and package resource
    was very。 high up there。 We also use PEX， which is a zip file， a single file，
    executable format。 PEX has been around for a long time。 But because it's been
    around for a long time， it uses。 package resources。 And it also doesn't kind of
    set up sys path in the most optimal way。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你的包和模块。因此，我们进行了分析，发现包资源的使用非常高。我们还使用PEX，它是一个zip文件，是单个文件的可执行格式。PEX已经存在很长时间了。但因为它存在已久，它使用包资源。而且它的sys.path设置也不是最优的。
- en: So Lauren Kavalo， one of our awesome devs at LinkedIn， wrote this thing called
    shiv， which。 is a modern replacement for PEX。 And it uses import library resources。
    And it was just recently。 open source。 So I highly recommend if you're using PEX
    now to give shiv a look。 Shiv only。 works with Python 3。6。 So yay for modern stuff。
    It's all open source。 Please play with it。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们LinkedIn的优秀开发者Lauren Kavalo写了一个叫做shiv的东西，它是PEX的现代替代品。它使用导入库资源。并且它最近刚刚开源。因此，我强烈推荐如果你现在使用PEX，可以试试shiv。shiv仅适用于Python
    3.6。对于现代技术来说真是太棒了。它都是开源的，请玩玩它。
- en: So between the two， right between shiv and the use of import library resources，
    we've。 seen 25 to 50% improvement in just like the responsiveness of dash dash
    help。 So that's。 really awesome。 Most importantly， we've taken the entire API
    and we've backported it for。 implement lib dot resources， which is only available
    in Python 3。7。 We've backported， it to 2。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两者之间，正好在shiv和使用导入库资源之间，我们看到了响应速度提高了25%到50%。这真的很棒。最重要的是，我们将整个API进行了回移植，以实现lib.dot.resources，这在Python
    3.7中才可用。我们将其回移植到了2。
- en: 7 and 3。4 to 3。6。 It does work in 3。7， but it's a very thin shim layer over
    the， standard library。 But what this means is that you don't have to wait for
    3。7 to stay。 and start getting great performance because you can get rid of package
    resources。 You。 don't have to use that anymore for most for many use cases。 And
    you can just adopt import。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 7和3.4到3.6。它在3.7中也能工作，但它是一个非常薄的shim层，覆盖在标准库之上。但这意味着你不必等到3.7才能开始获得出色的性能，因为你可以摆脱包资源。对于许多用例，你不再需要使用它。你可以直接使用导入。
- en: lib resources。 It's all pure Python。 I don't think there are even any dependencies
    at， runtime。 And it will just work。 So you can start converting your code over
    to using the， more efficient。 Now one thing to keep in mind is that for 2。7 because
    Python's import system。 doesn't have these finders and loaders in Python 2， that
    lower level API doesn't work。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: lib资源。这都是纯Python。我认为在运行时甚至没有任何依赖项。而且它将正常工作。所以你可以开始将你的代码转换为使用更高效的方式。现在需要注意的一点是，对于2.7，因为Python的导入系统在Python
    2中没有这些查找器和加载器，因此较低级别的API无法使用。
- en: but for Python 3 it does。 So no discussion about Python's import system would
    be complete。 without giving massive props to Brett Cannon。 Right？ Yay。 [Applause]。
    So for those of you who don't know this， Brett essentially rewrote Python's import
    system。 in pure Python， which none of this would be possible without that。 And
    it's really a great。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 但是对于Python 3来说确实如此。因此，关于Python导入系统的讨论没有任何内容是完整的，除非对布雷特·坎农给予极大的赞赏。对吧？耶。[掌声]。所以对于那些不知道的人，布雷特基本上是用纯Python重写了Python的导入系统，没有这个一切都不可能。而且这真的很棒。
- en: improvement in Python 3， one of the many， many， many great improvements in Python
    3。 In addition。 to that， LinkedIn is owned by Microsoft， so we work together。
    We have weekly meetings。 with our Microsoft Python partners。 And Brett and I work
    together on import lib resources。 So really， I'm up here getting all the credit，
    but we have to definitely give it up for Brett。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Python 3的改进，这是Python 3中众多伟大改进之一。此外，LinkedIn是微软拥有的，所以我们一起合作。我们每周与微软的Python合作伙伴举行会议。布雷特和我在导入lib资源方面合作。所以实际上，我在这里获得了所有的荣誉，但我们绝对要为布雷特喝彩。
- en: for co-writing this and working out the API and everything。 And I expect this
    will be。 one of many great collaborations between our corporate entities。 That's
    kind of it。 I don't。 know how much time there is left， but I'm happy to take questions。
    This is how to get in touch。 with me。 That's the Read the Docs link。 And you can
    get to everything from the Read the， Docs link。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了共同撰写这篇文章并制定API等。我期待这将是我们公司实体之间许多伟大合作中的一次。这就是我的全部。我不知道还有多少时间，但我很乐意回答问题。这是与我联系的方式。那是Read
    the Docs链接。你可以从Read the Docs链接获取所有内容。
- en: including the Python 3。7 documentation， which has most of the details。 And on
    Read， the Docs。 you can get there from there to everything。 Yeah， so that's it。
    And I'm happy， to take questions。 I can't really see anybody。 Does import lib
    resources support locations， in FHS compliant places。 so outside of the package
    space？ No， they have to be in the， I， mean， it all。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 包括Python 3.7文档，其中包含大部分细节。而在Read the Docs上，你可以从那里获取所有内容。是的，就这样。我很高兴能回答问题。我看不见任何人。导入lib资源是否支持FHS兼容位置的资源，所以在包空间外？不，它们必须在里面，我是说，这一切。
- en: it works by importing the package。 So wherever the package is， if it's on。 sys
    path and Python can import it， it can get resources out of there。 So it kind of
    doesn't。 really matter， you know， where they are。 You can set Python， your Python
    path environment。 variable and point to some crazy location。 And as long as the
    Python can import it， it。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 它通过导入包来工作。因此无论包在哪里，如果它在sys路径上且Python可以导入它，它就可以从那里获取资源。因此，它真的不重要，你知道它们在哪里。你可以设置Python的环境变量，指向某个疯狂的位置。只要Python可以导入它，它就可以。
- en: can get the resources out of there。 And it's not planned to add that。 I'm sorry？
    Is it。 planned to add that support？ No， no。 It works off a sys path。 Whatever's
    on sys path。 \>\> So I was thinking about a resource path for a minute and I'm
    wondering how to deal with。 the pickles you could get in with that on say if you're
    running on a read-only file system。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从那里获取资源。而且不打算添加那项功能。我很抱歉？计划添加那项支持吗？不，不。它基于sys路径。无论sys路径上有什么。>> 所以我思考了资源路径一分钟，我想知道如何处理那些在只读文件系统上运行时可能遇到的pickle。
- en: or if you're running in a situation where you need to make sure someone doesn't
    say try。 and race in per day file or something else where it would want to be
    unpacking one of。 those resources that needs a concrete path。 \>\> Yeah。 So it
    just uses Python's temp file， library。 So， you know， that supports setting the
    temp and the various environment variables。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 或者如果你在某种情况下需要确保有人不说尝试并在每天的文件中竞赛，或者其他一些需要解压缩那些需要具体路径的资源。>> 是的。因此，它只是使用Python的临时文件库。所以，你知道，它支持设置临时和各种环境变量。
- en: if you need to point it to a particular place。 If you really have no place with
    which to unpack。 a temp file， then well， yeah， it probably won't work。 You'll
    probably get an exception。 \>\> Thank you。 \>\> Hey， Barry。 Thanks for the talk。
    You mentioned earlier on that there。 was sort of 25 to 50% speed up in some CLIs。
    I was wondering if you experimented that with。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要指向特定位置。如果你真的没有地方来解压临时文件，那么，很可能，它不会工作。你可能会遇到异常。 \>\> 谢谢。 \>\> 嘿，巴里。感谢你的演讲。你之前提到某些CLI的速度提高了25%到50%。我想知道你是否对此进行了实验。
- en: a mercurially and seen if you could make the CLI a bit more competitive with
    Git？ \>\> No， I haven't。 And I personally won't。 I'm certainly happy to help the
    mercurial folks。 or anybody else look at that。 I don't really have a good sense。
    I don't know if Lauren。 does about how much is because of important resources
    and how much is because of SHIV。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否尝试过用Mercurial来让CLI更具竞争力，和Git比拼？ \>\> 不，我没有。而且我个人也不会。我当然乐意帮助Mercurial的人，或者任何其他人来研究这个。我并不太清楚。我不知道劳伦是否知道，多少是因为重要资源，多少是因为SHIV。
- en: But just getting rid of package resources alone lets you then concentrate on
    all your， other。 you know， import time costs， right？ Because you'll see， if you
    use Python 3。7。 you'll see package resources like right up at the top there depending
    on how your sys。 path is set up。 And so just getting rid of that。 And also getting
    rid of your dunder。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，光是去除包资源就能让你专注于其他的，你知道的，导入时间成本，对吧？因为你会看到，如果你使用Python 3.7，包资源会出现在最上面，取决于你的sys.path是如何设置的。因此，仅仅去除这个，同时去掉你的双下划线。
- en: file usage because that also is really terrible。 \>\> Thank you。 Sure。 \>\>
    All right。 Let's give Barry one last round of applause。 [ Applause ]， \>\> Yay。
    [ Applause ]。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 文件使用情况确实非常糟糕。 \>\> 谢谢。好的。 \>\> 好的。让我们给巴里最后一次热烈的掌声。[掌声]，\>\> 好耶。[掌声]。
- en: '![](img/ecc9b04739c400ddd2bccbcab3f01b61_7.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ecc9b04739c400ddd2bccbcab3f01b61_7.png)'
- en: '![](img/ecc9b04739c400ddd2bccbcab3f01b61_8.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ecc9b04739c400ddd2bccbcab3f01b61_8.png)'
- en: '[buzzing]。'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[嗡嗡声]。'
