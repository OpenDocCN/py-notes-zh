- en: P7：Alex Gaynor - Learning From Failure Post Mortems - PyCon 2018 - 哒哒哒儿尔 - BV1Ms411H7Hn
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P7：Alex Gaynor - 从失败中学习的事后分析 - PyCon 2018 - 哒哒哒儿尔 - BV1Ms411H7Hn
- en: \>\> Good afternoon everyone。 Welcome back to our second to last session here。
    Our next speaker does not need any introduction， so I won't spend any time on
    introducing Alex here。 I think most of you know him and he's going to be speaking。
    to us about learning from failure post-mortem。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: \>\> 大家下午好。欢迎回到我们的倒数第二个会议。我们的下一位演讲者不需要介绍，所以我不会花时间介绍Alex。我想你们大多数人都认识他，他将和我们谈论从失败中学习的事后分析。
- en: '![](img/2ec76999d2a8a028352490253a8363d0_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ec76999d2a8a028352490253a8363d0_1.png)'
- en: Alex Gayner。 [ Applause ]。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Alex Gaynor。 [掌声]。
- en: '![](img/2ec76999d2a8a028352490253a8363d0_3.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ec76999d2a8a028352490253a8363d0_3.png)'
- en: \>\> Thank you， Ned， and thank you to all of you， for coming out to listen to
    this talk。 Like Ned said， I'm Alex， and this talk is going to be about。 learning
    from failure with post-mortems。 We're going to be talking about how to introduce
    post-mortems。 to your development process in order to get the most， from the failures
    that inevitably happen。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: \>\> 谢谢你，Ned，也谢谢你们所有人，来到这里听这个演讲。正如Ned所说，我是Alex，这次演讲将围绕通过事后分析从失败中学习。我们将讨论如何在开发过程中引入事后分析，以从不可避免的失败中获得最大收益。
- en: Bugs are a part of life for software developers。 And unless you make space shuttles
    or pacemakers。 you're probably okay with that。 You've accepted into your heart
    that there's something。 that will happen from time to time。 In my experience，
    customers are never super happy， about bugs。 but today we're going to focus， on
    a specific subset of them。 Operational bugs。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 对于软件开发人员来说，bug是生活的一部分。除非你在做航天飞机或心脏起搏器，否则你可能对此并不太在意。你已经接受了，这种情况时不时会发生。在我的经验中，客户从来不会对bug感到特别高兴，但今天我们将专注于一个特定的子集。操作性bug。
- en: What's an operational failure？ Downtime for your website。 A data breach。 Something
    went wrong in the production environment。 A quick test is that if it's something
    you'd measure， in an SLA， it's an operational failure。 We're going to focus on
    how you can learn， from your operational failures。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是操作性故障？网站停机。数据泄露。在生产环境中出现问题。一个简单的测试是，如果这是你会在服务水平协议（SLA）中衡量的内容，那就是操作性故障。我们将重点讨论如何从操作性故障中学习。
- en: Some of these practices are probably applicable， to other situations you want
    to learn from。 like an Agile Post-mortem or Agile Sprint retrospective。 But those
    won't be my focus。 I'll be using the website went down for most of the examples，
    here。 but it's a situation that I think will be accessible， to many folks。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一些实践可能适用于你想学习的其他情况，比如敏捷事后分析或敏捷冲刺回顾。但这不是我的重点。在这里，我会使用网站宕机作为大多数例子，但这是我认为许多人都能理解的情况。
- en: But don't take that to mean this is the only type， of operational failure。 Before
    we dive too far in， you should probably know the， perspective I'm bringing to
    that。 I'm currently a security engineer protecting Firefox， at Mozilla。 In previous
    lifetimes。 I've worked for startups， and for the US government。 I've developed
    web applications and compilers。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 但不要以为这只是唯一的操作性故障。在我们深入之前，你可能需要了解我所带来的视角。我目前是一名在Mozilla保护Firefox的安全工程师。在之前的职业生涯中，我为初创公司和美国政府工作过。我开发过网络应用程序和编译器。
- en: and nowadays， a web browser。 I've spent a lot of time in the Python ecosystem
    from developing。 popular open source projects to serving on the board， of the
    Python Software Foundation。 So something is broken。 What do you do next？ First，
    stop the bleeding。 Resolving the immediate presentation of the breakage， is beyond
    the scope of this talk。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 还有现在的网络浏览器。我在Python生态系统中花了很多时间，从开发流行的开源项目到担任Python软件基金会的董事会成员。那么，某些东西坏了，你接下来该怎么办？首先，止住损失。解决破损的直接表现超出了这次演讲的范围。
- en: Hopefully somebody else at PyCon gave a talk on fixing bugs。 If not， you're
    on your own。 Once the situation is stabilized， what do you do next？ In my experience。
    there are two possible answers， to this question。 One is how do we make sure this
    never happens again。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 希望在PyCon上还有其他人进行了修复bug的演讲。如果没有，那你就只能靠自己。一旦情况稳定，接下来你该怎么办？根据我的经验，这个问题有两个可能的答案。一个是如何确保这种情况不会再发生。
- en: '![](img/2ec76999d2a8a028352490253a8363d0_5.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ec76999d2a8a028352490253a8363d0_5.png)'
- en: Two is how do we figure out who needs to be fired？
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个是我们如何弄清楚谁需要被解雇？
- en: The team and the meeting are for solving problems。 There are plenty of other
    venues where people devote their， creative energies to shifting blame。 We do not
    need another one。 We don't shoot the messenger， especially when the message is。
    I screwed something up。 I think this quote from my former boss， Mikey Dickerson。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 团队和会议是用来解决问题的。还有许多其他场所，人们投入创造性精力去转移责任。我们不需要另一个这样的场所。我们不会责怪传话者，尤其是当信息是“我搞砸了”时。我认为我以前的老板米奇·迪克森的一句话。
- en: captures the difference between these two perspectives。 Mikey was one of the
    first engineers brought into， RescueHealthCare。gov when it failed in 2013。 If
    you haven't heard that story， you should find， someone to tell it to you。 It's
    a great one。 See。 they had a problem。 The website was down all the time。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 捕捉到了这两种观点之间的区别。米奇是2013年被引入RescueHealthCare.gov的第一批工程师之一，当时网站发生故障。如果你还没听过这个故事，你应该找个人来告诉你。这个故事很精彩。他们遇到了问题，网站一直无法正常运行。
- en: And while some folks were trying to make it work， Congress was holding hearings。
    and whether or not the site， was up or down at any given moment was the lead story
    on CNN。 No one wanted to share anything that would point the blame， it themselves
    or their company。 even if it would be helpful， in fixing the website。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当一些人试图让它运作时，国会正在举行听证会。网站在任何时刻是否正常运行都是CNN的头条新闻。没有人愿意分享任何会指责他们自己或他们公司内容的信息，即使这对修复网站有帮助。
- en: If you leave here having learned absolutely nothing else。 I want you to walk
    away believing that holding people， accountable， AKA firing them。 and making systemic
    improvements， are unrelated problems and maybe even mutually exclusive。 If you
    want to learn how to choose who to fire when， something goes wrong。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你离开这里后什么都没学到，我希望你能相信，追究责任（即解雇他们）和进行系统性改进是无关的问题，甚至可能是互相排斥的。如果你想学习在出错时如何选择解雇谁。
- en: you'll need to find a different talk。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要找一个不同的讲座。
- en: '![](img/2ec76999d2a8a028352490253a8363d0_7.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ec76999d2a8a028352490253a8363d0_7.png)'
- en: This one is about how we learn from our mistakes。 You may have heard the phrase
    "blameless postmortem" before。 This phrase refers to exactly what I was just talking
    about。 Postmortems for finding systemic improvements， not for finding out who
    to blame。 It's very frequent that in the event something goes wrong。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是关于我们如何从错误中学习的。你可能听过“无责事后检讨”这个词。这个词正是我刚才所说的。事后检讨是为了寻找系统性改进，而不是找出谁该负责。在事情出错时，这种情况很常见。
- en: we can look for somebody who we could say is responsible， and to blame。 The
    person who pushed the code to production， the person who ran the administrative
    script。 that went wrong， the person who developed the pull request。 that introduced
    the code that went wrong。 I want to take just a minute and give an example。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以寻找一个可以说是负责任的人，并进行指责。负责将代码推向生产的人，运行出了问题的管理脚本的人，开发了引入了错误代码的拉取请求的人。我想花一点时间给个例子。
- en: of what blamelessness looks like because it is so important， to this process。
    Root cause。 A script was run which deleted half the production cluster。 At first
    glance， this sounds OK。 We're not blaming anybody。 The script was run。 It's not
    important by who。 If you've ever used Microsoft Word， and had it complained to
    you about the passive voice。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 无责文化是什么样子，因为它对这个过程至关重要。根本原因。运行了一个删除了半个生产集群的脚本。乍一看，这听起来还不错。我们没有指责任何人。脚本是运行的，重要的是由谁运行。如果你曾经使用过Microsoft
    Word，并对其被动语态提出过抱怨。
- en: this is it。 This is a blameless sentence。 It doesn't blame anyone。 but it doesn't
    produce a blameless， culture， which is what we're really after。 Root cause。 I，
    Alex。 ran a script which deleted half the production cluster。 This seems worse。
    We're attributing deleting the production cluster， to one person。 Surely that's
    blaming them。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是了。这是一个无责的句子。它没有指责任何人，但它并没有产生一种无责的文化，这正是我们所追求的。根本原因。我，亚历克斯，运行了一个删除了半个生产集群的脚本。这似乎更糟糕。我们将删除生产集群归因于一个人，这肯定是在指责他们。
- en: A culture of blamelessness is not one where we deny， that specific humans did
    things。 but rather one where I can say， I did this and the whole team pushes right
    past that。 to look for systemic opportunities for improvement。 It's critical that
    your team see and understand。 that blamelessness comes not from emitting someone's
    name。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 无责文化并不是否认特定的人做了什么，而是我可以说，我做了这个，整个团队将其推过去，寻找系统性的改进机会。关键是你的团队要看到并理解，无责并不是省略某个人的名字。
- en: but from a deeply held belief that almost all problems， have systemic solutions
    and pursuing those。 is far more important。 Using the passive voice subtly communicates。
    we'd blame someone if we knew who it was。 We're keeping this information secret。
    because deep down we really want someone to blame。 Having a culture where you
    can say， I did this。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 但出于一种深信不疑的信念，几乎所有问题都有系统性的解决方案，追求这些解决方案远比其他更重要。使用被动语态微妙地传达了，如果我们知道是谁，我们会指责某人。我们把这些信息保密，因为内心深处我们真的想找一个人来指责。建立一种文化，让你可以说，我是这样做的。
- en: gives much more opportunity for people to speak freely， to communicate fully
    about what happened。 and to understand root causes rather than being distracted，
    by the nagging question。 Oh。 was it Mark again？ Did he run the script wrong？ Because
    that's not what we're after。 I've used the phrase systemic problem， or systemic
    solution several times now。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这给人们提供了更多机会自由发言，充分交流发生了什么，并理解根本原因，而不是被恼人的问题分散注意力。哦，是马克又犯错了吗？他把脚本运行错了吗？因为那不是我们想要的。我已经多次使用“系统性问题”或“系统性解决方案”这个短语。
- en: If you're all permitted to a philosophy， I want to dive into what those mean。
    An operational failure happened。 The website went down。 And then someone fixed
    the bug， redeployed。 and now the website is up。 There was a failure， and now it's
    resolved， what more needs doing。 The ironclad belief I bring to this process，
    is that the operational failure that happened。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你们都允许有这种哲学，我想深入探讨这些的含义。发生了操作故障。网站宕机了。然后有人修复了错误，重新部署，现在网站恢复了。发生了故障，现在已解决，还需要做什么。我要在这个过程中带来的坚定信念是，发生的操作故障。
- en: gave us one example presentation of an issue。 But it's one of a dozen ways some
    underlying failure。 could have presented。 The job of the postmortem is to find
    the other 11。 see how we can fix them all at once， and to discover what other
    challenges。 exacerbated the severity of these bugs。 You've probably heard the
    phrase root cause analysis before。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 给我们提供了一个问题的示例演示。但这只是一些潜在故障中十几种表现方式之一。事后分析的任务是找出其他11种，看看我们如何能一次性解决它们，并发现其他哪些挑战加剧了这些错误的严重性。你可能听过“根本原因分析”这个词。
- en: In general， it's philosophically well-aligned， with what I'm talking about。
    There's one important correction， though。 Root causes， plural。 I wish I had the
    time to fully explore this material， but I want everyone to jot down the URL，
    how。complexsystems。fail， or you can find it in the slides， online after the talk。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，这在哲学上与我所谈论的非常一致。然而，有一点重要的修正。根本原因，复数。我希望我有时间全面探讨这些材料，但我希望每个人记下网址，how.complexsystems.fail，或者你可以在演讲后在幻灯片中找到它。
- en: This page summarizes some research done by Dr。 Richard， Cook。 He's a medical
    doctor who researches failure modes， of complex systems， whether they're。 the
    electrical grid， hospitals， or production， distributed system。 If you've got a
    handful of web servers， a load balancer， a network file system， a database。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 本页总结了理查德·库克博士所做的一些研究。他是一位医学博士，研究复杂系统的故障模式，无论是电网、医院还是生产分布式系统。如果你有一小堆网络服务器、负载均衡器、网络文件系统和数据库。
- en: and a monitoring tool， you've got a complex system。 One of the major observations
    of Dr。 Cook's research， is that for complex systems， they already， do a lot of
    work to handle failures。 Every accept， try， or finally， or with block， you put
    in your Python code is trying to handle some sort。 of failure。 As a result， any
    operational failure， will have multiple contributing factors。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以及监控工具，你就拥有了一个复杂的系统。库克博士研究的一个主要观察结果是，对于复杂系统来说，它们已经进行了大量工作来处理故障。你在Python代码中放置的每个接受、尝试或最终、或者使用阻塞的操作，都是在尝试处理某种故障。因此，任何操作失败都将有多个促成因素。
- en: Because of this， it's likely that whatever， changed to initiate the operational
    failure。 merely triggered a set of preexisting latent bugs that， just weren't
    apparent before。 It's critical that we regard the latent bugs， as being as much
    a part of the cause of the instant。 as the proximate changes which made them active。
    It's also important that we consider things that may not。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，很可能触发操作故障的任何变化，仅仅引发了一组先前存在的潜在错误，这些错误在之前并不明显。我们必须认真对待这些潜在错误，视其为瞬时原因的一部分，与使它们活跃的直接变化同等重要。我们还必须考虑那些可能并不明显的事情。
- en: be bugs， but which nevertheless are contributing factors， to our instant or
    its severity。 Now go forth and read the rest of this website。 Ideally after I'm
    done talking。 but it's pretty good stuff。 I'll be understanding。 So I've given
    an underlying philosophical rationale， for post-mortems。 I told you I have to
    have。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会有错误，但这些依然是我们事件或其严重性的影响因素。现在去阅读这个网站的其余部分。理想情况下，在我讲完之后，但这内容相当不错。我会理解的。所以我给出了事后分析的基本哲学理由。我告诉你，我必须有。
- en: You have to have one。 What the heck is a post-mortem？ A post-mortem is a process，
    usually。 in the form of a meeting in a written document， whose goal。 is to take
    our single specific operational failure， and turn it into learning。 Learning in
    the form of improvements to our code， improvements to our documentation。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须有一个。什么是事后分析？事后分析通常是以会议和书面文件的形式进行的，其目标是将我们的单一具体操作故障转化为学习。以对我们的代码进行改进、对我们的文档进行改进的形式进行学习。
- en: improvements to our processes， improvements， to the weird script on David and
    Sarah's laptops。 that accidentally became critical production infrastructure。
    Learning in the form of a document。 the people who joined the company in six months，
    can read to understand what happened。 And most importantly， learning in the form，
    of turning this specific instant into observations。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对我们流程的改进，对大卫和萨拉笔记本上的奇怪脚本的改进，它们意外地成为了关键的生产基础设施。以文档的形式进行学习。加入公司六个月的人可以阅读以了解发生了什么。最重要的是，通过将这一特定事件转化为观察来学习。
- en: about a more general pattern。 Post-mortems are put together by the team。 responsible
    for operations and for implementing the lessons， learned。 If you're assaging into
    servers to fix things， you're in the post-mortem process。 If you're going to be
    responsible for redoing the chef， cookbooks。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 关于更一般的模式。事后分析是由负责运营的团队汇总的，并实施所学的教训。如果你正在登录服务器修复问题，你就处于事后分析的过程中。如果你将负责重做厨师的食谱。
- en: you're in the post-mortem process。 If you write code for the application that。
    was part of what was affected， you're， in the post-mortem process。 Post-mortems
    aren't something somebody puts together， about someone else。 They're done by and
    for the people doing the work。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你在事后分析过程中。如果你为受影响的应用程序编写代码，你就处于事后分析的过程中。事后分析不是由某人为了别人整理的。它们是由正在进行工作的人员为自己完成的。
- en: The format I've seen work well is a few days after the incident。 Everyone involved
    meets together。 shares their notes， and produces the document together。 We've
    got our team in a room。 We're sitting down to write the post-mortem for an instant，
    that just happened。 What do we need to make sure is in this document？ I'm going
    to run through the elements of a post-mortem。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我看到的有效格式是在事件发生几天后。所有相关人员聚在一起，分享他们的笔记，并共同制作文档。我们把团队聚在一个房间里。我们坐下来为刚刚发生的事件撰写事后分析。我们需要确保这个文档中包含什么？我将逐一介绍事后分析的要素。
- en: with examples。 This isn't a hard and fast set of rules， but these are the elements
    I've seen。 as being necessary to get the important lessons in which， seem to match
    up with what friends。 at other companies use。 I personally find it helpful to
    create a template。 with each one of these fields。 And when I say a template， I
    mean a markdown file。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以及示例。这不是一套严格的规则，但这些是我看到的必要元素，似乎与其他公司朋友们使用的相符。我个人觉得创建一个包含每个字段的模板是有帮助的。当我说模板时，我指的是一个Markdown文件。
- en: with a few pre-filled in headers。 Nothing fancy。 It's useful for your post-mortems
    to all have the same format。 as each other。 This makes it easy to notice trends
    between them。 Oh。 I've seen that root cause three or four times， across multiple
    post-mortems。 That said。 practicality beats purity。 If one of your incidents is
    significantly different， from another。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 带有一些预填充的标题。没什么花哨的。这对于你的事后分析保持相同的格式是有用的。这样可以轻松发现它们之间的趋势。哦。我已经看到根本原因三到四次，跨越多个事后分析。也就是说，实用性胜过纯粹。如果你的某个事件与另一个事件有显著不同。
- en: don't shoehorn it into a template， that doesn't make sense。 A summary of what
    happened and user visible impact。 The website was down for 17 minutes。 and there
    were elevated exception rates for another 24 minutes。 Right from the top。 you
    want to have a crisp description， of what the failure was。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 不要强行将其塞入一个没有意义的模板。需要对发生的事情和用户可见的影响进行总结。网站宕机了17分钟，之后另有24分钟的异常率升高。从一开始，你就想要有一个简明的描述，说明故障是什么。
- en: What was the visible impact of everything that was going on？
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 所有发生的事情的可见影响是什么？
- en: What user visible impact mean varies by what your system is。 If you have a fancy
    microservices architecture， and your services consumers or people's ETL jobs。
    they are your users， and you care about downtime， or other impact as they perceive
    it。 Not necessarily how your end customers perceive it。 How was the incident resolved？
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可见影响的含义因你的系统而异。如果你有一个复杂的微服务架构，而你的服务消费者或人的ETL工作。他们就是你的用户，而你关心停机时间，或其他影响，因为他们的感知。不一定是你的最终客户的感知。事件是如何解决的？
- en: I added a timeout to the HTTP requests， our app makes to Facebook and redeploy
    the application。 You did something in the moment to make the bleeding stop。 What
    was it？
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我给我们应用程序向Facebook发出的HTTP请求添加了超时，并重新部署了应用程序。你在当下做了一些事情来止住伤口。那是什么？
- en: A complete timeline of what happened。 909， monitoring indicates the website
    is 503。 Alex Page， 912。 Alex acts the page， 914， Alex restarts Nginx， incident
    is not resolved。 921。 Julie comments on Slack that before the incident， started。
    the API endpoints which communicate with Facebook， were showing increased latency，
    et cetera。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 事件发生的完整时间线。909时，监控显示网站503。亚历克斯页面，912时。亚历克斯处理页面，914时，亚历克斯重启Nginx，事件未解决。921时，朱莉在Slack上评论，在事件开始之前，连接Facebook的API端点显示延迟增加，等等。
- en: et cetera。 This is one of the most important pieces。 Document everything that
    was going on。 and everything each person was doing。 This is essential for evaluating
    how well your instance。 response process worked， how well your monitoring worked。
    and for understanding deeply how the incident played out。 Write as much as you
    can。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 等等。这是最重要的部分之一。记录下所有发生的事情，以及每个人所做的每一件事。这对于评估你的实例响应过程的有效性，监控的有效性，以及深入理解事件的发生至关重要。尽可能多写些内容。
- en: There's no such thing as too much information。 At this point， we have the facts
    of the incident。 What happened， what everyone was doing， how it was ultimately
    resolved。 Thus far。 everything we've written down， is more or less objective information。
    about what was going on in the world。 Next， we have to focus on the analysis，
    which brings。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 没有过多的信息这种说法。在这一点上，我们已经掌握了事件的事实。发生了什么，每个人在做什么，以及最终是如何解决的。到目前为止，我们所记录的一切，或多或少都是客观信息，关于世界上发生的事情。接下来，我们需要专注于分析，这带来了。
- en: into subjective elements into this。 First， what were the causes of the incident？
    In this case。 Facebook started responding to requests slowly。 We had no timeouts
    on requests to Facebook。 and we make blocking requests to Facebook， during the
    HTTP request to our API。 Our process for request web server， made it easy for
    a small number of slow requests。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 将主观因素引入其中。首先，事件的原因是什么？在这个案例中，Facebook开始缓慢响应请求。我们对Facebook的请求没有超时设置，而且在向我们的API发出HTTP请求时，我们对Facebook发出了阻塞请求。我们的请求处理过程，使得少量的慢请求变得容易。
- en: to denial of service us。 One thing you might notice is， without any one of these，
    components。 this incident wouldn't have happened。 So each one of these is a potential
    contributing cause。 to our incident。 This is the section where we really analyze
    the causes。 This is where all the stuff I talked about at the top， about multiple
    causes， comes into play。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对我们进行拒绝服务。你可能会注意到，缺少任何一个组件，这个事件就不会发生。因此每一个都是我们事件的潜在成因。这一部分我们真正分析原因。这是我在开头提到的多个原因的地方。
- en: In this particular incident， the proximate cause， Facebook started responding
    to requests slowly。 was completely outside of our control。 But there's still a
    lot of work we can do on our side。 to make ourselves more resilient to when Facebook
    gets， slow next time。 Dig deep here。 List every possible cause。 You can decide
    it's not something。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个特定事件中，直接原因是Facebook开始缓慢响应请求，这完全超出了我们的控制范围。但我们仍然可以在我们这方面做很多工作，以提高在下次Facebook变慢时的韧性。在这里深入挖掘。列出所有可能的原因。你可以决定这不是问题。
- en: you're going to pursue fixing later on。 Take a lesson from my experience， though。
    If you dig all the way down to， computers were a mistake。 You may have gone too
    far。 What went well and what went poorly， during the handling of the incident
    itself？ Unfortunately。 our monitoring and graphing， didn't do a good job of highlighting。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你稍后将追求修复。尽管如此，从我的经验中吸取教训。如果你深入挖掘到，计算机是一种错误。你可能就走得太远了。在事件处理过程中，什么做得好，什么做得不好？不幸的是，我们的监控和图表，没有很好地突出显示。
- en: which API endpoints on our systems were slow。 We didn't have any direct monitoring。
    of the latency and error rates of our request to Facebook。 so we had to know that
    a particular URL on our site。 meeting being slow potentially implicated Facebook。
    On the good side， once we had a fix developed。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们系统上哪些API端点响应缓慢。我们没有直接监控请求到Facebook的延迟和错误率，所以我们必须知道我们网站上的特定URL，可能由于响应缓慢而牵连到Facebook。在好的一面，一旦我们开发出修复方案。
- en: we were able to deploy it to production very quickly， and the incident was resolved。
    Being good at responding to incidents， when they do occur is a critical element
    of resiliency。 So we need to review how things went， during the incident itself
    beyond just the causes that。 led to it。 In this case， there are opportunities，
    to make improvements to our monitoring tools。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能够非常迅速地将其部署到生产环境中，并解决了事件。善于应对事件是韧性的关键因素之一。因此，我们需要回顾事件发生时的情况，超出导致事件的原因。在这种情况下，有机会改善我们的监控工具。
- en: On the plus side of the deployment system， worked flawlessly during the middle
    of an incident。 which， is important。 If our deployment systems had gone sideways。
    while we were attempting to resolve an incident， that would exacerbate our problem
    far more seriously。 Finally， follow up actions。 Add metrics around all requests
    to Facebook。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 从部署系统的好处来看，在事件发生期间工作得毫无瑕疵，这是重要的。如果我们的部署系统在我们试图解决事件时出现问题，那将更加严重地加剧我们的困境。最后，后续行动。增加关于所有请求到Facebook的指标。
- en: Make the dashboards do a better job highlighting， what API endpoints are slow。
    Review other third-party API usage， for the same issues that affected us with
    Facebook。 How much third-party API usage can we， move out of request handling
    entirely and into salary tasks？
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 使仪表盘更好地突出显示，哪些API端点响应缓慢。回顾其他第三方API的使用，看看是否有同样的问题影响了我们与Facebook的交互。我们能把多少第三方API的使用，完全移出请求处理，转入薪资任务？
- en: We should investigate if auto-scaling on our web nodes， would have given us
    enough spare capacity。 to weather the timeouts。 This is where you synthesize the
    cause of the incidents。 and the factors from the handling that， exacerbated the
    severity into follow-up items。 Expect to file lots of tickets into your bug tracker。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该调查在我们的Web节点上，自动扩展是否能提供足够的剩余容量，以应对超时。这是你综合事件原因的地方，以及处理中的因素，这些因素加重了事件的严重性，并形成后续事项。预计需要在你的错误跟踪器中提交大量票据。
- en: Then you can use your normal prioritization process。 to make sure the most important
    ones get done quickly。 You should expect to include both short-term follow-up
    items， things that can be done immediately。 as well as longer-term follow-up items
    that might involve。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可以使用正常的优先级排序过程，以确保最重要的事项快速完成。你应该包括短期跟进事项，即可以立即处理的事情，以及可能涉及更长期跟进事项的内容。
- en: serious corrections to your code or much longer timescales， to implement。 In
    this case。 we generate action items， to improve our metrics， review our code。
    to see which other third-party integrations， have the possibility to denial of
    service us。 consider a longer-term improvement， to move some of these integrations
    into salary tasks。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 对你的代码进行严重修正或更长的实施时间。在这种情况下，我们生成行动事项，以改善我们的指标，审查我们的代码，看看还有哪些其他第三方集成，可能会导致拒绝服务。考虑长期改进，将一些集成转入薪资任务。
- en: so that they can affect web serving availability， and to investigate what would
    have happened。 if we'd had auto-scaling based on slow response time， auto-scaling
    based on slow request latency。 As you can see， each of these is inspired， by what
    we saw as one of the root causes of our incidents。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以便影响Web服务的可用性，并调查如果我们有基于响应时间缓慢的自动扩展，或者基于请求延迟缓慢的自动扩展，会发生什么。如你所见，这些都是受到我们认为是事件根本原因之一的启发。
- en: '![](img/2ec76999d2a8a028352490253a8363d0_9.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ec76999d2a8a028352490253a8363d0_9.png)'
- en: Now that we've walked through the elements of a post-mortem。 I'm going to give
    all of you some homework。 I'm going to describe an instant。 and see your thoughts
    with a few follow-up items I see。 I want everyone here to take this home。 and
    think about what else you saw in the situation I describe。 What other systemic
    opportunities。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经走过了事后分析的要素。我将给大家布置一些作业。我将描述一个事件，看看你们的想法，以及我看到的一些后续事项。我希望在座的每个人都能带着这些回家，思考我所描述的情况中你们看到的其他内容，还有其他系统性的机会。
- en: are there for us to improve？ Alex ran a script intended to increase the size。
    of the Kubernetes cluster by 20%。 Instead， he accidentally shrunk it down to 20
    nodes。 The cluster now had less capacity， than was needed to serve all incoming
    requests。 The auto-scaling group attempted to recover capacity， but so many servers
    spun up at the same time。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有哪些地方可以改进？亚历克斯运行了一个旨在将 Kubernetes 集群大小增加 20% 的脚本。结果，他意外地将其缩减到 20 个节点。现在集群的容量不足以处理所有传入请求。自动扩展组试图恢复容量，但同时启动的服务器太多。
- en: denial of service to Docker Registry。 Ultimately， auto-scaling was disabled。
    and new servers were manually brought off five at a time， until we were back to
    full capacity。 In total， things were almost totally unavailable， for just over
    an hour。 and fully resolving the instant from start to failure， took more than
    three hours。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 对 Docker Registry 的服务拒绝。最终，自动扩展功能被禁用，新的服务器被手动一次性带入五台，直到我们恢复到满负荷。总的来说，事情几乎完全不可用，持续了稍超过一个小时，完全解决从开始到失败，花费了超过三个小时。
- en: It'd be very easy for us to say， Alex not understanding how to use scale。sh，
    was the root cause。 Hopefully by now， I've convinced you that doing so。 would
    leave opportunities to make the whole system better on the table。 to say nothing
    of blaming one person for what was ultimately a team effort。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们很容易说，亚历克斯不理解如何使用 scale.sh 是根本原因。希望到现在为止，我已经说服你这样做会错失改善整个系统的机会，更不用说把责任归咎于一个人，而这最终是团队的努力。
- en: Some things that jump out to me。 There was clearly a user experience issue in
    scale。sh。 Both the fact that it's API that I used was confusing。 and led to misunderstanding
    what the arguments it took did。 and also the fact that it would happily delete
    almost all of the cluster。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 有些事情让我印象深刻。显然，在 scale.sh 中存在用户体验问题。无论是我使用的 API 令人困惑，导致误解了它所需的参数，还是它几乎可以删除整个集群。
- en: what taking us well below the capacity we needed without any confirmation。 Auto-scaling
    was supposed to make us more resilient， by increasing capacity when we needed
    it。 Instead， it made this incident worse by putting us into a situation。 where
    we had no spinning but unusable。 That deserves serious review。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们的能力远低于所需的水平，且没有任何确认。自动扩展本应使我们更具弹性，通过在需要时增加容量。然而，它让这个事件更糟，因为我们处于一种状态，虽然有服务器启动，但无法使用。这值得认真审查。
- en: What do you see in this incident？ What systemic improvements could we make to
    handle these six other ways。 this situation can manifest besides Alex ran the
    script wrong？
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个事件中你看到了什么？我们可以做出哪些系统性改进，以处理这六种其他方式，这种情况除了亚历克斯运行脚本错误之外还会以什么形式出现？
- en: Maybe Amazon would just delete some of our servers from time to time。 producing
    the exact same symptoms。 Do the conclusions we see about how to prevent this incident。
    also work for that situation？ If you were going to be handling this incident。
    what tools would you want to have？ Or what metrics would you want to have？
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 也许亚马逊只是偶尔删除我们的一些服务器，产生完全相同的症状。我们所看到的关于如何防止此事件的结论，是否也适用于这种情况？如果你要处理这个事件，你希望拥有什么工具？或者你希望掌握哪些指标？
- en: '![](img/2ec76999d2a8a028352490253a8363d0_11.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ec76999d2a8a028352490253a8363d0_11.png)'
- en: It's not you want to add post-mortem to your team's process。 Where do you start？
    Well。 you simply decide to。 However， until the next time things break for real。
    here are a few approaches you can use to get some practice。 First， is simulate
    an incident。 In security， we often call this a tabletop exercise。 Come up with
    an example scenario。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想将事后分析纳入团队流程，该从何开始？嗯，你只需决定去做。然而，直到下次事情真正出错之前，这里有几种你可以用来练习的方法。首先，模拟一个事件。在安全领域，我们通常称之为桌面演练。想出一个示例场景。
- en: sit around a table， and talk through how you'd handle it。 This is an excellent
    tool for improving your instance response capability。 But it's not quite as good
    as finding underlying bugs， although sometimes just thinking。 "How might this
    situation fail？" can trigger its own set of improvements。 The Twitter account。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 坐在桌子旁，讨论你会如何处理它。这是提高你实例响应能力的一个优秀工具。但这并不如寻找潜在错误来得好，尽管有时仅仅思考“这个情况可能如何失败？”也能引发一系列的改进。推特账户。
- en: '"Bad Things Daily，"， tweets practice examples of security incidents for you
    to use for one of these exercises。 At first， you might think some of these are
    awfully strange scenarios。 but pretty quickly you''ll realize， "Oh， if we get
    good at handling something that looks like this。 that will also make it us good
    at handling a wide variety of other scenarios。"， Choice number two。'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: “每日坏事”，推特上实践安全事件示例供你在这些练习中使用。起初，你可能会觉得这些场景非常奇怪，但很快你会意识到，“哦，如果我们能熟练处理类似的情况，那也会让我们在处理各种其他场景时表现出色。”选择二。
- en: cause an incident。 Netflix runs something called chaos monkey in their production
    environment。 Basically， from time to time， it randomly deletes an EC2 instance
    in production。 This ensures that their systems can handle a loss instance without
    problem， and if they can't。 it gives them a practice opportunity， to run through
    their instance response procedures。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 引发事件。Netflix在其生产环境中运行一种叫做混沌猴子的东西。基本上，它会随机删除生产中的一个EC2实例。这确保他们的系统可以在没有问题的情况下处理实例损失，如果不能，就提供了一个练习的机会，以运行他们的实例响应程序。
- en: live in production， although perhaps you could start in a development environment。
    If you killed one of your servers， would everything respond flawlessly？
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 生活在生产环境中，尽管你或许可以在开发环境中开始。如果你关闭了一个服务器，所有其他服务会完美响应吗？
- en: Have you ever tested that theory？ Finally， you can redefine what an incident
    is。 If you're already hitting your SLA of 99% of requests without an error， raise
    your SLA to 99。5% with a 500 millisecond 99th percentile response latency target。
    Run a postmortem about the slow request that made you miss the SLA。
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否测试过这个理论？最后，你可以重新定义什么是事件。如果你已经在99%的请求中没有错误地达到SLA，提升你的SLA到99.5%，并将99百分位响应延迟目标设定为500毫秒。对让你未能达到SLA的慢请求进行事后分析。
- en: even though the website was available the whole time。 I've talked about the
    application of postmortems to computer problems。 but software engineers didn't
    invent this idea。 Postmortems have a long history in other industries。 In the
    military， they call them hot washes or after action reviews。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管整个过程中网站一直可用。我谈到了对计算机问题的事后分析，但软件工程师并没有发明这个想法。事后分析在其他行业有着悠久的历史。在军方，他们称之为热洗或事后回顾。
- en: Doctors call them morbidity and mortality conferences。 and they're a core part
    of what the National Transportation Safety Board does。 The NTSB is an independent
    federal agency with a few hundred employees。 They're responsible for investigating
    transportation accidents， be they planes， trains。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 医生称之为发病率和死亡率会议，而这也是国家交通安全委员会核心工作的一部分。NTSB是一个独立的联邦机构，员工人数几百。他们负责调查交通事故，无论是飞机还是火车。
- en: or automobiles。 The mission of the NTSB is， quote。 "to determine the probable
    cause of transportation accidents。 and incidents and to formulate safety recommendations
    to improve transportation safety。"。 Tell me that doesn't sound familiar。 The NTSB
    performs investigations by what they call the party system。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 或汽车。NTSB的使命是，引用。 "确定交通事故和事件的可能原因，并制定安全建议以改善交通安全。" 告诉我这听起来不熟悉吗？NTSB通过他们称之为“党派系统”的方式进行调查。
- en: Basically， in addition to their own team members who work for the NTSB。 the
    party will also include people from industry， including people directly from the
    organizations involved in the accident。 If the accident was an engine malfunction
    as an airplane was on final descent。 they'll probably be somebody from the engine
    manufacturer， air traffic control。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，除了NTSB的团队成员外，党派还将包括来自行业的人，包括直接来自事故相关组织的人。如果事故是飞机最终降落时的发动机故障，可能会有来自发动机制造商、空中交通管制和航空公司的专家参与。
- en: and the airline who are a part of their party。 You cannot investigate the causes
    of an accident without having experts from all the perspectives in the room。 However，
    you are not allowed to be a member of an insurance company and be a member of
    the party。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你无法在没有各个角度的专家在场的情况下调查事故原因。然而，保险公司成员不得参与该党派。
- en: Insurance companies are all about allocating blame。 Probably the most important
    thing to know about the NTSB is that they are not a law enforcement agency。 They
    conduct accident investigations， not criminal investigations。 This extends beyond
    merely words in their mission。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 保险公司总是关注责任分配。关于NTSB，最重要的事情是，他们不是执法机构。他们进行事故调查，而不是刑事调查。这不仅仅是他们使命中的字眼。
- en: The result of an NTSB investigation and testimony they receive cannot be used
    as evidence in a court of law。 Their public safety mission requires this。 The
    NTSB will turn over the objective technical and scientific data they collect。
    and support law enforcement with analysis of that data。 But the reports on underlying
    causes are all privileged from use in court。
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: NTSB调查的结果及其收到的证词不能作为法庭上的证据。他们的公共安全任务要求这样做。NTSB会提供他们收集的客观技术和科学数据，并支持执法部门对这些数据的分析。但关于根本原因的报告都享有特权，不能在法庭上使用。
- en: This is an extraordinary status， sort of like attorney-client privilege or spousal
    privilege。 and I don't think there can be any more clear evidence that making
    safety recommendations。 is a different line of work from finding out who or what
    is to blame。 Before we wrap up。 there are a few more pieces of information I want
    everyone to have。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个特殊的状态，有点像律师-客户特权或配偶特权。我认为没有更明确的证据表明，提出安全建议与找出谁或什么是责任方是不同的工作。在结束之前，还有一些信息我希望大家了解。
- en: that didn't fit cleanly anywhere else in the slides。 First。 sometimes things
    break and we don't know why。 That does not mean we can't conduct a post-mortem。
    In fact， it makes the post-mortem all the more important。 At a previous job。 we
    once had an incident where the website was brought down。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这在幻灯片中没有适合的地方。首先，有时事情会崩溃而我们不知道原因。这并不意味着我们不能进行事后分析。事实上，这让事后分析显得更加重要。在之前的工作中，我们曾经历过一次网站崩溃的事件。
- en: because every single one of our mobile apps started phoning home at the exact
    same time。 We fixed bugs in the mobile apps exponential back off， we made the
    API endpoints。 the mobile phones used more efficient， we made the API handle too
    much load better。 We never once found out why all of the phones started making
    requests at the same time。
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们所有的移动应用程序在同一时间开始向后台发送请求。我们修复了移动应用中的指数退避问题，我们使API端点更加高效，手机在请求时能处理更多负载。我们从未弄清楚为什么所有手机在同一时间发起请求。
- en: but that didn't stop us from making improvements that would allow us to handle
    the situation better if it ever occurred。 If you ever hear someone say the root
    cause was human error， that should be a giant red flag。 I once saw an incident
    where a human copied a value incorrectly from a field in one system to another。
    and it was described as root cause human error。 No discussion of why the system
    didn't do any data validation。
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 但这并没有阻止我们进行改进，以便在再次发生时更好地处理情况。如果你听到有人说根本原因是人为错误，那应该是一个巨大的红旗。我曾见过一个事件，其中一个人错误地从一个系统的字段复制了一个值到另一个系统，并被描述为根本原因是人为错误。没有讨论为什么系统没有进行数据验证。
- en: No discussion of why humans were involved in manually copying things between
    two software systems。 Human error means you could not come up with a single underlying
    opportunity for a problem to fix。 And if you're making that claim， you better
    back it up。 I've never once seen a postmortem where that was true。
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 没有人讨论为什么人类要手动在两个软件系统之间复制内容。人为错误意味着你无法提出单一的根本问题来进行修复。如果你这样声称，那你最好有证据支持。我从未见过有这种情况的事后分析。
- en: I once saw a situation where fixing the underlying problems were believed to
    be too rare。 and too expensive to be cost effective， but that is a different claim
    and we damn sure knew what the causes were。 I've spent the last 20 minutes making
    a fairly intensive addition to your development process。 Why bother？ This is a
    lot of effort。 It's a lot of time to hold these meetings every time something
    goes wrong。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾见过一种情况，认为修复根本问题过于罕见，且成本高得不具成本效益，但这是另一种说法，我们当然知道原因是什么。我花了过去20分钟对你的开发过程进行了相当深入的补充。为什么要费心？这是一项巨大的努力。每当出现问题时召开这些会议需要花费大量时间。
- en: It's another set of skills to develop and software engineers already have many
    skills they need。 Why bother？ Is it worth it？ If you don't fix classes of bugs
    at the root。 you'll end up generating more classes of bugs faster than you can
    fix individual instances of them。 As time advances， your product will get less
    and less reliable as more systemic errors are added。
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一组需要发展的技能，而软件工程师已经拥有许多必要的技能。为什么要费心？值得吗？如果你不从根本上修复某类错误，你最终会以更快的速度产生更多类错误，超过你修复单个实例的能力。随着时间的推移，产品的可靠性将会降低，因为系统性错误越来越多。
- en: Software engineering is a discipline that requires practice to improve at like
    any other。 If you don't take the opportunity to learn from your mistakes。 you
    are missing out on an awful lot of learning opportunities。 Particularly。 once
    you learn to recognize certain classes of underlying errors。
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 软件工程是一门需要实践以提升的学科，就像其他任何学科一样。如果你不抓住机会从错误中学习，你将错失许多学习机会。特别是，一旦你学会识别某些潜在错误的类型。
- en: you can avoid making them right from the start on your next project。 There are
    an awful lot of types of bugs that are very cheap to avoid if you know about them
    at the start and very expensive to fix after the fact once your project is large。
    An ounce of prevention is worth a pound of cure。 Finally。 fixing bugs systemically
    is cheaper than fixing them one at a time in the long run。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在下一个项目一开始就避免犯这些错误。如果你在开始时知道很多类型的错误是很便宜的可以避免，而在项目变大后修复则非常昂贵。那么，预防胜于治疗。最后，从系统性修复错误在长远来看比逐个修复要便宜。
- en: Key takeaways I'd like folks to walk out of here with。 If even if you ignore
    all of the advice about how to run the meeting。 what elements need to be in your
    post mortems， I want you to walk away having learned these things。 Post mortems
    are for learning things， not blaming people。
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望大家能从这里带走的关键要点。如果你忽略了关于如何召开会议的所有建议，想知道你的事后分析中需要包含哪些元素，我希望你能记住这些事情。事后分析是为了学习，而不是为了指责他人。
- en: Blamelessness is about psychological safety， not about using the passive voice。
    When people see you using the passive voice， they assume it means I'd like to
    blame them if I just knew who they were。 Analyzing specific failures in your system
    is an opportunity to extract more general observations about how it responds to
    failure。 The trend over the course of many post mortems should be increasingly
    that your system was able to handle more situations without catastrophic failures。
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 无指责的文化是关于心理安全，而不是使用被动语态。当人们看到你使用被动语态时，他们会认为这意味着我想指责他们，只要我知道他们是谁。分析系统中的具体失败是提取更一般观察的机会，关于它如何应对失败。在许多事后分析的趋势中，应该越来越多地表明你的系统能够在没有灾难性故障的情况下处理更多情况。
- en: Both your system and the post mortem process will improve as you practice them。
    The operations of complex systems has many characteristics that defy our expectations
    and the how。complexsystems。fail website details many of them in a way that will
    hopefully be helpful to you in operating your systems。 The incident already happened。
    Don't waste the opportunity to learn something from it。
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你的系统和事后分析过程都会随着实践而改善。复杂系统的操作有许多特征超出我们的预期，如何处理复杂系统失败的网站详细列出了其中许多特征，希望能帮助你操作系统。事件已经发生，不要浪费从中学习的机会。
- en: Specific failures are almost always more educational than trying to think hard
    about what could have happened。 Finally， human error is not a root cause。
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 具体的失败几乎总是比努力思考可能发生的事情更具教育意义。最后，人为错误不是根本原因。
- en: '![](img/2ec76999d2a8a028352490253a8363d0_13.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ec76999d2a8a028352490253a8363d0_13.png)'
- en: Thank you very much for spending your Sunday afternoon with me。 That's my website
    and the URL the slides will be up on。 I believe we have about three minutes for
    questions now。 If anyone has anything they'd like to ask。 hopefully everybody
    knows this by now。 But a question is something you don't already know the answer
    to。
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 非常感谢你们在周日下午与我共度时光。这是我的网站，幻灯片的链接将在这里发布。我相信现在我们有大约三分钟的时间来提问。如果有人想要提问，希望大家现在都知道这一点。但问题是你不知道答案的事情。
- en: Mike's are there and maybe there。 [Applause]， \>\> Thank you so much for the
    lesson on post mortems。 I'm sure a lot of us have worked in different dev shops
    that are very blameful in post mortems。 Do you have any advice on how to help
    transition a culture from a blameful mindset to a blameless mindset？
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Mike在那边，或许在那边。[掌声]，谢谢你教我关于事后分析的课程。我相信我们中的许多人在不同的开发团队中工作过，事后分析中存在很多指责。你有什么建议能帮助文化从指责转变为无指责的心态吗？
- en: \>\> Yeah。 It's definitely hard。 Once people learn the lesson that if I say
    I did something wrong。 I'll get blamed for it。 It takes an awful lot of work to
    undo that lesson。 I think it's very difficult to undo that lesson without having
    your team leads or management involved in sort of leading by example。 Being willing
    to say I did this and it led to this situation。
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '>> 是的，这确实很难。一旦人们学到这样一个教训：如果我说我做错了，我就会受到指责。要撤销这个教训需要付出大量的努力。我认为没有你的团队负责人或管理层以身作则，很难撤销这个教训。愿意说“我做了这个，导致了这个情况”。'
- en: And here's how we're going to focus on the systemic improvement。 I believe that's
    one of those things that really has to start with leadership。 demonstrating it
    for everyone。 \>\> You may have mentioned this earlier in your presentation。 but
    do you have recommendations from your experience on whether or not it's helpful
    to you？
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们将如何专注于系统性的改进。我相信这真的是必须从领导层开始，为大家展示。>> 你可能在演讲中提到过这个，但根据你的经验，你是否有建议认为这对你是否有帮助？
- en: It's helpful or not helpful to have executive representation in a post mortem
    or explicitly keep it to people who were involved in an incident。 \>\> I think
    it can be helpful to have executives in the room。 but it's critical that you have
    the team members who are on the sharp end in the room。 Generally。 you want executives
    to see the value of putting the effort into these and to understand why you're
    asking for resources to prioritize these fixes。
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在事后分析中，有执行人员参与是有帮助的，还是明确限制在参与事件的人员之中，这点很重要。>> 我认为让高管在场是有帮助的，但关键是要有在一线的团队成员在场。通常，你希望高管看到投入这些努力的价值，并理解为什么你要求资源来优先处理这些修复。
- en: So if having them in the room helps them understand why you want to put time
    into these remedial efforts。 that definitely is valuable。 Cool。 Thank you all
    very much。 I hope you all have an excellent pike on。
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果让他们在场有助于他们理解你为何要投入时间进行这些补救工作，那绝对是有价值的。很好。非常感谢大家。我希望你们都有一个出色的会议。
- en: '![](img/2ec76999d2a8a028352490253a8363d0_15.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ec76999d2a8a028352490253a8363d0_15.png)'
- en: '[APPLAUSE]。'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '[掌声]。'
