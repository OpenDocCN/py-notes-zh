- en: P13：vigneshwer dhinakaran - Pumping up Python modules using Rust - PyCon 2018
    - 哒哒哒儿尔 - BV1Ms411H7Hn
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P13：Vigneshwar Dhinakaran - 使用Rust提升Python模块 - PyCon 2018 - 哒哒哒儿尔 - BV1Ms411H7Hn
- en: \>\> Hey， folks。 Let's have another round of applause for our next speaker。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: \>\> 嘿，朋友们。让我们为下一位演讲者再来一轮掌声。
- en: '![](img/2c020a0457087f9701147634d5d18300_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_1.png)'
- en: '![](img/2c020a0457087f9701147634d5d18300_2.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_2.png)'
- en: \>\> Okay。 So hello and thank you all for coming today。 It's a pleasure to be
    here and I'm super。 thrilled to have this opportunity to speak to you all today
    about two of my most favorite。 programming languages， Python and trust。 Both of
    them really make me feel like a complete。 developer。 I'm here to share those experiences
    with you。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: \>\> 嗨，大家好，感谢大家今天的到来。很高兴能在这里，与大家分享我最喜欢的两种编程语言，Python和Rust。这两者让我感觉自己是一个完整的开发者。我在这里与大家分享我的这些经验。
- en: So today I'm going to talk about how we as Python developers can maybe write
    a small Python。 extension or take some part of our workload and connect it to
    a statically typed language。 in order to get that performance。 So my talk is mostly
    going to be around that。 So if you。 were like me and we're adding all the kind
    of performance data talk here in PyCon， you。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 今天我将谈谈作为Python开发者，我们如何可能编写一个小的Python扩展，或者将我们的某些工作负载与静态类型语言连接起来，以获得性能。所以我的演讲主要围绕这个展开。如果你和我一样，听着PyCon里的各种性能数据演讲，你。
- en: probably must have noted down these golden rules。 So the first one is like，
    look for， like。 use some tools like a line profiler and look at which part of
    a program is actually， slow。 And then the second thing would be to go ahead Google
    and see how people solve。 this problem in the Python community。 Because Python
    community is amazing。 There's someone。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经记下了这些黄金法则。第一个是寻找一些工具，比如行分析器，查看程序的哪一部分实际上是慢的。第二件事是去谷歌，看看Python社区的人们是如何解决这个问题的。因为Python社区真的很棒。总有人。
- en: who has definitely solved that problem。 Maybe use that library that they have
    built or use。 the techniques that they have used to think about solving this problem
    that you are also， facing。 The third thing is don't use Python。 Like use something
    else that has worked before。 So I thought like， let's start from the third point。
    Just start from something that is not， Python。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 谁已经成功解决了这个问题。也许使用他们构建的库，或者使用他们用来思考解决这个问题的技术。第三点是不要使用Python。使用一些以前有效的其他东西。所以我想，从第三点开始。先从一些不是Python的东西开始。
- en: So I'm really happy that my talk is scheduled at this point of time because
    after。 hearing all the performance data talks， we're going to focus more on the
    third point of using。 something that's not Python。 But in order to use some languages
    like Rust， which is the。 system programming language to basically improve your
    Python modules。 So we'll talk a。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我很高兴我的演讲安排在这个时间点，因为在听完所有的性能数据演讲后，我们将更多地关注使用一些不是Python的内容。但为了使用像Rust这样的语言，作为系统编程语言，基本上可以提升你的Python模块。所以我们将讨论一下。
- en: lot about Rust in this talk and see how we can leverage its features in Python。
    So before。 getting started， let me just quickly introduce myself。 My name is Wigneshwar。
    I'm here today。 representing Mozilla as a tech speaker。 A lot of people looking
    at my badge asked what's。 at Mozilla tech speaker。 So I think I should talk a
    little about that。 It's an amazing program。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这次演讲中谈论很多关于Rust的内容，看看我们如何在Python中利用它的特性。因此在开始之前，让我快速自我介绍一下。我叫Vigneshwar。今天我在这里，代表Mozilla作为技术演讲者。很多人看到我的证件问Mozilla技术演讲者是什么。所以我想我应该多谈谈这个。这是一个了不起的项目。
- en: '![](img/2c020a0457087f9701147634d5d18300_4.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_4.png)'
- en: run by the developer outreach team of Mozilla where they take enthusiastic volunteers
    and。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由Mozilla的开发者外联团队主办，他们招募热情的志愿者。
- en: '![](img/2c020a0457087f9701147634d5d18300_6.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_6.png)'
- en: train them to be like developer advocates to go out and develop a case in conferences。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 培养他们成为开发者倡导者，走出去并在会议上开发案例。
- en: '![](img/2c020a0457087f9701147634d5d18300_8.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_8.png)'
- en: like these。 To talk about Mozilla and web in general， I'm sorry， sorry about
    this。 Okay。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 像这样。谈论Mozilla和网络的一般情况，我很抱歉，抱歉这个。好的。
- en: '![](img/2c020a0457087f9701147634d5d18300_10.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_10.png)'
- en: I'm just going to keep moving my mouse to make sure that things are up。 Apart
    from that， I'm。 a data scientist by the day。 I work， I build a lot of state of
    our mission learning algorithms。 I enjoy doing that。 That's where I use Python
    a lot。 Python is best for data science。 And。 apart from that， I've written a book
    in Rust。 So it really helps people to get started with。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我会继续移动我的鼠标以确保一切正常。除此之外，我是一名数据科学家。我工作，构建许多最先进的机器学习算法。我喜欢这样做。这就是我大量使用 Python 的地方。Python
    是数据科学的最佳选择。除此之外，我还写了一本关于 Rust 的书。因此，它确实帮助人们入门。
- en: Rust programming。 It's called the Rust book。 That's pretty much about myself。
    So let's get， started。 So why do we need a native extension？ That's the first
    question that comes to mind。 So it's basically because you have some really good
    library that is statically typed。 And。 then you want to bring that to Python。
    Compute revisions。 A lot of you see a lot of image。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Rust 编程。称之为 Rust 书。这基本上是关于我自己的。所以让我们开始吧。那么，为什么我们需要本地扩展呢？这是首先想到的问题。这基本上是因为你有一些非常好的静态类型库。然后你想把它带到
    Python 中。计算修订版。你们中很多人看到许多图像。
- en: processing libraries that we use。 NumPy， for example。 And things of that sort。
    So we want。 to use that great engineering work in our Python model。 You don't
    want to rewrite the， entire thing。 So that's where we start thinking about native
    extensions。 The second thing。 is when we need a little more freedom in memory
    management。 That's something that we don't。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的处理库，比如 NumPy，还有类似的东西。因此我们希望在我们的 Python 模型中利用这些优秀的工程成果。你不想重写整个东西。这就是我们开始考虑本地扩展的地方。第二个方面是当我们在内存管理上需要更多的自由时。这是我们在
    Python 中无法获得的。
- en: get access to in Python。 And the third one is maybe thinking around with the
    hardware。 and things of that sort。 So the point is that performance control has
    always been this key。 For building applications right now， which is just for demanding。
    You need to have all。 these amazing features。 You need to be competent。 And that's
    what will get you that edge in。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个方面可能是与硬件打交道等等。因此，性能控制一直是关键。在构建现在要求很高的应用程序时，你需要拥有所有这些惊人的功能。你需要具备能力。这就是能让你在竞争中获得优势的所在。
- en: your particular business or in your particular domain。 So products these day
    are very demanding。 So with Python， I think， with just Python， it's going to be
    a little bit tricky。 So we need。 to start looking for some alternatives。 So that's
    one big motivation behind this talk。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的产品要求很高。因此，单靠 Python 我认为会有点棘手。所以我们需要开始寻找一些替代方案。这也是这次演讲背后的一个重要动机。
- en: '![](img/2c020a0457087f9701147634d5d18300_12.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_12.png)'
- en: So what has been the solution still now？ Python community。 They have probably
    solved this。 problem for you。 Just go out and look out for what they have done。
    When it's the last。 time that you probably have faced a problem and then the Python
    community was not that。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 那么到现在为止的解决方案是什么呢？Python 社区可能为你解决了这个问题。只需出去看看他们做了什么。你上次遇到问题是什么时候，Python 社区没有提供帮助的？
- en: '![](img/2c020a0457087f9701147634d5d18300_14.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_14.png)'
- en: to help you。 Most of the time it really works。 So this is not new to us。 Like，
    you know， as。 being a Python developer， you have somewhere used these kind of
    libraries。 So now， for example。 a 53% of C code。 That's what makes it magical。
    It makes it work so good。 TensorFlow， for example。 that's something I use on a
    daily basis。 It's 48% of C++ code。 C Python， the one that runs。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，这确实有效。所以这对我们来说并不新鲜。作为 Python 开发者，你或多或少都使用过这些库。例如，53% 的 C 代码使得它变得神奇。它让它运行得如此顺畅。比如
    TensorFlow，这是我每天使用的。它包含 48% 的 C++ 代码。C Python，就是那个运行你特定业务或领域的版本。
- en: your Python code。 That has a lot of system programming code in it。 Pillow is
    an image processing。 library that is heavily used across various domains。 That
    has a lot of C code in it。 So。 what's the problem like？ C++ developers are like
    superman。 They're really difficult to， find。 They're very strong， like superman。
    But the reality is， it's very difficult to write。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 Python 代码中包含了大量的系统编程代码。Pillow 是一个在各个领域广泛使用的图像处理库。它包含了大量的 C 代码。那么问题是什么呢？C++
    开发者就像超人一样。很难找到，他们非常强大，就像超人。但现实是，编写代码非常困难。
- en: C++ extensions。 You need to have that kind of expertise。 Given the kind of timelines
    where。 you know， especially I can talk for myself， I come from a service industry
    and， you know。 timelines are a big problem for me。 I can't even think about static
    code。 The reason why。 I use Python is to make sure that my code runs without any
    bug。 You know？ So that's where I see。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: C++扩展。你需要具备那种专业知识。考虑到时间线，你知道的，尤其是我可以为自己发言，我来自服务行业，你知道。时间线对我来说是个大问题。我甚至无法考虑静态代码。我使用Python的原因是为了确保我的代码没有任何错误。你知道吗？所以这就是我看到的。
- en: you know， Python being really useful。 That's what makes Python really good。
    It's readable。 It's super easy。 And it works just fine。 But the problem is， there
    are people like Lex Luthor。 who would be some kind of hacker， who would go down，
    look at your system code， and try to， you know。 exploit it。 For example， kryptonite
    is a big problem for Superman， right？ So， historically。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道，Python真的很有用。这正是Python优秀的地方。它可读性强，非常简单，而且运行得很好。但问题是，有些人像**莱克斯·卢瑟**，会成为某种黑客，去查看你的系统代码，试图利用它。例如，氪石对**超人**是个大问题，对吧？所以，从历史上看。
- en: we have seen so many bugs that have， you know， causes a lot of problems。 Data，
    research， like。 for sure。 This is something that you need to manually handle。
    Python just takes。 care of all that for us。 Like， you have a garbage character。
    I'll short it a lot more about that。 But the point is， if you're writing C++ extension，
    you need to handle these things。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们见过如此多的错误，造成了很多问题。数据，研究，像。肯定。这是需要手动处理的事情。Python只是为我们处理了所有这些。就像，你有一个垃圾字符。我会更多地缩短这一点。但重点是，如果你在写C++扩展，你需要处理这些事情。
- en: which are a bit difficult。 That's the reason why I've stated that， you know，
    writing C++。 extension is scary and painful。 So， what are the other options that
    we have？ A site。 So。 it's a superset of Python， you know， easy way of calling
    C functions and the data types， over there。 Works pretty good。 A number is another
    very good option available out there， which uses。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是有点困难的。这就是我说的，写C++扩展是可怕和痛苦的原因。那么，我们还有什么其他选择呢？一个网站。所以，它是Python的超集，知道吗，调用C函数和数据类型的简单方法。效果不错。`A
    number`是另一个非常好的选择，它使用。
- en: the JIT compiler。 It's basically optimized machine code， which works on the
    LLVM compiler。 Works pretty good。 The last one is PyPys。 It's something that's
    not even Python。 You know， Python。 but yeah， it's a debatable topic again。 Yeah，
    again， use a suggestion in compiler。 Works pretty fine。 But the problem is， like，
    for people like me， I can't talk for all。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: JIT编译器。它基本上是优化后的机器代码，工作在LLVM编译器上。效果很好。最后一个是`PyPy`。它甚至不是Python。你知道，Python。但这又是一个有争议的话题。是的，再次使用编译器中的建议。效果很好。但问题是，对于像我这样的人，我不能代表所有人。
- en: I kind of feel that I've lost my control。 Like， I use all these tools and it
    works fine for me。 Like， but I'm not sure what's exactly happening。 It kind of
    makes me feel sad。 That's when I started looking for alternatives。 And what does
    the main ask？ The main ask is that。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我有点觉得自己失去了控制。就像，我使用这些工具，它对我来说运行良好。但我不确定到底发生了什么。这让我有点伤心。这时我开始寻找替代方案。主要的需求是什么？主要的需求是。
- en: '![](img/2c020a0457087f9701147634d5d18300_16.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_16.png)'
- en: you know， you want C++ kind of performance， portability and embeddability without，
    you know。 guaranteed safety。 What I mean by safety is that the one that Python，
    you know， kind of gives to us。 We don't have to worry a lot about this memory
    and things of that sort。 I just want to focus on。 my application and again have
    these kind of performance boost。 Sorry。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道，你想要C++那种性能、可移植性和嵌入性，而没有，知道吗。保障安全。我的意思是，Python，知道的，它给我们提供的安全。我们不需要太担心内存和这些东西。我只想专注于我的应用程序，再次获得这种性能提升。抱歉。
- en: So let me introduce you to an amazing。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我向你介绍一个惊人的。
- en: '![](img/2c020a0457087f9701147634d5d18300_18.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_18.png)'
- en: state of our programming language。 It's called Rust。 It's a system programming
    language which I。 like to define has great control like C++ and delivers productivity
    like in Python and it's super。 safe。 So there are three things that， you know，
    there are language， you know， really， really。 does really well。 So that's number
    one。 It's hack without fear。 So again， there's obstruction。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编程语言的现状。它叫做Rust。这是一种系统编程语言，我喜欢定义为像C++一样具有很好的控制性，像Python一样提供生产力，并且非常安全。因此，有三件事，知道吗，这种语言真的做得很好。这是第一。无惧黑客。因此，再次，有阻碍。
- en: without overhead and stability without stagnation。 So hack without fear is this
    concept of。 you know， going to the production without having these kind of bugs。
    Abstraction without overhead is， the zero cost obstruction which the community
    is really proud about。 I'll talk a lot more about， that when I come to trades。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 没有额外开销和稳定性，没有停滞。所以无畏黑客的概念就是，去生产环境而没有这些类型的错误。没有额外开销的抽象，就是社区非常自豪的零成本抽象。关于这一点，我会在讨论交易时深入探讨更多内容。
- en: And stability without stagnation is whenever a new version of Rust comes， in，
    it's not， you know。 go back and， uh， uh， cause any kind of problems with your
    current extension。 So every version really should be flawless， you know。 that's
    something that every software developer， wants。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 稳定性而不停滞意味着每当新版本的Rust发布时，它不会，呃，导致你当前扩展的任何问题。因此，每个版本都应该是完美的，你知道的。这是每个软件开发者所希望的。
- en: And I truly believe that Rust is trading a new generation of system programmers。
    Uh。 you have never done system programming before， but I'm really confident with
    all those terminologies。 and I just go around， you know， uh， posting about myself
    to be a system programmer。 But yeah。 the goal is that， you know， you need to create
    a really stable。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我坚信Rust正在培养新一代的系统程序员。呃。你可能从未做过系统编程，但我对所有这些术语非常自信。我到处发表自己是系统程序员的帖子。但目标是，你需要创建一个非常稳定的。
- en: confident and safe system programming， language。 So the zone of Rust is you
    have a memory safety without garbage collection。 Again， I'll， uh， when I come
    to ownership and boring， which is the core concept behind the。 Rust language，
    this type system， uh， which allows you to， you know， have a lot of good things
    like。 you can read the code really well。 It's easy to understand。 You write， you
    know， we exactly。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 自信且安全的系统编程语言。所以Rust的特点是你拥有内存安全，而没有垃圾回收。再说一遍，嗯，当我谈到所有权和无聊时，这是Rust语言背后的核心概念，这种类型系统，让你能够很好地阅读代码。很容易理解。你写得非常准确。
- en: know what's happening under the hood。 High level iterators。 That's something
    we all love as Python。 developers。 We are spoiled by it。 That's another topic
    altogether。 But yeah， that rushed us a lot。 a lot of offerings over that。 Freedom
    and data races and a welcoming community。 This is something。 that you would really
    appreciate coming from a Python background。 Like we need a really strong。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 知道底层发生了什么。高层迭代器。这是我们作为Python开发者都喜欢的。我们被它宠坏了。这是另一个话题。但这确实给我们带来了很多选择。自由、数据竞争和一个热情的社区。这是你从Python背景中会非常欣赏的东西。我们需要一个非常强大的。
- en: ecosystem， a strong library ecosystem。 That's something Rust is really focused
    on。 Let's look。 at some facts and figures。 So this is， this is an app called Wires。
    So it's basically an application， that does business chats and WebRTC conference
    calls and things of that sort。 So what they basically， did was they moved their
    entire cryptocurrency part to Rust and saw like a good performance。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 生态系统，一个强大的库生态系统。这是Rust非常关注的内容。让我们看看一些事实和数据。这是一个名为Wires的应用。基本上是一个进行商务聊天和WebRTC会议通话的应用。所以他们基本上做的是将整个加密货币部分迁移到Rust，并且获得了良好的性能。
- en: '![](img/2c020a0457087f9701147634d5d18300_20.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_20.png)'
- en: That's pretty cool。 This is another company called Sentry， which I think I saw
    them here。 So they have done a pretty good job in， you know， writing their， a
    pass， a pass of which， you know。 does passing off their source maps and Rust and
    have significantly reduced their processing time。 So I think Armin is this person
    who has written this and he also happens to be the。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这真的很酷。这是另一家公司叫做Sentry，我想我在这里看到过他们。所以他们在编写他们的代码方面做得很好，能很好地传递他们的源映射和Rust，并显著减少了处理时间。我认为Armin就是写这个的人，他恰好是。
- en: guy who developed the flashcap。 He's given a lot of cool talks before this，
    so I really recommend。 to go check that out and they have done like significant
    work here。 So another company called。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 开发了Flashcap的那位家伙。他之前做过很多很酷的演讲，所以我真的推荐你去看看，他们在这里做了重要的工作。还有另一家公司叫做。
- en: '![](img/2c020a0457087f9701147634d5d18300_22.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_22.png)'
- en: Snips。 They are like， Wires is 10 companies。 They are using Rust heavily to
    ship their products。 ship their AI models across different hardware。 Works really
    well for them。 That is another。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Snips。他们就像Wires一样，有10家公司。他们重度使用Rust来发布他们的产品，并在不同硬件上发布他们的AI模型。对他们来说效果很好。这是另一个。
- en: '![](img/2c020a0457087f9701147634d5d18300_24.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_24.png)'
- en: proof of concept library that is written over atokir， which is a very fast and
    reliable way of。 writing handling asynchronous requests。 And if you can see these
    graphs， the kind of request。 that you can handle asynchronous is very high。 And
    it would basically help you save a lot of money。 in a production environment。
    Again， this is a proof of concept， but it will be really good if this。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个概念验证库，基于 atokir 编写，它是一种非常快速和可靠的处理异步请求的方式。如果你能看到这些图表，异步请求的处理能力是非常高的。这基本上会帮助你在生产环境中节省很多钱。再次强调，这只是一个概念验证，但如果这个项目能够实现，那将会非常好。
- en: comes out to be， comes out in a stable version。 So this is another thing that
    the Rust committee。 is really proud about。 You know， for a third time in the row，
    they have been voted the most。 loud language。 This is something really cool for
    a language。 It just got released in 2015， right？
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 它最终会稳定版本发布。这是 Rust 委员会非常自豪的另一件事。你知道，他们连续第三次被评为最。响亮的语言。这对一个语言来说真是非常酷。它在 2015
    年发布，对吧？
- en: So a lot of companies are using them。 They have really， really good use cases。
    I don't have time。 to talk about them， but I really recommend you guys to go check
    out the Friends of Rust website。 Like， again， there's a lot of inspiration that
    you could take from there and kind of try to。 apply in your workplace。 So how
    did it all begin？ So Mozilla is the company that sponsors this project。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 所以很多公司正在使用它们。他们有非常、非常好的用例。我没有时间谈论它们，但我真的推荐你们去看看 Rust 朋友网站。再说一遍，你可以从那里获取很多灵感，并试着在你的工作场所应用。那么这一切是如何开始的？Mozilla
    是赞助这个项目的公司。
- en: '![](img/2c020a0457087f9701147634d5d18300_26.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_26.png)'
- en: but it's a community-driven initiative altogether。 So browsers just compete
    for performance。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 但这完全是一个社区驱动的倡议。所以浏览器只是在性能上竞争。
- en: '![](img/2c020a0457087f9701147634d5d18300_28.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_28.png)'
- en: and they need safety as well。 So it was really important for Mozilla to invest
    in this。 So that's the Rust project for you， which I think started around 2006，
    maybe it was more like。 Mozilla employee was working on this， and then something
    similar。 They had a lot of functional。 programming influence in it， and it was
    very similar to C++。 And then at one point in time。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 而且他们也需要安全性。因此，Mozilla 投资于此是非常重要的。所以这就是 Rust 项目，我认为大约在 2006 年开始，也许更像是。Mozilla
    的一名员工在做这个，然后有类似的东西。他们受到了很多函数式编程的影响，而且它与 C++ 非常相似。在某个时刻。
- en: Rust had garbage collectors。 So the languages evolved over time， and it's such
    a nice experience。 to read about what has been happening in the community。 And
    the server project is a way of。 creating high-performance browser engine， which，
    you know， the whole of Rust language is influenced。 by that。 In Firefox 48， Rust
    was introduced。 It was the first time that， you know。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Rust 有垃圾收集器。因此，语言随着时间的推移而演变，这让阅读社区发生的事情变得非常愉快。而服务器项目是一种创建高性能浏览器引擎的方式，你知道，整个
    Rust 语言受此影响。在 Firefox 48 中引入了 Rust。这是第一次，你知道的。
- en: such product of this scale， Rust had come in。 It was a URL parser。 Then 557，
    great success story。 here。 They rewrote a lot of their parts in Rust。 The Stylo
    was one among them。 which gave them a lot， of performance at runtime。 Highly recommend
    to go out and check that out。 So let me just， you know。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这样规模的产品，Rust 曾经参与过。它是一个 URL 解析器。然后 557，是一个很成功的故事。他们在 Rust 中重写了很多部分。Stylo 是其中之一，为他们提供了很大的运行时性能。强烈推荐你去看看。所以让我再说一下，你知道的。
- en: '![](img/2c020a0457087f9701147634d5d18300_30.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_30.png)'
- en: introduce you to the Rust syntaxes， because the latest part of the slides have
    a lot of。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 介绍给你 Rust 语法，因为幻灯片的最新部分有很多内容。
- en: '![](img/2c020a0457087f9701147634d5d18300_32.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_32.png)'
- en: Rust syntax that you need to understand。 Rust is really， really easy to learn。
    So you use the。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要了解的 Rust 语法。 Rust 确实非常、非常容易学习。所以你可以使用这个。
- en: '![](img/2c020a0457087f9701147634d5d18300_34.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_34.png)'
- en: let variables to， you know， create a variable binding。 You don't have to explicitly
    mention what。 type it is compiled as smart enough to understand that all variables
    by default are immutable。 and then you have to explicitly mention mutable type
    as mute in order to make a variable binding。 as mutable。 So in， in， in， in， at
    runtime， you can change the value when you have。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让变量来创建变量绑定。你不必明确提及类型，编译器足够聪明，会默认认为所有变量都是不可变的。然后你必须明确提到可变类型作为可变，以便创建可变的变量绑定。因此，在运行时，当你有时，可以改变值。
- en: mention it as mute。 Otherwise， it's not possible。 Unlike in， uh， let variable，
    you， if you want to。 declare a constant or to explicitly mention the type， and
    this particular variable will be same。 throughout the scope of the program。 So
    functions are pretty similar。 So the only one thing that I。 would， you know， recommend
    to focus on is everything is explicitly mentioned。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 把它标记为可变。否则，这是不可能的。与let变量不同，如果你想声明一个常量或明确提到类型，这个特定变量在程序的整个范围内都是相同的。因此，函数是相似的。唯一一件我建议专注的事情是，所有内容都要明确提到。
- en: the type that goes into， a particular function。 This basically helps in reading
    your functions really well。 And then you， don't have to explicitly mention written
    types。 It's the。 the last statement is usually referenced as， the thing that you're
    trying to return。 Uh。 flow control pretty straightforward。 Nothing fancy here。
    It's just if condition passes it， you know。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 进入特定函数的类型。这基本上有助于你很好地阅读函数。然后你不必明确提到返回类型。最后的语句通常被引用为你试图返回的内容。流控制非常简单。这里没有花哨的东西。只要条件通过，你就知道了。
- en: processes some code， else not。 Uh， so， uh， patent mapping or switch in general
    is done， uh。 through the keyword match。 So you have， match a variable and then
    you have a lot of conditions around it。 If you have a single value， a group， of
    values， a range of values。 and the underscore is basically default。 Uh， this is
    an infinite loop。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 处理一些代码，其他的不处理。因此，专利映射或开关通常是通过关键字match来完成的。所以你有，匹配一个变量，然后你会有很多条件。如果你有一个单一的值，一组值，或一个范围的值，底线基本上是默认的。这是一个无限循环。
- en: '![](img/2c020a0457087f9701147634d5d18300_36.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_36.png)'
- en: a while loop with the condition。 So in， in， uh， in Rust， you all have iterated
    types。 So you， uh。 type need to be， uh， type needs to be like iteratable in order
    to run for loops。 Uh。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 具有条件的循环。因此，在Rust中，你都有可迭代类型。所以，你的类型需要是可迭代的，才能运行for循环。
- en: '![](img/2c020a0457087f9701147634d5d18300_38.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_38.png)'
- en: so here you basically have a range and， uh， in an expression is， should be an
    interval type for。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这里基本上有一个范围，表达式应该是一个区间类型。
- en: '![](img/2c020a0457087f9701147634d5d18300_40.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_40.png)'
- en: it to run in for types。 So Rust gives you all the kind of， uh， types that you
    usually find in an。 system programming language。 Uh， nothing， uh， different。 So
    you have something called cargo。 which is really， really cool。 It's very similar
    to pip。 Uh， but does things more， I believe， like。 there are little more functionalities
    that， uh， you know， cargo really does well。 Uh， but there are。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 以便在for类型中运行。因此，Rust给你提供了系统编程语言中通常会找到的所有类型。没有不同的。因此，你会看到一个叫cargo的东西，真的非常酷。它和pip非常相似，但做得更多，我相信有一些cargo做得很好的额外功能。
- en: a lot of similarities over there。 So coming back from， coming from a Python
    community。 cargo will be， something that you really， really enjoy because I definitely
    did。 Uh。 so coming to the core concept。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 那里有很多相似之处。因此，从Python社区回来，cargo将是你非常享受的东西，因为我确实很喜欢。所以回到核心概念。
- en: '![](img/2c020a0457087f9701147634d5d18300_42.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_42.png)'
- en: this is something that you really need to understand。 If you are able to understand
    this。 you're probably master trust。 So ownership， that's some， some， it's more
    like a writer processing。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一件你需要真正理解的事情。如果你能够理解这一点，你可能已经掌握了信任。因此，所有权，这更像是一个作家处理的过程。
- en: '![](img/2c020a0457087f9701147634d5d18300_44.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_44.png)'
- en: something。 So let's look at this Python example。 So you have a class， it calculates
    the area。 and then you're creating three such objects， uh， and， you know， calculating
    the area， and you're。 uh， you know， having an operator that， uh， adds up the area
    over there。 So basically in the heap。 memory， you would probably have， uh， three
    circles。 And what basically happens over time is。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 有些东西。所以让我们看看这个Python示例。所以你有一个类，它计算面积。然后你创建三个这样的对象，呃，并且你知道，计算面积，而你在。呃，你知道，有一个运算符，呃，来将面积相加。因此，基本上在堆内存中，你可能会有，呃，三个圆。随着时间的推移，基本上会发生这样的事情。
- en: there'll be a garbage collector software which runs behind， uh， under the hood
    that would go and。 clear up this。 So it uses reference counting and things of
    that sort in Python。 So we as。 Python developers don't really， you know， care
    about it because this is something that is taken。 care by the Python interpreter。
    Uh， pretty cool。 So in， uh， similar to referencing， you。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 将会有一个后台运行的垃圾回收器软件，呃，在幕后清理这个。因此，它使用引用计数和类似的东西在Python中。所以我们作为Python开发者并不真的，呃，关心这个，因为这是由Python解释器处理的。呃，非常酷。因此在，呃，类似于引用的情况下，你。
- en: you can just。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以只。
- en: '![](img/2c020a0457087f9701147634d5d18300_46.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_46.png)'
- en: you know， get， get some values out and pass it to different classes， like considering
    a booking。 service。 Uh， sorry， there's a small typo over there。 Booking service
    and repair service are holding。 a reference to this way， uh， this variable and
    should totally work fine。 But let's say do this in trust。
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道，获取一些值并将其传递给不同的类，比如考虑一个预订。服务。呃，抱歉，那里有一个小错别字。预订服务和维修服务持有。对此变量的引用，呃，应该完全没问题。但假设我们在信任中这样做。
- en: '![](img/2c020a0457087f9701147634d5d18300_48.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_48.png)'
- en: Uh， this would， you know， fail at compile time。 It basically will throw you
    an error saying that。 you know， this particular type has been moved。 Like， how
    are you supposed to even program this way？
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 呃，这将在编译时失败。它基本上会抛出一个错误，告诉你。你知道，这个特定类型已经被移动了。像，你怎么能这样编程呢？
- en: '![](img/2c020a0457087f9701147634d5d18300_50.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_50.png)'
- en: Like I can't even pass a reference。 So this is that ownership really， really
    comes into place。 So everything in trust， uh， is owned by a scope。 So a scope，
    particular， a scope basically owns。 a particular， uh， a variable or a particular
    resource and the moment the variable， the scope goes。 the variable goes out of
    scope。 It is just deter， deter， deter， deter， deter， deter， historically。
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我连引用都无法传递。因此，这就是所有权真正起作用的地方。所有在信任中，呃，都是由一个作用域拥有的。所以一个作用域，特别是，作用域基本上拥有。一个特定的，呃，变量或一个特定的资源，而一旦变量，作用域结束。变量就会超出作用域。它就被销毁了，销毁了，销毁了，销毁了，销毁了，历史上。
- en: destructed。 So that's the reason why you don't need a garbage collector。 So
    the memory is freed as soon as the own variable goes out of scope。 That's the
    most important thing。
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 被销毁。因此，这就是为什么你不需要垃圾回收器的原因。内存在所有变量超出作用域时立即被释放。这是最重要的事情。
- en: '![](img/2c020a0457087f9701147634d5d18300_52.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_52.png)'
- en: that you need to， uh， you know， remember。 But that's the reason why when we
    pass the vehicle， uh。 variable to the booking service and so the booking service
    is not explicitly。 returning back the ownership to the main thread。 So then you
    call the repairs， uh， repair service。 uh， this， uh， the vehicle will not exist
    because it has been just domestically destructed。
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要，呃，你知道，记住的东西。但这就是为什么当我们将车辆，呃，变量传递给预订服务时，预订服务并没有明确地将所有权返回给主线程的原因。因此，你调用维修，呃，维修服务。呃，这个，呃，车辆将不存在，因为它已经被销毁了。
- en: '![](img/2c020a0457087f9701147634d5d18300_54.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_54.png)'
- en: So how am I supposed to code like this？ Like how can I pass variables between
    threads？ So that's。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 那我应该怎么编码呢？我怎么能在线程之间传递变量？所以就是这样。
- en: '![](img/2c020a0457087f9701147634d5d18300_56.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_56.png)'
- en: where borrowing comes into place。 So you could use an ambison symbol to pass
    a reference。 A pretty simple lending is the key here。 Uh， so you can， you can，
    you are basically passing the。
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 借用在这里起作用。因此你可以使用一个借用符号来传递引用。一个相当简单的借用是关键。呃，所以你可以，你基本上是在传递。
- en: '![](img/2c020a0457087f9701147634d5d18300_58.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_58.png)'
- en: ownership between threads or between functions and then there are two types
    of borrowing on。 a immutable type and a mutable type。 Immutable type does not
    allow you to make a change if the。 particular， the particular， uh， memory location
    and a mutable type allows you to do that。 You could。 have like any number of，
    uh， you know， immutable references， but you just can't have， uh， given。
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 线程之间或函数之间的所有权，然后有两种类型的借用，分别是不可变类型和可变类型。不可变类型不允许你更改特定的内存位置，而可变类型则允许你这样做。你可以有任意数量的，嗯，你知道的，不可变引用，但你不能有，嗯，给定的。
- en: point of time， one mutable reference。 Makes sense， right？ So yeah， so this is
    how， you know， uh。
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这时，一个可变引用。听起来合理吧？所以是的，这就是你知道的，嗯。
- en: '![](img/2c020a0457087f9701147634d5d18300_60.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_60.png)'
- en: rush kind of handles a memory， uh， management without any garbage collector。
    So let's look at。
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Rust 处理内存管理的方式，嗯，没有任何垃圾收集器。让我们看看。
- en: '![](img/2c020a0457087f9701147634d5d18300_62.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_62.png)'
- en: some high level iterators that I have sold about。 So here we're finding a particular
    word in a， uh。
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我提到的一些高阶迭代器。所以在这里我们正在找一个特定的单词，嗯。
- en: '![](img/2c020a0457087f9701147634d5d18300_64.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_64.png)'
- en: string and then you have things like， you know， into aiter which converts， uh，
    your particular。 strings into iterable types and your map function， which calls
    the wc line function which you have。 filters and folds。 So these are the high
    level iterators that I was talking about really makes， it。 you do write really
    fast。 But how do I like do it in a parallel way， like make things more， faster？
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串，然后你有一些东西，比如说，进入一个转换器，它会把你的特定字符串转换为可迭代类型，以及你的映射函数，它调用你拥有的 wc 行函数，之后还有过滤和折叠。所以这些就是我所说的高阶迭代器，这确实使得你可以写得非常快。但是，我该如何以并行的方式来做呢，让事情变得更快？
- en: Uh， thus， thus this package called， uh， Ryan and all that you have to change
    is， you know， make， uh。 into aiterate to into pariter。 Pretty simple， right？ So，
    uh， gives you a lot of， uh。 boost at runtime。 So Ryan is a very， very super cool
    package。 I highly recommend to check it out。
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，所以这个包叫做，嗯，Ryan，所有你需要做的就是，把，嗯，变成可迭代变成并行的。非常简单，对吧？所以，嗯，这在运行时给你带来了很大的提升。所以 Ryan
    是一个非常，非常酷的包。我强烈推荐你去看看。
- en: '![](img/2c020a0457087f9701147634d5d18300_66.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_66.png)'
- en: It really helps in data parallelism and， uh， data parallelism。 So there are
    some custom data types。
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这确实有助于数据并行性，嗯，数据并行性。所以有一些自定义数据类型。
- en: '![](img/2c020a0457087f9701147634d5d18300_68.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_68.png)'
- en: that you could build。 Stuct is a way to do that。 They are like lightweight references。
    They have。 fields。 Uh， they also have， uh， methods。 So， but you cannot have them
    partially filled。 It will。 throw you an error at runtime。 So， uh， with what you
    could basically do is use something like an。 option which is an enum that's usually，
    uh， used for error handling interest。 And match an enum or。
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以构建的东西。结构是一种方法。它们就像轻量级引用。它们有字段。嗯，它们也有方法。但是，你不能让它们部分填充。这样会在运行时抛出错误。所以，嗯，你基本上可以使用类似的选项，这是一种通常用于错误处理的枚举。而且匹配一个枚举或。
- en: very good way of doing error handling interest。 Uh， Stux can have methods。 So
    use the implement。
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 一种非常好的错误处理方法。嗯，Stux 可以有方法。所以要使用实现。
- en: '![](img/2c020a0457087f9701147634d5d18300_70.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_70.png)'
- en: keyword to， you know， build methods for， uh， structs。 So there's another important
    topic I want to talk。 about is straight which are like interfaces in Rust that
    allows you to add functionalities。 Like。 you know， have similar kind of functionality，
    same function names for different types。 So。
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字来构建结构体的方法。所以还有一个我想讨论的重要主题是接口，在 Rust 中像接口那样的结构，它允许你添加功能。像是，你知道的，具有类似功能的，不同类型的同名函数。所以。
- en: '![](img/2c020a0457087f9701147634d5d18300_72.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_72.png)'
- en: this is where the dynamic dispatch happens at runtime。 And there's something
    called generics， uh。
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这是动态调度在运行时发生的地方。而且有一种叫做泛型的东西，嗯。
- en: '![](img/2c020a0457087f9701147634d5d18300_74.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_74.png)'
- en: which is again a very cool topic I think I'm running out of time and I'm going
    to skip this part。
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常酷的话题，我想我快没时间了，我将跳过这一部分。
- en: '![](img/2c020a0457087f9701147634d5d18300_76.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_76.png)'
- en: So let's look at developing and shipping Rust extensions in Python mode。 That's
    the reason why you。 guys are here， right？ So the way to do it is using foreign
    function interfaces。 Foreign function。 faces are the way to， you know， you， you
    probably want to share your particular data types from one。 language to the other
    languages。 That's， that's where， you know， uh。
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们看看如何在 Python 模式下开发和发布 Rust 扩展。这就是你们在这里的原因，对吧？所以做法是使用外部函数接口。外部函数。接口是你，知道的，你可能想要从一种语言共享特定数据类型到其他语言的方式。这就是，呃，你知道的。
- en: foreign function interface comes， into place。 Uh， it's based on platform dependent，
    uh， C bind。 C application binding interfaces that， you have。 And trust is known
    to， you know， produce really。 really efficient C bindings。 That's one， reason
    why I feel， uh， Rust is a， you know。 a good option that you might consider for
    writing your， by the next engines。 Uh， again。
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 外部函数接口到位。呃，它基于平台相关的，呃，C 绑定。C 应用程序绑定接口，你有。Rust 被认为能够，呃，生成非常。非常高效的 C 绑定。这是我觉得，呃，Rust
    是，呃，一个你可能考虑的写下一个引擎的好选择的原因。呃，再次。
- en: coming to the point that， you know， the control aspects， you really， know what's
    happening。 You。 you， you looked at the Rust code， it was pretty easy to understand。
    It， was not that difficult。 right？ It had a lot of similarities to Python and
    other languages out there。 So it basically gives you this opportunity to understand
    what you're writing。 You just don't have。
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 说到控制方面，你真的，知道发生了什么。你。你查看了 Rust 代码，它相当容易理解。它并不那么难，对吧？它与 Python 和其他语言有很多相似之处。所以它基本上给你这个机会去理解你在写什么。你只是没有。
- en: to blindly believe on some tools。 Uh， that's something that， you know， as programmers。
    we need to really， really focus on。 Uh， so yeah， if。 if Python is Tony Stark and
    then Ironman would be Rust and the， Comp， Rust compiler would be Jarvis。 Uh， that，
    that's， that's my， uh， you know， uh， example。 So it's， really the ideal for， uh。
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 盲目相信某些工具。呃，这是你知道的，作为程序员，我们需要真正，真正关注的事情。呃，所以是的，如果。 如果 Python 是托尼·斯塔克，那么钢铁侠就是
    Rust，而 Rust 编译器就是贾维斯。呃，这就是我的，呃，你知道，呃，例子。所以这确实是理想的，呃。
- en: ideal for creating and using FFI modules。 Uh， so you start off by， uh， you know，
    mentioning， uh。 the library that you want to create。 So you have to， in Rust，
    you have to， first create a binary。 So you use a， so you use a， so if you look
    at the create types， creates a similar。 to libraries in Rust。 Uh， similar to libraries
    in Python。 And using a create type， you created a。
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 创建和使用 FFI 模块的理想选择。呃，所以你从，呃，你知道，提到，呃。你想要创建的库。所以你必须，在 Rust 中，首先创建一个二进制文件。所以你用，呃，如果你查看创建类型，创建一个类似于
    Rust 中的库。呃，类似于 Python 中的库。使用创建类型，你创建了一个。
- en: dynamic library that would， uh， you know， have an output like the daughter so
    files in Linux and a。 dot， uh， deal file windows and things of that sort。 And
    next up is where you create an extension。 So。
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 动态库将，呃，你知道，输出像 Linux 中的 daughter so 文件和一个，点，呃，deal 文件 Windows 和类似的东西。接下来是创建扩展的地方。所以。
- en: '![](img/2c020a0457087f9701147634d5d18300_78.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_78.png)'
- en: Rust standard library gives you some， uh， some， uh， uh。 in build data types
    for interacting with these， street strings and see inputs。 No mangell is a way
    to， you know， in an attribute that you mention。 not a tell that don't change my
    function names， uh， while compiling。 And yeah， you， you don't have。
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Rust 标准库为你提供了一些，呃，一些，呃，呃。内建的数据类型用于与这些，街道字符串和输入交互。没有 mangell 是一种方式，你知道，在你提到的属性中。不是说不要更改我的函数名称，呃，在编译时。是的，你，你没有。
- en: '![](img/2c020a0457087f9701147634d5d18300_80.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_80.png)'
- en: to explicitly go through the code。 Uh， the point is that it's very easy to write
    these extensions。 And。
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 明确地遍历代码。呃，关键是编写这些扩展非常简单。还有。
- en: '![](img/2c020a0457087f9701147634d5d18300_82.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_82.png)'
- en: uh， you can compile it to your Python code using， uh， the ECFFI modules。 I highly
    recommend to go out， check out the documentation tests like quite， uh。 quite a
    lot of things that needs to be covered， and you could always build it with your，
    uh， setup。py。 So there are other tools that I highly recommend to。
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 呃，你可以使用，呃，ECFFI 模块将其编译到你的 Python 代码中。我强烈建议去看看文档，测试很多，呃。需要覆盖的内容，你总是可以用你的，呃，setup.py
    来构建它。所以还有其他工具我也非常推荐。
- en: '![](img/2c020a0457087f9701147634d5d18300_84.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_84.png)'
- en: go out， check out like setup tools。rust， mil snake， a mil snake again written
    by， uh。 the centric guys。
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 外出，检查设置工具。Rust，mil snake，mil snake又是由，呃，中心的家伙们写的。
- en: '![](img/2c020a0457087f9701147634d5d18300_86.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_86.png)'
- en: So it works really well。 Uh， but there are other alternatives。 As people say，
    don't reinvent the。 wheels。 Uh， you have a lot of types to， uh， you know， manually
    handle there are， uh， vectors and。 arrays that you want to basically pass out。
    So rush see Python is a good， uh， library out there。 It's a library or create
    which probably handles， uh， uh， the other， other C bindings that you want。
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 所以它工作得很好。呃，但还有其他替代方案。正如人们所说，不要重新发明。轮子。呃，你有很多类型需要，呃，你知道，手动处理，那里有，呃，向量和。数组，你基本上想要传递出去。所以rush
    see Python是一个很好的，呃，库。它是一个库或创建，可能处理，呃，其他，你想要的其他C绑定。
- en: to have。 Uh， it's an easy way to， you know， communicate with the interest in
    Python。 So here I basically， have a Python code which， you know， I'm trying to
    do some string processing。 uh， uh， find the doubles， in a particular line of string。
    I'm using two S。 you can just use a zip and then I'm using a regex， to do that。
    Uh， and I'm creating like a billion。
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有。呃，这是一种简单的方法，你知道，和Python中的兴趣进行通信。所以在这里，我基本上有一段Python代码，呃，我在尝试做一些字符串处理。呃，呃，查找某一行字符串中的双重。我使用了两个S。你可以只用一个zip，然后我用正则表达式来做到这一点。呃，我在创建像十亿个。
- en: uh， characters。 So you would use the， uh， Rust。
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 呃，字符。所以你会使用，呃，Rust。
- en: '![](img/2c020a0457087f9701147634d5d18300_88.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_88.png)'
- en: '![](img/2c020a0457087f9701147634d5d18300_89.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_89.png)'
- en: uh， benchmark， uh， PyTorch， benchmark， uh， library to， you know， benchmark your，
    uh， performance at。
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 呃，基准，呃，PyTorch，基准，呃，库，以便，知道，基准你的，呃，性能。
- en: '![](img/2c020a0457087f9701147634d5d18300_91.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_91.png)'
- en: runtime。 And， you know， let's now create an extension in， uh， Rust to do the
    same。 So we first off。 first of all， we start off， uh， mentioning the， uh， the
    crate that we're going to use that is。 the Python， uh， call those， uh， uh， types
    that you're going to probably use in our Rust code。 And then， here I have a similar
    implementation of， uh， uh， the same， uh。
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时。你知道，现在让我们在，呃，Rust中创建一个扩展来做同样的事情。所以我们首先。首先，我们开始，呃，提到我们将使用的，呃，crate。那是。Python，呃，调用那些，呃，类型，你可能会在我们的Rust代码中使用。然后，这里我有一个类似的实现，呃，呃，和之前的，呃。
- en: counting functionality in Rust。 And， but if you can notice。 clearly I have used
    a Py result as my type because that's what's going to， like。 handle exceptions
    in Python and， you know， communicate between， uh， the statically compiled。 eso
    file and your， uh， Python interpreter。 And it also。
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在Rust中计数功能。但如果你能注意到。显然我使用了一个Py结果作为我的类型，因为那将处理Python中的异常，并且，你知道，能够在，呃，静态编译的。eso文件和你的，呃，Python解释器之间进行通信。而且它也。
- en: first argument or two that is in Python type， which， you know， goes down and，
    you know， you， uh。 locks your， uh， global， uh， g， uh， gl， uh， gl。 And， uh， yeah，
    then okay， it's a way to。 written back， uh， the success of this particular program。
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个或两个参数在Python类型中，呃，向下传递，你知道，你，呃。锁定你的，呃，全局，呃，g，呃，gl，呃，gl。呃，是的，然后好吧，它是一种。写回，呃，成功的这个特定程序。
- en: '![](img/2c020a0457087f9701147634d5d18300_93.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_93.png)'
- en: the final value。 At last you have to use an macro in order to explicitly mention
    the functions that。 you're going to export， uh， since， again， a nice interface
    to， uh， you know。 compile out the functions。
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 最终值。最后你必须使用一个宏，以便明确提及你要导出的函数，呃，因为，再次，一个好的接口，呃，你知道。编译出这些函数。
- en: '![](img/2c020a0457087f9701147634d5d18300_95.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_95.png)'
- en: that you're going to use。 So， yeah， you would find a significant， uh， boost
    in performance。 So。 the pure Python， uh， you know， it's just， it's just like 25
    times faster and 10 times， uh， to most。 10 times faster than， uh， the reggaex
    function。 So that's the advantage of， you know。 compiling ahead of time， uh， and
    using static programming languages。 So there are other things。
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 你要使用的。因此，是的，你会发现显著的，呃，性能提升。所以。纯Python，呃，你知道，它只是，它只是比，呃，reggaex函数快25倍，快10倍，呃，最多。比，呃，reggaex函数快10倍。所以这就是你知道的，预编译的优势，呃，和使用静态编程语言。因此，还有其他事情。
- en: '![](img/2c020a0457087f9701147634d5d18300_97.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_97.png)'
- en: that you probably want to do with， you know， allocation of memory。 There's a
    lot more， you know。 this is a very simple example， but， uh， uh， building production
    applications you probably want to do。 a lot more things like pass vectors and
    things of that sort。 Uh， so you， I would highly recommend。 this talk by my friend
    Nikita who also happens to be a tech speaker。 This is a good talk to go out。
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想要做的，关于，内存分配的事情。有很多更多，你知道。这是一个非常简单的例子，但，呃，呃，构建生产应用程序你可能想做。更多的事情，比如传递向量等。呃，所以我强烈推荐。我朋友Nikita的这个演讲，他也是一位技术演讲者。这是一个很好的演讲，值得关注。
- en: and check。 He has talked in detail about ever five in trust。 So there are， again，
    good tooling。 system that is available in trust。 You have Rust app， which is the
    Rust to， uh， uh， Rust， uh。 tool chain installer helps you to go between different
    versions of Rust， Rust format， Rust。 with PDA， some， uh， good ways to maintain，
    like， really good code basis， cargo， which I mentioned。
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 并检查。他详细讨论了每个信任的五个方面。所以，再一次，有很好的工具。可用于信任的系统。你有Rust应用程序，这是Rust，呃，呃，Rust，呃。工具链安装程序帮助你在不同版本的Rust之间切换，Rust格式，Rust。通过PDA，一些，呃，好的维护方式，像，真的好的代码基础，cargo，我之前提到过。
- en: before， the spacket manager and there are a lot of other tooling system out
    there。 Uh， Rust is a。 community driven， uh， project， uh， you know， everything
    happens through an RFC， you will have to。 uh， if you want some kind of changes，
    you， you， you， you submitted an RFC proposal， the community。
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，包管理器，还有许多其他工具系统。呃，Rust是一个。社区驱动的，呃，项目，呃，你知道，所有事情都通过RFC进行，如果你想要某种更改，你，提交一个RFC提案，社区。
- en: '![](img/2c020a0457087f9701147634d5d18300_99.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_99.png)'
- en: verifies it。 There's something called craze。io where， you know， all these packages
    get， uh。 you know， uploaded， you'll find a， a pretty， it's， it's a very good library
    ecosystem。 Like。 given the time， there's been a lot of craze that have been published
    over there and pretty helpful。
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 验证它。有一个叫craze.io的东西，你知道，所有这些包会被上传，你会发现，这是一个非常好的库生态系统。就像。在时间上，那里已经发布了很多craze，非常有帮助。
- en: '![](img/2c020a0457087f9701147634d5d18300_101.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_101.png)'
- en: Uh， to summarize， uh， no， I， I， when do you， when do you have to use Rust， like，
    you know。 like the main thing that I would say if there's some kind of mathematical，
    uh， complex， complex。 code that you have， that you have in your existing stack，
    that's something that you can convert to。 Rust and， you know， get， get the advantage
    of statically typed languages for accessing hardwares。
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 呃，总结一下，呃，不，我，我，当你必须使用Rust时，比如，你知道。我会说的主要事情是如果有某种数学，呃，复杂的，复杂的代码你在现有的堆栈中，那是你可以转换为Rust的东西，你知道，获得静态类型语言在访问硬件时的优势。
- en: you know， kernel level APIs， Rust gives you， like， good types and， you know，
    interfaces to do that。 Uh， implementing advanced， uh， concurrency paradigms， really，
    really easy。 But keep， just， uh。 keep in mind that， you know， calling between
    languages， it's a bit costly。 So do that in a very。 response will be made， don't，
    should not be like， you know， for every， you know， apare request or。
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道，内核级API，Rust为你提供了良好的类型和，你知道，接口来实现这一点。呃，实现高级，呃，Concurrency范式，真的，真的很简单。但请记住，你知道，不同语言之间的调用是有点成本的。所以，尽量在非常。响应会被做，不，应该不是像，你知道，针对每个，请求或者。
- en: things of that sort， you are， uh， calling in， uh， uh， Rust build function or
    Rust tactically typed。 uh， Rust functions。 So what does Rust has to offer？ It's
    a modern replacement to C++。 And if you're。 someone like me who is looking for
    learning system-building language and then feels C++ is a bit。 difficult to learn，
    Rust is definitely a good choice。 And apart from that， it's about， you know。
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 类似的事情，你在，呃，呃，调用Rust构建函数或Rust静态类型，呃，Rust函数。那么Rust有什么提供？它是C++的现代替代品。如果你是像我这样寻找学习系统构建语言的人，觉得C++有点。难以学习，Rust绝对是个好选择。除此之外，就是，你知道。
- en: improving your tool chain。 You， you want to， you want to， like， uh， learn on
    a day-to-day basis。 because there's some concepts that we don't really care about
    in Python， but， uh。 given computer science， advancing so fast， we need those。
    we need to know about those concepts and Rust is a very good way， to learn them。
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 改善你的工具链。你，想要，你想要，像，呃，每天学习。因为有些概念在Python中我们并不太在意，但，呃。鉴于计算机科学发展如此之快，我们需要了解这些概念，Rust是学习它们的一个非常好的方式。
- en: I personally learned it that way。 It's just rich runtime and then has a lot
    of strong， uh。 functional programming influence， which is really good and just
    something that we。
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我个人是这样学的。这只是丰富的运行时，并且有很多强大的，嗯，函数式编程影响，这非常好，正是我们所需要的。
- en: '![](img/2c020a0457087f9701147634d5d18300_103.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_103.png)'
- en: have spied in developers really loud。 Uh， so we have a feel awesome， like， you
    know， uh， and， yeah。 that's pretty much about， uh， all that I wanted to cover。
    Uh， and thank you so much。 Like， you can。 my， my， I'm， I'm， I'm at the day， the
    week， and you should be in Twitter and then I have just。 put together some good
    talks in PyCon US， tiny world or PyCon US， so do feel， feel， feel free to。
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者的声音非常大。嗯，所以我们感觉很棒，像，嗯，差不多就是我想要覆盖的所有内容。嗯，非常感谢。像，你可以。我的，我，我，我在这一天，这一周，你应该在Twitter上，然后我刚刚。整理了一些好的演讲在PyCon
    US，微小世界或PyCon US，所以请随意。
- en: go check them out。 I think we have a couple of more minutes left for questions。
    Thank you so much。 [applause]， So， uh， if anyone has any questions， please feel
    free to step up to the question mics。 There's one， over here and one over there。
    Um， yeah， we've got a couple more minutes， so please， uh。 please ask， anything
    that's on your mind。 Or I'll be around here， so feel free to， you know， uh。
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 去看看吧。我想我们还有几分钟时间可以提问。非常感谢。[掌声]所以，嗯，如果有人有问题，请随时走到提问麦克风前。有一个在这里，还有一个在那里。嗯，我们还有几分钟时间，请随便问任何你在想的事情。或者我会在这里，所以请随意来，嗯。
- en: yeah。 Uh， I was curious， do you know if Rust has much， uh， libraries for scientific
    computing， like。 crunching numbers like people do with NumPy and stuff？ Uh， at，
    at this moment， not many。 I'll be very honest with you。 Uh， but that's something
    that I like to do in my free time。 I'm。 building， like， you know， some deep learning
    packages， uh， like， just one deep learning package。
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，我很好奇，你知道Rust在科学计算方面有很多库吗？比如像NumPy那样处理数据？嗯，现在还不多。我会很诚实地告诉你。嗯，但这是我在空闲时间想做的事情。我在构建一些深度学习包，嗯，实际上就是一个深度学习包。
- en: but it's a fun thing to do， you know， you， you learn a lot in that process。
    They are very few。 actually very， very specific to industries， but there's a lot
    of amazing creates in networking。 embedded systems and those areas， but yeah，
    with scientific computing， we are not there yet。 Uh。 but it's a very， very interesting
    domain for Rust。 Yes。 Thanks。 All right， thanks for the talk。 Um。
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 但这是一件有趣的事情，你知道，在这个过程中你学到很多。它们非常少。实际上非常，非常具体于行业，但在网络、嵌入式系统和这些领域有很多惊人的创作，但在科学计算方面，我们还没达到。嗯，但这对Rust来说是一个非常有趣的领域。是的。谢谢。好的，谢谢你的演讲。嗯。
- en: so if I take a NumPy array and I pass it to Rust， or if Rust has， um。 some array
    and it wants to pass it back to Python， um， what does it show up as， like， do
    you。 have to specify all of the， uh， like the， the shapes manually or what it，
    and so。 Uh。 so that's where things like， you know， Rust， see Python comes into
    picture。 Uh， they handle it for。
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果我拿一个NumPy数组传递给Rust，或者如果Rust有一个数组想要传回Python，嗯，它会显示成什么样子？你需要手动指定所有的，嗯，形状吗？还是别的什么？嗯。这就是像你知道的Rust，见到Python的地方。嗯，他们为你处理这个。
- en: you， but if you want to do that from scratch， you can use the Rust， uh。 inbuilt
    FFI modules to do that。 Okay， thank you。 Yeah。 So currently if I want to speed
    up something with Python as far as computation is concerned。 I'm probably going
    to use either scython or c++ or something along those lines。
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果你想从头开始做，你可以使用Rust，嗯，内置的FFI模块来做到这一点。好的，谢谢。是的。所以目前如果我想在计算方面加速一些东西，我可能会使用cython或C++或类似的东西。
- en: What kind of situations have you seen where Rust will outperform， uh， scython
    or c++？ I。 I've not actually benchmarked between scython and Rust。 Uh， sometimes
    I think you get like really。 really close performance。 It really depends on what
    your building and what your application is。 Uh。 but， like， you know， it's all
    about control。 And I showed some use cases， right？ Like。
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 你见过哪些情况下Rust会超越，嗯，cython或C++？我。其实我没有对cython和Rust进行基准测试。嗯，有时我觉得你可以得到非常接近的性能。具体取决于你在构建什么和你的应用是什么。嗯，但，像你知道的，关键在于控制。我展示了一些用例，对吧？
- en: in web development， parsing and things like that sort。 They have， they have，
    they have。 historically been a good performance boost over there。 Thank you。 Hey，
    thanks for the talk。 Um。 do you know of any Python C libraries that have switched
    to Rust and。 what their experience like that has been？ Yeah， so， uh， the centric
    guys have done that。 Uh。
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在网页开发中，解析以及类似的事情。他们在那方面历史上有过良好的性能提升。谢谢。嘿，感谢你的演讲。嗯。你知道有哪些Python C库转向Rust吗？他们的体验如何？是的，呃，Centric的团队做过这件事。
- en: not really sure with the library names， but， they are a couple of them out that
    I can， I can。 I can share that to you later。 Yep。 Thanks for the introduction
    to Rust。 Um， in your summary slide。 uh， one line you said， Rust is no wrong time
    needed。 Can you kind of explain a little bit？
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 对于库的名称我不是很确定，但，有几个我可以，稍后分享给你。是的。感谢你介绍Rust。嗯，在你的总结幻灯片中，呃，有一句话你提到，Rust不需要运行时。你能稍微解释一下吗？
- en: I'm sorry， I didn't follow the question。 Um， one of your line says Rust is not
    wrong time needed。 Uh， I'm really， really sorry。 I'm not able to follow。 Are you
    able to get the question？ Okay。 Yeah。 So you're basically compiling ahead of time。
    So you have your entire abstract syntax， to be built。 So that's something， uh，
    Python does on the fly， right？ It's， uh， it's a scripting。
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 对不起，我没听懂这个问题。嗯，你的一句话说Rust不需要运行时。呃，我真的很抱歉。我没法理解。你能理解这个问题吗？好的。是的。你基本上是提前编译的。所以你需要构建整个抽象语法。这是Python即时处理的，对吗？它是，呃，一种脚本。
- en: language and the other one is a system programming language。 That's where you
    get that， uh， kind of。 compute， uh， computation boost。 Uh， so that's， that's what
    I meant by no runtime needed。 Thank you。 Hope that helps。 Yeah。 Thank you so much，
    guys。
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 语言和另一种系统编程语言。这就是你所获得的那种，呃，计算，呃，计算提升。呃，所以这就是我所说的无需运行时。谢谢。希望这对你有帮助。是的。非常感谢大家。
- en: '![](img/2c020a0457087f9701147634d5d18300_105.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c020a0457087f9701147634d5d18300_105.png)'
