- en: P18：TUTORIAL _ Geir Arne Hjelle _ Introduction to Decorators_ Power UP Your
    Python C - VikingDen7 - BV19Q4y197HM
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P18：教程 _ Geir Arne Hjelle _ 装饰器入门_ 让你的 Python C 变得更强大 - VikingDen7 - BV19Q4y197HM
- en: Hi everyone， my name is Gayed Anilah， and this is a tutorial to Decorators。
    You'll learn。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 大家好，我的名字是 Gayed Anilah，这是一个关于装饰器的教程。你将会学习。
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_1.png)'
- en: how to use decorators to write more effective Python code。 And first off， let
    me just say。 that we had a small mishap during the recording of this tutorial。
    So the first 10 minutes。 or so is a re-recording of the actual tutorial that was
    held at PyCon on May 12th。 But after。 about 10 minutes， we'll be back in the original
    recording， so you'll see the full thing。 So。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如何使用装饰器编写更有效的 Python 代码。首先，我想说的是，在录制这个教程期间出现了一些小问题。所以前 10 分钟左右是对实际教程的重新录制，该教程于
    5 月 12 日在 PyCon 举行。但在大约 10 分钟后，我们会回到原始录制中，因此你将看到完整内容。所以。
- en: let me then just go to talk a little bit about who I am and what you can expect
    from this， tutorial。 So my name is Gayed Anilah。 I live in Norway， in Oslo， where
    I work as a data scientist。 I also do write some articles at realpython。com， including
    an article about decorators。 What we're going to do today is essentially touch
    decorators ourselves， get to see how we can。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 让我先介绍一下我自己，以及你可以期待从这个教程中获得什么。我的名字是 Gayed Anilah。我住在挪威的奥斯陆，担任数据科学家。我也在 realpython.com
    上写一些文章，包括关于装饰器的文章。今天我们要做的就是亲自接触装饰器，看看我们如何。
- en: write decorators， how they function， and more importantly， how you can use them
    in your own code。 And the way that we kind of have structured this tutorial is
    that I'll be doing quite a bit of。 coding live in a REPL。 And the idea is that
    to try to do this together so that you can follow along。 in your own system。 And
    then in between， we'll take a few breaks and we'll do some exercises。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 编写装饰器，它们如何工作，更重要的是，如何在自己的代码中使用它们。我们对这个教程的结构是，我会在 REPL 中进行相当多的现场编码。这样可以让你跟着自己的系统一起操作。然后在中间，我们会休息几次，进行一些练习。
- en: So there'll be seven exercises where you'll have a couple of minutes to try
    things on your own。 and then we'll kind of collect us all up together afterwards
    and discuss the solution for this。 I also wanted to say that you're free to ask
    any questions you have during the tutorial。 Use the chat， use unmute yourselves
    and join me if you want。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 所以将会有七个练习，你会有几分钟的时间独立尝试。然后我们会一起讨论这个解决方案。我还想说的是，在教程期间你可以随时提问。使用聊天功能，或者解除静音加入我。
- en: And one final bookkeeping note is that there is also all of this material， the
    slides。 and so on will be hosted on my GitHub page。 So you can go to github。com/gahela
    decorators tutorial。 and get all of this code as well。 Okay， so let's dig into
    what are decorators。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个记录说明是，这些材料和幻灯片将会托管在我的 GitHub 页面上。所以你可以访问 github.com/gahela 装饰器教程，获取所有代码。好了，让我们深入了解一下什么是装饰器。
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_3.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_3.png)'
- en: And I'll start with sort of like a motivating example just to show you how does
    a decorator look。 So for this first example， there's not really any reason to
    code along with this。 This is just。 to show you how， what the decorator looks
    like essentially to get an idea of what they are。 And I'll do that first and then
    I'll talk a little bit more about what the creators can do。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我将先从一个激励性的例子开始，展示装饰器的样子。因此，在第一个例子中，实际上没有必要和我一起编码。这只是为了让你了解装饰器的外观。我会先这样做，然后再多谈谈装饰器可以做什么。
- en: So this will be sort of like a small dummy example as well most of the examples
    that we do during。 the tutorial， partly just because I want to make the points
    clear。 But I'll try also to talk a little， bit about how this will work also in
    more real life decorators。 So for this one， I just want to， define a function
    that is typically slow when it does some calculation。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是一个小的示例，正如我们在教程中大部分示例一样，部分原因是我想明确表达这些要点。但我也会尝试谈论这种装饰器在更现实生活中的应用。所以在这个例子中，我想定义一个通常在进行一些计算时比较慢的函数。
- en: To keep it simple here， I'm just doing a very basic calculation。 I'm just squaring
    a number。 But I'm also adding a time， sleep here just to make it slow just to
    show you to kind of simulate a long-running calculation。 So say that we're sleeping
    for a number of seconds， something like this。 And then we actually do the times
    that sleep here for the number of seconds。 And then we'll return。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简单起见，我只是做一个非常基本的计算。我只是对一个数字进行平方运算。但我还添加了一个`time.sleep`，只是为了让它变慢，模拟一个长时间运行的计算。假设我们睡眠几秒钟，类似这样。然后我们实际上在这里对睡眠的秒数进行计算。然后我们将返回结果。
- en: this number squared。 So here I have a function and if I call it， you should
    see that it's running。 slowly。 I see I did a small typo there。 So let's just go
    up and fix that。 This should be an F string。 Okay。 So then if we run the slow
    square function。 we can see here that it's sleeping for three seconds， and then
    it returns the number。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这个数字的平方。所以这里我有一个函数，如果我调用它，你应该看到它在慢慢运行。我看到我打了一个小错别字。我们上去修正一下。这应该是一个`F`字符串。好的。然后如果我们运行慢平方函数，我们可以看到它睡眠三秒钟，然后返回数字。
- en: And even if I call it a second time， it's still a slow function。 So one of the
    decorators that are in the standard library is one called an L。R。U。 cache。 least
    recently， used cache。 And what that can do is to take calculations like this that
    could be long running。 and just cache them。 So remember them for later if the
    result won't change。 So just to show you how。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我第二次调用它，它仍然是一个慢函数。所以标准库中的一个装饰器叫做`L.R.U. cache`，即最近最少使用的缓存。它可以处理像这样可能需要长时间运行的计算，并将其缓存。因此，如果结果不变，它会记住这些结果以备后用。现在让我给你展示一下。
- en: that one can be used， we can import that from the func tools library。 And then
    we can now。 go here and let's see essentially redefine our or actually we don't
    need to change our function at all。 We only add in on top of it what's called
    a decorator where I just reference the func tools， L。R。U。 cache。 And so I didn't
    change the function at all， which is an important point here。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从`func tools`库导入这个，然后我们现在可以去这里，基本上重新定义我们的函数，实际上我们根本不需要更改我们的函数。我们只需在其上添加一个称为装饰器的内容，我只是引用了`func
    tools`中的`L.R.U. cache`。所以我根本没有改变函数，这一点非常重要。
- en: But what happens now if I call my slow square three， you can see that it's again
    sleeping for。 three seconds before it's returning the number。 But now if I call
    it a second time， you can see。 that it immediately returns。 And you can also see
    that it doesn't print out anything， which means。 that the function itself didn't
    actually run。 The only thing that happens was that this L。R。U。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 但是现在，如果我调用我的慢平方函数三，你会看到它在返回数字之前再次睡眠三秒钟。但如果我第二次调用它，你会看到它立即返回。你也可以看到它没有打印任何内容，这意味着函数本身并没有实际运行。唯一发生的事情是这个`L.R.U.`。
- en: cache， somehow remembered the result， the output from last time and just gave
    that back just immediately。 And to kind of finish up this example， notice that
    if I now ask for the square of a different number。 it will again need to do the
    full calculation。 So it will be sleeping， but then once it's run once。 it's again
    cached。 So if we're looking at this as a decorator， the important thing is kind
    of this。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存某种程度上记住了上次的结果，立即将其返回。为了结束这个示例，请注意，如果我现在请求一个不同数字的平方，它将再次需要进行完整的计算。因此它会睡眠，但一旦运行完一次，它又被缓存了。因此，如果我们将其视为一个装饰器，重要的就是这一点。
- en: line。 So first of all， you can notice the syntax。 So how you use decorators
    is that you use this。 at symbol and then the name of the decorator immediately
    preceding your function definition。 And typically for most decorators， or possibly
    all， you don't need to change your function。 That's kind of one of the big powers
    of the decorators is that it can be reused over many。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你可以注意到语法。所以使用装饰器的方法是使用这个`@`符号，然后装饰器的名称紧接在你的函数定义之前。对于大多数装饰器，或者可能所有装饰器，你不需要更改你的函数。这就是装饰器的一大优势，可以在多个函数上重复使用。
- en: different use cases。 So in this case， we had a slow square function， but you
    can see how the same。 caching function can be used in many， many different functions
    that you want to have a cache of。 So what this kind of helps you do is then reuse
    functions， but you can also see how this。 makes our code much more readable。 So
    say that if we didn't use the decorator， but we still wanted。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的用例。在这种情况下，我们有一个慢的平方函数，但你可以看到同样的缓存函数可以用于许多你想要缓存的不同函数。因此，这样做可以帮助你重用函数，同时你也可以看到这使得我们的代码更加可读。如果我们不使用装饰器，但仍然想要。
- en: to cache our result， that would mean that we would need to kind of define code
    for doing the caching。 inside of the function itself， probably。 So then we would
    kind of。 litter our slow square function with extra stuff that just need to be
    there for caching。 not because we need to do any calculations。 So by using the
    decorator， we kind of moving all of。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要缓存我们的结果，这意味着我们需要为缓存定义一些代码。可能是在函数内部。因此，我们可能会在这个缓慢的平方函数中加入一些额外的东西，这些东西只是为了缓存存在，并不是因为我们需要进行任何计算。因此，通过使用装饰器，我们将所有的。
- en: that fluff out of the functions。 The function can focus on what it does best，
    and we kind of。 increase the readability of our code。 And yeah， so together with
    this， we get readability， we get。 more efficient to write code， essentially， because
    we can just reuse stuff all the time。 And we don't need to repeat ourselves。 So
    if I wanted to cache a different function， I just reuse。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 将冗余内容去除的函数。函数可以专注于它最擅长的事情，我们可以提高代码的可读性。因此，结合这一点，我们得到了可读性，我们得到了。写代码更高效，因为我们可以随时重用东西。我们不需要重复自己。所以如果我想缓存一个不同的函数，我只需重用。
- en: the same decorator。 I don't need to include that code。 So in this way， we get
    very elegant， code。 essentially。 Okay， so what are decorators？ And let me just
    show you here that if I just type。 funke tools， LRU cache， you can notice here
    that our decorator is actually just a function。 So that's kind of our first thing
    we probably should notice is that a decorator is really just a。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的装饰器。我不需要包含那个代码。因此，以这种方式，我们得到了非常优雅的代码。好吧，装饰器是什么？让我在这里给你展示，如果我只输入funke tools，LRU缓存，你会注意到我们的装饰器实际上只是一个函数。因此，这可能是我们首先应该注意的事情是，装饰器实际上只是一个。
- en: function。 There's nothing magical you need to do when you're defining it and
    so on。 It does need。 to follow certain conventions that we'll talk more about。
    But in general， the creator is just。 a function that we apply in a special way。
    To really understand what these decorators do， though。 we should talk about something。
    We typically call functions our first class objects。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 函数。定义它时没有什么神奇之处。它确实需要遵循某些约定，我们会详细讨论。但一般来说，创建者只是一个以特殊方式应用的函数。要真正理解这些装饰器的作用，我们应该谈谈一些。我们通常称函数为一等公民。
- en: And what this means is just that we can treat functions as any other kind of
    object in Python。 So meaning that we can assign functions to variable names。 we
    can pass them around and so on and so on。 So just to show you these things， it
    could。 for instance， define a variable that I'll call， Skidivoot that also just
    takes the value of print。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们可以将函数视为Python中的任何其他类型的对象。这意味着我们可以将函数分配给变量名，我们可以传递它们，等等。因此，只是为了向你展示这些东西，可以。例如，定义一个我称之为Skidivoot的变量，它也只是取值为print。
- en: where print here is the print function。 And Skidivoot is Norwegian for print。
    So essentially。 this is just the start of translating Python into， Norwegian in
    some sense。 Now I can use this。 First of all， we can see that this is my built-in。
    function print and I can now use this to actually print stuff。 So maybe not nothing
    revolutionary。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的打印就是打印函数。Skidivoot在挪威语中意为打印。因此，从某种意义上说，这只是将Python翻译成挪威语的开始。现在我可以使用它。首先，我们可以看到这是我的内置函数print，我现在可以用它来实际打印东西。因此，也许并没有什么革命性的。
- en: here， but what I'm doing is that I'm using the fact that functions are first
    class objects。 I can assign them to different variables in Python。 We can also
    pass functions around。 So let me just create a very simple function。 We'll play
    with this function several times。 throughout the tutorial。 But it's a greater
    function， which I'll use essentially just to say hi to。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，但我所做的是利用函数是一等公民的事实。我可以将它们分配给Python中的不同变量。我们也可以传递函数。所以让我创建一个非常简单的函数。我们将在整个教程中多次玩这个函数。但它是一个更大的函数，我将用它来跟。
- en: hi to a given name。 So something like this。 And the one thing you should notice
    here。 is that I did something right there where I said that the argument printer。
    I gave the default value， of print， the print function。 And if I now just call
    greet Python。 you can see that it against， prints out hi Python。 So what happens
    here is that with the greet。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 向给定名称打招呼。所以像这样。你应该注意到的一件事是，我在这里做了对参数打印机的一个默认值，即打印函数。如果我现在只调用greet Python，你会看到它再次打印出hi
    Python。那么这里发生的事情是，使用greet。
- en: it calls printer， but printer， is just a different name for print。 So therefore。
    this ends up saying print hi Python。 But now that I have defined myself a parameter
    here for the printer function that I'm going to use。 I can pass in different functions
    for this。 So say I could define now a function that I'll call nerp。 So nerp is
    just print backwards。 So what this thing does is that it just takes a text and
    it prints。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 它调用打印机，但打印机只是打印的不同名称。因此，这最终表示打印hi Python。但是现在我为要使用的打印机函数定义了一个参数。我可以为此传入不同的函数。所以我可以定义一个我称之为nerp的函数。nerp就是反向打印。所以这个东西做的就是它接收文本并打印。
- en: out the text backwards。 So I'll just reverse my text like this。 And now I have
    the nerp function。 And you can see now that if I do greet Python， but I'll specify
    that I want to use the nerp as my printer。 you can see here that it actually prints
    things backwards。 So what I've done here is that I've。 been using a function as
    an argument to this。 And the whole functions are first-classed object in。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 文本是反向的。所以我会像这样反转我的文本。现在我有了nerp函数。你可以看到，如果我打招呼给Python，但我会指定要将nerp用作我的打印机。你可以看到这里，它实际上是反向打印的。所以我在这里做的就是我一直在把一个函数作为这个的参数。整个函数都是第一类对象。
- en: Python thing is something that typically you'll have two reactions to this。
    It's either yes。 of course you can do this， or it is something that potentially
    blows your mind a little bit。 And in the latter typically happens if you come
    from some languages where this is not allowed。 So。 there are many languages for
    functions or very special objects that you can't do these kind of。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Python这件事通常会让你有两种反应。要么是“是的，当然可以这样做”，要么是“这可能让你有点震惊”。后者通常发生在你来自某些不允许这样做的语言时。因此，有很多语言中函数或非常特殊的对象是无法执行这种操作的。
- en: things with。 But the power of doing this is that you can do a lot of type of
    meta programming。 and those kind of things。 And we'll see that this is kind of
    what allows decorators to function。 Before I move on， I also want to make sure
    that there's a very important distinction。 When we're talking about functions
    that I just want to make sure that everybody， is aware of。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一些事情发生了。但是这样做的力量在于你可以进行很多类型的元编程。这些事情使装饰器得以运作。在我继续之前，我还想确保有一个非常重要的区别。当我们谈论函数时，我只想确保每个人都意识到。
- en: So in Python， you can refer to a function just by typing out the name of the
    function。 So here I just type print and you can see that this gives me a reference
    to the function print。 I could also use parentheses with print and you can see
    that this seemingly doesn't give me anything。 back。 And when you use parentheses
    after a function。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，你可以通过输入函数的名称来引用一个函数。所以在这里我只输入打印，你可以看到这给了我对打印函数的引用。我也可以用括号与打印结合使用，你会发现这似乎没有给我任何返回。当你在函数后面使用括号时。
- en: you are not referring to the function but you're， calling the function and it
    gives your reference to the return value of that function。 So in the， case of
    print， print returns none。 So it just gives your reference to none。 which is typically，
    not very useful。 But this is important when we're passing things around。 And if
    we just remember， here， when we last used the greet。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你并不是在引用函数，而是在调用函数，它给你返回值的引用。所以在打印的情况下，打印返回的是none。因此，它只是给你一个对none的引用，这通常并不太有用。但是在我们传递东西时，这一点很重要。如果我们记得上次使用greet。
- en: notice that I passed in the nirp without the parentheses as my， printer。 It's
    because I need a reference to the function。 If I had here done a function call
    with。 parentheses， we would see that we get a an error message。 This first one
    is because I don't have。 anything there。 Let me let me use print as a different
    example because nirp needs one argument。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我把nirp作为我的打印机传入，而没有使用括号。这是因为我需要对函数的引用。如果我在这里做了一个带括号的函数调用，我们会看到一个错误消息。第一个是因为我没有任何东西。让我用打印作为一个不同的例子，因为nirp需要一个参数。
- en: But if we do this with print， you can see here that we get a somewhat mysterious
    reference to。 the nontype。 And what happens there is that our printer， let's just
    do the call right here。 If I do this， then we can see， we need to force it out
    that printer becomes none。 So this definition here just means essentially that
    I'm saying printer equals none and then it。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 但是如果我们用`print`这样做，你可以看到这里我们得到了一个有点神秘的引用到`nontype`。发生的情况是我们的打印机，我们就直接在这里调用它。如果我这样做，那么我们可以看到，我们需要强制将打印机变为`none`。所以这里的定义基本上意味着我在说打印机等于`none`，然后它。
- en: tries to use none as a function later。 And that's when we get this nontype object。
    It's not callable。 So that's kind of where we get into trouble there。 But yeah。
    the important thing is just to remember， the distinction between print or any
    function without parentheses gives you the reference to。 the function while with
    parentheses calls the function and gives you a reference to where。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 后面尝试把`none`当作函数来使用。这时我们得到这个`nontype`对象。它不可调用。因此，这就是我们遇到麻烦的地方。但重要的是要记住，`print`或任何没有括号的函数给你的是对函数的引用，而带括号则调用函数并给你引用该函数的结果。
- en: the reference to result of that function。 Okay， I see there's a question here
    too。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我看到这里也有一个问题。
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_5.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_5.png)'
- en: There's a way to identify decorator methods available in Python libraries and
    the actual methods。 So I don't think there's sort of a global way to identify
    decorator methods because。 the creators are really just， as you'll see soon， they're
    just regular functions that kind of。 follow certain conventions。 But there are，
    and I'll share a link with you afterwards。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种方法可以识别Python库中可用的装饰器方法和实际方法。因此，我不认为有一种全局的方法来识别装饰器方法，因为。创造者实际上就像你很快会看到的，他们只是遵循某些约定的普通函数。但确实存在，我稍后会分享一个链接给你。
- en: there are certain places online essentially that just collected all of the different
    decorators。 in the standard library and in other libraries。 They're of course
    not complete， but at least they。 give you something。 Okay， let's see。 Then we
    have， yes。 I wanted to show this other example where we can create a function
    kind of dynamically。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 网上确实有一些地方收集了标准库和其他库中的所有不同装饰器。当然，它们并不完整，但至少给你一些信息。好的，让我们看看。那么我们有，是的。我想展示另一个例子，在那里我们可以动态创建一个函数。
- en: And this is often just called a function factory or something like this that
    you have。 You have a function that creates another function， so therefore a factory。
    And in this example。 I'll kind of be similar to the greeting example in some sense。
    But here you can see that I am。 defining a function within the other function。
    So this is also called an inner function。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常被称为函数工厂或类似的东西。你有一个创建另一个函数的函数，因此是一个工厂。在这个例子中。从某种意义上来说，我会类似于问候的例子。但在这里你可以看到，我在另一个函数中定义了一个函数。所以这也被称为内部函数。
- en: And I'm just defining here a function I call prefix printer。 Again， I'll just
    reuse a simple。 print function here where I'll take a prefix and kind of print
    it in front of a text。 Something like this。 And then my prefix factory is just
    returning this prefix printer function。 And as I'll show an example first and
    I'll explain a little bit more how it works。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里定义了一个函数，我称之为前缀打印机。再一次，我将重用一个简单的打印函数，在这里我将接受一个前缀，并在文本前面打印它。像这样。然后我的前缀工厂只是返回这个前缀打印函数。我会先展示一个例子，然后再解释它是如何工作的。
- en: So let's say that I'll do a prefix factory where I'll use debug。 And when I
    do this， this debug。 you can see here is a function。 There's some more information
    here。 that it is actually the prefix printer function that's a local function
    to prefix factory。 But the important thing for us is that the debug is a function。
    And if I use my debug to say hi。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我会做一个前缀工厂，在这里我将使用`debug`。当我这样做时，这个`debug`，你可以看到这里有一个函数。这里还有一些更多的信息，实际上这是前缀工厂的局部函数前缀打印函数。对我们来说，重要的是`debug`是一个函数。如果我用我的`debug`来打招呼。
- en: PyCon， you can see here that it essentially then adds in the debug prefix in
    front。 And what is kind of interesting here is that the debug function only takes
    in the argument， text。 And then the prefix argument comes from the outer function。
    So this one is kind of passed into。 or really it's available to the prefix printer
    to use。 And this is kind of something called that。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在PyCon中，你可以看到它本质上是在前面添加了调试前缀。而这里有趣的是，调试函数只接受参数文本。然后前缀参数来自外部函数。因此，这个参数就这样传递进来了。实际上，它是可供前缀打印机使用的。这被称为某种东西。
- en: it's getting the prefix from the enclosing scope that prefix doesn't exist inside
    of the。 prefix printer function。 So then it kind of looks outside to see if it
    can find it。 And then it。 finds it in the enclosing function。 And in this way，
    we can create many different prefix printer。 functions where debug is just one
    of them。 So what we're doing here is kind of the opposite of what。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 它从封闭作用域获取前缀，而在前缀打印机函数内部并不存在前缀。因此，它会向外查看，看看是否能找到它。然后它在封闭函数中找到了它。通过这种方式，我们可以创建许多不同的前缀打印机函数，而调试仅仅是其中之一。所以我们在这里所做的有点相反。
- en: we had in the previous example where this time we're returning an example。 Sorry。
    we're returning a function。 And then just to kind of complete the circle a little
    bit there。 I can now call my， greet layer that we had earlier and send in my debug
    as the printer。 And in this case， you can see， that the greet now is able to take
    in the debug and print things up out here。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在之前的例子中看到，这一次我们返回一个示例。抱歉。我们返回一个函数。为了完成这一圈，我现在可以调用我们之前的问候层，并将我的调试作为打印机传入。在这种情况下，你可以看到，问候现在能够接收调试并在这里打印内容。
- en: I realized that I， should also be copying a little bit just to make it easier
    for you to see that these functions that。 we have been doing。 So I'll just copy
    this out。 So you can kind of see them in the background。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我意识到，我也应该复制一点内容，以便让你更容易看到这些我们一直在做的函数。所以我就复制一下，这样你可以在背景中看到它们。
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_7.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_7.png)'
- en: Let's see。 I have the nirp。 I'll add in that one。 And let's see。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看。我有nirp。我会把它加进去。然后再看看。
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_9.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_9.png)'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_10.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_10.png)'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_11.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_11.png)'
- en: There we go。 [pause]， So also one thing to just point out here is that every
    time。 so the prefix printer。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。[暂停]，还有一点需要指出的是，每次。前缀打印机。
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_13.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_13.png)'
- en: it was kind of a that function is only generated when the prefix factory is
    called。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数只有在前缀工厂被调用时才会生成。
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_15.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_15.png)'
- en: So whenever you kind of call the prefix factory， a new function has been created。
    So there can be many prefix factory functions essentially， different versions
    of this。 So yeah。 Let's see。 So what's next？ Now I want to just put these things
    that we've seen now together。 and have some function where I can pass in a function
    and it will return a function to me。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 所以每当你调用前缀工厂时，都会创建一个新函数。因此，实际上可以有许多前缀工厂函数，具有不同的版本。所以，是的。让我们看看。接下来是什么？现在我想把我们现在看到的东西放在一起，并拥有一个函数，我可以传入一个函数，它会返回给我一个函数。
- en: And that is really the definition of a decorator as well as CNC as well。 So
    now I'll create a reversed， factory。 I'll call it， which can take a function。
    And then inside of here， I'll just define another， inner function that I'll call
    the reverse color。 It takes some text。 And what it does then is that， it just
    calls the given function。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这确实是装饰器的定义，以及CNC。因此，我现在会创建一个反向工厂。我会称之为，它可以接受一个函数。在这里，我将定义另一个内部函数，称为反转颜色。它接受一些文本。它所做的只是调用给定的函数。
- en: So the one that we get in there。 But I'll pass in the reverse， text。 So this
    is kind of a little bit like what we did here with the nirp function。 And it's
    kind。 of mixing together。 And then my factory again should return this inner function。
    So it's creating。 a new function and returning it。 And then what can we do with
    this？ Well， I can for instance create。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到的就是这个。但是我会传入反向文本。这有点像我们在nirp函数中所做的。并且它有些混合在一起。然后我的工厂应该返回这个内部函数。它正在创建一个新函数并返回它。我们能对此做些什么呢？比如，我可以创建。
- en: myself a reverse print function from using the reverse factory on print。 So
    let's see what that。 ends up doing。 So if we say our usual high Python， you can
    see that this function is exactly like。 the nirp function here did。 And if we
    kind of trace through here， we'll see that we are really。 doing the same thing，
    right？ Because the reverse factory， I'm sending print in there as it's funk。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 从使用反转工厂来创建一个反转打印函数。让我们看看那会有什么结果。如果我们说我们通常的高Python，你可以看到这个函数与nirp函数完全相同。如果我们跟踪一下，我们会看到我们实际上是在做同样的事情，对吧？因为反转工厂，我把print传递进去作为它的函数。
- en: It's defining a function here where it's calling in this case， then print of
    text reversed。 And then， it's returning that function。 So reverse print is really
    at least functionally the same as the nirp function。 That means that I should
    be able to also reverse my nirp function， by doing the following。 And now what
    should we expect the reverse nirp to give us？ Well， that。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这里定义了一个函数，其中调用了它，然后打印反转的文本。然后，它返回该函数。因此，反转打印在功能上至少与nirp函数相同。这意味着我应该能够通过以下方式也反转我的nirp函数。那么，我们应该期望反转nirp给我们什么呢？好吧，就是这样。
- en: will reverse something that's already reversed。 So that will just come back
    straight again。 And then， as a final little thing， and I can see if this one becomes
    what you expect。 So we can also reverse， our debug function。 And if we do then
    the reverse debug， high Python。 So remember that debug was， essentially using
    this prefix factory。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 将反转已经反转的内容。所以这将直接返回。然后，作为最后一件小事，我可以看看这个是否成为你期望的结果。因此，我们也可以反转我们的调试函数。如果我们这样做，那么反转调试就是高Python。因此请记住，调试本质上是使用这个前缀工厂。
- en: So what will happen when we run this？ If I was， I ended up slightly confused
    that it actually prints debug the correct way。 But again， if we kind of trace
    our way through everything that happens here。 we'll see that that kind of， makes
    sense because the only thing that is reversed。 if we look here is the parameter
    text that we， pass in here。 So all the way through。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，当我们运行这个时会发生什么？如果我是，我最终有点困惑，因为它实际上以正确的方式打印调试。但如果我们逐步跟踪发生的一切，我们会看到这很有道理，因为唯一被反转的。我们在这里看到的就是我们传入的参数文本。因此，一直到最后。
- en: we can kind of run this。 And in a sense， there's nothing。 really new about what
    we have been doing here。 We're just kind of passing in the function similar。 to
    these examples that we've done here。 But what we have actually done now is that
    we have created。 ourselves a decorator。 So this reverse factory is a decorator
    in the sense that I can。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在某种程度上运行这个。从某种意义上说，我们所做的其实没有什么新鲜的。我们只是将函数传递给这些示例。实际上，我们现在所做的是创建了一个装饰器。因此，这个反转工厂是一个装饰器，因为我可以。
- en: just add it using the same syntax that you saw for the LRU cache。 So let's here
    just I'll recreate the greet function， but just an even simpler one。 So if we
    do something like this。 So I'll greet PyCon。 And now if I just add in the reverse
    factory on top。 And then we greet PyCon again。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 只是用你看到的LRU缓存相同的语法添加它。因此，让我们在这里重新创建问候函数，但更简单一点。所以如果我们这样做。那我就会问候PyCon。现在如果我在上面加上反转工厂，然后我们再问候PyCon。
- en: you can see that it has actually done the application that we wanted。 to do
    on the greet function here。 You can see this is actually not exactly the same
    as reverse prints。 since again， we are just reversing the parameter。 So it's as
    high as correct， but then no， no， no。 or PyCon is backwards。 So this reverse factory
    is actually our first decorator。 And I'll just。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到它实际上完成了我们想要在这里对问候函数进行的应用。你可以看到这实际上与反转打印并不完全相同，因为我们只是反转了参数。所以这在某种程度上是正确的，但不，不，不。或者说PyCon是反向的。因此，这个反转工厂实际上是我们的第一个装饰器。我会。
- en: gonna copy it。 And then I will， let's see， there we got the code for it。 And
    let's see。 There we go。 And then let's see if we can figure out what did this
    at reverse factory。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我要复制它。然后我会，看看我们得到了它的代码。让我们看看。好的，然后看看我们能否弄清楚这个反转工厂做了什么。
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_17.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_17.png)'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_18.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_18.png)'
- en: actually do for us。 So when I'm doing this， this is really just some tactic
    sugar， as it's called。 the at reverse factory。 That just means that whatever happens
    here is something that we could。 also do without using this syntax。 It's just
    some extra that the language has created for us to。 make things easier。 So how
    can we do the same thing without using the syntax？ So what the。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上为我们做的事情。所以当我这样做时，这实际上只是一些所谓的技巧糖。@反转工厂。这意味着这里发生的任何事情都是我们也可以做到的，而不需要使用这个语法。只是语言为我们创造的一些额外功能，以便简化事情。那么我们如何在不使用这个语法的情况下做同样的事情呢？
- en: at symbol does is really just the same as the following。 It takes a function
    to greet and applies。 the function to it。 So this at reverse factory that we put
    on top of the function really just。 performs this line of code for us after that
    the function has been defined。 And you can see that。 this is not really a lot
    of work at all。 But it is a bit simplified in that if I were to do it this。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '@符号的作用实际上与以下内容相同。它接受一个函数来问候，并将该函数应用于它。因此，这个我们放在函数上方的@反转工厂实际上就是在函数定义后为我们执行这一行代码。你可以看到，这并不是很多工作。但在某种程度上简化了，如果我这样做。'
- en: second way， I would need to kind of spell out the function name three times
    here。 So by including this， syntax， we were kind of just shaving off a little
    bit of typing for us。 But it also gives things， much more visibility。 So it's
    easier to read essentially that we could hear we are reversing。 I guess， typically
    in the credits you don't have the factory name there。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法，我需要在这里把函数名拼写三遍。通过包括这个语法，我们实际上减少了少量的输入。但这也让事情变得更可见。因此，从本质上讲，阅读起来更容易，我们可以在这里反转。我想，通常在声明中，你不会有工厂名称。
- en: But you would have something， like reverse the greeting。 And it's kind of clearly
    on top。 Well。 if you would kind of do it this， second way around then the fact
    that your reversing is kind of hidden a little bit below。 But， these are completely
    the same。 So for decorators。 this is in some sense the only thing that you need，
    to remember。 And let's see。 Yeah。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 但你可能会有类似于反转问候的东西。并且它在上面清晰可见。好吧。如果你以第二种方式做，那么你反转的事实在下面有点隐藏。但这些完全是相同的。因此，对于装饰器来说，从某种意义上讲，这就是你需要记住的唯一内容。让我们看看。是的。
- en: But typically in your code you want to have used this syntax。 Sometimes when
    you're just trying to figure out what's happening it might be useful to kind of。
    enroll it back to this way。 There's a question here if there's any way to telefunction
    not to use。 its decorator。 That's a little bit。 Yes and no， in a sense。 There's
    not directly。 So it's hard。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 但通常在你的代码中，你希望使用这个语法。有时候，当你只是试图弄清楚发生了什么时，将其反转回这种方式可能会很有用。这里有一个问题：有没有办法让函数不使用其装饰器？这有点。是与否，从某种意义上说。并没有直接的方法。所以这很难。
- en: in this case， to kind of figure out how to kind of unravel this again。 But we'll
    see a little bit。 later。 I'll try to point it out。 That we'll kind of be cleaning
    up this a little bit where。 things are a little bit more tidy and then it's possible
    to get the functions that are kind of hiding。 below。 Okay。 So now I have been
    probably talking and writing things a bit too fast。 So I wanted。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，想要弄清楚如何再次解开这个问题。但我们稍后会看到。我会尽量指出。我们会稍微清理一下，使事情更整洁，然后可以获取一些隐藏在下面的功能。好的。现在我可能讲得有点快，写得也有点快。所以我想。
- en: to slow down a little bit and show you kind of first exercise to just get your
    feet wet a little bit。
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 稍微放慢一点，给你展示一个初步的练习，让你先入门。
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_20.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_20.png)'
- en: So essentially the exercise just asks you to write a decorator that prints the
    word before。 before calling the decorator function and afterwards。 So when we
    run it。 we want it to look something， like this that if I define my grid function
    with before and after。 then when I run grid icon， it should print before。 Sorry。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，本质上这个练习只是要求你编写一个装饰器，在调用装饰器函数之前和之后打印单词。因此，当我们运行它时，我们希望它看起来像这样：如果我用之前和之后定义我的网格函数，那么当我运行网格图标时，它应该打印“之前”。抱歉。
- en: it should print before and then it should print the， high icon。 then it should
    print afterwards after。 I'll also。 I have just a small Google form where。 if you
    want to， you can just post your suggested code to this one and I'll kind of try
    to pick one。 of the solutions and kind of discuss it a little bit。 And then just
    before I let you lose on this。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该在之前打印，然后打印高图标，然后在之后再打印。我还有一个小的Google表单，如果你愿意，可以将你建议的代码发布到这里，我会尝试挑选一个解决方案，讨论一下。在我让你们自由探索之前。
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_22.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_22.png)'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_23.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_23.png)'
- en: I just want to point out again what actually made a reverse factory become a
    function。 not sorry a decorator， what really happened there。 And the main or really
    the only thing that。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我想再次指出，实际上是什么让反转工厂变成了一个函数。不是，抱歉，是装饰器，那里真正发生的事情。主要或者说唯一的事情是。
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_25.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_25.png)'
- en: it does is that it takes in a function， as you can see here。 So that should
    be the essentially。 the only argument to your decorator should be a function and
    then it should return some function。 again。 And what happens is that after you
    do the decoration， let's see here， so after you do this。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 它所做的是接收一个函数，正如你在这里看到的。因此，这应该是本质上。你装饰器的唯一参数应该是一个函数，然后它应该返回某个函数。再说一次。而发生的事情是，在你进行装饰之后，我们来看一下，所以在你完成这个之后。
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_27.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_27.png)'
- en: at reverse factory， what has happened then is that the grid function right there
    has been replaced by。 this wrapper function that we kind of have in the middle
    here。 So that's kind of more explicit probably。 Here that the grid function has
    been replaced by whatever is returned from your decorator。 So I'll leave this
    for enough for say about a couple of minutes， two， three minutes。 And once。
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在反转工厂中，发生的事情是，那个网格函数已经被这个我们在中间拥有的包装函数所替代。所以这可能更明确。这里，网格函数已被你装饰器返回的任何内容所替代。因此，我会让这个留出大约两三分钟的时间。一旦。
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_29.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_29.png)'
- en: you have your code example， just post it here， I'll put this link in the chat
    so you can find it in the chat。 Let's see， I'll just copy it there I think。 So
    yeah。 then good luck and looking forward to seeing your。
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你有你的代码示例，就在这里发布，我会把这个链接放在聊天中，以便你可以在聊天中找到它。让我们看看，我想我会把它复制到那里。所以，是的，祝你好运，期待看到你的。
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_31.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_31.png)'
- en: examples。 So just put this in the chat in the middle and show the exercise again。
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 示例。因此只需把这个放在聊天中间，并再次展示练习。
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_33.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_33.png)'
- en: And yeah， if you have any questions， feel free to post them in the chat or just
    unmute yourselves。 Let's see if I should put this one up。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，如果你有任何问题，随时可以在聊天中发布，或者直接取消静音。让我看看我是否应该把这个放上去。
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_35.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_35.png)'
- en: '[silence]。'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[安静]。'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_37.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_37.png)'
- en: '[silence]， [silence]， [silence]， [silence]， [silence]， [silence]， [silence]，
    [silence]， [silence]。 [silence]， [silence]， [silence]， [silence]。'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[安静]，[安静]，[安静]，[安静]，[安静]，[安静]，[安静]，[安静]，[安静]。[安静]，[安静]，[安静]，[安静]。'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_39.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_39.png)'
- en: Great， I see a couple of solutions are starting to roll in。 So that's great。
    And it seems like most of you have found， the way to do it essentially。 So let
    me just show off a solution for this。 And what do we do？ As we said。 we need the
    decorator to accept the function as its parameter。 And then。
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，我看到一些解决方案开始出现。所以这很好。看起来你们大多数人都找到了基本的解决方法。所以让我展示一下这个解决方案。我们该怎么做？正如我们所说。我们需要装饰器接受函数作为其参数。然后。
- en: we have some kind of wrapper function inside。 I tend to just call it wrapper
    or you might want。 to call it something more explicit like a wrapper before and
    after or something like this。 But for。 now， I'll just call it wrapper。 That's
    the function that's actually being called。 So we wanted。 to have this text argument。
    And then I guess we just wanted to print before。 And let's see。
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有某种包装函数在里面。我倾向于称它为包装器，或者你可能想要称它为更明确的东西，比如“前后包装器”或类似的东西。但现在，我就叫它包装器。这是实际上被调用的函数。因此，我们希望有这个文本参数。然后我想我们只想在之前打印一下。让我们看看。
- en: then we wanted to call the function something like this。 And then we wanted
    to print after。 And then finally， we just needed to return our wrapper。 Something
    like this。 So let's see if that。 actually works。 So then we wanted to do， I want
    to apply this to my creature。 where I'll just greet name like this。 And then if
    we do our usual greeting。
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们想要像这样调用这个函数。然后我们想在之后打印。最后，我们只需要返回我们的`wrapper`。像这样。让我们看看这是否真的有效。所以我们想要做的，我想把这个应用到我的生物上，我会像这样问候名字。如果我们进行我们通常的问候。
- en: we can see that it says before， I'll apply it on and after。 Now by itself。 this
    is of course not a very interesting decorator。 But it does kind of show。 off the
    flow of how the creators work。 And this is actually something that is a fairly
    typical。 organization of your decorator。 So you'll have this inner wrapper function。
    You'll do something。
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到它说之前，我会应用它，然后之后。单独来看，这当然不是一个非常有趣的装饰器。但它确实展示了创建者的工作流程。这实际上是你装饰器的一种相当典型的组织方式。所以你会有这个内部的`wrapper`函数。你会做一些事情。
- en: before you call the function。 You'll call the function， you'll do something
    after you call the。 function。 So this kind of structure is something that you'll
    see repeated several times。 So I'll just copy over this one。 Let's see。
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在你调用函数之前。你会调用这个函数，然后在你调用函数后做一些事情。所以这种结构是你会看到重复多次的。因此我会复制这一段。让我们看看。
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_41.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_41.png)'
- en: Okay。 So there you see that before and after as well。
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。所以你看到之前和之后也在这里。
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_43.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_43.png)'
- en: And let's see。 What happens now if we use this decorator for some other function？
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看。如果我们对某个其他函数使用这个装饰器会发生什么？
- en: So let's say that I have， I'll now create a very advanced function that I'll
    call， header。 which can add two numbers。 So this one， is of course， I should just
    be using plots。 But maybe I want my own header function for， some reason。 And
    what happens if I try to decorate this one before and after？
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 所以假设我现在要创建一个非常高级的函数，我称之为`header`，它可以添加两个数字。因此这个，当然，我应该只是使用`plots`。但也许出于某种原因我想要我自己的`header`函数。如果我在之前和之后尝试装饰这个函数会发生什么？
- en: So if I now do before and after on top of this， that seems to work。 And let's
    say I now want to add。 three and ten together。 Oops。 Then we actually get an error。
    And what it says here is that the。 wrapper。 So let's remember， let's see here，
    we have it over here， the before and after， the wrapper。 that's the inner function。
    So that's really what the other function is。 At the moment。
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果我现在在这个基础上使用之前和之后，这似乎有效。假设我现在想把三和十相加。哎呀。然后我们实际上得到了一个错误。它所说的是`wrapper`。所以让我们记住，看看这里，我们在这里有之前和之后，`wrapper`。这就是内部函数。因此这实际上就是另一个函数目前的样子。
- en: it takes just one positional argument， but we gave it to。 So the one positional
    argument that it talks about there is text as we have here。 So what we actually
    did with this before and after was that we really tailored it very much to the。
    print function that we have been using in our examples。
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这只需要一个位置参数，但我们把它给了。所以这里提到的那个位置参数是文本，就像我们这里有的那样。我们之前和之后所做的就是，我们确实把它非常量身定制成了我们在示例中使用的`print`函数。
- en: Or the grid function or any other that just takes in one string argument。 Typically
    for your decorators， you want them to be much more general and。 able to kind of
    handle most any function that makes sense。 So how can we do that？
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 或者是`grid`函数或任何其他只接受一个字符串参数的函数。通常对于你的装饰器，你希望它们更通用，能够处理大多数合理的函数。那么我们该如何做到呢？
- en: There is a concept in Python that is called unpacking of lists。 and it's used
    to kind of have an optional number of parameters。 So typically it will look something。
    like。 As an example here， the usual name for the arguments that we use here is，
    arcs and quarks。 I'll talk about what those are in a minute， but let me just show
    you how this thing works。
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中有一个叫做列表解包的概念。它用于处理可选数量的参数。通常它的形式看起来像这样。作为这里的一个例子，我们使用的参数的常见名称是`arcs`和`quarks`。我一会儿会讲讲它们是什么，但让我先展示一下这个东西是怎么工作的。
- en: So my perimeters function here is just printing out its parameters really。 So
    what I'm doing here。 I'm just using a little bit of f-string magic that's available
    in 3/8 that。 if you throw in an equal sign， you can use it for simple debugging
    text like this。 So this prints out what's the value of arcs， what's the value
    of quarks that we define here。
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我这里的参数函数只是打印出它的参数。因此我在这里做的是，利用在 3/8 中可用的一点 f-string 魔法，如果你放入等号，可以用作简单的调试文本。所以这会打印出弧的值，以及我们在这里定义的夸克的值。
- en: And you can see actually the special thing with these is not their names。 So
    this arcs here could really be called anything。 The special thing is the star
    in front。 And similarly， for the quarks， it's the two stars in front。 So what
    do these things do？
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，实际上这些特殊之处不在于它们的名称。所以这些弧可以称为任何东西。特别之处在于前面的星号。同样，对于夸克，它们前面有两个星号。那么这些东西有什么用呢？
- en: So let's say that I have， something like this instead。 So what it does is that
    it just eats up parameters that you pass， into the function。 At the ones with
    the one star， so the arcs just takes any of the parameters here。 that you have
    not named。 So they're just passed in positionally。 So you can see one and two。
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我有这样的东西。它的作用是消耗你传递给函数的参数。对于有一个星号的参数，弧只接受你未命名的任何参数。所以它们只是按位置传入。你可以看到一和二。
- en: passed in here as a tuple。 And then anything that you passed in as name arguments
    or keyword arguments。 is stored in the kw or quarks as a dictionary。 But what
    this does for us is just give us an opportunity to make our before and after。
    the creator much more general。 So let's see。 I'll just post this one also over
    here。
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 作为元组传入这里。然后任何你作为名称参数或关键字参数传入的东西，都存储在 kw 或夸克中作为字典。但这对我们来说只是给了我们一个机会，使我们的前后创造者变得更通用。所以我们来看一下。我也会把这个发到这里。
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_45.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_45.png)'
- en: And then let's see。 So if I now want to rewrite my before and after。
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们来看一下。如果我现在想重写我的前后。
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_47.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_47.png)'
- en: and kind of make it accept any kind of argument， what I can do then is just
    change my wrapper。 So I'll have arcs and the keyword arcs quarks for the wrapper。
    And then when I call the function。 I'll just call the function with the same arcs
    and quarks。 Again with the stars。 And the meaning of the stars is slightly different
    in the two cases essentially。
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 并且使其接受任何类型的参数，我可以做的就是改变我的包装器。所以我会有弧和关键字弧夸克作为包装器。然后当我调用这个函数时，我会用相同的弧和夸克来调用它。再一次使用星号。在这两种情况下，星号的含义稍有不同。
- en: So this in the first， one when they're used when you define the function that's
    kind of collecting the arguments for you。 And then down here it's exploding in
    the back essentially。 But what this allows us to do now is that if I redecorate
    my adder with this new before and after。 function， that means that I should now
    be able to actually call the adder without getting the error。
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这是第一个，当你定义函数时，它会为你收集参数。然后这里本质上是爆炸的。但这让我们现在可以重新装饰我的加法器，使用这个新的前后函数，这意味着我现在应该能够调用加法器，而不会出现错误。
- en: that we had earlier。 Because now this three and 10 are passed into this arcs。
    So that would be。 a tuple that is then exploded there and then really passed down
    to our function。 So that's definitely much better。 One thing is still missing
    though。 You can see here our adder。 Did the before it did the after。 But the actual
    return value from adder is lost。
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们之前提到的这三个和十个被传递到这个弧中。所以那将是一个元组，然后在那里被爆炸，然后真正传递到我们的函数中。所以这显然好多了。但仍然有一件事缺失。你可以看到这里我们的加法器。做了之前的操作，做了之后的操作。但加法器的实际返回值丢失了。
- en: And where did the return value go？ Well， again， let's see if we can figure this
    one out。 So adder。 is really just this wrapper function。 And if we look closely
    at the wrapper function we have here。 we can see that the wrapper doesn't return
    anything at all。 So what happens then is that it implicitly， returns none。 So
    I guess if I were to print my adder。
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值去哪儿了？好吧，让我们看看是否能搞明白。所以加法器实际上只是这个包装函数。如果我们仔细看这里的包装函数，我们可以看到包装器根本没有返回任何内容。所以发生的事情是，它隐式地返回了
    None。所以我想如果我打印我的加法器。
- en: you can see here that it prints out none。 So， because wrapper returns none。
    that kind of becomes the return value of our decorated function。 So that's not
    good。 So we also want to make sure that our decorator is usually at least return。
    the value from the function。 So the only thing we need to do then is just make
    sure that we。
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里看到它打印出 none。所以，因为 wrapper 返回 none。这变成了我们装饰函数的返回值。这不好。所以我们还想确保我们的装饰器通常至少返回。函数的值。所以我们需要做的唯一事情就是确保我们。
- en: capture the return value from the function。 So I'll go in again and edit my
    before and after。 And in this case， I'll， since we're doing something after recalling
    the function。 I want to capture the return value of the function。 And then once
    we're done with our after stuff。 I can just pass that return value out like this。
    So then if I redecorate one more time and run our adder。
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 捕获函数的返回值。所以我再次进入并编辑我的 before 和 after。在这种情况下，因为我们在调用函数后做了一些事情。我想捕获函数的返回值。然后在我们完成
    after 的内容后。我可以像这样传递该返回值。所以如果我再装饰一次并运行我们的 adder。
- en: you can see that it prints out， before it prints out after and then it returns
    13。 So the output here doesn't really show this， but let's say I do this instead。
    then it becomes clear what's happening。 You can see it prints out。 before it prints
    out after and then the result has been returned from either。 So now we have。
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到它打印出，先打印出 before，然后打印出 after，最后返回 13。所以这里的输出并没有真正显示这一点，但假设我这样做，然后事情变得清晰了。你可以看到它打印出，先打印
    out before，然后打印 out after，最后返回了结果。所以现在我们有。
- en: a decorator that can really handle most functions at least。 It will kind of
    take in any kind of。 argument and it will return the value from the function。
    It just does whatever it wants to do。 Before and after it calls the function。
    So I'll store our latest version of before and after just here out on the right。
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 一个装饰器可以处理大多数函数，至少。它将接受任何类型的参数，并返回函数的值。它在调用函数之前和之后做它想做的事情。所以我会在这里右侧存储我们最新版本的
    before 和 after。
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_49.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_49.png)'
- en: And then we have a second exercise。
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们有第二个练习。
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_51.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_51.png)'
- en: And this is kind of just to see that we can。
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是为了看看我们可以。
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_53.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_53.png)'
- en: handle the return values and those kind of things。 So essentially it's also
    quite straightforward。 It's right the decorator that runs the decorated function
    twice。 and then returns a two tuple with both the return values。 So in this example
    that's down here。 I call the decorator do twice and I applied it to a function
    I'll just call roll dice。
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 处理返回值和那些东西。所以本质上这也相当简单。它是一个装饰器，运行被装饰的函数两次，然后返回一个包含两个返回值的元组。所以在这个例子中就是下面这个。我调用了装饰器
    do twice，并将其应用到一个我称之为 roll dice 的函数上。
- en: which just returns one random integer between one and six。 And then you can
    see if I actually。 call roll dice now with decorated do twice， you can see that
    I actually get two random numbers。 So that happens because the decorator runs
    my function twice and returns both values here。 So that's exercise two。 I'll go
    with it then I'll give you a couple of minutes and if you find。
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 它只是返回一个介于一和六之间的随机整数。然后你可以看到如果我现在调用 roll dice，使用装饰器 do twice，你会发现我实际上得到了两个随机数。这是因为装饰器运行了我的函数两次，并返回了两个值。所以这是第二个练习。我将继续进行，然后给你几分钟，如果你找到。
- en: a good answer just post it on the Google form that the same the same link is
    the previous one。 [ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence
    ]， [ Silence ]， [ Silence ]。 [ Silence ]， [ Silence ]， [ Silence ]， [ Silence
    ]。
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的答案就直接在 Google 表单上发布，链接与之前的相同。[沉默]，[沉默]，[沉默]，[沉默]，[沉默]，[沉默]，[沉默]。[沉默]，[沉默]，[沉默]，[沉默]。
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_55.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_55.png)'
- en: '[ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence
    ]， [ Silence ]。 [ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence
    ]， [ Silence ]， [ Silence ]。 [ Silence ]。'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '[沉默]，[沉默]，[沉默]，[沉默]，[沉默]，[沉默]，[沉默]。[沉默]，[沉默]，[沉默]，[沉默]，[沉默]，[沉默]，[沉默]。[沉默]。'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_57.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_57.png)'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_58.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_58.png)'
- en: '[ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence
    ]， [ Silence ]。 [ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]。'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '[ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]。 [ 沉默 ]， [ 沉默 ]， [ 沉默
    ]， [ 沉默 ]。'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_60.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_60.png)'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_61.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_61.png)'
- en: '[ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence
    ]， [ Silence ]。 [ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]。'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '[ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]。 [ 沉默 ]， [ 沉默 ]， [ 沉默
    ]， [ 沉默 ]。'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_63.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_63.png)'
- en: '[ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence
    ]， [ Silence ]。 [ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence
    ]， [ Silence ]， [ Silence ]。'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '[ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]。 [ 沉默 ]， [ 沉默 ]， [ 沉默
    ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]。'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_65.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_65.png)'
- en: '[ Silence ]。'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '[ 沉默 ]。'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_67.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_67.png)'
- en: '[ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence
    ]。'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '[ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]。'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_69.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_69.png)'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_70.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_70.png)'
- en: '[ Silence ]。'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '[ 沉默 ]。'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_72.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_72.png)'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_73.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_73.png)'
- en: '[ Silence ]。'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '[ 沉默 ]。'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_75.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_75.png)'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_76.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_76.png)'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_77.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_77.png)'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_78.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_78.png)'
- en: '[ Silence ]。'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '[ 沉默 ]。'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_80.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_80.png)'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_81.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_81.png)'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_82.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_82.png)'
- en: '[ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence
    ]， [ Silence ]。'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '[ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]。'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_84.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_84.png)'
- en: '[ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence
    ]， [ Silence ]。 [ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence
    ]， [ Silence ]， [ Silence ]。 [ Silence ]， [ Silence ]， [ Silence ]， [ Silence
    ]， [ Silence ]， [ Silence ]， [ Silence ]。 [ Silence ]， [ Silence ]， [ Silence
    ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]。'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '[ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]。 [ 沉默 ]， [ 沉默 ]， [ 沉默
    ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]。 [ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默
    ]， [ 沉默 ]。 [ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]。'
- en: '[ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence
    ]， [ Silence ]。 [ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]。'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '[ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]。 [ 沉默 ]， [ 沉默 ]， [ 沉默
    ]， [ 沉默 ]。'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_86.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_86.png)'
- en: '[ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence
    ]， [ Silence ]。 [ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence
    ]， [ Silence ]， [ Silence ]。 [ Silence ]， [ Silence ]。'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '[ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]。 [ 沉默 ]， [ 沉默 ]， [ 沉默
    ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]。 [ 沉默 ]， [ 沉默 ]。'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_88.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_88.png)'
- en: '[ Silence ]， [ Silence ]。'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '[ 沉默 ]， [ 沉默 ]。'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_90.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_90.png)'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_91.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_91.png)'
- en: '[ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence
    ]， [ Silence ]。 [ Silence ]， [ Silence ]， [ Silence ]。'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '[ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]。 [ 沉默 ]， [ 沉默 ]， [ 沉默
    ]。'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_93.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_93.png)'
- en: '[ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence
    ]， [ Silence ]。'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '[ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]， [ 沉默 ]。'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_95.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_95.png)'
- en: '[ Silence ]。'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '[ 沉默 ]。'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_97.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_97.png)'
- en: '[ Silence ]， [ Silence ]。'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '[ 沉默 ]， [ 沉默 ]。'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_99.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_99.png)'
- en: '[ Silence ]， [ Silence ]。'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '[ 沉默 ]， [ 沉默 ]。'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_101.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_101.png)'
- en: '[ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]。'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '[ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]。'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_103.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_103.png)'
- en: '[ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence
    ]， [ Silence ]。 [ Silence ]， [ Silence ]。'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '[ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]。 [ 安静 ]， [ 安静 ]。'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_105.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_105.png)'
- en: '[ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence
    ]， [ Silence ]。 [ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence
    ]， [ Silence ]， [ Silence ]。 [ Silence ]， [ Silence ]， [ Silence ]， [ Silence
    ]， [ Silence ]， [ Silence ]， [ Silence ]。 [ Silence ]， [ Silence ]， [ Silence
    ]， [ Silence ]， [ Silence ]。'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '[ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]。 [ 安静 ]， [ 安静 ]， [ 安静
    ]， [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]。 [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静
    ]， [ 安静 ]。 [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]。'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_107.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_107.png)'
- en: '[ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]。'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '[ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]。'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_109.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_109.png)'
- en: '[ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence
    ]， [ Silence ]。 [ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence
    ]， [ Silence ]， [ Silence ]。 [ Silence ]， [ Silence ]， [ Silence ]， [ Silence
    ]， [ Silence ]， [ Silence ]。'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '[ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]。 [ 安静 ]， [ 安静 ]， [ 安静
    ]， [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]。 [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静
    ]。'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_111.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_111.png)'
- en: '[ Silence ]。'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '[ 安静 ]。'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_113.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_113.png)'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_114.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_114.png)'
- en: '[ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence
    ]， [ Silence ]。 [ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence
    ]， [ Silence ]， [ Silence ]。 [ Silence ]。'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '[ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]。 [ 安静 ]， [ 安静 ]， [ 安静
    ]， [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]。 [ 安静 ]。'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_116.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_116.png)'
- en: '[ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence
    ]， [ Silence ]。 [ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence
    ]， [ Silence ]， [ Silence ]。 [ Silence ]， [ Silence ]， [ Silence ]， [ Silence
    ]， [ Silence ]， [ Silence ]， [ Silence ]。'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '[ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]。 [ 安静 ]， [ 安静 ]， [ 安静
    ]， [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]。 [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静
    ]， [ 安静 ]。'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_118.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_118.png)'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_119.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_119.png)'
- en: '[ Silence ]， [ Silence ]。'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '[ 安静 ]， [ 安静 ]。'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_121.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_121.png)'
- en: '[ Silence ]。'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '[ 安静 ]。'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_123.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_123.png)'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_124.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_124.png)'
- en: '[ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence
    ]， [ Silence ]。 [ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence
    ]， [ Silence ]， [ Silence ]。 [ Silence ]， [ Silence ]， [ Silence ]， [ Silence
    ]， [ Silence ]， [ Silence ]， [ Silence ]。 [ Silence ]， [ Silence ]， [ Silence
    ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]。'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '[ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]。 [ 安静 ]， [ 安静 ]， [ 安静
    ]， [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]。 [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静
    ]， [ 安静 ]。 [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]。'
- en: '[ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]。'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '[ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]。'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_126.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_126.png)'
- en: '[ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]。'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '[ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]。'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_128.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_128.png)'
- en: '[ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]。'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '[ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]。'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_130.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_130.png)'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_131.png)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_131.png)'
- en: '[ Silence ]， [ Silence ]。'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '[ 安静 ]， [ 安静 ]。'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_133.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_133.png)'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_134.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_134.png)'
- en: '[ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence ]， [ Silence
    ]。'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '[ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]， [ 安静 ]。'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_136.png)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_136.png)'
- en: '[ Silence ]。'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '[ 安静 ]。'
- en: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_138.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bea56f8bc14b9ea3760a592a2d1f384c_138.png)'
