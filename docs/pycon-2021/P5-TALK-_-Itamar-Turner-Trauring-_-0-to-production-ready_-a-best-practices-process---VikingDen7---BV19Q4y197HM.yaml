- en: P5：TALK _ Itamar Turner-Trauring _ 0 to production-ready_ a best-practices process
    - VikingDen7 - BV19Q4y197HM
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P5：演讲 _ Itamar Turner-Trauring _ 从零到生产就绪的最佳实践流程 - VikingDen7 - BV19Q4y197HM
- en: Hi， my name is Itamar Turner-Troning。 Today I'm going to be talking about best
    practices。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 嗨，我的名字是Itamar Turner-Troning。今天我将讨论最佳实践。
- en: '![](img/9ed0c8b1a44b2ea99d841307a88faa9c_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9ed0c8b1a44b2ea99d841307a88faa9c_1.png)'
- en: process for taking your application， Python application， and packaging it for
    Docker。 using it for production。 You can find more on my website， pythonspeed。com。
    The thing。 about Docker packaging is that it's quite complicated。 And the first
    reason is history。 Docker builds on technologies that go back 50 years to the
    original Unix designs， for， examples。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的应用程序，Python应用程序，打包为Docker的过程，供生产使用。你可以在我的网站pythonspeed.com上找到更多信息。Docker打包的事情是相当复杂的。第一个原因是历史。Docker建立在追溯到50年前的原始Unix设计的技术之上，例如。
- en: signals。 And then all these technologies that got built over the next 50 years，
    networking， Python。 and so on。 And in order to make your packaging work correctly，
    you need to deal。 with all of these technologies intersecting in one place。 All
    of the design decisions。 that led into them， some of them have design mistakes，
    these things happen。 And so all。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 信号。接下来的50年里，所有这些技术的构建，包括网络、Python等。为了让你的打包工作正常，你需要处理所有这些技术在一个地方的交汇。所有的设计决策，导致它们的某些设计错误，这种事情时有发生。因此所有。
- en: of these different things intersecting this one place。 And so that just makes
    it pretty。 complicated。 The other reason the Docker packaging is complicated is
    because it's an intersection。 of multiple processes within your organization。
    So when you're writing software， someone has。 to write the actual code， you're
    going to test your software。 Once it's packaged， it， gets deployed。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这些不同的事物在一个地方交汇，这使得事情变得相当复杂。Docker打包复杂的另一个原因是它在你组织内部多个流程的交集。因此，当你编写软件时，必须有人编写实际的代码，你将对软件进行测试。一旦打包，它就会被部署。
- en: it runs in production， you may have to upgrade your software with limited， downtime。
    When things go wrong， you have bug reporting and your feedback and you want to。
    know what's going on in production。 And packaging interacts with all of these
    different processes。 And so that's another source of complexity。 Because instead
    of being this isolated thing， it。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 它在生产中运行，你可能需要在有限的停机时间内升级软件。当事情出错时，你有错误报告和反馈，你想知道生产中发生了什么。打包与所有这些不同的流程相互作用。这也是复杂性的另一个来源。因为它不是一个孤立的事情。
- en: packaging interacts with almost everything you do with your software。 And so
    the result。 of this complexity is that I can't actually teach you how to do production
    grade， Docker。 packaging within a 25 minute talk。 Just in terms of best practices，
    I have a personal。 list that grows over time right now， it's up to more than 70
    best practices keeps growing。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 打包几乎与你对软件所做的所有事情都有关系。因此，这种复杂性的结果是，我实际上无法在25分钟的演讲中教你如何进行生产级的Docker打包。就最佳实践而言，我有一个个人清单，随着时间的推移不断增加，目前已经超过70条最佳实践，并持续增长。
- en: I teach this as a training class， it's day and a half and only covers some of
    these best， practices。 It is not feasible to cover all the details you need to
    know。 So instead， in this talk。 what I'd like to cover and help you learn is the
    big picture。 And in particular。 when you're working on packaging， this is the
    case of anything you're doing with your， software。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我将这作为一个培训课程，持续一天半，仅覆盖其中一些最佳实践。无法覆盖你需要了解的所有细节。因此，在这次演讲中，我想覆盖并帮助你了解大局。特别是当你处理打包时，这是你在软件中所做的任何事情的案例。
- en: you only have a limited amount of time to do any particular task。 And at any，
    point。 you might get called away， you may get interrupted， maybe it's a critical
    bug。 maybe something else you have to deliver。 And so it's not because there's
    a complex process。 you want to necessarily be able to finish it in one go。 And
    so what I'm going to talk。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你只有有限的时间来完成任何特定任务。在任何时候，你可能会被叫走，可能会被打断，也许是一个关键的错误，或者其他你必须交付的事情。因此，不是因为有一个复杂的过程，你希望能够一次性完成它。所以我要谈。
- en: about today is a process for decorating， decorizing your application in a process
    that。 is iterative。 And so you're going to go through multiple steps and each
    step you're going。 to come up with something that's basically working。 And it's
    prioritized， so you do the。 most important parts first。 And then each step builds
    on the previous steps。 And so the。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 今天讨论的是一种装饰、装饰化你的应用程序的过程，这个过程是迭代的。所以你将经历多个步骤，在每个步骤中，你会得到基本上可用的东西。这个过程是有优先级的，因此你首先处理最重要的部分。然后每一步都建立在前面的基础上。
- en: idea is you go through this logical progression where each step you're improving
    your document。 is and you're improving your packaging process。 And if you're interrupted
    at any point， you're。 at a good stopping point。 And so this is the sort of big
    picture process。 And this is how。 the rest of the talk is going to be structured
    going through each of these steps， explaining。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这个想法是，你经历一个逻辑推进的过程，在每一步中你都在改善文档和包装过程。如果在任何时候被打断，你都在一个好的停顿点。因此，这是一个大致的过程。这就是接下来演讲的结构，每一步都会解释。
- en: why that is a next logical step to do。 I'll probably give an example of one
    of the best， practices。 Again， I'm not covering all the best practices。 At the
    end of the talk， I'll。 give you links to some resources where you can learn a
    lot more about the details。 This。 is more about the big picture， what you should
    do first。 And this is a sort of generic order。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我可能会举一个最佳实践的例子。再次说明，我并不涵盖所有最佳实践。在演讲结束时，我会给你一些资源的链接，你可以在这些链接中了解更多细节。这更关乎整体思路，你应该首先做什么。这是一个通用的顺序。
- en: which I've chosen that I think will work for most people。 And it may be that
    in your particular。 case， you might want to order it differently。 But for example，
    it is not uncommon for people。 to look at their first pass a Docker image and
    say， Oh， no， this is a two gigabyte image。 It takes 20 minutes to build。 And so
    I'm going to spend a bunch of time making it faster。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择了我认为适合大多数人的顺序。也许在你的特定情况下，你可能想要以不同的顺序进行。但例如，通常人们会查看他们的第一版Docker镜像并说，哦，不，这是一个两千兆字节的镜像，构建需要20分钟。所以我要花一些时间来加快这个过程。
- en: and making the image smaller。 And that's a fine thing to do。 And we'll get to
    that。 The。 problem is if you do that first， you might then run out of time and
    then have to go work。 on something else and you've created an insecure image。
    And so security in for most applications。 is probably more important than having
    a small image。 And so this is a prioritization order。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 还有让镜像更小。这是一个不错的做法，我们会讨论这个问题。问题在于，如果你首先这样做，可能会耗尽时间，然后不得不去处理其他事情，结果你创建了一个不安全的镜像。因此，对于大多数应用程序来说，安全性可能比小镜像更重要。因此，这是一个优先顺序。
- en: And eventually you should try to get through everything。 But we do want to start
    with the。 most important things first。 And so this is my proposal that you can
    then think through， and say。 what is the most important order for my particular
    application， my particular， circumstances。 And the first step when you're packaging
    your application for Docker is to。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，你应该尝试涵盖所有内容。但我们确实想从最重要的事情开始。因此，这是我的提议，你可以考虑一下，为你的特定应用程序和特定情况确定最重要的顺序。当你为Docker打包应用程序时，第一步是。
- en: just get something working。 If your application doesn't run， then the whole
    exercise is pointless。 Like you can have a secure image and builds quickly and
    fast and it has all the， you know。 configuration that you need。 But if it doesn't
    actually run your application， the whole exercise。 is a waste of time。 And so
    the first thing you have to do is figure out how to get your。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要让某些东西能运行。如果你的应用程序无法运行，那么整个过程就毫无意义。你可以拥有一个安全的镜像，构建快速且具备所有你需要的配置，但如果它实际上不能运行你的应用程序，那整个过程都是浪费时间。因此，第一件事是搞清楚如何让你的应用程序运行。
- en: application working。 And when you're doing that， you'll be thinking about things
    like。 how do you configure your application？ Docker encourages you to configure
    things via environment。 variables。 But some， depending on your runtime environment，
    mounting configuration files。 maybe another thing you can do。 Kubernetes makes
    that easier。 You want to think about。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让应用程序能够运行。当你这样做时，你会考虑像如何配置你的应用程序的问题。Docker鼓励你通过环境变量配置内容。但有些情况，根据你的运行环境，挂载配置文件可能是另一种选择。Kubernetes使得这一点更容易。你需要考虑为什么这是下一步合理的选择。
- en: which ports are going to be public， which ports are going to be private。 So
    you're going through。 this decision process of how your application is going to
    interact with Docker， but also you're。 just making it work at all。 So installing
    the right dependencies and installing the packages。 making sure it starts up，
    that sort of thing。 So here's an example Docker file。 It's sort of。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 哪些端口将是公开的，哪些端口将是私有的。你需要经历这个决策过程，以确定你的应用程序如何与 Docker 互动，同时确保它能正常工作。因此，安装正确的依赖项和软件包，确保它能够启动，等等。以下是一个示例
    Docker 文件。
- en: for a simple application， like this is the most basic Docker file you can write。
    And it's not。 the best packaging ever。 But this is just step one， we have five
    more steps。 And by the time we're。 done， we can do better than this。 And once
    you have something working， the next step is to work。 on security。 Before you
    can deploy your application anywhere， you really want it to be secure。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个简单的应用程序，这就是你能写的最基本的 Docker 文件。虽然这并不是最好的打包方式，但这只是第一步，我们还有五个步骤。当我们完成时，我们可以做得比这更好。一旦你有了一个可以工作的东西，下一步就是关注安全性。在你可以在任何地方部署应用程序之前，你真的希望它是安全的。
- en: And for， that matter， before you push your image to a public image registry。
    before even leaves your， computer， you want it to be secure。 For example。 if you
    have some secrets that you use to build， your image。 you don't want those secrets
    that you leaked in your image。 And so before you can。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在你将镜像推送到公共镜像注册表之前，在它离开你的计算机之前，你希望它是安全的。例如，如果你有一些秘密用于构建镜像，你不希望这些秘密泄露在镜像中。因此，在你可以。
- en: really do anything with your image， before you can actually make any use of
    it。 for most applications， security is the next step。 And here's an example。 Again。
    there are many best practices I can't cover， them all。 but I'll give you some
    links at the end of the talk。 So here's an example of one of the。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在你能真正使用镜像之前，几乎无法对其做任何事情。对于大多数应用程序，安全性是下一步。这是一个示例。再次说明，有许多最佳实践我无法覆盖所有，但在演讲结束时我会给你一些链接。因此，这里是其中之一的示例。
- en: best practices for security。 When you run a Docker image， by default， it's going
    to run as root。 And it， while it's true that containers provide a measure of isolation，
    and it's true that root。 inside a container is typically more restricted than
    root on the host machine。 This is only true。 up to a point。 And running as root
    does make your container that much more powerful in terms of。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳安全实践。当你运行一个 Docker 镜像时，默认情况下，它会以 root 用户身份运行。尽管容器确实提供了一定程度的隔离，并且容器内的 root
    用户通常比主机上的 root 用户受到更多限制，但这一点仅在某种程度上是正确的。而以 root 用户身份运行确实让你的容器在某些方面更强大。
- en: what it could potentially do。 And so an attacker manages somehow to gain access
    to your container。 and take it over。 If they're， they've taken over a container
    running as root， they have a lot more。 access and it'll be easier for them to
    then escape the container or take over the whole host machine。 So it's a good
    best practice not to run your container as root。 And so in this Docker file。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者潜在能做的事情。因此，如果攻击者以某种方式获得对你的容器的访问并接管它。如果他们接管了以 root 身份运行的容器，他们将获得更多的访问权限，逃离容器或接管整个主机机器将更容易。因此，不以
    root 身份运行容器是一个好的最佳实践。因此在这个 Docker 文件中。
- en: what we're doing is we're creating a new user called app user。 And then we're
    using the user command， the Docker file to say all commands after this are going
    to run as that user。 And so when you do， pip install， it's going to run as a user。
    And when you eventually start the resulting image and start， up your process。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所做的是创建一个新的用户，称为 app 用户。然后我们使用用户命令，告诉 Docker 文件后面的所有命令都将以该用户身份运行。因此，当你执行 pip
    install 时，它将以该用户身份运行。当你最终启动生成的镜像并启动你的进程时。
- en: it will run as the new user。 And so now you have an image that by default， it，
    doesn't run as root。 And so your image is just inherently safer。 And it doesn't
    take very much， work。 but it's a good idea。 And so beyond just the right， right，
    configuring your application， files。 like a Docker file， your startup script and
    so on， part of packaging is also creating， processes。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 它将作为新用户运行。因此现在你有一个默认情况下不以 root 身份运行的镜像。因此，你的镜像在本质上更安全。这并不需要太多工作，但这是个好主意。因此，除了正确配置你的应用程序文件，例如
    Docker 文件、启动脚本等，打包的一部分也是创建流程。
- en: organizational processes。 For example， when it comes to security， a process
    you really。 need is a process for figuring out what to do about security updates。
    And the issue is that a。 Docker image is immutable。 Every time you start it up，
    the container starts with the exact same。 file system。 And so security updates
    require typically a new image。 And in some sense， you can。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 组织流程。例如，涉及安全时，你真正需要的是一个关于如何处理安全更新的流程。问题是，Docker 镜像是不可变的。每次启动时，容器的文件系统都是完全相同的。因此，安全更新通常需要一个新镜像。从某种意义上说，你可以。
- en: work around this， but like the immutable artifacts are actually one of the features
    of Docker， they。 make it easy to reason about in many ways。 And so when security
    updates come out， you need to A。 know this hat is happening， like you need to
    know that there is a bug in open SSL that might。 allow someone to exploit your
    server。 And then you need to update your image that gets the latest。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题，但不可变工件实际上是 Docker 的一个特性，它们在许多方面使推理变得简单。因此，当安全更新发布时，你需要知道这件事的发生，像你需要知道
    OpenSSL 中可能存在的漏洞会让某人利用你的服务器。然后你需要更新你的镜像，以获取最新的内容。
- en: version of open SSL and rebuild the image， then you have to redeploy your application
    if it's a。 server of some sort。 And so this is not a sometimes the thing you can
    manage with just some configuration。 but not always。 And it is not just about
    configuring your files。 This is an ongoing process。 is a thing you're going to
    have to continue doing， or even beyond the time where you're doing up。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 版本的 OpenSSL 并重建镜像后，如果是某种服务器，你必须重新部署应用程序。因此，这并不总是你可以仅通过一些配置来管理的事情，而不仅仅是配置文件。这是一个持续的过程，你需要继续进行，甚至在你完成工作之后。
- en: front packaging。 Like once you've committed to packaging， you're also committing
    to have a process。 for security updates。 And so it's the thing to keep in mind
    that you're not just going to。 this is not a write some configuration files and
    you're done， you need ongoing processes。 or you're going to suffer in this case，
    lack of security。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 前期打包。一旦你承诺进行打包，你也承诺要有一个安全更新的过程。因此，重要的是要记住，这不仅仅是编写一些配置文件就完成了，你需要持续的过程，否则在这种情况下，你将面临安全缺失的问题。
- en: So once you've packaged your image securely， the next step is to try to automate
    builds。 integrate with your CI system。 And the reason is that you don't want at
    this point， you've been。 building images manually， and that's fine for like testing。
    But for real software development。 where you're continuously working on the software，
    and maybe you have a team of people working on。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，一旦你安全地打包了镜像，下一步就是尝试自动化构建，与 CI 系统集成。原因在于此时你不想继续手动构建镜像，这对测试来说可以，但对于真实的软件开发而言，你可能会有一个团队在持续工作。
- en: the software， you want to automate this。 So you don't have to teach your teammates
    how to build。 a Docker image and give all them the credentials of the image registry。
    You want it to just automatically， work。 And so next you want to integrate with
    the build system。 And so the simplest process， way you can do it is like the shell
    script。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 软件，你希望自动化这一过程。因此，你不需要教你的队友如何构建 Docker 镜像，并给予他们镜像注册表的所有凭证。你希望它能够自动工作。因此接下来你要与构建系统集成。最简单的方式是像
    Shell 脚本那样。
- en: which you run automatically in every check into your， main branch， where you
    run the tests。 build the image， and then push the image to registry。 So that's
    sort of the simplest possible automated build。 Beyond that， however。 you again
    need to think about how you're going to integrate with your organizational processes。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你在主分支的每次检查中自动运行的测试，构建镜像，然后将镜像推送到注册表。因此，这就是最简单的自动化构建。然而，超越这一点，你仍然需要考虑如何与你的组织流程集成。
- en: Their packaging interacts with how your team develops their code。 For example，
    testing。 are you going to be using a Docker image to run integration tests， then
    you have to figure out。 how that fits in CI。 If you have multiple branches， however。
    multiple branches going to interact with， your Docker build。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 它们的打包与团队如何开发代码互动。例如，测试。你是否会使用 Docker 镜像运行集成测试，那么你必须弄清楚这如何与 CI 配合。如果你有多个分支，多个分支将如何与
    Docker 构建互动。
- en: are you going to have images for all the branches or just your production branch。
    you might want to start thinking about like， is it going to be a bottleneck in
    which case。 performance we'll talk about later is going to be an issue。 And so
    as an example of a best practice。 it's quite common to have feature branches for
    particular features。 And then you open a pull。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你会为所有分支还是仅为生产分支生成镜像？你可能需要开始考虑，是否会成为瓶颈，在这种情况下，稍后我们会讨论性能，这将成为一个问题。因此，作为最佳实践的示例，为特定功能拥有功能分支是相当普遍的。然后你打开一个拉取。
- en: request and run the test and then merge that pull request into the main branch。
    So imagine you're。 building an image for a feature branch 123 more cowbell for
    ticket number 123。 And you want to build a Docker image for every pull request
    because you want to run integration。 tests using the Docker images。 You don't
    want your Docker image from the feature branch to overwrite。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 请求并运行测试，然后将该拉取请求合并到主分支中。假设你正在为功能分支 123 “更多铃铛”构建镜像，针对票据编号 123。你希望为每个拉取请求构建一个
    Docker 镜像，因为你希望使用 Docker 镜像运行集成测试。你不希望功能分支的 Docker 镜像覆盖。
- en: your Docker image from the main branch so that you really what you want to do
    is you want to have。 different names of different Docker images depending what
    branch of the code they're from。 And so here's an example of how you might do
    that where in your build script， you figure out what。 the current get branches
    using this get command that got off of stack overflow。 And then when you。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 Docker 镜像来自主分支，因此你真正想要做的是根据代码的不同分支，拥有不同名称的 Docker 镜像。下面是一个示例，说明你如何在构建脚本中，使用这个来自
    Stack Overflow 的 git 命令，找出当前的 git 分支。然后，当你。
- en: build your image， the part after the colon is the tag is taken from the name
    of the branch。 So if。 your branches main branch， it'll be your image colon main。
    And if it's branch 123 for more cowbell。 it'll be your image colon 123 more cowbell。
    So just by looking at the Docker image。 now you'll know a branch you came from
    and moreover。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 构建你的镜像，冒号后面的部分是标签，取自分支的名称。因此，如果你的分支是主分支，它将是你的镜像：主分支。如果是 123 分支“更多铃铛”，它将是你的镜像：123
    更多铃铛。因此，仅通过查看 Docker 镜像，你现在就能知道它来自哪个分支，此外。
- en: Docker images from your feature branches won't break。 won't overwrite your Docker
    images for production。 Once you're building images automatically。 you're going
    to start a queue with any more images as， you build them。 You may be running in
    production at this point。 So you can have more errors being。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 来自你的功能分支的 Docker 镜像不会破坏，不会覆盖你用于生产的 Docker 镜像。一旦你开始自动构建镜像，你将开始排队，随着你构建它们而生成更多的镜像。此时你可能正在生产环境中运行。因此，你可能会出现更多的错误。
- en: required from production。 So you want debugability。 You want your images to
    start up and shut down。 reasonably and maybe easier to monitor because they're
    running in production。 And so that's a good。 next step operational correctness
    and debug ability， make things work well in production。 And make them easier to
    debug when things go wrong。 So here's an example。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 需要从生产环境中提取。因此你希望可调试性。希望你的镜像能够合理地启动和关闭，并且可能更容易监控，因为它们运行在生产环境中。因此，这就是一个很好的。下一步是操作正确性和可调试性，使其在生产中运行良好，并在出现问题时更易于调试。下面是一个示例。
- en: When you have a bug in your， Python code， you're going to get a trace back if
    it's not handled with any accession handler。 And that trace back will end up in
    your lungs or maybe you have some service to。 collect all your trace backs and
    put them one place。 And so then you can look at your trace back。 and you can say，
    Oh， line 230 and the server module had a value error。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在 Python 代码中遇到错误时，如果没有使用任何异常处理程序，你会得到一个回溯。该回溯会显示在你的日志中，或者你可能有某个服务来收集所有的回溯并将它们集中到一个地方。这样你就可以查看你的回溯，并说，哦，服务器模块的第
    230 行发生了值错误。
- en: And that gives you a really good， starting point for debugging bugs。 If you
    have a bug in C code。 and remember， Python itself is， written in C， a lot of extension
    modules are written in C or C++ or Python。 If you have a bug in one of， those，
    often your programs is going to crash， just said faults。 And when it crashes，
    you're not， going to get a Python trace back， you're just going to get silence。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这为调试错误提供了一个很好的起点。如果你在 C 代码中发现错误，记住，Python 本身是用 C 编写的，很多扩展模块都是用 C、C++ 或 Python
    编写的。如果你在其中一个模块中发现错误，通常你的程序会崩溃，这就是所谓的故障。当它崩溃时，你不会得到 Python 的回溯，而只会得到沉默。
- en: And then you have no idea how to， debug it。 But Python has a feature that will
    fix this called fault handler。 And basically， all you have to do is set this environment
    variable Python fault handler。 In this case， we're setting in the Docker file
    using the end of command。 And then just by setting the environment， variable，
    when you have a seg fault。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你就不知道如何调试它。但是 Python 有一个称为故障处理程序的功能可以解决这个问题。基本上，你所要做的就是设置这个环境变量 `Python fault
    handler`。在这种情况下，我们在 Docker 文件中使用命令的末尾进行设置。然后仅仅通过设置这个环境变量，当你发生段错误时。
- en: you'll get a nice Python trace back that will show you， which package it came
    from。 So you might say， Oh， it's a matplotlib or it's your database adapter， or
    whatever。 And that can be extremely useful in debugging crashes， because instead
    of silence。 you actually know exactly where to start。 And so just like a one line
    thing in your Docker file。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你会得到一个漂亮的 Python 堆栈跟踪，显示它来自哪个包。所以你可能会说，哦，它是 `matplotlib`，或者是你的数据库适配器，或者其他的。这在调试崩溃时非常有用，因为你不再沉默，而是确切知道从哪里开始。因此，在你的
    Docker 文件中仅仅加一行代码。
- en: it'll make your life much easier when things go wrong。 So another example， when
    you start up Python。 it loads in all the dot py files and turns them into pyc
    files。 which are bytecode compilation steps。 It's not really like a C compiler。
    because it's basically one to one， but basically， it's a necessary step。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当事情出错时，这会让你的生活轻松很多。因此再举个例子，当你启动 Python 时，它会加载所有的 `.py` 文件并将其转换为 `.pyc` 文件，这些是字节码编译步骤。这并不像
    C 编译器，因为基本上是逐一对应的，但这基本上是一个必要步骤。
- en: And then Python stores the pyc files。 And next time you start up the server。
    it doesn't or the application， it doesn't have to do the compilation step and
    start up。 to be faster。 The problem is with Docker images is that they're immutable。
    The second time you run。 the run it and get a new container， that's the exact
    same file systems。 The first time you run it。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 然后 Python 会存储 `.pyc` 文件。下次你启动服务器或应用程序时，它就不必再进行编译步骤，启动会更快。问题在于 Docker 镜像是不可变的。第二次运行时，你会得到一个新的容器，而这正是相同的文件系统。第一次运行时也是如此。
- en: So if your Docker image doesn't have pyc files， your startup will be slower。
    And some applications。 it doesn't matter。 But in others， this can might be meaningful。
    You actually want to start up quickly。 And so in your Docker image。 if you care
    less about image size and more about startup time。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果你的 Docker 镜像没有 `.pyc` 文件，启动将会更慢。对于某些应用程序来说，这无关紧要。但在其他应用程序中，这可能是有意义的。你实际上希望快速启动。因此在你的
    Docker 镜像中，如果你对镜像大小不太在意，更在乎启动时间。
- en: you can use Python's compile all module and basically make sure that you've
    created pyc files for all。 your source code as part of creating the Docker image
    that will give you faster startup。 So at this point， you're just secure。 It works
    well in operational environments。 And builds are automated。 This probably doesn't
    take very long to。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 Python 的 `compileall` 模块，基本上确保在创建 Docker 镜像时为你的所有源代码创建 `.pyc` 文件，这将使你启动更快。因此在这一点上，你只是确保它在操作环境中运行良好。构建是自动化的。这大概不会花太长时间。
- en: do these initial steps if you're not distracted。 But so chances are there hasn't
    been， say， a new。 release of using Django， there hasn't been a major new release
    of Django during the week you're。 working on your Docker image for a couple of
    days。 But if you wait six months， there might be a。 major release of Django。 And
    if you wait two years， it'll definitely be a major release of Django。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有分心，请执行这些初始步骤。但是很有可能在你使用 Django 的那一周中，可能没有新的发布。在你为 Docker 镜像工作几天的过程中，Django
    可能没有进行过重要的新发布。但是如果你等六个月，可能会有一个重大的 Django 发布。如果你等两年，Django 肯定会有一个重大发布。
- en: And so you want to， if you're just always installing the latest version of Django。
    in the short term， that's fine。 But in a long term， that's going to break your
    application。 Like。 and then you'll rebuild your Docker image and suddenly it's
    using a different version of。 Django and things are going badly because incompatible。
    So you want reproducible builds。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你希望，如果你总是安装最新版本的 Django，从短期来看，这没问题。但从长远来看，这会破坏你的应用程序。然后你会重建你的 Docker 镜像，突然间它使用的是不同版本的
    Django，结果会因为不兼容而变得很糟糕。所以你希望构建是可重复的。
- en: You want to get the same image with the same packages， more or less whenever
    you rebuild it。 So that when you do upgrade， you can upgrade in a controlled manner
    rather than based on。 Django's release schedule。 So part of having reproducible
    images is having the system packages。 you rely on。 So like the glibc and open
    SSL and so on， having those be stable。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你希望在重建时，尽可能获得相同的镜像和相同的包。因此，当你升级时，你可以以一种可控的方式升级，而不是基于 Django 的发布计划。所以，拥有可复现镜像的一部分是拥有你依赖的系统包。像
    glibc 和 open SSL 等，确保它们的稳定性。
- en: And the easiest way to do that is to use a Linux base image that guarantees
    backwards。 compatibility and stability， but also gives you security updates。 So
    it could be too long-term。 support or CentOS， such as these days would be right
    ahead enterprise Linux。 And once you do that。 when you can rely on the easy thing
    to do， just install security updates。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 而最简单的方法是使用一个保证向后兼容性和稳定性的 Linux 基础镜像，同时也提供安全更新。所以它可能是长期支持版本，或者像 CentOS，这些天可以考虑企业
    Linux。一旦你做到这一点，你可以依赖于简单的事情，就是安装安全更新。
- en: and then rely on the fact that the operating system has guaranteed backwards
    compatibility。 Problem with these is they have old versions of Python typically。
    So the default I recommend is。 the official Python base images created by Docker。
    For example， Python colon 3。9 slim buster。 which means the latest mini release
    of Python 3。9 on Debian buster， which is a stable release。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 然后依赖于操作系统保证向后兼容的事实。这个问题在于，它们通常有旧版本的 Python。因此，我推荐的默认选项是由 Docker 创建的官方 Python
    基础镜像。例如，Python colon 3.9 slim buster，这意味着 Debian buster 上最新的 Python 3.9 迷你版本，这是一个稳定版本。
- en: and give me slim means a smaller version。 If you use this version， you can rely
    on the base。 image not changing out from under you， like you're not going to get
    a completely different version。 open SSL， but you can also get access to security
    updates。 And again。 reproducibility isn't just about the artifacts you're creating，
    it's also a process。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 而且给我 slim 意味着更小的版本。如果你使用这个版本，你可以依赖基础镜像不会随意更改，比如你不会得到一个完全不同的版本的 open SSL，但你也可以获取安全更新。再说一次，可复现性不仅仅关于你正在创建的工件，它也是一个过程。
- en: So if you update your dependencies， this is mostly about your Python dependencies，
    but if you're。 really paranoid， it might also be your system dependencies， like
    your apps packages or RPMs。 if you update your dependencies， the latest version
    of rebuilds， you don't have reproducibility。 You'll get a different version of
    Django without a new version of Django comes out。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果你更新你的依赖项，这主要是指你的 Python 依赖项，但如果你真的很敏感，也可能是你的系统依赖项，比如你的应用程序包或 RPM。如果你更新了你的依赖项，重建的最新版本，你将失去可复现性。你会得到一个不同版本的
    Django，而不需要新的 Django 版本发布。
- en: So you really want to pin or freeze all your dependencies using tools like PIP
    tools or poetry。 or contact。 And then whenever you rebuild your image， you'll
    be installing the same dependencies。 Then you have a new problem。 If you don't
    update， over time。 eventually running all the dependencies。 And if you wait long
    enough， you're in the situation。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你真的想要使用像 PIP tools 或 poetry，或 contact 这样的工具来固定或冻结你所有的依赖项。然后每当你重建镜像时，你将安装相同的依赖项。然后你会面临一个新问题。如果你不更新，随着时间的推移，最终会运行所有的依赖项。如果你等得够久，你就会陷入那种情况。
- en: we have to upgrade five major dependencies at， once。 And then you don't know
    what's breaking your code and it's a mess。 And so you need an。 organizational
    process where like every three months， I say。 I'm going to upgrade to the latest
    version， dependencies。 And that way， in the short term。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不得不一次性升级五个主要依赖项。然后你不知道是什么导致了你的代码出错，这是一团糟。所以你需要一个组织流程，比如每三个月，我会说，我要升级到最新版本的依赖项。这样，在短期内。
- en: you have stability or those three months， you're， using the same version of
    Django。 But because you upgrade every three months， you're never really， lagging
    behind too much。 And this is an organizational process。 It requires human intervention。
    And you。 need to plan for it and do it regularly。 The final step in the process
    is to optimize your。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你有稳定性，或者在这三个月内，你使用的是同一个版本的 Django。但因为你每三个月就升级一次，所以你并不会真正落后太多。这是一个组织过程，它需要人工干预。你需要为此做计划，并定期执行。这个过程的最后一步是优化你的。
- en: packages so they are build faster。 And images are smaller packaging。 Packaging
    takes 30 minutes。 Every time you do a pull request， you have to wait 30 minutes
    for the Docker image build。 That's going to slow your development down。 That gets
    expensive。 If you have a two-good-by， image。 it takes a long time to download。
    Again， slow things down or just cost you in bandwidth。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 包装使得构建速度更快，图像也更小。包装需要30分钟。每次你提交一个拉取请求时，都必须等待30分钟来构建Docker镜像。这会减慢你的开发进程，导致成本增加。如果你有一个大的镜像，下载会很慢。再次会拖慢进度，或者仅仅是让你在带宽上付出更多。
- en: So next step and final step is to optimize your images。 For example， in terms
    of build time。 Alpine Linux is often recommended as a base image for， your Docker
    images。 But in Python context。 it's quite problematic because it can't use the
    pre-compiled， wheels from PIPI。 What that means is all the things that are usually
    provided for you by the。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 所以下一步也是最后一步就是优化你的图像。例如，在构建时间方面。Alpine Linux通常被推荐作为Docker镜像的基础镜像。但在Python的上下文中，这非常有问题，因为它无法使用来自PIPI的预编译轮子。这意味着所有通常由其提供的东西都无法使用。
- en: package authors in the pre-compiled format， you have to compile from scratch。
    For example。 if you want to install pandas in MacLalib， if you install a Debian-based
    Docker image like SlimBuster。 it'll just download the pre-compiled package just
    takes 30 seconds。 On Alpine。 you're going to have to compile on yourself。 It's
    1，500 seconds， 50 times slower。 It's just a pain。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 包装作者提供的预编译格式，你必须从头编译。例如，如果你想在Mac上安装pandas，如果你安装一个基于Debian的Docker镜像，如SlimBuster，它会只下载预编译包，只需30秒。在Alpine上，你必须自己编译，这需要1500秒，慢了50倍。这真是太麻烦了。
- en: And there's a PEP 656， I think that will get around to fixing this。 And another。
    year or two from now， there might actually be pre-compiled wheels for Alpine，
    and you can use。 Alpine。 But at the moment， I recommend against using it if you
    want fast builds for your Docker。 image。 So that's the big picture process。 First，
    you get something working， then you make it secure。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为有一个PEP 656会解决这个问题。在一两年后，可能会真的有Alpine的预编译轮子，那时你可以使用Alpine。但目前，我建议如果你想要快速构建Docker镜像，就不要使用它。这是整个过程的概况。首先，你需要让某个东西能够工作，然后再确保它的安全。
- en: then you automate the builds， make it run in CI， then you do all the tuning
    and correctness you want。 for undibugability， you want for production， then you
    do reproducible builds， and then you optimize。 your builds。 And in your particular
    case， you might want to order it differently。 In many。 applications， reproducibility
    is perhaps more important than you might want to do it earlier。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你自动化构建，使其在CI中运行，然后进行所有你想要的调优和正确性，以便于调试，满足生产需求，然后进行可重复构建，接着优化你的构建。在你的具体情况下，你可能想要以不同的顺序来处理。在许多应用中，可重复性可能比你想象的更重要，你可能想要早些进行。
- en: And once you get good at this， you'll actually start into leaving this more。
    But as a map of。 what you need to do and sort of a first pass prioritization，
    this is a good starting point。 And I've been pointing this out as you go， but
    I want to reiterate it。 Dockerizing is not just about writing a Docker file， a
    build script， or Docker ignore file。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你对此掌握得很好，你实际上会开始更多地利用这个。但作为你需要做的事情的地图，以及一种初步优先排序，这是一个很好的起点。我在你进行时指出了这一点，但我想重申一下。Docker化不仅仅是编写Docker文件、构建脚本或Docker忽略文件。
- en: It is also something that involves processes and interacts with your development
    processes。 You。 have to think about how it's going to work with things like branches
    and feature branches。 And also requires you to create new processes for security
    updates or dependency updates。 And so as in much of software development， it is
    important not just to get the actual。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是一个涉及过程并与开发流程互动的事情。你需要考虑它如何与分支和特性分支等事物协同工作。同时，这也要求你为安全更新或依赖更新创建新的流程。因此，在软件开发的许多方面，重要的不仅是确保实际的工件正确，还需要考虑整体流程以及它们与组织和组织目标的互动。
- en: artifacts right， it's also important to think about the overall processes and
    how they interact with。 your organization and your organizational goals。 So that's
    it。 That's the process and that's my talk。 So on my website。 you can find a pros
    version of this talk and much more expanded at pythonspeed。com/products。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。这就是整个流程，也是我的演讲内容。在我的网站上，你可以找到这个演讲的专业版以及更多扩展内容，网址是pythonspeed.com/products。
- en: or stacker process。 And so this sort of goes over the ideas in this in a longer
    form you can read。 And I also have a free guide to all the details you need to
    get right。 So security and image size。 and builds and reproducibility。 It's at
    pythonspeed。com/dakard。 So a lot of articles， going。 it's a lot of detail about
    all these best practices。 And so you can learn a lot more about。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 或者堆叠处理。这种形式更详细地阐述了这些思想，你可以阅读。此外，我还有一份免费的指南，包含你需要注意的所有细节，包括安全性和图像大小、构建和可重复性。它位于
    pythonspeed.com/dakard。这里有很多文章，涵盖了所有这些最佳实践的详细信息，你可以了解更多。
- en: what you need to do by going to these two URLs。 And if you have any questions，
    suggestions。 problems， anything you want to talk about， please do email me or
    tweet at me。 And I believe。 there will also be a Q&A session after this。 Thank
    you。 [ Silence ]， [ Silence ]， [ Silence ]。 [ Silence ]， [ Silence ]， [BLANK_AUDIO]。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过访问这两个网址了解你需要做的事情。如果你有任何问题、建议或想讨论的内容，请随时给我发邮件或发推文。我相信会有一个问答环节。谢谢。[沉默]，[沉默]，[沉默]。[沉默]，[沉默]，[空白音频]。
- en: '![](img/9ed0c8b1a44b2ea99d841307a88faa9c_3.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9ed0c8b1a44b2ea99d841307a88faa9c_3.png)'
