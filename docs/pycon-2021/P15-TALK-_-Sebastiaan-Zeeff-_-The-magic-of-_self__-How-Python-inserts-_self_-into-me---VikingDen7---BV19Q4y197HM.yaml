- en: P15：TALK _ Sebastiaan Zeeff _ The magic of _self__ How Python inserts _self_
    into me - VikingDen7 - BV19Q4y197HM
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P15：演讲 _ Sebastiaan Zeeff _ _self_ 的魔法 _ 如何在方法中插入 _self_ - VikingDen7 - BV19Q4y197HM
- en: Hello， let's talk about magic in Python， because there's a lot of magic in Python。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 大家好，让我们谈谈 Python 中的魔法，因为 Python 中有很多魔法。
- en: '![](img/004cf16b0f11e3c700137499ce789b4f_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/004cf16b0f11e3c700137499ce789b4f_1.png)'
- en: '![](img/004cf16b0f11e3c700137499ce789b4f_2.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/004cf16b0f11e3c700137499ce789b4f_2.png)'
- en: There are layers and layers of magical abstractions and functionality that make
    Python to the。 high-level programming language that it is。 In fact。 recently some
    people started complaining that too much magic was being added to the， language。
    To which Hido Verusum replied on Twitter that there's been a lot of magic in Python
    from。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Python 具有层层叠叠的魔法抽象和功能，使其成为如此高层次的编程语言。实际上，最近一些人开始抱怨语言中添加了太多的魔法。对此，Hido Verusum
    在推特上回应说，Python 中一直存在很多魔法。
- en: the beginning and that it's there to quietly help us， the users of Python。 And
    it's true。 That magic is here to help you and me focus on the business logic of
    our code， on what。 we actually want to do。 Instead of the lower-level details
    that we'd otherwise need to take care of。 At the same time， using the word magic
    makes it sounds like that we have no hopes of ever。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 从一开始，它就在这里默默地帮助我们，Python 用户。这是真的。这种魔法旨在帮助你我专注于代码的业务逻辑，关注我们实际想做的事情，而不是我们否则需要处理的低级细节。同时，使用“魔法”这个词让人感觉我们无望能理解它。
- en: understanding the mechanisms behind this magic。 That we just have to get used
    to the fact that things are done for us without ever hoping。 that we can truly
    understand how it happens or even how to make magic of our own。 In this talk。
    I hope to show you that that's not true。 A lot of the magic is the kind of magic
    that you and I can perform as well。 To do that， we're going to look into what
    I feel is one of the most magical things in， Python。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 理解这种魔法背后的机制。我们只需要习惯于事实，那就是事情是为我们完成的，而我们从未希望能真正理解它是如何发生的，甚至如何创造自己的魔法。在这次演讲中，我希望向你展示这并不真实。许多魔法是你我都可以表演的那种魔法。为此，我们将研究我认为在
    Python 中最神奇的事物之一。
- en: the insertion of self into methods。 To do that， we're going to encounter something
    called the descriptor protocol。 But， before diving into self， I'd like to briefly
    introduce myself。 My name is Westian。 I'm 35 years old and I live in the Netherlands。
    I like playing guitar。 which is something that you'll notice later in this talk，
    but。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: self 的插入到方法中。为此，我们将会遇到一种叫做描述符协议的东西。但是，在深入探讨 self 之前，我想简要介绍一下我自己。我的名字是 Westian。我
    35 岁，住在荷兰。我喜欢弹吉他，这在这次演讲中你会注意到。
- en: I also like playing board games or going for a walk with my girlfriend。 I work
    as a Python developer for Ordina， which is a consultancy company in the Netherlands。
    I've not been working there for long。 I think it's about six months or so。 but
    I really enjoy it so far。 They have a really strong Python unit and I always learn
    the most from working with other。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我还喜欢和女朋友玩桌游或者散步。我在 Ordina 担任 Python 开发者，Ordina 是一家位于荷兰的咨询公司。我在这里工作不久，大约六个月左右，但到目前为止我真的很喜欢。这里有一个非常强大的
    Python 团队，我总是从与其他优秀开发者的合作中学到最多。
- en: great developers。 I'm also one of the three owners of Python Discord。 an online
    community of Python enthusiasts。 We mainly focus on Python education and Python
    discussion。 but we also organize Python related， events。 In addition。 since we
    have a lot of motivated volunteers， we also try to help other organizations。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我也是 Python Discord 的三位创始人之一，这是一个在线 Python 爱好者社区。我们主要关注 Python 教育和讨论，但我们也组织与
    Python 相关的活动。此外，由于我们有很多积极的志愿者，我们还努力帮助其他组织。
- en: in the Python ecosystem。 Think of organizations like the PSF or Pyweak or various
    Python conferences。 The last thing that I'd like to mention about myself is that
    I'm also a volunteer for Europe。 Python。 And the reason that I'd like to mention
    Europe Python specifically is because this year it。 will be the 20th anniversary
    edition of Europe Python。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 生态系统中。想想像 PSF、Pyweek 或各种 Python 大会这样的组织。我还想提到的最后一件事是，我也是欧洲 Python 的志愿者。我之所以特别提到欧洲
    Python，是因为今年将是欧洲 Python 的 20 周年纪念版。
- en: Since it's being held online and we're trying to accommodate for different time
    zones， it。 should be really easy to attend this anniversary edition。 So you may
    want to check it out。 Anyway。 that's enough about me。 Let's talk about self。 When
    talking about self in Python。 I think it's important to first go back to the basics。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个活动在线举行，我们正在尝试适应不同的时区，因此参加这个周年版应该非常简单。所以你可能想去看看。无论如何，关于我就够了。让我们谈谈self。在谈论Python中的self时，我认为首先回到基础是很重要的。
- en: '![](img/004cf16b0f11e3c700137499ce789b4f_4.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/004cf16b0f11e3c700137499ce789b4f_4.png)'
- en: One of the reasons for that is that it's easy to get used to self。 To not notice
    the magic that is going on anymore， especially if you've been programming in Python。
    for a while now。 I also want to go back to the basics to make sure that we're
    all on the same page。 regardless， of the level of experience that we may have。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的原因之一是容易习惯于self。以至于不再注意发生的魔力，尤其是如果你已经在Python中编程一段时间了。我还想回到基础，以确保我们在同一页上，无论我们可能有何种经验水平。
- en: I'm going to do that by creating a simple guitar class， one that I could use
    to keep track。 of all the guitars that I've collected over the years。 As you can
    see， it's very simple。 You can give a guitar a name and a dunder a knit method
    will assign the attribute name。 to the name you gave it。 But that's about it。
    For those of you who are unfamiliar with classes。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我将通过创建一个简单的吉他类来做到这一点，这样我可以用它来跟踪我多年来收集的所有吉他。如你所见，这非常简单。你可以给吉他起一个名字，构造方法将把属性name分配给你给它的名字。就这些了。对于那些对类不熟悉的人。
- en: this means that we can now create individual， instances of guitars。 In this
    case。 I'm creating an instance for my favorite bass guitar， my Warwick streamer。
    After we created that instance， we can look up that name attribute and we can
    see that。 it's really assigned to the name that I've given the guitar。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们现在可以创建单独的吉他实例。在这个例子中，我正在为我最喜欢的低音吉他，Warwick streamer，创建一个实例。创建实例后，我们可以查找该名称属性，并看到它确实被分配给了我给吉他起的名字。
- en: This obviously isn't very interesting yet， so I'm going to add a method。 This
    new method， play note。 expects an argument， the note that the guitar should play，
    and then， it will print a simple message。 saying that the guitar is playing that
    note。 So when I call the method like this。 giving it a musical note C# as an argument，
    Python， will print my Warwick streamer。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这显然还不是很有趣，所以我打算添加一个方法。这个新方法play note期望一个参数，即吉他应该演奏的音符，然后它会打印一个简单的信息，说明吉他正在演奏那个音符。所以当我像这样调用这个方法，并给它一个音乐音符C#作为参数时，Python会打印我的Warwick
    streamer。
- en: play the note C#。 While this doesn't really look magical on its own。 there is
    something interesting going， on here。 If you zoom in on the function definition
    of the play note method and the parameter list。 in specific， you'll see that the
    function expects two arguments。 For two parameters， self and note。 But if you
    then look at how I've called the method， you can see that I only gave it one，
    argument。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 演奏音符C#。虽然这本身看起来并没有什么魔力，但这里有一些有趣的事情。如果你仔细查看play note方法的函数定义和参数列表，你会看到函数期望两个参数：self和note。但如果你再看看我是如何调用这个方法的，你会发现我只给了它一个参数。
- en: the note C#。 It's obvious that the C# ended up with the parameter note， but
    where's the value of。 herself coming from？ This is the magic of self。 When you
    call a method like this。 Python will take care of inserting the instance for，
    you。 But Python has done。 is that it has inserted Warwick， the specific guitar
    we've called the。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 音符C#。显然C#被作为参数note使用，但这个值来自哪里呢？这就是self的魔力。当你像这样调用一个方法时，Python会负责为你插入实例。但Python所做的是，它插入了我们所调用的具体吉他Warwick。
- en: method on as the first argument for the function。 To understand the special
    bit of magic。 we'll have to look at what methods are and how they。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 方法作为函数的第一个参数。要理解这个特殊的魔力，我们需要看看方法是什么以及它们如何运作。
- en: '![](img/004cf16b0f11e3c700137499ce789b4f_6.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/004cf16b0f11e3c700137499ce789b4f_6.png)'
- en: relate to functions。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 与函数相关。
- en: '![](img/004cf16b0f11e3c700137499ce789b4f_8.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/004cf16b0f11e3c700137499ce789b4f_8.png)'
- en: To look at what methods are and how they relate to normal functions， we need
    to look。 at what happens when you define a class with methods。 And that's why
    I'm going to discuss what Python does when it reads the definition of。 the guitar
    class。 Since everything in Python is an object， including classes。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看方法是什么以及它们与普通函数的关系，我们需要看看定义带有方法的类时会发生什么。这就是我将讨论 Python 在读取吉他类定义时所做的原因。由于 Python
    中的每个东西都是对象，包括类。
- en: one thing we know is that， we're going to end up with a class object， an instance
    of type。 to represent a guitar， class。 I've drawn this box to represent that class
    object。 Now let's zoom in on what happens when Python reads the definition of
    the plain note method。 Some people think that because this function definition
    statement， the death plain note and， so on。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道的是，我们最终会得到一个类对象，一个类型的实例，以表示吉他类。我画了这个框来表示那个类对象。现在让我们放大看看当 Python 读取 plain
    note 方法的定义时发生了什么。有些人认为因为这个函数定义语句，death plain note 等等。
- en: is located within the body of a class， this means that we're creating a special
    kind。 of object here， a method object。 But this is not the case。 This is just
    a regular function definition statement， just like the one you use outside， of
    classes。 So when Python reads this function definition statement， it's going to
    create a regular function。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 位于类的主体内，这意味着我们在这里创建了一种特殊的对象，方法对象。但事实并非如此。这只是一个普通的函数定义语句，就像你在类外使用的那样。因此，当 Python
    读取这个函数定义语句时，它将创建一个普通的函数。
- en: object in memory。 There's nothing special going on here yet。 But what is important
    is that a function definition statement also assigns a name to。 the function object。
    This obviously makes sense because we need a name to be able to refer to that
    object。 later。 Since we're defining something within a class。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 内存中的对象。这里没有什么特别的事情。但重要的是，函数定义语句也给函数对象分配了一个名称。这显然是有意义的，因为我们需要一个名称来能够在后面引用那个对象。既然我们在类中定义了某些内容。
- en: that name will be assigned within the namespace， of that class。 More specifically。
    we're going to assign an attribute of the guitar class， plain note。 to the function
    object in memory。 And this is an important first piece of the puzzle。 We've assigned
    a class attribute to the function object。 So in short。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这个名称将在该类的命名空间内被赋值。更具体地说，我们将把吉他类的一个属性plain note赋值给内存中的函数对象。这是拼图的重要第一部分。我们将类属性赋值给了函数对象。所以简而言之。
- en: by defining a function within a class， you're not creating a special kind， of
    object yet。 You're just creating a regular function。 But what is important is
    that it assigns a class attribute to the function。 We'll find out why this is
    important when we look at what happens when we try to get。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在类中定义一个函数，你并没有创建一种特殊的对象。你只是创建了一个普通的函数。但重要的是，它将类属性分配给函数。当我们尝试获取时，我们将发现这为什么重要。
- en: '![](img/004cf16b0f11e3c700137499ce789b4f_10.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/004cf16b0f11e3c700137499ce789b4f_10.png)'
- en: that function using an attribute。 Alright， let me pull up my Python shell to
    demonstrate the magic that happens when you。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用属性来访问该函数。好吧，让我打开我的 Python shell，演示当你访问时发生的魔法。
- en: '![](img/004cf16b0f11e3c700137499ce789b4f_12.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/004cf16b0f11e3c700137499ce789b4f_12.png)'
- en: access the function using attributes。 First， I'm going to access the function
    using the class attribute。 guitar。plainnote。 When I hit enter， you can see that
    this just returns the function itself。 There's no special magic going on yet。
    But in Python。 this isn't the only way that you can access class attributes。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用属性访问函数。首先，我将通过类属性访问函数。guitar.plainnote。当我按下回车时，你会看到这只返回函数本身。现在还没有任何特别的魔法。但在
    Python 中，这并不是访问类属性的唯一方法。
- en: You can also access them using an instance of the class。 So that's why I'm going
    to recreate my Warwick instance。 And then。 I'm going to access the class attribute
    playnote as if it were an attribute of the， instance。 Now。 if you think about
    it， this is a bit weird。 My Warwick instance doesn't even have an attribute called
    playnote。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用类的实例访问它们。这就是我将重新创建我的 Warwick 实例的原因。然后。我将把类属性 playnote 作为该实例的属性来访问。现在。如果你想想，这有点奇怪。我的
    Warwick 实例甚至没有名为 playnote 的属性。
- en: This is an attribute of the class。 But as we'll see in a moment， this just works。
    What roughly happens is that Python looks for the attribute playnote on the Warwick
    instance。 and when it doesn't find it， it moves on to look at the class。 The actual
    lookup sequence is a bit more complicated than that， but this is what roughly
    happens。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这是类的一个属性。但正如我们将很快看到的，这样也能正常工作。大致发生的情况是，Python在Warwick实例上查找属性playnote，当它找不到时，它会继续查找类。实际的查找顺序要复杂一些，但大致上就是这样发生的。
- en: and this is the kind of detail we need right now。 Alright， let's hit enter and
    see what it gets us。 Alright， it worked。 But there's also something interesting
    going on here。 Instead of getting the raw function object back， we now get something
    called a bound method。 And this is very much where the magic happens。 When you
    look up attributes in Python。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是我们现在需要的细节。好吧，让我们按下回车键，看看会得到什么。好吧，成功了。但这里也发生了一些有趣的事情。我们现在得到的不是原始函数对象，而是被称为绑定方法的东西。这正是魔法发生的地方。当你在Python中查找属性时。
- en: instead of just looking up those attributes directly， as if they were labels。
    you can actually hook into that lookup process by using something， called the
    descriptor protocol。 And Python's functions use this descriptor protocol to bind
    an instance to a method whenever。 you use the instance to access that function。
    So in this case。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你并不是直接查找这些属性，仿佛它们是标签。你实际上可以通过使用称为描述符协议的东西来挂钩这个查找过程。而Python的函数使用这个描述符协议，在你使用实例访问该函数时，将实例绑定到方法上。因此，在这种情况下。
- en: since we accessed a method as an attribute of the Warwick instance， the。 Warwick
    instance was bound to the function to create something called a bound method。
    During this bound method， Warwick is already inserted as the first positional
    argument。 the one that will end up with the parameter self。 And this is why you
    don't have to insert the instance yourself anymore。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们将方法作为Warwick实例的属性访问，Warwick实例就被绑定到该函数，以创建一种称为绑定方法的东西。在这个绑定方法中，Warwick已经作为第一个位置参数插入，这个参数最终将成为self。因此，这就是为什么你不再需要自己插入实例的原因。
- en: Whenever you use a bound method， the instance has already been inserted for
    you。 Okay， now。 since I'm not a magician， I'm going to reveal the trick behind
    this bit。 of magic by introducing the descriptor protocol。 Mind you， this isn't
    going to be a thorough。 in-depth discussion of the entire protocol， that should
    at least give you a taste of how it works。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你使用一个绑定方法时，实例已经为你插入了。好吧，现在。既然我不是魔术师，我要通过引入描述符协议来揭示这段魔法背后的窍门。请注意，这不会是对整个协议的深入讨论，但至少可以让你体验一下它是如何工作的。
- en: '![](img/004cf16b0f11e3c700137499ce789b4f_14.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/004cf16b0f11e3c700137499ce789b4f_14.png)'
- en: Alright， let's talk about the descriptors。 When I first heard that term。 I thought
    it sounded quite difficult。 At least， it wasn't quite obvious to me what the term
    meant or what descriptors would do。 Now that I've been using descriptors for a
    while， I still think they're not the easiest。 thing to learn in Python。 There
    are just quite a few details to learn and Python design principles to master if。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，让我们谈谈描述符。当我第一次听到这个术语时，我觉得它听起来相当困难。至少，这个术语的意思和描述符的作用对我来说并不是很明显。现在我已经使用描述符一段时间了，我仍然认为它们不是Python中最容易学习的东西。确实有很多细节需要学习，Python的设计原则也需要掌握。
- en: you want to use them effectively。 At the same time。 I don't think it's that
    difficult to get a general understanding of， what descriptors are。 And that's
    what I'm going to focus on here now。 I want to give you a rough idea of what descriptors
    are and only zoom in on the parts that we。 need to understand self。 So， what are
    the descriptors？
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你想要有效地使用它们。与此同时，我认为理解描述符的大致概念并不难。这正是我现在要关注的内容。我想给你一个关于描述符的粗略概念，并仅关注我们需要理解的部分。所以，什么是描述符？
- en: Descriptors are objects that modify what happens when we do something with an
    attribute， in Python。 More specifically， descriptors can customize how we look
    up attributes， how we assign to。 attributes and how we delete attributes。 Descriptors
    do this by implementing the descriptor protocol。 There are three special or double
    underscore methods that descriptors can implement。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 描述符是修改我们在Python中与属性交互时发生的事情的对象。更具体地说，描述符可以自定义我们如何查找属性、如何赋值给属性以及如何删除属性。描述符通过实现描述符协议来完成这一点。描述符可以实现三个特殊的双下划线方法。
- en: The first is the dunder get method， which can be used to customize what happens
    when。 you get or look up an attribute。 The second is the dunder set method。 It
    allows you to modify what happens when you assign something to an attribute， like。
    we're assigning something to play note here。 And finally， there's the dunder delete
    method。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个是 dunder get 方法，它可以用来自定义当你获取或查找属性时发生的事情。第二个是 dunder set 方法。它允许你修改当你将某些东西分配给属性时发生的事情，就像我们在这里将某些东西分配给
    play note。最后，还有 dunder delete 方法。
- en: Unless the name implies， it allows you to customize what happens when someone
    tries to。 delete an attribute。 As you've probably already guessed。 all functions
    in Python are such descriptors。 Now。 descriptors don't have to implement all three
    methods。 And in fact。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 除非名称暗示，否则它允许你自定义当有人尝试删除属性时发生的事情。正如你可能已经猜到的，Python 中的所有函数都是这样的描述符。现在，描述符不必实现所有三个方法，实际上。
- en: functions only implement one of them， the dunder get method。 And that's why
    we're going to focus on a dunder get method in the remainder of this， talk。 We'll
    start by implementing a descriptor with a dunder get method of our own。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 函数仅实现其中之一，即 dunder get 方法。因此，我们将重点关注接下来的讲座中的 dunder get 方法。我们将从实现一个我们自己的 dunder
    get 方法的描述符开始。
- en: '![](img/004cf16b0f11e3c700137499ce789b4f_16.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/004cf16b0f11e3c700137499ce789b4f_16.png)'
- en: The descriptor that I want to implement is one that's going to help me identify
    my favorite， guitar。 The goal is that I can create a class attribute called is
    my favorite that I assign to my。 descriptor。 Let's call it favorite descriptor。
    And then when I access that attribute on a guitar instance。 it will tell me if
    that instance， is my favorite guitar or not。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我想实现的描述符是一个可以帮助我识别我最喜欢的吉他。目标是我可以创建一个名为 is my favorite 的类属性，将其分配给我的描述符。我们称之为
    favorite descriptor。然后当我在吉他实例上访问该属性时，它会告诉我该实例是否是我最喜欢的吉他。
- en: It's not going to do anything complicated。 It's just going to compare the name
    attribute of the guitar to Warick streamer。 That's currently my favorite guitar。
    So if I create a guitar instance with the name Warick streamer。 like this， and
    I then， print Warick dot is my favorite， we should see true。 As a counter example。
    if I create an instance for my fender jazz base and then print fender， dot is
    my favorite。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这不会做任何复杂的事情。它只是将吉他的名称属性与 Warick streamer 进行比较。那是我目前最喜欢的吉他。因此，如果我创建一个名称为 Warick
    streamer 的吉他实例，就像这样，然后打印 Warick.dot is my favorite，我们应该看到 true。作为一个反例，如果我为我的 fender
    jazz bass 创建一个实例，然后打印 fender.dot is my favorite。
- en: it should print balls。 And that's all。 It's not going to be configurable。 It's
    not going to have options。 And it's just going to check against the static name
    Warick streamer。 And this is to make it easy for demonstration。 Now some of you
    may be wondering why I'm not simply using a property。 which is the normal， way
    to do this。 But the goal here is to implement a descriptor manually。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该打印球。这就是全部。它不会是可配置的，也不会有选项。它只是会检查静态名称 Warick streamer。这是为了方便演示。现在，有些人可能会想，为什么我不直接使用属性，这是通常的做法。但这里的目标是手动实现一个描述符。
- en: Properties also use a descriptor protocol under the hood。 But the point here
    is to show you how the get method works。 Not to show you the best and most bithonic
    way to do this。 And that's why we're going to do it manually here。 To write a
    descriptor。 you simply write a class and implement the descriptor methods， that
    you need。 In our case。 we only want to do something when we access the attribute，
    so we only need。 to implement a done or get method。 We don't really need to do
    anything else here。 A done or get method has three parameters， self， instance，
    and the owner。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 属性在底层也使用描述符协议。但这里的重点是向你展示 get 方法是如何工作的，而不是展示最佳和最典型的做法。因此，我们将在这里手动实现它。要编写描述符，你只需编写一个类并实现所需的描述符方法。在我们的例子中，我们只想在访问属性时执行某些操作，所以我们只需要实现
    done 或 get 方法。在这里我们不需要做其他任何事情。done 或 get 方法有三个参数，self、instance 和 owner。
- en: The instance parameter will receive the instance that you access the attribute
    on。 In our example above， we access the attribute on the fender instance so instance
    would receive。 the fender。 The owner parameter will receive the class that owns
    the attribute。 In our case。 since it is my favorite， it is an attribute of the
    class guitar， we would。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: instance 参数将接收你访问属性的实例。在我们上面的例子中，我们在 fender 实例上访问属性，所以 instance 将接收 fender。owner
    参数将接收拥有该属性的类。在我们的案例中，由于它是我的最爱，它是类 guitar 的一个属性，我们将。
- en: get guitar as a value for owner。 The first thing that we need to do within our
    done or get method is account for the possibility。 that instance is none。 This
    can happen when you access the descriptor directly on the class。 so like class。isMyFavorite。
    And then there's obviously no instance yet， so instance will get none。 One common
    way to handle this is by checking if the instance is none and then simply returning。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 `done` 或 `get` 方法中需要做的第一件事是考虑到实例为 none 的可能性。这可能在你直接在类上访问描述符时发生，比如 `class.isMyFavorite`。然后显然还没有实例，因此实例将是
    none。处理这个问题的一种常见方法是检查实例是否为 none，然后简单地返回。
- en: the descriptor itself by returning self。 This is also what functions in Python
    3 do。 Once we make it past that if block， we know that we're dealing with an instance，
    we can。 simply compare the name attribute of the instance to Warick's tremor and
    return the， result of that。 Now， there are obviously several ways to improve the
    code here， like not just assuming。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 描述符本身通过返回 self。这也是 Python 3 中函数所做的。一旦我们通过那个 `if` 块，我们知道我们正在处理一个实例，我们可以简单地将实例的名称属性与
    Warick 的颤音进行比较并返回结果。显然，这里还有几种方法可以改善代码，比如不只是简单地假设 `get guitar` 是 `owner` 的值。
- en: that the instance will always have a name attribute， but this is fine for our
    demonstration。 The final thing that I'd like to do is to show the descriptor in
    action。 So first。 I create an instance for my Warick's tremor and then when I
    access the isMyFavorite， attribute。 you'll see that it returns true。 If I do the
    opposite， so if I create an instance for my Fender。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 实例将始终具有一个名称属性，但这对于我们的演示来说是可以的。我想做的最后一件事是展示描述符的实际操作。所以首先，我为我的 Warick 的颤音创建一个实例，然后当我访问
    `isMyFavorite` 属性时，你会看到它返回 true。如果我反过来做，所以如果我为我的 Fender 创建一个实例。
- en: js base and I then access the， attribute， you'll see that it returns false。
    Now。 to test the first if block， we can also look at what happens when we access
    the attribute。 directly on the class。 So guitar。isMyFavorite and we see that it
    just returns the descriptor itself。 Right， now that we've seen an implementation
    of a descriptor， we've seen an implementation。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 基于 js 的，并且我随后访问该属性时，你会看到它返回 false。现在，为了测试第一个 `if` 块，我们也可以看看当我们直接在类上访问属性时会发生什么。所以
    `guitar.isMyFavorite`，我们看到它只返回描述符本身。好吧，现在我们已经看到描述符的一个实现，我们已经看到了一个实现。
- en: of the done or get method， I think it's time to look at the implementation for
    functions。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `done` 或 `get` 方法，我认为是时候查看函数的实现了。
- en: '![](img/004cf16b0f11e3c700137499ce789b4f_18.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/004cf16b0f11e3c700137499ce789b4f_18.png)'
- en: in Python。 So， this is the implementation of the get method of functions。 or
    at least a Python version。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中。因此，这是函数的 `get` 方法的实现，或者至少是 Python 版本的实现。
- en: '![](img/004cf16b0f11e3c700137499ce789b4f_20.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/004cf16b0f11e3c700137499ce789b4f_20.png)'
- en: of it， because the original was written in C。 Still， this Python version is
    roughly equivalent。 C version just has to do something additional with the reference
    count because it operates。 on a lower level。 What it does is fairly straightforward。
    It will first check if the instance is none。 If so， it will just return the function
    itself。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 因为原始版本是用 C 编写的。不过，这个 Python 版本大致相当。C 版本需要额外处理引用计数，因为它在较低级别上操作。它所做的相当简单。它会首先检查实例是否为
    none。如果是，它将只返回函数本身。
- en: It won't make a bound method。 Now， remember， this happens when you access the
    descriptor using a class attribute instead。 of an instance attribute。 This means
    that if I do guitar。play node。 I'm just getting the function itself back and，
    not a bound method。 This obviously makes sense because there is no instance yet。
    There's nothing to bind here yet。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这不会生成一个绑定方法。现在，记住，当你通过类属性而不是实例属性访问描述符时，这种情况就会发生。这意味着，如果我执行 `guitar.play`，我只是在返回函数本身，而不是一个绑定方法。这显然是有道理的，因为还没有实例。这里还没有什么可以绑定的。
- en: It's really hammer the point home。 We can also manually call the get method
    with none for the instance。 If I do guitar。play node， which gets me the function，
    and then I add the call get none。 Guitar。 I should get back the function。 And
    yes， we do。 So， if the instance is none。 we just get the function back。 If the
    instance isn't none。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这确实强调了要点。我们也可以手动调用 `get` 方法，将实例设置为 none。如果我执行 `guitar.play`，这会给我函数，然后我添加调用 `get`，得到
    none 的 `guitar`。我应该得到函数的返回。是的，我们得到了。所以，如果实例是 none，我们只会得到函数返回。如果实例不是 none。
- en: we will make it past that if statement and that's when we。 actually create a
    bound method and return it。 We can see there's an action by first creating a guitar
    instance。 my Warwick here， and then， by manually calling the get method。 now providing
    Warwick instead of none。 And as you can see。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过那个 if 语句，然后我们实际上会创建一个绑定方法并返回它。我们可以看到，首先创建一个吉他实例，我的 Warwick 在这里，然后通过手动调用
    get 方法，现在提供 Warwick 而不是 none。正如你所看到的。
- en: we now get a bound method instead of the function。 And this really is the magic
    of self。 Functions are the scriptors that bind the instance whenever you get them
    as an attribute。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们得到的是一个绑定方法，而不是函数。这确实是 self 的魔力。当你将它们作为属性获取时，函数是绑定实例的描述符。
- en: '![](img/004cf16b0f11e3c700137499ce789b4f_22.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/004cf16b0f11e3c700137499ce789b4f_22.png)'
- en: of an instance。 There are also some other descriptors related to methods built
    into Python。 You are probably already quite familiar with that。 A good example
    is the class method descriptor。 It is typically used as a decorator decorating
    a method as an example below。 What it does is wrap the function in a class method
    object to provide an alternative done。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个实例。Python 内置了一些与方法相关的描述符。你可能已经相当熟悉这一点。一个很好的例子是类方法描述符。它通常用作装饰器，装饰一个方法，如下面的示例。它的作用是将函数包装在类方法对象中，以提供替代。
- en: their get method。 This done their get method also creates a bound method but
    one that binds the function。 to the class instead of the instance。 This happens
    both when your access is directly on the class as well as when you access it。
    on the instance。 You always get a method bound to the class。 Similarly。 there's
    also the static method class which is typically also used as a decorator。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 他们的 get 方法。这样做后，他们的 get 方法也会创建一个绑定方法，但它将函数绑定到类而不是实例。无论你是直接在类上访问还是在实例上访问，这种情况都会发生。你总是会得到一个绑定到类的方法。类似地，还有一个静态方法类，通常也用作装饰器。
- en: See the example below。 It also wraps around the functions provide an alternative
    get method but this time one。 that always returns the function as it is without
    binding anything to it。 So regardless of whether you access a static method object
    directly on the class or on an。 instance of the class， you always get the raw
    function back， not a bound method。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 请看下面的示例。它也包装了函数，提供一个替代的 get 方法，但这一次总是返回函数本身，而不绑定任何东西。因此，无论你是直接在类上访问静态方法对象，还是在类的实例上访问，你总是会得到原始函数，而不是绑定方法。
- en: The last decorator that I'd like to mention is the property class。 This one
    is also typically used as a decorator but as is true for all the ones that I've
    mentioned。 you don't have to use this decorator。 As mentioned earlier。 properties
    allow you to very easily add getters， setters and the， leaders to attributes。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我想提到的最后一个装饰器是属性类。这也是通常用作装饰器，但正如我提到的所有装饰器一样，你并不一定需要使用这个装饰器。如前所述，属性允许你非常轻松地为属性添加
    getter、setter 和删除器。
- en: One interesting aspect of properties is that they allow you to implement such
    getters and。 setters later on in the lifetime of your project without changing
    the public interface。 of the attribute。 This means that you can start out with
    exposing the attribute directly and you only have to。 add the getters and setters
    when you actually need custom lookup and assignment logic。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 属性的一个有趣方面是，它们允许你在项目生命周期的后期实现这样的 getter 和 setter，而无需更改属性的公共接口。这意味着你可以一开始直接暴露属性，而只有在实际需要自定义查找和赋值逻辑时，才需要添加
    getter 和 setter。
- en: This is one big advantage of properties in Python， something that you don't
    see in other， languages。 Alright， we're nearly at the end of this talk。 I hope
    you've enjoyed it。 To summarize。 we've seen how the descriptor protocol allows
    you to customize how attributes， work in Python。 They let you do cool things behind
    the scenes where you access a sign to or delete an attribute。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Python 属性的一个重大优势，是其他语言所没有的。好了，我们快到这个讲座的尾声了。希望你们喜欢这个内容。总结一下，我们看到了描述符协议如何允许你自定义
    Python 中属性的工作方式。它们让你在访问或删除属性时在后台做一些酷炫的事情。
- en: Functions are such descriptors and this is the magic behind self。 Whenever you
    access a function as a method， the descriptor magic kicks in to insert the。 instance
    for you so you don't have to。 We've seen a few other cool descriptors in Python
    that allow you to influence how methods。 behave。 Things like properties， class
    methods， and static methods， they wrap around to function。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 函数就是这样的描述符，这是 self 背后的魔法。每当你将函数作为方法访问时，描述符魔法就会启动，为你插入实例，所以你不必这样做。我们在 Python
    中见过一些其他很酷的描述符，它们允许你影响方法的行为。比如属性、类方法和静态方法，它们都围绕着函数展开。
- en: objects to provide a custom done-and-all-get method that behaves differently。
    These tools are all very powerful and allow you to focus on other things than
    worrying。 about how it all works under the hood。 At the same time。 there are also
    a lot of things related to descriptors that I've skipped， over。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 对象提供了一个自定义的 done-and-all-get 方法，其行为不同。这些工具都非常强大，让你能专注于其他事情，而不必担心它们是如何在底层工作的。同时，我跳过了很多与描述符相关的内容。
- en: While I did mention them， I did not explain how the done-their-set and the done-their-delete。
    methods work and how they differ from the done-their-get method。 This is an interesting
    topic。 but maybe something for another talk in the future。 Who knows？
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我提到过它们，但我并没有解释 done-their-set 和 done-their-delete 方法是如何工作的，以及它们与 done-their-get
    方法的不同。这是一个有趣的话题，但也许是将来另一次演讲的内容。谁知道呢？
- en: Then there's the difference between data and non-data descriptors。 Or as fluent
    Python calls them。 overriding and non-overriding descriptors。 This has to do with
    the specific lookup order of instance versus class attributes。 but it's， a thing
    that you need to wrap your head around。 I think it's much better to learn a difference
    using a book or a good tutorial and your editor。
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是数据描述符与非数据描述符之间的区别。或者如《流利的 Python》所称，重写描述符与非重写描述符。这与实例属性与类属性的特定查找顺序有关，但这是你需要理解的一件事。我认为用书本或好的教程以及你的编辑器学习这个区别要好得多。
- en: on the side。 I can personally highly recommend the book full on Python for that。
    I think a new edition of that book will come out somewhere in the next few months，
    so be。 sure to grab one。 Alternatively， there's a very good tutorial written by
    Raymond Hettinger in the Python。 documentation， and real Python also has plenty
    of resources on the subject。 Finally。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面。我个人强烈推荐一本关于 Python 的书。我认为这本书的新版本将在未来几个月内发布，所以一定要抓紧时间买一本。另外，Raymond Hettinger
    在 Python 文档中写了一篇非常好的教程，Real Python 也有很多相关资源。最后。
- en: there's this handy method called "done-their-set name" that's often used。 to
    gather with the descriptor methods。 It may be worth it for you to look it up sometime。
    I'd like to conclude this talk with a quote from Lee C。 Gell， a magician。 "I'm
    writing a book of magic，" I explain。 And I'm asked "Real magic？"， By real magic。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个方便的方法叫做“done-their-set name”，它常常与描述符方法一起使用。你或许可以找时间查一下。我想用李·C·盖尔（Lee C.
    Gell），一位魔术师的话来结束这次演讲。“我在写一本关于魔法的书，”我解释道。而我被问到“真正的魔法？”
- en: people mean miracles， thometurgical acts， and supernatural powers。 Now I answer
    conjuring tricks。 not real magic。 Real magic， in other words， refers to the magic
    that is not real。 while the magic that， is real， that can actually be done， is
    not real magic。 In Python。 those "done-their-methods" we've seen are sometimes
    called "magic" methods。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 人们提到奇迹、魔术行为和超自然力量。现在我回答的是变戏法，而不是现实中的魔法。换句话说，真正的魔法指的是不真实的魔法，而实际上可以做到的魔法则不是现实的魔法。在
    Python 中，我们看到的那些“魔法”方法有时被称为“魔法”方法。
- en: as if they allow you to do magical things。 Not everyone is happy with that name。
    They claim that Python is at first to magic。 That saying that something is magical
    is to say that we。 mere mortals， would never be， able to harness that power。 and
    that Python is specifically a language that does allow。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 似乎它们允许你做一些神奇的事情。并不是每个人都对这个名称感到满意。他们声称 Python 最初是魔法的。说某样东西是神奇的意思是说我们这些凡人将永远无法掌握这种力量，而
    Python 特别是一种确实允许的语言。
- en: you to do almost everything that the interpreter can do as well。 So they say
    that calling it magic is wrong。 I like the term "magic。"。 I think that there's
    a lot of magic in Python that typically allows us to focus on our business。 logic，
    the higher-level abstractions。 And just like Leacy Cole。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你几乎可以做解释器能做的所有事情。所以他们说称其为魔法是不对的。我喜欢这个“魔法”的说法。我认为在 Python 中有很多魔法，这通常让我们能够专注于我们的业务逻辑，以及更高层次的抽象。就像
    Leacy Cole 一样。
- en: I think the real magic is the magic that we can touch， that， we can use。 that
    we have the spell books for。 And in Python， we have those。 So I hope this talk
    gave you a taste of the magic of Python。 And I hope you'll now want to go out
    and learn more of it。 And that's it for me。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为真正的魔法是我们能够触摸、使用的魔法，是我们拥有咒语书的魔法。在Python中，我们就有这些。所以我希望这次演讲让你感受到Python的魔法。希望你现在想要去学习更多。我的分享就到这里。
- en: Thank you for staying with me to the end。 Goodbye。 [BLANK_AUDIO]， [BLANK_AUDIO]，
    [BLANK_AUDIO]。 [BLANK_AUDIO]， [BLANK_AUDIO]， [BLANK_AUDIO]， [BLANK_AUDIO]。
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢你陪伴我直到最后。再见。[空白音频]，[空白音频]，[空白音频]。[空白音频]，[空白音频]，[空白音频]，[空白音频]。
- en: '![](img/004cf16b0f11e3c700137499ce789b4f_24.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/004cf16b0f11e3c700137499ce789b4f_24.png)'
- en: '[BLANK_AUDIO]。'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[空白音频]。'
