- en: P12：TALK _ Meredydd Luff _ Writing Good Documentation for Developers - VikingDen7
    - BV19Q4y197HM
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P12：演讲 _ Meredydd Luff _ 为开发者撰写良好文档 - VikingDen7 - BV19Q4y197HM
- en: '[Music]。'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '[音乐]。'
- en: '![](img/952634399404e378b471da857ccaad04_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/952634399404e378b471da857ccaad04_1.png)'
- en: '![](img/952634399404e378b471da857ccaad04_2.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/952634399404e378b471da857ccaad04_2.png)'
- en: Hi， my name is Amareth and I'm here to talk about writing good documentation
    for developers。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 嗨，我的名字是Amareth，我在这里谈论如何为开发者撰写良好的文档。
- en: '![](img/952634399404e378b471da857ccaad04_4.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![](img/952634399404e378b471da857ccaad04_4.png)'
- en: '![](img/952634399404e378b471da857ccaad04_5.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](img/952634399404e378b471da857ccaad04_5.png)'
- en: It's a huge subject， so I want to concentrate on why it's important。 and then
    what we should be writing， and then finish up by talking about how our users can
    help us improve it。 But it's reasonable to start by asking why we care in the
    first place。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个庞大的主题，因此我想专注于它的重要性，以及我们应该写些什么，最后再谈谈用户如何帮助我们改进它。但合理的起点是问问我们为什么首先关心这个问题。
- en: '![](img/952634399404e378b471da857ccaad04_7.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](img/952634399404e378b471da857ccaad04_7.png)'
- en: Well， I care because I'm one of the original creators of Anvil。 a framework
    for building full stack where that's entirely in Python。 so that's Python running
    in the web browser， Python on the server， a Python user interface toolkit。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我关心这个问题，因为我是Anvil的原始创建者之一。这是一个用于构建全栈的框架，完全使用Python，因此这是在网页浏览器中运行的Python、服务器上的Python，以及Python用户界面工具包。
- en: '![](img/952634399404e378b471da857ccaad04_9.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/952634399404e378b471da857ccaad04_9.png)'
- en: and we have a company that makes development tools。 So an online IDE with a
    drag-and-drop designer for applications built with this framework。 and a hosting
    platform， so you don't need to know about DevOps or HTML or JavaScript。 You can
    build an interactive application and put it on the web， even if all you know is
    Python。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一家开发工具公司。因此有一个在线IDE，配备了用于构建此框架应用程序的拖放设计器，还有一个托管平台，所以你不需要了解DevOps、HTML或JavaScript。你可以构建一个交互式应用程序并将其放在网上，即使你只知道Python。
- en: So obviously， I'm pretty keen on developers having a good and productive time
    with the project I've built。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 所以显然，我非常希望开发者在我构建的项目中有一个良好且高效的体验。
- en: '![](img/952634399404e378b471da857ccaad04_11.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/952634399404e378b471da857ccaad04_11.png)'
- en: and so should you be， because whether we are building developer tools。 or an
    API for a commercial product， or an open-source project we're sticking up on GitHub
    and PyPI。 we're putting that effort in because we want it to get used。 and so
    we want developers to find our project， to discover that it exists。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你也应该这样做，因为无论我们是在构建开发工具，还是为商业产品提供API，或者是在GitHub和PyPI上发布开源项目，我们投入这些努力是因为我们希望它被使用。因此，我们希望开发者能够找到我们的项目，发现它的存在。
- en: We want them to decide that it's useful， that it solves a problem they actually
    have。 We want them to be able to learn how to use it， and to be able to solve
    the inevitable problems they will have along the way。 And we traditionally think
    of documentation in terms of these latter two。 But developer documentation is
    in fact vital to this whole journey。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望他们决定它是有用的，能够解决他们实际面临的问题。我们希望他们能够学习如何使用它，并能够解决在此过程中不可避免出现的问题。我们传统上将文档视为这最后两个方面。但开发者文档实际上对整个过程至关重要。
- en: because your documentation is a lot more than just learning material。 Your documentation
    is content marketing。 If you're solving a real problem that people are having
    out in the world。 then those people will be opening their magic search box and
    typing "How do I do？"。 specifically what your project does。 And your documentation
    is literally the answer to that question。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 因为你的文档不仅仅是学习材料。你的文档是内容营销。如果你正在解决现实中人们遇到的真正问题，那么这些人会打开他们的神奇搜索框，输入“我该如何做？”特别是针对你的项目所做的事情。而你的文档实际上就是这个问题的答案。
- en: and so they should be able to find it。 However they find your project。 the developer's
    next task is to decide， whether it's any use to them。 and that means understanding
    what your project actually is。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，他们应该能够找到它。无论他们如何找到你的项目，开发者的下一个任务是决定它对他们是否有用，这意味着理解你的项目实际上是什么。
- en: '![](img/952634399404e378b471da857ccaad04_13.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/952634399404e378b471da857ccaad04_13.png)'
- en: What can it do？ What is its sweet spot？ What are its other capabilities？ What
    are its limitations？
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 它能做什么？它的优势是什么？还有哪些其他功能？它的局限性是什么？
- en: And often the best way to find this out is to look at the documentation。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 而且通常发现这一点的最佳方法就是查看文档。
- en: '![](img/952634399404e378b471da857ccaad04_15.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/952634399404e378b471da857ccaad04_15.png)'
- en: Which means that for new users your documentation describes what your project
    is。 So it matters a lot whether a new user clicking onto your documentation。 and
    scanning it or looking at the table of contents。 If they see a good summary of
    what your project does and where its sweet spot is。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着对于新用户，你的文档描述了你的项目是什么。因此，新用户点击你的文档并浏览或查看目录时，这一点非常重要。如果他们看到一个关于项目功能及其优势的良好总结。
- en: that's going to enable them to make a much better decision。 than if they see
    a paragraph of introduction， one code sample of the common case。 because you've
    assumed everything else is obvious。 and then three pages of discussion of weird
    edge cases。 This is the table of contents of the Anvil manual。 I actually think
    this one isn't bad。 It goes editor， user interface， client code， server code，
    storing data， deployment。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使他们能够做出比看到一段介绍、一个常见案例的代码示例（因为你假设其他所有内容都是显而易见的）以及三页关于奇怪边缘案例讨论的介绍更好的决策。这是《Anvil手册》的目录。我其实认为这个结构还不错。它涵盖了编辑器、用户界面、客户端代码、服务器代码、数据存储和部署。
- en: '![](img/952634399404e378b471da857ccaad04_17.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/952634399404e378b471da857ccaad04_17.png)'
- en: But that's not a bad summary。 And of course I bring this up because we got this
    catastrophically wrong first time round。 Because the first version of our documentation
    was structured like our code base。 And as it happens in the Anvil code base， database
    storage and sending and receiving email。 and user authentication and integration
    with Google and Facebook and Microsoft and Stripe and so on。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 但这不是一个坏的总结。我提到这个是因为我们第一次就犯了一个灾难性的错误。因为我们文档的第一版是按照我们的代码库结构组织的。而在Anvil的代码库中，数据库存储、发送和接收邮件、用户身份验证以及与Google、Facebook、Microsoft、Stripe等的集成都是同一类型的插件对象。
- en: They are all the same sort of plugin type object。 And so the documentation for
    all of those was stuck next to each other off in a folder to the side。 Which was
    very unhelpful for new users because if you're exploring this framework for the
    first time。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 所以所有这些文档都被放在一起，放在一个旁边的文件夹里。这对新用户来说非常不友好，因为如果你是第一次探索这个框架。
- en: does it store data is a much more important question than what third party services
    does it integrate with。 So lesson learned， we restructured our documentation so
    that the table of contents would provide an accurate summary of what it is and
    what it does。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 数据存储这个问题比它与哪些第三方服务集成要重要得多。因此，吸取教训后，我们重新组织了文档，使目录能准确总结它是什么以及它能做什么。
- en: So now a developer has found your project described it's useful， decided that
    it's useful。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在一个开发者发现了你的项目，觉得它很有用，并决定使用它。
- en: '![](img/952634399404e378b471da857ccaad04_19.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/952634399404e378b471da857ccaad04_19.png)'
- en: They're settling down to learn it and solve problems。 And now of course your
    documentation is going to get a real work out。 And this is where developer software
    differs from most software because for developers your documentation is your user
    interface。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 他们开始学习并解决问题。当然，现在你的文档将会得到充分的使用。这就是开发者软件与大多数软件的不同之处，因为对于开发者来说，你的文档就是用户界面。
- en: '![](img/952634399404e378b471da857ccaad04_21.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/952634399404e378b471da857ccaad04_21.png)'
- en: Most software is built kind of like a car。 The person using it spends all of
    their time staring at the dashboard and the manual is half forgotten in a glove
    box somewhere。 But for developer tools it's different。 If someone is developing
    code against your API then they will spend their time staring at their code and
    your documentation and that is it。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数软件的构建方式有点像汽车。使用者花费所有时间盯着仪表盘，而手册则半忘在手套箱里。然而，对于开发者工具而言情况不同。如果某人在你的API上开发代码，他们将花时间盯着他们的代码和你的文档，仅此而已。
- en: So if you happen to have the skills or resources it's probably worth making
    it look decent。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果你恰好具备相关技能或资源，那使文档看起来不错是值得的。
- en: '![](img/952634399404e378b471da857ccaad04_23.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/952634399404e378b471da857ccaad04_23.png)'
- en: So here is the documentation index for Twilio which is an API for driving telephony
    so voice and SMS and that kind of thing。 And you can see it looks kind of like
    a second home page because they want to make it clear what it is and what it does。
    It is their user interface。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Twilio的文档索引，它是一个用于电话通讯的API，支持语音和短信等功能。你可以看到它看起来有点像第二个主页，因为他们想要清楚地表明它是什么以及它能做什么。这是他们的用户界面。
- en: '![](img/952634399404e378b471da857ccaad04_25.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/952634399404e378b471da857ccaad04_25.png)'
- en: Okay so we've talked about some of the roles of our documentation。 Let's move
    on to talking about what we should be writing because of course not all documentation
    is alike。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们已经讨论了一些文档的角色。接下来我们要谈谈我们应该写些什么，因为当然并不是所有文档都是一样的。
- en: '![](img/952634399404e378b471da857ccaad04_27.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/952634399404e378b471da857ccaad04_27.png)'
- en: And a tutorial is not the same thing as a reference doc。 A very clever man by
    the name of Daniele Pritida has actually come up with a framework for categorizing
    documentation。 He puts documentation into four categories so you've got the tutorials
    which are the step by step guides to your project。 You've got the explanations
    which are the discursive discussions about how and why it works as it does。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 教程和参考文档并不是同一回事。一位名叫丹尼尔·普里蒂达的聪明人实际上提出了一个分类文档的框架。他将文档分为四类，包括逐步指南的教程和关于它是如何运作的解释。
- en: You've got the how to guides the step by step guides to getting a particular
    real world task done and then you've got the reference documentation。 The dry
    but comprehensive description of everything it does。 And Daniele would actually
    make a pretty good management consultant I think because he's even got a 2x2 matrix
    going on。 You've got the tutorials and explanations you use when studying the
    project versus the how to guides and reference you use when you're trying to get
    something specific done。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你有如何指南，这是完成特定现实任务的逐步指南，然后你还有参考文档。那是对它所做的一切的干巴巴但全面的描述。丹尼尔可能会成为一个相当不错的管理顾问，因为他甚至有一个
    2x2 矩阵。你在学习项目时使用的教程和解释，和在试图完成某些特定任务时使用的如何指南和参考。
- en: And then you've got the step by step tutorials and how to guides versus the
    more theoretical explanations and references。 And it's a handy framework you can
    read more about it at diataxis。fr but I am inherently suspicious of anything that
    fits too neatly into a 2x2 matrix。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你还有逐步的教程和如何指南，与更理论的解释和参考相对比。这是一个很方便的框架，你可以在 diataxis.fr 上阅读更多相关内容，但我天生对任何过于整齐的
    2x2 矩阵持怀疑态度。
- en: '![](img/952634399404e378b471da857ccaad04_29.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/952634399404e378b471da857ccaad04_29.png)'
- en: And in this case I think the biggest problems down here in the reference documentation
    because this framework is trying to cram too many different things into that category。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我认为参考文档存在的最大问题是这个框架试图将太多不同的东西塞入这个类别。
- en: '![](img/952634399404e378b471da857ccaad04_31.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/952634399404e378b471da857ccaad04_31.png)'
- en: Let me explain。 So this according to this framework reference guides are technical
    descriptions of the machinery and how to operate it。 Well that sounds good， sounds
    like we want those。 But it also says reference guides describe the software itself。
    APIs， classes， functions and so on and how to use them。 Now we clearly want this
    as well but can one piece of documentation really fill both of these needs？
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我解释一下。根据这个框架，参考指南是对机械结构及其操作方法的技术描述。听起来不错，听起来我们确实需要这些。但它也说参考指南描述软件本身，包括 API、类、函数等以及如何使用它们。我们显然也希望有这个，但一份文档真的能同时满足这两种需求吗？
- en: I don't think so。 I'm going to call this stuff reference documentation and this
    stuff API documentation and they are not the same thing。 To illustrate why， let's
    use an example。 So let's say I have written a unit testing library and I want
    to document it。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我不这么认为。我将这些称为参考文档，而这些称为 API 文档，它们并不是同一回事。为了说明为什么，让我们用一个例子。假设我编写了一个单元测试库，我想要记录它。
- en: So like most unit testing libraries it has a concept of fixtures so code that
    runs before the test to set up the environment and then you run the tests and
    then you run some tear down code。 Now if we're going to describe the mechanism
    and how to the machinery and how to operate it then we need to describe this sequence。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 像大多数单元测试库一样，它有一个固定装置的概念，也就是在测试之前运行的代码，以设置环境，然后运行测试，最后运行一些清理代码。现在如果我们要描述这个机制以及如何操作它，那么我们需要描述这个顺序。
- en: We need to tell the story of how these components work together。 By contrast
    API documentation describes code objects。 It describes classes， functions。 commands
    and so everything you write in your API documentation is about a code object。
    Now this doesn't leave much space for storytelling。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要讲述这些组件是如何协同工作的。相比之下，API 文档描述的是代码对象。它描述类、函数、命令等，因此你在 API 文档中写的每一件事都是关于一个代码对象的。这并没有留出多少讲故事的空间。
- en: If we were to document our unit testing library and all we had was API documentation
    where would we describe this setup test tear down sequence？
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们要记录我们的单元测试库，而我们只有API文档，我们将在哪里描述这个设置测试拆解序列？
- en: Would we put it in the API docs for the setup decorator？ For the test functionality？
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会把它放在设置装饰器的API文档中吗？用于测试功能？
- en: For the tear down functions？ Would we try and copy and paste it into all of
    these places？
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 对于拆解函数呢？我们会尝试把它复制粘贴到所有这些地方吗？
- en: '![](img/952634399404e378b471da857ccaad04_33.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/952634399404e378b471da857ccaad04_33.png)'
- en: There's just no good place in API documentation to tell the story。 And if we
    try to cram this reference documentation into the shape of API documentation we'll
    end up with what I call JavaDoc disease。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在API文档中没有合适的地方来讲述这个故事。如果我们尝试把这些参考文档塞进API文档的形状，我们最终会得到我所称之为JavaDoc病。
- en: '![](img/952634399404e378b471da857ccaad04_35.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/952634399404e378b471da857ccaad04_35.png)'
- en: Now this is slightly unfair because JavaDoc is awesome。 It is the badass great-grandma
    of every modern API documentation tool。 JavaDoc came out in 1995 and the world
    has not been the same since。 It lets you write your documentation like this。 So
    what we have here is a function definition preceded by a block comment。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这有点不公平，因为JavaDoc非常棒。它是每一个现代API文档工具的强大曾祖母。JavaDoc于1995年推出，自那时起世界就不再一样了。它允许你像这样编写文档。所以我们这里有一个函数定义，前面有一个块注释。
- en: And that comment contains some text and also some machine readable tags to describe
    the parameters and the return value and so on。 And a program called JavaDoc will
    crawl over your code base。 pausing these comments and also the function definitions
    that follow them。 And generating clean。 consistent， easy to navigate HTML API
    documentation。 It really is great。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 而且该注释包含一些文本和一些机器可读的标签，以描述参数和返回值等。而一个名为JavaDoc的程序将遍历你的代码库，提取这些注释以及随后的函数定义，并生成干净、一致、易于导航的HTML
    API文档。它真的很棒。
- en: It makes it so much easier to write documentation because you just comment your
    code in a slightly structured way。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得编写文档变得更加容易，因为你只需以稍微结构化的方式对代码进行注释。
- en: '![](img/952634399404e378b471da857ccaad04_37.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/952634399404e378b471da857ccaad04_37.png)'
- en: It makes it much easier to keep the documentation up to date because you can
    change those comments alongside the code。 And because of JavaDoc for a very long
    time the average Java library was much better documented than almost anything
    else。 So it was a great success but the problem with this great success is that
    it crowded out other forms of documentation。 And even today if you look at a library
    written in Java。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得保持文档更新变得更加容易，因为你可以在代码旁边更改这些注释。而且，由于JavaDoc的存在，长期以来，平均Java库的文档质量远远超过几乎所有其他东西。因此，这是一个巨大的成功，但这个成功的问题在于它挤出了其他形式的文档。即使在今天，如果你查看一个用Java编写的库。
- en: it's pretty likely that all or nearly all of its documentation will be created。
    And so you end up with something like this。 This is the JavaDoc for a library
    that parses command line arguments。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能所有或几乎所有的文档都将被创建。因此，你最终会得到像这样的东西。这是一个解析命令行参数的库的JavaDoc。
- en: '![](img/952634399404e378b471da857ccaad04_39.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/952634399404e378b471da857ccaad04_39.png)'
- en: And it is perfectly good API documentation。 It lists the 15 classes in this
    package and you can click through on any one of them and find out its functions
    and their arguments and return values。 But how do these classes work together？
    Which ones call which ones？ We don't know。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 而且这是完全合格的API文档。它列出了这个包中的15个类，你可以点击其中任何一个，找到它的功能、参数和返回值。但这些类是如何协同工作的呢？哪些类调用哪些类？我们不知道。
- en: This is API documentation。 There is nowhere to tell that story。 Actually。 this
    is a pretty well designed library and there is one class that you can instantiate
    and it does pretty much everything you need for you。 It is this one。 Did you spot
    it？ Of course you didn't。 This is API documentation。 There was nowhere。 no good
    place to represent that important information。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这是API文档。没有地方可以讲述那个故事。实际上，这是一个设计得相当好的库，有一个类你可以实例化，它几乎能满足你所有的需求。就是这个类。你发现它了吗？当然你没有。这是API文档。没有地方，没有好的地方来呈现那个重要信息。
- en: So API documentation and reference documentation are different things and they
    belong as different top level categories when you're thinking about your documentation。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 所以API文档和参考文档是不同的东西，当你考虑文档时，它们应属于不同的顶级类别。
- en: '![](img/952634399404e378b471da857ccaad04_41.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/952634399404e378b471da857ccaad04_41.png)'
- en: Reference documentation describes systems。 It describes the machinery。 API documentation
    describes code objects， a class， a function， a command。 Reference docs tell a
    story。 Set up test， tear down。 API documentation describes one code object alone。
    So you can go and look up the API documentation for the setup decorator and find
    everything about how to call it and what it does in isolation because that's the
    point。 Reference documentation should be structured logically according to what
    your project does。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文档描述系统。它描述了机制。API文档描述代码对象、类、函数和命令。参考文档讲述一个故事。设置测试，拆解。API文档单独描述一个代码对象。因此，你可以查阅setup装饰器的API文档，找到关于如何调用它及其独立操作的所有信息，因为这就是重点。参考文档应该根据你的项目所做的内容逻辑结构化。
- en: API documentation is structured automatically because it should be generated
    from your code。 So I put them as two separate categories of your documentation
    and we have quite a few categories now and there's a lot of documentation to write。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: API文档是自动结构化的，因为它应该从你的代码中生成。所以我将它们作为你文档的两个独立类别，而现在我们有很多类别，还有很多文档需要编写。
- en: '![](img/952634399404e378b471da857ccaad04_43.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/952634399404e378b471da857ccaad04_43.png)'
- en: So let's think about how they can work together。 So it's very unlikely for a
    user to read your API documentation from beginning to end。 Users generally don't
    do that but it's actually pretty unlikely for a user to read all of your tutorials
    from beginning to end either。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们思考一下它们如何协同工作。用户从头到尾阅读你的API文档的可能性非常小。用户通常不这样做，但实际上，用户从头到尾阅读你所有的教程的可能性也很小。
- en: Your user is on a journey and that journey is going to take them through several
    different sorts of documentation。 most likely。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你的用户正在进行一段旅程，而这段旅程将带他们经过几种不同类型的文档。大概率如此。
- en: '![](img/952634399404e378b471da857ccaad04_45.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/952634399404e378b471da857ccaad04_45.png)'
- en: Here's an example of such a journey。 So a user starts by wondering what they
    should use and they run across a blog post saying。 "Hey， this project's pretty
    good。"， So they go to your project and try to work out how they can use it for
    this task。 There's a how to guide for that。 Now they're really digging in and
    they want to modify one of their function calls。 they want to know what arguments
    it takes， or that's clearly a job for the API documentation。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个这样的旅程的例子。用户首先想知道该使用什么，然后看到一篇博客文章说：“嘿，这个项目挺不错的。”于是他们访问你的项目，并尝试了解如何将其用于这个任务。为此有一份操作指南。现在他们真正开始深入，并想修改他们的一个函数调用。他们想知道需要什么参数，或者这显然是API文档的工作。
- en: And you can see they're sort of steadily zooming in to the more fine-grained
    and specific documentation here。 But here's another journey。 A user starts wondering
    how do I do such and such。 So they plug that question into Google and land on
    a how-to guide。 Remember。 docs are content marketing。 This looks cool but the
    next question is how does that work？
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，他们正逐渐深入到更细致具体的文档中。但这是另一个旅程。用户开始想知道如何完成某个任务。于是他们在谷歌上搜索这个问题，并找到了一份操作指南。记住，文档是内容营销。这看起来很不错，但下一个问题是：那是如何工作的？
- en: And of course that is the story that's told by your reference documentation。
    They read a little bit of this and decide yes that this is something that's worth
    learning properly。 And so they do a step-by-step overall tutorial。 And again，
    this is a perfectly legitimate journey。 But you can see they're not just zooming
    in， they're zooming out as well。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这就是你的参考文档所讲述的故事。他们读了一些内容，然后决定这确实是值得认真学习的东西。于是，他们进行了一步一步的整体教程。同样，这是一个完全合理的旅程。但你可以看到，他们不仅在放大，同时也在缩小。
- en: And we want to let users take whatever journey they need to through our documentation。
    The easiest way to do this， of course， is hyperlinks。 Just link from any sort
    of documentation to any other sort of documentation that's covering the same subject。
    So if you touch on a topic in a very didactic how-to guide。
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望让用户能够通过我们的文档进行任何他们需要的旅程。当然，最简单的方法是超链接。只需从任何类型的文档链接到任何其他涵盖相同主题的文档。所以如果你在非常教学性的操作指南中提到一个主题。
- en: link to the reference documentation so they can find out how it works。 But when
    you're talking about a feature in the reference documentation。 link to a related
    tutorial so they can zoom out if they need to。 Now。 links aren't the only way
    to do this。 It can be quite handy to put some of these types of documentation
    next to each other。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 链接到参考文档，以便他们可以了解其工作原理。但是当你在参考文档中讨论某个功能时，链接到相关的教程，以便他们需要时可以放大。现在，链接并不是唯一的解决方案。将某些类型的文档放在一起也很方便。
- en: So， Anvil has a built-in library for building applications that do user authentication。
    And this is the section of the manual about that feature。 And the first two pages
    here are actually mini tutorials。 And then the rest are reference about how this
    feature works。 Now， to be clear。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，Anvil有一个内置库，用于构建进行用户认证的应用程序。这是手册中关于该功能的部分。前两页实际上是迷你教程，其余部分是关于该功能如何工作的参考。现在，为了明确。
- en: none of these pages are trying to be tutorial and reference at once because
    that's just not going to work。 But by putting them next to each other， we can
    make it easy to zoom in and zoom out to follow whatever journey the user needs
    to take。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这些页面并不试图同时作为教程和参考，因为那是行不通的。但将它们放在一起，我们可以方便地放大和缩小，以跟随用户需要采取的任何旅程。
- en: '![](img/952634399404e378b471da857ccaad04_47.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/952634399404e378b471da857ccaad04_47.png)'
- en: So， we've got a few different forms of documentation。 And there's obviously
    a lot to do。 And it can be hard to work out what you should be working on next。
    And so。 I would like to finish up by talking about the best way to work that out。
    which is a course to talk to your users。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们有几种不同形式的文档。而且显然还有很多事情要做。弄清楚你应该接下来做什么可能很困难。因此，我想通过谈论解决这个问题的最佳方法来结束，也就是与你的用户交谈。
- en: '![](img/952634399404e378b471da857ccaad04_49.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/952634399404e378b471da857ccaad04_49.png)'
- en: Because if you listen to your users， you will hear where your documentation
    most needs improvement。 They might not always say it in as many words， but if
    you're having a conversation with them。 you will know。 Now， obviously the easiest
    way to do this is in person。 This is my colleague Bridget helping a user last
    time we could have Pike on in person。
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 因为如果你倾听用户的声音，你会听到你的文档最需要改进的地方。他们可能不会用太多的言辞来表达，但如果你和他们进行对话，你就会知道。显然，最简单的方法就是面对面交流。这是我的同事布里奇特上次帮助用户时的场景。
- en: I desperately miss it。 I cannot wait to be back。 But even when conferences are
    running in person。 this is not very scalable。 So you'll want to do stuff online
    too。 We have a forum。 A discourse is free。 It's open source。 And it's actually
    really easy to set up and host yourself。 So I would recommend it。 But if you don't
    want that hassle， then Stack Overflow works as well。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我非常想念这个。我迫不及待想要回去。但即使会议是面对面进行的，这也并不是很可扩展。所以你还需要在线进行一些工作。我们有一个论坛。Discourse是免费的，开源的，而且实际上很容易设置和自托管。所以我会推荐它。但如果你不想麻烦，那Stack
    Overflow也能工作。
- en: Or you could set up a Slack or a Discord instance。 Actually， no。 Please don't
    use Slack。 The community is closed and the conversation is ephemeral。 And that
    is a problem。 Because every time a developer asks how to use your project。 that
    is a bug report in your documentation。 And every time that question is answered
    in a public searchable place。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你可以设置一个Slack或Discord实例。实际上，不，请不要使用Slack。社区是封闭的，对话是短暂的。这是个问题。因为每当开发者询问如何使用你的项目时，那就是你的文档中的一个错误报告。每当这个问题在一个公共的可搜索的地方被回答时。
- en: that's a patch。 One answer can help any user who gets stuck on the same question。
    Even better。 because this process is driven by questions from your users。 these
    patches will naturally gravitate towards the holes in your existing documentation。
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种补丁。一个答案可以帮助任何在同一个问题上遇到困难的用户。更好的是，因为这个过程是由用户的问题驱动的，这些补丁自然会向你现有文档中的漏洞靠拢。
- en: '![](img/952634399404e378b471da857ccaad04_51.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/952634399404e378b471da857ccaad04_51.png)'
- en: And if you're using a platform that has voting， such as a discourse with its
    likes or Stack Overflow's up-voting。 then you'll even get some numerical idea
    of which of these patches are really。 really urgent need to go upstream into your
    mainline documentation。 Of course。 not every question needs to go upstream like
    that。 Some questions are just too obscure。
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的平台有投票功能，比如Discourse的点赞或Stack Overflow的赞成投票，那么你甚至可以获得一些数字上的想法，了解哪些补丁确实非常、非常急需进入你的主文档。当然，并不是每个问题都需要像那样上游。有些问题实在太晦涩。
- en: And some of them are too tangential to what your project is really about。 But
    that's okay。 Because if your Q&A is public and searchable， then it forms another
    pillar of your documentation。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一些内容与项目的真正主题关系不大，但这没关系。因为如果你的问答是公开且可搜索的，那么它就构成了你文档的另一个支柱。
- en: '![](img/952634399404e378b471da857ccaad04_53.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/952634399404e378b471da857ccaad04_53.png)'
- en: And your documentation becomes almost self-healing， as the patches gravitate
    to the right places。 And the long tail of obscure questions takes care of itself。
    But I have now made an absolute dog's breakfast of Daniele's beautiful diagram。
    so I think it might be best if I stop here。 I want to leave you with the headlines。
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你的文档几乎变得自我修复，补丁会自然吸引到正确的地方。那些冷门问题会自我解决。但我现在已经把丹妮尔美丽的图表搞得一团糟，所以我想我最好在这里停下。我想给你留下几个要点。
- en: Your documentation is your user interface。 It is your marketing。 And it is the
    definition of your product for a new user who hasn't heard about you。 which is
    of course almost everybody。 So please act like it。 especially if this is a commercial
    project。 It's worth thinking about the fact that developer documentation matters
    much closer to the top of the funnel than you might think。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你的文档就是你的用户界面。它是你的营销。这是新用户对你产品的定义，他们几乎都没听说过你。所以请表现得像这样，尤其是如果这是一个商业项目。值得考虑的是，开发者文档在漏斗的顶部比你想的更为重要。
- en: And when you are writing developer documentation， think about what type of dog
    you are writing。 Remember that API docs are not reference docs。 And talk to your
    users。 Talk to them somewhere public and searchable， because they will help you
    fill in the gaps。
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当你撰写开发者文档时，考虑一下你正在写哪种类型的狗。请记住，API 文档并不是参考文档。并且与用户交流。在公共和可搜索的地方与他们交谈，因为他们将帮助你填补空白。
- en: '![](img/952634399404e378b471da857ccaad04_55.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/952634399404e378b471da857ccaad04_55.png)'
- en: Thank you very much for watching， and I very much look forward to meeting you
    in the question and answer session。 Thank you。
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 非常感谢你的观看，我非常期待在问答环节见到你。谢谢。
- en: '![](img/952634399404e378b471da857ccaad04_57.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/952634399404e378b471da857ccaad04_57.png)'
- en: '[BLANK_AUDIO]， [BLANK_AUDIO]， [BLANK_AUDIO]， [BLANK_AUDIO]， [BLANK_AUDIO]，
    [BLANK_AUDIO]。 [BLANK_AUDIO]。'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[空白音频]，[空白音频]，[空白音频]，[空白音频]，[空白音频]，[空白音频]。[空白音频]。'
- en: '![](img/952634399404e378b471da857ccaad04_59.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/952634399404e378b471da857ccaad04_59.png)'
