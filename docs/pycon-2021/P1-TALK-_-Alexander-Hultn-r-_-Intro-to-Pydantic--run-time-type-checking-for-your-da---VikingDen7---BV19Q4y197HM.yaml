- en: P1：TALK _ Alexander Hultnér _ Intro to Pydantic, run-time type checking for
    your da - VikingDen7 - BV19Q4y197HM
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P1：演讲 _ Alexander Hultnér _ Pydantic 简介，Python 数据类的运行时类型检查 - VikingDen7 - BV19Q4y197HM
- en: '[MUSIC]。'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '[音乐]。'
- en: '![](img/98d3126a31287dc7ece0555ee1b7c225_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/98d3126a31287dc7ece0555ee1b7c225_1.png)'
- en: '![](img/98d3126a31287dc7ece0555ee1b7c225_2.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/98d3126a31287dc7ece0555ee1b7c225_2.png)'
- en: Hello， I'm Alexander Halzner。 I'm from Gothenburg， Sweden。 I'm here at PyCon
    US this year。 and I'm very happy to be here and speak for you all today。 I'm going
    to talk a little bit about Pydantic。 My talk is titled Intro to Pydantic。 Runtime
    Type-Shacking for your Python data classes。 So let's get ahead done。 So as I told
    you。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 嗨，我是 Alexander Halzner。我来自瑞典哥德堡。今年我在 PyCon US，很高兴能在这里为大家发言。我将谈谈 Pydantic。我的演讲标题是《Pydantic
    简介：Python 数据类的运行时类型检查》。那么，让我们开始吧。正如我告诉你的。
- en: my name is Alexander Hartner， and I'm the founder of Halzner Technologies and
    as well， prepare。io which is a service which me and my colleague， Magnus have
    been working on for the past year。 You can see a small screenshot here down to
    the right。 I also talk at a lot of conferences。 I'm a frequent speaker at the
    different conferences。 For instance， PyCon Sweden， quite a few years。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我叫 Alexander Hartner，是 Halzner Technologies 的创始人，同时也是 prepare.io 的创始人，这是我和我的同事
    Magnus 过去一年一直在工作的服务。右下角可以看到一个小截图。我还在很多会议上发言，是不同会议的常客。例如，PyCon Sweden，多年前我参加过几次。
- en: Europiphon and of course here in PyCon US， for my first time this time around。
    So that's very nice。 I do some freelance consulting and I also， do some training
    and workshops so you can contact me。 if you're interested about that。 My Twitter
    handle is @ahoutner and you can also email me via。 contact@houtner。sc。 All my
    slides are available at slides。com/houtner。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Europiphon，当然我这次在 PyCon US 是第一次。所以这很不错。我做一些自由咨询，也进行一些培训和研讨会，如果你对此感兴趣，可以联系我。我的推特账号是
    @ahoutner，你也可以通过 contact@houtner.sc 给我发邮件。我的所有幻灯片都可以在 slides.com/houtner 找到。
- en: And all the links you can see in these slides， they are clickable so you can
    find them via the slides。com。 And just scroll down until you find the PyCon US
    slides。 which should probably be on top right now。 And you can also reach me on
    LinkedIn where I'm also a。 houtner。 So let's go ahead then。 So the outline for
    today's talk is like this done。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 并且你可以在这些幻灯片中看到的所有链接都是可点击的，所以你可以通过 slides.com 找到它们。只需向下滚动，直到找到 PyCon US 幻灯片，它们现在可能在顶部。你也可以在
    LinkedIn 上找到我，我的用户名也是 houtner。那么，我们开始吧。今天的演讲大纲如下。
- en: We're going to start with a quick refresher for Python data。 classes which could
    be good if you're forgotten in some of。 the details or if not just see what we're
    going to be covering。 And then I'm going to introduce you to Pythonic。 I'm going
    to talk a little bit about the runtime type。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从 Python 数据类的快速回顾开始，如果你忘记了一些细节，或者想看看我们将要覆盖的内容，这将是有益的。然后我将向你介绍 Pythonic。我会简单谈谈运行时类型。
- en: checking。 I'm going to show you some really cool JSON stuff you can do。 I'm
    going to show you some custom validators as well as， built-in validators。 I'm
    also going to show you a little bit how you can use。 Pythonic to runtime type
    check the types of your functions in， runtime。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 正在检查。我将展示一些非常酷的 JSON 相关内容。我会展示一些自定义验证器以及内置验证器。我还会简单介绍一下如何在运行时使用 Pythonic 对你的函数进行类型检查。
- en: So basically if you have a function you can check that as， well。 I'm going to
    show you a little bit about some framework。 integrations and how Pythonic can
    be used with a lot of， different frameworks。 I'm also going to show a small example
    of that and some。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，如果你有一个函数，你也可以检查它。我将介绍一些框架集成，以及如何与许多不同的框架一起使用 Pythonic。我还会展示一个小示例。
- en: automated testing which I'm not going to go too deep into。 but I'm going to
    drop a little hint there so you can find out， more if you're interested about
    that。 Some cool features worth mentioning and then we're going， to conclude this
    talk today。 So let's not wait any further and get started。 So data class is done。
    Here's a quick refresh。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化测试，我不会深入探讨，但我会给出一些提示，供你们进一步了解。如果你对此感兴趣，还有一些很酷的特性值得提及，最后我们将总结今天的演讲。让我们不再等待，开始吧。数据类部分结束。这里有一个快速回顾。
- en: We have the @DataClass decorator and for this talk we're。 going to use imagine
    a rewaffle place for our examples， because who doesn't love waffles？ Anyway。 so
    our imaginary company is a cafe named the， WaffleBistro。 And the WaffleBistro
    needs to model their waffles。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有@DataClass装饰器，在这个讲座中，我们将想象一个华夫饼店作为我们的例子，因为谁不喜欢华夫饼呢？无论如何，我们虚构的公司是一家名为WaffleBistro的咖啡馆。WaffleBistro需要对他们的华夫饼进行建模。
- en: So let's take a look at how such a data class could look， like。 So here we have
    a waffle。 We have some style。 We have some toppings and we have some type annotations
    on， that。 Now let's try it out then。 So as you can see we're trying to create
    a Swedish。 style waffle with chocolate sauce and ham。 Not my favorite combination
    of toppings and I'm not sure if。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这样一个数据类可能是什么样的。这里我们有一个华夫饼。我们有一些风格。我们有一些配料，并且我们在上面有一些类型注解。现在让我们试试看。因此，正如你所见，我们试图创建一个瑞典风格的华夫饼，配巧克力酱和火腿。虽然这不是我最喜欢的配料组合，但我不太确定。
- en: it's what the waffleBistro wants to serve either。 But as you can see it's completely
    allowed by our waffle。 class at this point。 So that's something we probably would
    want to avoid。 Maybe we want some stricter types on this because string， could
    be anything basically。 So let's go ahead then and see if we can constrain which。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是WaffleBistro想要提供的。但正如你所看到的，这在我们的华夫饼类中是完全允许的。因此，这是我们可能想要避免的事情。也许我们想对这件事施加一些更严格的类型限制，因为字符串基本上可以是任何东西。那么让我们继续，看看我们能否对其进行约束。
- en: types of toppings we offer and which styles。 So we offer a couple of cream based
    toppings。 So you can see we have whipped cream， we have ice cream。 We also have
    a couple of dessert sauces。 So you can see that we have a clove berry jam。 One
    of my personal favorites。 It's a beer we have here in Sweden， which is very good。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提供的配料类型和风格。所以我们提供几种基于奶油的配料。你可以看到我们有打发奶油，还有冰淇淋。我们还提供几种甜点酱。你可以看到我们有丁香浆果酱。这是我个人最喜欢的之一。这是一种在瑞典的啤酒，非常好喝。
- en: And if you have the chance you should try it out。 Raspberry jam， a classic。
    chocolate sauce for our Belgian， style waffles。 And as you can see， we have two
    styles。 Swedish and Belgian。 And we updated our data class using the waffle style。
    for our style and a couple of toppings for the toppings。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有机会，你应该尝试一下。覆盆子酱，经典的选择。为我们的比利时风格华夫饼提供巧克力酱。你可以看到，我们有两种风格，瑞典风格和比利时风格。我们更新了数据类，使用华夫饼风格来表示风格，和几种配料来表示配料。
- en: So let's see what happens now if we try to create a waffle， with ham topping。
    So as you can see。 the user provided a waffle order， where we have a Swedish style
    waffle and chocolate sauce。 with ham。 OK。 So did another type stop this？ Well，
    first statically checked types with my pie。 this would maybe be enough。 You would
    catch it as a type error in your static type， validation。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如果我们尝试创建一个带火腿配料的华夫饼会发生什么呢？如你所见，用户提供了一个华夫饼订单，其中有瑞典风格的华夫饼和巧克力酱，外加火腿。好的。那么另一种类型是否阻止了这一点？首先，使用我的pie进行静态类型检查，这可能就足够了。你会在静态类型验证中捕获到类型错误。
- en: But in runtime， it's still not stopped。 And especially if you're working with
    runtime data。 then this could be a problem。 So you can see that we're completely。
    allowed to create a waffle with ham。 There's nothing stopping us。 So what can
    we do about that then？
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 但在运行时，这仍然没有停止。特别是如果你在处理运行时数据时，这可能会成为问题。因此，你可以看到我们完全可以创建一个带火腿的华夫饼。没有任何东西阻止我们。那么我们该如何解决这个问题呢？
- en: And this is where Python comes handy。 So Python library， which allows you to
    enforce， run type--。 enforce types from type annotations in runtime。 It's compatible
    with data classes。 And you also have some bonus stuff if you want to go further。
    You have very user friendly errors。 There's no special syntax。 It's just pure
    Python classes。 Nothing strange。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是Python的用武之地。所以Python库允许你在运行时强制执行类型注解。它与数据类兼容。如果你想更深入，你还有一些额外的内容。你会得到非常友好的错误提示，没有特殊语法。它只是纯粹的Python类，没什么奇怪的。
- en: We have built-in this serialization， and serialization of classes。 And it's
    even supporting nested structures。 There are some predecessors like data classes。
    after Smoshmallow， Valadier， and Orm libraries。 Those could be good to look at
    what makes。 pedantic standout is that it's just， using the standard type annotations。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们内置了这种序列化，和类的序列化。它甚至支持嵌套结构。有一些前辈，如数据类，Smoshmallow，Valadier和Orm库。这些可能是了解使得pedantic突出的内容的好选择，因为它只是使用标准类型注解。
- en: And the documentation is really great。 As you can see， it's blue hair in the
    slide。 And that means you can click the link if you go to the slide。 software
    and find all the nice documentation yourself。 So let's get into pedantic time。
    So run type type checking is， of course， very nice。 This is what we want to do。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 文档真的很棒。正如你所看到的，它在幻灯片中是蓝色的。这意味着如果你进入幻灯片软件，你可以点击链接，自己找到所有不错的文档。那么让我们进入讲究细节的时间。运行类型检查当然非常不错。这正是我们想做的。
- en: So let's lean on the shoulder of the giant in the house， which is pedantic in
    this case。 So now we change our code a little bit。 We import data classes from
    pedantic。 instead of the standard library data classes。 And then we don't really
    change anything else。 We keep our waffle class the same。 But when we now try to
    initiate the waffle。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 那么让我们依靠房间里的巨人，即在这种情况下的pedantic。现在我们稍微改变一下我们的代码。我们从pedantic导入数据类，而不是标准库的数据类。然后我们并没有真正改变其他内容。我们的waffle类保持不变。但是当我们现在尝试初始化waffle时。
- en: you can see that we get a validation error。 Actually， we get two validation
    errors。 And they provide a nice readable value。 You can see that the references
    which index in the top。 being top all that's actually invalid。 So ham at index
    one。 And it gives us an error explaining what's wrong。 So this is really helpful。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到我们得到了一个验证错误。实际上，我们得到了两个验证错误。它们提供了一个易读的值。你可以看到索引在顶部的引用。顶部的内容实际上都是无效的。所以在索引一的位置是无效的。它给了我们一个错误，解释了出错的原因。这非常有帮助。
- en: And we can see it's neither the search source nor is it a cream。 So it's not
    allowed。 And with that simple change， we already， got some runtime type checking
    on our classes。 So we could stop here。 But of course， we want to go further and
    see what more we can do。 So let's try to create a valid waffle。 Maybe with Cloud
    Vergium。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到它既不是搜索源，也不是奶油。所以这是不允许的。通过这个简单的更改，我们已经在我们的类上实现了一些运行时类型检查。所以我们可以在这里停下来。但是当然，我们想进一步看看还能做什么。所以让我们尝试创建一个有效的华夫饼，也许加上Cloud
    Vergium。
- en: You can see in the picture here is what Cloud Vergium looks like。 It's kind
    of like orange raspberries in look， but it tastes completely different。 So let's
    create a Swedish style waffle， with whipped cream and Cloud Vergium。 See here
    how I use the cream enum for the whipped cream。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里的图片中看到Cloud Vergium的样子。它看起来像橙色的覆盆子，但味道完全不同。那么让我们制作一种瑞典风格的华夫饼，配上奶油和Cloud
    Vergium。看看我如何为奶油使用cream枚举。
- en: but strings were representations for the other fields。 Pedantic is a parsing
    library which。 will try to parse the data you actually want from this。 So it will
    convert it to enums for you automatically。 As you can see here。 Cloud Vergium
    automatically， got parsed as the search source。 If you want more strictness than
    this。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 但是字符串是其他字段的表示。Pedantic是一个解析库，它会尝试解析你实际想要的数据。所以它会自动将其转换为枚举。如你所见，Cloud Vergium自动解析为搜索源。如果你想要比这更严格的东西。
- en: you can achieve some of this with strict types， which you can also see in the
    documentation。 Or if you want even further， there， is being work made on a fully
    strict mode。 So that might be coming in the future。 Not sure when， but keep your
    eyes open。 if that's something that matters to you。 So what about JSON then？
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过严格类型实现其中一些，这在文档中也可以看到。或者如果你想要更严格，正在开发一个完全严格模式。所以这可能在未来推出。具体什么时候不确定，但如果这对你很重要，请保持关注。那么JSON呢？
- en: So the data class drop-in replacements， is really great for probability and
    makes it possible。 to get started really quickly。 You don't need to change anything。
    But sometimes you want to do even more。 And with the pedantic base model， you
    can。 So you have first class JSON support built-in。 And the only thing we change
    right now。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 数据类的替代品真的很棒，使得开始非常快速。你不需要更改任何内容。但是有时你想做得更多。而使用pedantic基础模型，你可以做到。因此，你拥有内置的一流JSON支持。而我们现在唯一需要更改的是。
- en: as you can see， is that we removed the data class decorator， and instead inherit
    from base model。 And of course， you can also have your own base class， that inherits
    from base model。 And then later。 you can inherit that class， and you automatically
    get it all the way。 But let's not go into that too much right now。 So let's see
    then。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们移除了数据类装饰器，而是从基础模型继承。当然，你也可以有自己的基础类，从基础模型继承。然后稍后，你可以继承那个类，你会自动得到所有功能。但我们现在不深入讨论这一点。那么让我们看看。
- en: I always need to specify the arguments， you see in keyword arguments when we
    use our base model。 And as you can see here， we use style equals Swedish。 And
    toppings equals the same data as before。 And as you can see， we get the same style
    of Waffle object， as we did before。 So everything works great。 But now we can
    easily both encode this entire object。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我总是需要指定参数，你可以在使用我们的基本模型时看到关键字参数。而且正如你在这里看到的，我们使用样式等于瑞典风格。配料等于之前的相同数据。正如你所见，我们得到了与之前相同的华夫饼对象，所以一切都运作良好。但现在我们可以轻松地对这个整个对象进行编码。
- en: as JSON and decode it as well。 There's also built-in support for Dicks， Pickle。
    and there's an immutable copy method。 But that they can also deserialize or serialize。
    subclasses and also if you reference another pedantic。 class within your properties
    in the pedantic class， that will also be handled for you。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 作为JSON并解码它。还有对Dicks和Pickle的内置支持，并且有一个不可变的复制方法。但它们也可以反序列化或序列化子类，并且如果你在pedantic类的属性中引用另一个pedantic类，这也将为你处理。
- en: So it's really handy for those kinds of things。 So let's see then we have our
    JSON object。 We could easily create here。 You can see we just run the JSON function
    on it。 And we can see that we get JSON output。 So what about reconstruction then？
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这对于这些事情真的很方便。那么让我们看看我们的JSON对象。我们可以轻松创建。你可以看到我们只需对它运行JSON函数。我们可以看到我们得到JSON输出。那么重建又怎么样呢？
- en: So let's try to reconstruct our object from the JSON output。 So we will use
    the parse_raw function。 You can also parse a list of pedantic items。 But let's
    not do that right now。 So we can use parse_raw。 And as you see， we get the original
    Waffle object back again。 So that's really great。 So let's see then what happens
    with errors。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 那么让我们尝试从JSON输出重建我们的对象。我们将使用parse_raw函数。你也可以解析一组pedantic项目。但现在我们不这样做。所以我们可以使用parse_raw。正如你所见，我们又得到了原始的华夫饼对象。这真的很好。那么让我们看看错误会发生什么。
- en: So we have the validation errors， which were readable， and exceptions are great。
    But when you're working with third party clients or with APIs， or stuff like that。
    maybe you want to expose those errors， in a structured format。 And of course。
    the async can be used here as well。 So let's see here we create an invalid Waffle。
    And in this case。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们有可读的验证错误，而异常也很好。但当你与第三方客户或API等打交道时。也许你想以结构化的格式公开这些错误。当然，异步也可以在这里使用。那么在这里我们创建一个无效的华夫饼。并且在这种情况下。
- en: we have the style 42， which， isn't an allowed style at the WaffleBist group。
    And we point error。 And here you can see we have the same error data。 But in a
    structured object where we can get this location。 of the error， we can get a message
    telling in a more， human readable way what's wrong。 And we also get some context
    data and a type of error。 So that's really useful。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有样式42，这在WaffleBist组中不是一个允许的样式。我们指向错误。在这里你可以看到我们有相同的错误数据，但以一个结构化的对象呈现，在这里我们可以获得错误的位置。我们可以以更人性化的方式获取告诉我们出错的消息。我们还获得了一些上下文数据和错误类型。这真的很有用。
- en: I've used this for instance in React and other front-end libraries。 to wrap
    it and easily get some very nice output。 And maybe automatically mark in a form。
    for instance， where the error is。 Yeah， I think that's really nice。 So JSON schema
    done。 So maybe you've heard about JSON schema。 And we can also export JSON schema
    directly from our model。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾在React和其他前端库中使用这个，来包装并轻松获得一些非常不错的输出。也许可以自动标记在表单中，比如错误的位置。是的，我觉得这真的很好。所以JSON架构完成了。也许你听说过JSON架构。我们还可以直接从我们的模型导出JSON架构。
- en: So this is where pedantic almost gets magical for me。 Because I mean， this is
    so useful。 You can use it to create a swagger or open API， as it's known as now。
    And specifications for your data。 So here we have the waffle class。 And we run
    the schema function on it。 And as you can see， we get this large schema， which。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是pedantic对我来说几乎变得神奇的地方。因为我是说，这真的很有用。你可以用它来创建swagger或开放API，正如现在所称的。以及你数据的规范。所以在这里我们有华夫饼类。我们对它运行架构函数。正如你所见，我们得到了这个大型架构。
- en: is actually a JSON schema。 Keep in mind that the pedantic does， use the draft
    7 of the ASIN schema。 which， is standard in open API 3。1， which， was released
    earlier this year。 But maybe if you're using the still common 3。0， you could have
    some slight compatibility issues。 Usually it's no problem。 But I've run into it
    like a few times。 So it's good to know。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上是一个JSON架构。请记住，pedantic确实使用ASIN架构的第7个草案，这是开放API 3.1中的标准，该标准在今年早些时候发布。但也许如果你仍在使用常见的3.0，你可能会遇到一些轻微的兼容性问题。通常没问题。但我遇到过几次。所以知道这一点是好的。
- en: The difference is it's quite small， but there are some。 And if you want to have
    straight compatibility， with the draft 4。 you can create the ASIN extra function，
    which handles it for you。 So that was the built-in validators。 But maybe you want
    to create some custom ones。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 区别非常小，但确实存在一些。如果你想与草稿4保持完全兼容，你可以创建ASIN额外函数，帮你处理这个问题。所以那是内置的验证器。但也许你想创建一些自定义的。
- en: and code our own business logic。 And the waffle bistra sure does。 So we have
    our own business logic。 which we want to implement。 And in this case， we want
    to constrict a little bit。 about what kind of waffles we can create。 So now we're
    creating a waffle order。 which is the subclass of the waffle。 And the only difference
    is that we actually enforce some stuff。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 并且编码我们自己的业务逻辑。而华夫饼小馆当然会这样做。所以我们有自己的业务逻辑，想要实施。在这种情况下，我们希望稍微限制一下可以创建什么类型的华夫饼。所以现在我们创建一个华夫饼订单，这是华夫饼的子类。唯一的区别是我们实际上强制了一些要求。
- en: when customers are ordering our waffles。 For instance， for Swedish style waffles。
    we only want to allow jam dessert sauces， so raspberry jam or a cloud barrier
    jam。 And for the Belgian styles， we allow chocolate sauce。 And additionally。 we
    don't want to have waffles， with both ice cream and whipped cream。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当顾客点我们的华夫饼时。例如，对于瑞典风格的华夫饼，我们只想允许果酱甜点酱，所以是覆盆子果酱或云障碍果酱。对于比利时风格的华夫饼，我们允许巧克力酱。此外，我们不希望有同时添加冰淇淋和奶油的华夫饼。
- en: So they have to choose either ice cream or whipped cream。 And you can see we
    created some functions here。 Basically， we have this at root validator。 telling
    us that we should run these pre equals false。 Tells us that we should run this
    after。 We've done all the other validators， so we know that we have parsed all
    the data。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 所以他们必须选择冰淇淋或奶油。你可以看到我们在这里创建了一些函数。基本上，我们有这个根验证器。告诉我们应该运行这些预等于假。告诉我们在完成所有其他验证器后应该运行这个，所以我们知道已经解析了所有数据。
- en: and stuff like that。 So that can be useful。 And we check the styles。 basically
    looking at the toppings， and at the styles。 And we can see that we follow these
    rules without。 Same for cream them。 So here we can see that we checked， that there's
    only one cream in the list of toppings。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 还有这样的东西。这会很有用。我们检查风格，基本上查看配料和风格。我们可以看到我们遵循这些规则，没有问题。奶油也是一样。所以在这里我们可以看到，我们检查过，配料列表中只有一种奶油。
- en: And we raise a nice error if there's more。 So let's go ahead then。 So let's
    see now what happens。 we tried to create an invalid waffle based on these new
    rules。 So I'm gonna create one with both ice cream and whipped cream。 I'm really
    feeling like having a lot of cream today。 And as you can see， the order wasn't
    accepted。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有更多的情况，我们会抛出一个友好的错误。那么让我们继续。那么现在看看会发生什么。我们尝试根据这些新规则创建一个无效的华夫饼。所以我会创建一个同时含有冰淇淋和奶油的。我今天真的想要很多奶油。如你所见，订单没有被接受。
- en: It's telling us that we're only allowed， to have one cream topping。 but we were
    given both ice cream and whipped cream。 So that won't do。 Basically that gives
    us a very nice way of knowing。 Then you can see that we get an error。 on the root
    validator as well。 This is because the previous validator doesn't pass。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 它告诉我们，只允许有一种奶油配料，但我们给了冰淇淋和奶油。所以这样不行。基本上，这给了我们一种很好的方式去了解情况。然后你可以看到，我们在根验证器上得到了一个错误。这是因为之前的验证器没有通过。
- en: We could add like an exception for this， or handle it in a smarter way。 But
    in this case。 like for the purpose of this talk， I mean it's gonna keep it simple。
    So if we try to create a waffle order now， with both a cloud barrier jam and chocolate
    sauce。 and it's a Swedish style。 So we don't allow chocolate sauce on Swedish
    style。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以添加一个例外，或者以更智能的方式处理。但在这种情况下，就这个讨论而言，我的意思是保持简单。所以如果我们现在尝试创建一个华夫饼订单，包含云障碍果酱和巧克力酱，并且是瑞典风格的。那么我们不允许瑞典风格的华夫饼上加巧克力酱。
- en: We can see also we get them。 We're saying that two waffle bistro doesn't sell
    this， type of waffle。 Here we could also create even better errors if we want，
    but for custom ones it's up to you。 So these runtime functions or type checkers，
    are really， really useful for a lot of things。 So maybe you want to use them for
    functions as well。 Sometimes your boundaries in the class。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以看到我们在这里说，两个华夫饼小馆不出售这种类型的华夫饼。如果我们想的话，这里还可以创建更好的错误，但对于自定义的来说，就看你了。所以这些运行时函数或类型检查器，对很多事情都非常有用。所以也许你想把它们用于函数。有时你在类中的边界。
- en: So actually， I finally got you covered here as well。 because there's a validator
    arguments decorator， which is still in beta。 And it was released in 2020， 18th
    of April in version 1。5， but it's great stable。 It could be good to know or interesting
    to see。 So here we have the valid arguments import。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 所以实际上，我终于在这里也覆盖了你，因为有一个验证器参数装饰器，仍在beta版本中。它是在2020年4月18日以1.5版本发布的，但它非常稳定。知道这个或看到它可能会很有趣。因此这里我们有有效参数的导入。
- en: and then we have our function， make order， with some undefined business logic
    taking in a waffle。 and actually our waffle order and actually making sure。 that
    the argument for waffle is an waffle order。 So we try to make a waffle here。 and
    we create a breakfast style waffle。 Here you can see we add a dict。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们有我们的函数make order，里面有一些未定义的业务逻辑，接收一个华夫饼。实际上是我们的华夫饼订单，并确保传入的参数是一个华夫饼订单。因此我们尝试在这里制作一个华夫饼，并创建一个早餐风格的华夫饼。在这里你可以看到我们添加了一个字典。
- en: and if the dict would be valid， it would actually create the waffle object for
    you。 And as you can see， we get the error telling us， that the style wasn't correct。
    because we don't sell breakfast waffles， just Swedish and Belgian styles。 And
    we can also see that we get the root validator error。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果字典是有效的，它实际上会为你创建waffle对象。如你所见，我们收到错误提示，告知我们样式不正确，因为我们不销售早餐华夫饼，仅销售瑞典和比利时风格。我们也可以看到我们得到了根验证器错误。
- en: saying that we don't sell this type of waffle。 So that's very nice。 And now
    that you've seen this。 maybe you're thinking that you want to integrate this，
    in your frameworks。 And that's also a very nice thing about pedantic。 There's
    a lot of frameworks。 having great integrations with pedantic。 So you can use it，
    for instance。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 说我们不销售这种类型的华夫饼。这非常好。现在你看到了这一点，可能在想要将其集成到你的框架中。这也是pedantic的一个很好的地方。许多框架与pedantic有很好的集成。因此，你可以使用它，例如。
- en: with the flask or Falcon or Stollet， with the framework agnostic spectra。 There's
    a quartz schema。 which is a async， or a quartz is async re-implementation of flask。
    and quartz schema is a first party pedantic integration， for that。 There's fast
    API。 which is very famous， and it's using pedantic for everything。 So it's really
    first class there。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 与flask、Falcon或Stollet，使用框架无关的spectra。还有一个quartz schema，它是一个异步的，或者说quartz是flask的异步重实现，而quartz
    schema是第一个官方的pedantic集成。还有fast API，非常有名，它在所有方面都使用pedantic。因此在那里真的是一流的。
- en: We have something called Django NINIA， for you using Django outside there。 And
    I haven't used it myself， but I've looked at it， and it's very similar to the
    other ones。 Should be quite this to use。 There's another cool one I like to mention，
    which is Proberry。 which is actually a GraphQL framework。 But it got experimental
    support for pedantic classes， well。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个叫Django NINIA的东西，供你在Django外部使用。我自己还没有使用过，但我看过，它与其他的非常相似。应该相当容易使用。还有另一个我喜欢提到的酷东西是Proberry，它实际上是一个GraphQL框架，但对pedantic类有实验性支持。
- en: for your GraphQL graphs。 So that's nice。 So it's like a puzzle piece。 that you
    can kind of fit into a little bit of everywhere。 And another thing I really， really
    like。 is automatic testing。 So there's a pedantic hypothesis plugin。 and you can
    use it for automatic testing。 I've linked an article here by Phil Jones。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对于你的GraphQL图形，这非常好。就像一个拼图块，可以在各处适当放置。而我非常喜欢的另一件事是自动测试。有一个严格的hypothesis插件，你可以用它进行自动测试。我在这里链接了一篇Phil
    Jones的文章。
- en: Where he uses a technique very similar to one I use。 to automatically test the
    APIs using this hypothesis plugin。 Basically。 if you've used the hypothesis， when
    you built your strategy。 you just referenced the model and you're fine。 If you
    want to learn more about hypothesis。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 他使用了一种非常类似于我使用的技术，通过这个hypothesis插件自动测试API。基本上，如果你使用过hypothesis，当你构建策略时，你只需引用模型，就可以了。如果你想了解更多关于hypothesis的内容。
- en: you could watch my talk from PyCon Suite in 2019， which is linked here。 Another
    great library。 schema thesis， which takes in an open API spec， and makes sure
    that your API actually can handle。 everything the spec says。 So it just generates
    a lot of tests， very nice library。 If you want to know more， you can watch my
    Europil from last year linked here。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以观看我在2019年PyCon Suite的演讲，链接在这里。另一个很棒的库是schema thesis，它接受开放的API规范，并确保你的API实际能够处理规范所说的一切。因此，它生成了很多测试，非常不错的库。如果你想了解更多，可以观看我去年Europil的演讲，链接在这里。
- en: or just check out the library。 I highly recommend it。 So I'm gonna show you
    very quickly。 super small example using Fast API， basically。 And using it to create
    a very small API。 around our Waffle be through logic。 So Fast API is very tightly
    integrated with the pedantic。 and it's async ASCII framework， but it can be used
    with sync mode as well。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 或者直接查看这个库。我强烈推荐它。现在我会非常快速地展示一个使用 Fast API 的超小示例。基本上是用它来创建一个围绕我们的 Waffle 的小 API。Fast
    API 与 pedantic 紧密集成，并且它是异步 ASCII 框架，但也可以以同步模式使用。
- en: And this is everything we need to create an application， with an API around
    us。 So here we have the two functions， implementing our business logic。 basically
    make order and dispatch order。 So we can make a Waffle order and we can dispatch
    it。 when the Waffle is done。 And we just reference our Waffle models here。 And
    just using that。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们创建一个围绕我们的 API 的应用程序所需的一切。在这里我们有两个函数，实施我们的业务逻辑，基本上是创建订单和派发订单。所以我们可以创建一个
    Waffle 订单，并在 Waffle 完成时派发它。我们在这里引用我们的 Waffle 模型，简单地使用它。
- en: you get the automatic API documentation， and you also get type validation for
    everything in runtime。 And this is just the beginning。 So this is just the tip
    of the iceberg。 There's a lot more and you can contact me via chat。 here on the
    conference or via Twitter or LinkedIn， or the email if you want to know more。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以获得自动 API 文档，还可以在运行时对所有内容进行类型验证。这仅仅是个开始。这只是冰山一角，还有更多内容。如果你想知道更多，可以通过会议上的聊天、Twitter、LinkedIn
    或电子邮件联系我。
- en: Here's just a quick taste about some of the things， you could look at。 but I'm
    not gonna have time to cover them。 But for instance， built-in support for 。n。
    so you can use it for settings management， very nice。 There's stuff like annotated
    types。 there's plugins for PyCharm， there's a MyPy plugin making the MyPy support
    even better。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这里简单介绍一下你可以查看的一些内容，但我没有时间详细讲解。例如，内置支持 `.n`，你可以用它来进行设置管理，非常不错。还有带注释的类型，PyCharm
    的插件，以及一个 MyPy 插件，使 MyPy 的支持更好。
- en: But there's of course native MyPy support。 We have a very fast way of handling
    this。 So if you look at the benchmarks， it's very fast compared to alternatives。
    But of course it should make your own。 If you're gonna use it， there's a lot of
    built-in types。 you can use。 And of course you can create your own types。 So concluding
    this talk then。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，MyPy 也有原生支持。我们有非常快速的处理方式。所以如果你查看基准测试，它与其他方案相比非常快速。当然，你应该自己去使用。如果你要使用它，有很多内置类型可以使用，当然你也可以创建自己的类型。总结一下这次演讲。
- en: we have the Pure Python syntax。 We get some better validation， very useful JSON
    tools for APIs。 easy to migrate from standard data classes， if you have those，
    lots of useful features。 And the more things are always coming， very active development
    stuff is happening all the time。 and they're working on the strict mode， and you
    should really try it out。 I mean。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有纯 Python 语法。我们获得了一些更好的验证，对于 API 来说非常有用的 JSON 工具，如果你有标准数据类，迁移非常简单，还有很多实用功能。更多的功能总是在不断推出，开发非常活跃，他们一直在研究严格模式，你真的应该试试。
- en: just play around with it a little bit。 I've used it from everything from production
    applications。 to just small one-off experiments just playing around。 So if you
    have any further questions。 you can ask me either here on the conference， or you
    can contact me via some of these links。 I also have a link here to my GitHub，
    where I also have a GitHub page for this talk。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 随便玩玩吧。我从生产应用到小型实验都用过它。所以如果你有任何进一步的问题，可以在会议上问我，或者通过这些链接联系我。我这里还有一个链接到我的 GitHub，那里有这个演讲的
    GitHub 页面。
- en: where I have even more information， some more links。 I have a Jupyter notebook
    with all the examples， so you can run them yourself。 You can sign up for my hypothesis
    course， if you're interested in property-based testing。 which I'm developing on
    the link here， and also for the papier。io beta。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我有更多信息，还有一些链接。我有一个 Jupyter notebook，里面包含所有示例，你可以自己运行。如果你对基于属性的测试感兴趣，可以报名参加我在这里开发的课程，也可以关注
    papier.io 的测试版。
- en: if you're interested in optimizing your PDF workflow， being able to create PDFs
    with HTML。 CSS and JavaScript。 And I'm also available for training workshops。
    and freelance consulting if you want to learn more。 So I don't hesitate to contact
    me if you want to know。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对优化 PDF 工作流程感兴趣，能够使用 HTML、CSS 和 JavaScript 创建 PDF。同时，如果你想了解更多，我也可以提供培训工作坊和自由咨询。所以如果你想知道，别犹豫，联系我。
- en: And thank you a lot for watching my talk today。 It's been a pleasure and I hope
    you enjoyed it。 Bye。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 非常感谢大家今天观看我的演讲。这是我的荣幸，希望你们喜欢。再见。
- en: '![](img/98d3126a31287dc7ece0555ee1b7c225_4.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/98d3126a31287dc7ece0555ee1b7c225_4.png)'
- en: (chuckling)， (chuckling)， (chuckling)， (chuckling)， (chuckling)， (chuckling)，
    (chuckling)。 (chuckling)， (chuckling)， (chuckling)， (chuckling)， (chuckling)，
    (chuckling)， (chuckling)。 (chuckling)， (chuckling)， (chuckling)， (chuckling)，
    (chuckling)， (chuckling)， (chuckling)。 (chuckling)， (chuckling)， (chuckling)，
    (chuckling)， (chuckling)， (chuckling)， (silence)。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: （轻声笑），（轻声笑），（轻声笑），（轻声笑），（轻声笑），（轻声笑），（轻声笑）。 （轻声笑），（轻声笑），（轻声笑），（轻声笑），（轻声笑），（轻声笑），（轻声笑）。
    （轻声笑），（轻声笑），（轻声笑），（轻声笑），（轻声笑），（轻声笑），（轻声笑）。 （轻声笑），（轻声笑），（轻声笑），（轻声笑），（轻声笑），（轻声笑），（沉默）。
- en: '![](img/98d3126a31287dc7ece0555ee1b7c225_6.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/98d3126a31287dc7ece0555ee1b7c225_6.png)'
