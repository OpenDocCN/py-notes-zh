- en: P62：Talk Pratyush Das - Python in High Energy Physics - 程序员百科书 - BV1rW4y1v7YG
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P62：演讲者Pratyush Das - 高能物理中的Python - 程序员百科书 - BV1rW4y1v7YG
- en: Hi， I am Pratush Das from the Institute of Engineering and Management in India。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 嗨，我是来自印度工程与管理学院的Pratush Das。
- en: '![](img/a9a4e892500dae9f5e728b3864abe80c_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a9a4e892500dae9f5e728b3864abe80c_1.png)'
- en: Before I begin my talk， I would like to give a small disclaimer that I am a
    CS undergrad。 and not a physicist。 So this talk is a completely personal account
    from my own experience of writing software。 for high energy physics。 What is high
    energy physics？
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在我开始演讲之前，我想先做一个小免责声明，我是一名计算机科学本科生，而不是物理学家。所以这次演讲完全是我自己在高能物理软件编写方面的个人经历。那么什么是高能物理呢？
- en: Perhaps he will be more familiar if I said particle physics。 High energy physics
    explores the fundamental particles that the world is made of and their。 interactions。
    High energy physicists try to answer the big questions like what is the universe
    made。 of， what are the forces that govern it。 Something that might be surprising
    to the audience is that high energy physics has some。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我说粒子物理学，他可能会更熟悉。高能物理探索世界所由成的基本粒子及其相互作用。高能物理学家试图回答一些大问题，比如宇宙是由什么构成的，是什么力量在支配它。可能让观众感到惊讶的是，高能物理有一些。
- en: of the largest scientific collaborations in the world。 For example。 the CMS
    and the Atlas experiments that are located at CERN have around 3000 people。 affiliated
    to them。 Just imagine 3000 people working on solving the same problem and collaborating
    with each。 other。 Something most people probably do not know is that the first
    computers were built for。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 世界上最大的科学合作之一。例如，位于CERN的CMS和Atlas实验大约有3000人。想象一下，3000人一起解决同一个问题并相互合作。大多数人可能不知道的是，第一台计算机是为。
- en: use in physics research。 When I say this， I am not really talking about the
    secret computers that were used for。 breaking secret codes and used in the wars。
    So John Vincent at Anasov and his then graduate student Clifford Berry created
    the first electronic。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 用于物理研究时。当我这么说时，我并不是在谈论用于破解秘密代码并在战争中使用的秘密计算机。所以约翰·文森特在Anasov和他当时的研究生克利福德·贝瑞创造了他们称之为Anasov贝瑞计算机的第一个电子。
- en: and non-programmable digital computing device that they call the Anasov Berry
    computer。 They created this in 1937 and it was quite popular or considered the
    only computing device。 still 1942。 This was then replaced by NEA which was inspired
    by it。 NEA was initially developed for use in ballistics and it was developed
    by another physicist John。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 和非编程数字计算设备。他们于1937年创造了这一设备，并且在1942年之前它相当受欢迎或被认为是唯一的计算设备。随后被受到其启发的NEA取代。NEA最初是为弹道学而开发的，由另一位物理学家约翰开发。
- en: Mauchley and Jay Presspert。 This is something that the audience might be more
    familiar with。 I would ask for a raise of hands if this was a light presentation
    but I assume a lot of。 people in the audience have heard of Monte Carlo techniques。
    This was invented by Nicholas Metrobales' group at Los Alamos National Laboratory
    for Physics。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Mauchley和Jay Presspert。这是观众可能更熟悉的内容。如果这是一个轻松的演讲，我会请大家举手，但我假设在座的许多人都听说过蒙特卡罗技术。这项技术是由尼古拉斯·梅特罗巴莱斯的团队在洛斯阿拉莫斯国家实验室为物理学发明的。
- en: problems。 Most computer science people would have heard of the one human architecture
    that forms the。 basis of most computers。 It was never that because John von Neumann。
    someone who played a major role in physics， research。 his internal memo about
    using the NEA for nuclear simulation。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 问题。大多数计算机科学的人应该都听说过一种构成大多数计算机基础的人类架构。它从来都不是因为约翰·冯·诺依曼，这位在物理研究中发挥了重要作用的人，他在关于使用NEA进行核模拟的内部备忘录中提到。
- en: And then something that is more close to my heart in 1991， Tim Gjarnersley invented
    the。 worldwide web at SART。 Before I go into how we use Python in high energy
    physics。 I would like to talk about， what are the biggest computing challenges
    in high energy physics。 High energy physics research generates a lot of data。
    Elementary particles travel extremely fast。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更贴近我心的事情，1991年，Tim Gjarnersley在SART发明了全球互联网。在我谈论我们如何在高能物理中使用Python之前，我想先讨论一下高能物理中最大的计算挑战是什么。高能物理研究会产生大量数据。基本粒子移动得非常快。
- en: I mean， I guess we are taught in our physics and the chemistry courses in high
    school about。 how fast an electron moves around the nucleus。 And in trying to
    imagine how many interactions there would be between different electrons。 and
    each of these interactions need to be stored。 But it is not just the size。 It
    is also the complexity of the data that needs to be stored。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我的意思是，我想我们在高中的物理和化学课程中都被教过电子围绕原子核运动的速度。在试图想象不同电子之间会有多少次相互作用时，每一次相互作用都需要被存储。但这不仅仅是规模的问题，存储的数据的复杂性也是一个问题。
- en: The representation of the particles and the trajectories and also the collisions
    and that。 is not very easy。 When I said that we need to store this much data。
    we actually will not store all of the， data。 These experiments have a trigger
    system built in that rejects some of the data outright。 But even then it is petabytes
    and petabytes of data。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 粒子、轨迹和碰撞的表示并不容易。当我说我们需要存储这么多数据时，实际上我们并不会存储所有的数据。这些实验内置了一个触发系统，直接拒绝了一些数据。但即便如此，数据的量也是PB级别的。
- en: Here I have a screenshot of a CERN webpage and I will see the CERN data centered
    past。 the 200 petabyte milestone and this was back in 2017。 It has been three
    whole years since this has happened。 But even this is not really the limit of
    the data that we need to store。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一张CERN网页的截图，我将看到CERN数据在2017年突破了200PB的里程碑。自那时起已经整整三年了。但即使这样，这也不是我们需要存储的数据的限制。
- en: This data storage is going to increase exponentially when the large electron
    collector is upgraded。 to the high luminosity larger term collector or what is
    more commonly called the HLEAs。 And this is going to happen in less than a decade。
    So we really need to prepare for this。 The high energy physics community has built
    something that I think is unique to the high。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当大型电子收集器升级到高亮度的更大收集器，或者更常被称为HLEAs时，数据存储将会呈指数级增长。这将在不到十年的时间内发生。因此，我们真的需要为此做好准备。高能物理社区建立了一些我认为是独特的东西。
- en: energy physics research field， the worldwide LHC computing grid。 It is a network
    of computers that are distributed all over the world at research institutes and。
    universities where high energy physics research is conducted。 This is used to
    distribute the data storage and computation。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在高能物理研究领域，全球的LHC计算网是一个分布在世界各地的计算机网络，覆盖了进行高能物理研究的研究机构和大学。这用于分配数据存储和计算。
- en: This solves some of the problems because the burden of storing the data or computation
    is。 not on one particular research institute。 Then again。 the WLCG is not enough
    to solve all of the high energy physics computing requirements。 SI-06 or spec
    in 2006 is an industry standard benchmark with a wide variety of codes represented。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这解决了一些问题，因为数据或计算的存储负担不再由一个特定的研究机构承担。然而，WLCG并不足以解决所有高能物理计算的需求。SI-06或2006年的规范是一个行业标准基准，涵盖了多种代码。
- en: HS-06 or H-spec-06 is the high energy physics variant of it。 It uses only the
    C++ base codes from SI-06 that match high energy physics use cases。 If you follow
    the plot on the slide， you will notice that there is almost a factor of five。
    increase for SI-06 whereas just a factor of two increase for HS-06。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: HS-06或H-spec-06是高能物理的变体。它仅使用SI-06中的C++基础代码，匹配高能物理的应用案例。如果你跟随幻灯片上的图表，你会注意到SI-06几乎增加了五倍，而HS-06仅增加了两倍。
- en: This shows that for high energy physics use cases especially， CPUs aren't getting
    much， faster。 So what do we do if we can't use CPUs？ Let's use GPUs。 A lot of
    the high energy physics computations are embarrassingly parallel which makes it
    ideal。 for using GPUs。 So， in its extensive use of GPUs for high energy physics
    research also found a spot on the。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明，对于高能物理的应用案例，CPU的速度并没有显著提升。那么，如果我们无法使用CPU，该怎么办呢？让我们使用GPU。很多高能物理计算都是极其并行的，这使得使用GPU变得理想。因此，在高能物理研究中广泛使用GPU也找到了一个合适的位置。
- en: NVIDIA website。 At the lower half of the slide， there is an excerpt from Adrian
    Ofteger's talk title。 GPU resources for the CNF HPC cluster that shows that using
    GPUs could drastically improve。 performance for high energy physics problems。
    The awkward array library attempts to solve some of the problems that I discussed
    in the。 earlier slides。 It was built with a need to perform computations on the
    complex high energy physics data that。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: NVIDIA网站。在幻灯片的下半部分，有一段来自Adrian Ofteger演讲的摘录，标题为“CNF HPC集群的GPU资源”，显示使用GPU可以显著提高高能物理问题的性能。Awkward数组库试图解决我在前面的幻灯片中讨论的一些问题。它的构建是为了处理复杂的高能物理数据计算。
- en: I mentioned and was also recently redesigned to have different levels of abstraction
    that。 allow multiple things like possibly having a GPU back end in the future
    and to allow。 someone who wants to play with the source code to have access to
    the underlying C++ layer。 And most important to this talk， it is meant to be used
    via its Python interface that is。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我提到的内容最近也进行了重新设计，具备不同的抽象层级，这允许未来可能有GPU后端，并允许希望玩弄源代码的人访问底层C++层。而最重要的是，它旨在通过其Python接口使用。
- en: located at the top of the design tree to the right of the slide。 So what makes
    a language ideal for use in high energy physics？ It has to be easy。 This is don't
    really want to spend a lot of time learning a new language。 You have to remember
    they are not software engineering or computer science people and。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 位于设计树顶部的幻灯片右侧。那么，是什么使得一种语言在高能物理中理想？它必须易于使用。人们并不想花太多时间学习新语言。你必须记住，他们不是软件工程或计算机科学领域的人。
- en: are usually not interested in the code itself。 Python is easier to use and learn
    than most other languages。 Ok， there are some purists who would probably say that
    Python is not necessarily easy if。 you want to use it properly and not be really
    really slow。 But let's ignore that for now。 The language has to be fast as mentioned
    in an earlier slide， high energy physics has。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通常人们对代码本身并不感兴趣。Python比大多数其他语言更易于使用和学习。好吧，有些纯粹主义者可能会说，如果想正确使用Python而不太慢，那并不一定容易。但现在先不提这个。正如早前幻灯片所提到的，语言必须快速，因为高能物理有大量数据。
- en: a lot of data and to perform computations on that data， you need the language
    to be fast。 Python is not necessarily slow。 When used with libraries like NumPy
    and NumPy， it can be quite fast。 The language has to be mainstream。 If a language
    is popular。 it is easy to find resources to learn the language itself and， find
    support if required。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要对这些数据进行计算，你需要语言快。Python并不一定慢。当与NumPy等库一起使用时，它可以非常快速。语言必须是主流的。如果一种语言流行，就容易找到学习资源和必要时的支持。
- en: And according to the screenshot of the TIOB language index， that is definitely
    true for， Python。 So although Python was not the main language used in high energy
    physics， physicists started。 using Python soon after it was developed。 In 1994。
    a handful of physicists like Jeff Templon started using Python。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 根据TIOB语言指数的截图，这对Python来说确实如此。因此，尽管Python不是高能物理中使用的主要语言，物理学家在Python开发不久后就开始使用它。1994年，一小部分物理学家，比如Jeff
    Templon，开始使用Python。
- en: These were just small scripts for their own type of projects but not really
    used on a， large scale。 After three years， one of the largest national laboratories
    in the US published a paper。 about using Python as an extension language for the
    D0 experiment。 They published the set CHUP which is the flagship conference for
    computing in high energy physics。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是针对各自项目的小脚本，并未在大规模上使用。三年后，美国最大的国家实验室之一发表了一篇关于将Python用作D0实验扩展语言的论文。他们发布了CHUP，这是高能物理计算的旗舰会议。
- en: So it was kind of a big deal。 After a year in 1998。 Jeff Templon published a
    paper titled "Python as an Integration Language"。 at the physics department of
    the University of Georgia。 In 2000。 Python slowly started being adopted on a larger
    scale。 There were two talks presented at CHUP about Python titled "Dynamic Graphical
    User Interfaces。 Using XML and J Python from Formula" and "Ida LHC++ User Interface
    in Python from CERN"。 In 2001。 Philip Kanal， who is one of the core developers
    of one of the most widely used。 software libraries today， gave a talk summarizing
    the data analysis and visualization track at。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一件大事。在 1998 年，Jeff Templon 发表了一篇题为《Python 作为集成语言》的论文，地点是乔治亚大学的物理系。到 2000 年，Python
    开始被更广泛地采用。在 CHUP 上有两场关于 Python 的演讲，标题为“动态图形用户界面：使用 XML 和 J Python 进行公式”和“Ida LHC++
    的 Python 用户界面”。在 2001 年，Philip Kanal——今天最广泛使用的软件库之一的核心开发者之一，进行了总结数据分析和可视化轨迹的演讲。
- en: CHUP where he emphasized the usage of Python in high energy physics。 By 2003。
    experiments had started putting Python in some of the analysis frameworks。 And
    once it is in an analysis framework， most of the people in that experiment start
    using， it。 So let's say by 2003， physicists had started seriously using Python
    for their analysis。 But even so。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CHUP 上，他强调了 Python 在高能物理中的使用。到 2003 年，实验已经开始在一些分析框架中引入 Python。一旦它在分析框架中，大多数参与该实验的人都开始使用它。因此可以说，到
    2003 年，物理学家们已经开始认真使用 Python 进行分析。即便如此。
- en: C++ was still the main language being used。 So this is a plot created by Jil
    Pivarski who finds the term "year of Python" as according。 to this plot in 2019。
    Python usage in high energy physics trumped the usage of C++ for the first time。
    And okay， so this plot should not be relied on solely because this is based on
    the GitHub。 repositories of users who have parked a well-known high energy physics
    repository on GitHub where。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: C++ 仍然是主要使用的语言。因此，这是一张由 Jil Pivarski 创建的图，发现“Python 年”的说法符合此图表。在 2019 年，Python
    在高能物理学中的使用首次超过了 C++。不过，这张图表不应单独依赖，因为它基于在 GitHub 上停放著名高能物理库的用户的 GitHub 仓库。
- en: CMS is done new。 But this does give us an indication of where things are headed。
    In the past。 there have been mainly two languages that have dominated in the field
    of high-energy， physics。 There was Fortran up to early 1990s。 There was this whole
    ecosystem built in Fortran with power， H。 Book and Zebra。 And then in the early
    1990s， root was created， which was written in C++。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: CMS 的新发展给我们指明了未来的方向。过去，高能物理领域主要有两种语言主导。Fortran 一直到 1990 年代初期，Fortran 构建了整个生态系统，包括
    power、H、Book 和 Zebra。然后在 1990 年代初期，root 应运而生，使用 C++ 编写。
- en: And root has still been used to this day extensively。 I'm going to talk about
    more about root in the next few slides。 But let me complete by saying that I am
    optimistic that Python is the language of the future。 So how do high-energy physics
    people work with data？ Every high-energy physics researcher uses root。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 而 root 到今天仍被广泛使用。我将在接下来的几张幻灯片中详细讨论 root。但我想补充说，我对 Python 作为未来的语言持乐观态度。那么，高能物理学者如何处理数据呢？每位高能物理研究者都使用
    root。
- en: So root is a more diverse scientific software toolkit。 It provides all the functionalities
    needed to deal with big data processing， statistical， analysis。 visualization
    and storage。 It is mainly written in C++。 And when I say that it provides all
    of the functionalities， it really does provide all。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 所以 root 是一个更具多样性的科学软件工具包。它提供处理大数据所需的所有功能，包括统计分析、可视化和存储。它主要用 C++ 编写。当我说它提供所有功能时，确实是提供了所有功能。
- en: of the functionalities。 It provides everything from plotting graphs to machine
    learning libraries and data streams。 or studying following data， all in this one
    monolithic package for it to be。 The root is probably the primary reason for the
    dominance of C++ in high-energy physics。 So root was built in the mid-1990s by
    daily improvement funds and amplifiers。 It convincingly。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 它提供从绘制图表到机器学习库和数据流的所有功能，或者研究随后的数据，所有这些都在一个单一的软件包中。C++ 在高能物理中的主导地位的主要原因可能是 root。Root
    是在 1990 年代中期由日常改进基金和放大器构建的，具有说服力。
- en: quite convincingly， decreased power in the Fortran ecosystem in high-energy，
    physics。 I don't think any people use power or H， Book or Zebra today or， I mean，
    even if they do。 it is probably to maintain some sort of backward compatibility
    with data that was recorded back。 in the 1980s。 So root is probably the file format
    or to be more accurate。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 相当有说服力地，减少了高能物理中Fortran生态系统的影响。我认为现在没有人使用power或H，Book或Zebra，即使他们使用，也可能只是为了维护与1980年代记录的数据的某种向后兼容性。所以root可能是文件格式，或者更准确地说。
- en: the largest open-source file， format， storing the largest amount of data。 Root
    is developed by a small team， directly led by Axel Norman and Sarn， who work quite。
    actively on maintaining and developing it。 I think to this day computing and high-energy
    physics is quite synonymous with root。 It's hard to imagine both of them being
    separate。 I think you might have heard of the discovery of the Higgs boson at
    Sarn in 2012。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 最大的开源文件格式，存储着最多的数据。Root由一个小团队开发，直接由Axel Norman和Sarn领导，他们在维护和开发方面相当活跃。我认为直到今天，计算和高能物理几乎与root同义。很难想象这两者会分开。我想你可能听说过2012年在Sarn发现希格斯玻色子的事。
- en: If you look at the slide at the bottom， it is the official Atlas plot created
    by root。 that was used to represent the existence of the Higgs boson。 So root
    is quite important in high-energy physics research。 But many people asked for
    a Python interface and I'm not surprised。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看底部的幻灯片，这是由root创建的官方Atlas图，用于表示希格斯玻色子的存在。因此，root在高能物理研究中相当重要。但许多人请求Python接口，我并不感到惊讶。
- en: So root has Python wrappers around its C++ code and they call it Python。 But
    the root code base is actually quite large。 I think it senses of millions and
    millions of kinds of code。 If you look at the contribution statistics to the right
    of the slide， you will notice。 that each of these developers themselves have more
    than a million lines of code added to。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 所以root在其C++代码周围有Python包装器，他们称之为Python。但root的代码库实际上相当庞大。我想它涉及数百万种代码。如果你查看幻灯片右侧的贡献统计，你会注意到每个开发者自己都添加了超过一百万行的代码。
- en: the code base。 And this doesn't even count people who contributed before 2000。
    So how does one handle this？ You don't really expect people to add Python bindings
    around each class for millions of。 kinds of code。 So root came up with something
    called CPDYY。 So CPDYY creates dynamic bindings and this was initially developed
    by WinLab itself。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 代码库。 而且这还不包括2000年之前做出贡献的人。那么，如何处理这个呢？你真的不指望人们为数百万种代码在每个类周围添加Python绑定。于是，root想出了一个叫做CPDYY的东西。CPDYY创建动态绑定，最初是由WinLab自己开发的。
- en: And quite deeply integrated with it， even though it does exist as a separate
    line。 So CPDYY is quite an interesting thing， which I think is quite unique to
    the high-energy。 physics world。 You might be surprised to know that root actually
    just comprises of three main files for generating。 the Python bindings。 It's root。py，
    CPDYYY。py and Pythonization。py。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 并且与其深度集成，尽管它作为独立行存在。CPDYY是一个非常有趣的东西，我认为它在高能物理世界中相当独特。你可能会惊讶地发现，root实际上仅由三个主要文件组成，用于生成Python绑定。它是root.py，CPDYYY.py和Pythonization.py。
- en: Root doesn't have separate files for each C++ to link it to Python。 So this
    is quite convenient if you think about it。 And although it is deeply integrated
    with the root， the authored name lever itself is。 currently trying to develop
    it to be a standalone library。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Root没有为每个C++单独创建文件以便与Python链接。所以如果你考虑一下，这实际上非常方便。虽然它与root深度集成，但作者名称本身目前正在努力开发一个独立的库。
- en: And I think that once it is fully developed， it might be quite revolutionary
    for fields。 other than high-energy physics。 So there is another way to read and
    write root files。 It is quite uproot。 So uproot is an alternate implementation
    of root IO in Python。 Even though pyroot is improving day by day and the root
    developers are working on something。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为一旦它完全开发出来，可能会对高能物理之外的领域产生革命性的影响。所以还有另一种读取和写入root文件的方法。这就是uprooot。所以uprooot是root
    IO在Python中的替代实现。即使pyroot在不断改进，root开发者也在进行一些工作。
- en: called experimental pyroot to solve some of these issues， but there are still
    some issues。 that users would run into if they tried using pyroot code。 There
    are object ownership issues between the C++ and Python root code。 Pyroot is not
    really completely Python-y， like you would expect it to be。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 称为实验性的`pyroot`以解决其中的一些问题，但如果用户尝试使用`pyroot`代码，仍然会遇到一些问题。C++和Python根代码之间存在对象所有权问题。`Pyroot`并不像你期待的那样完全是Python风格的。
- en: And it is kind of slow to deal with certain types of data。 And here we are not
    really talking about Python slow。 We are talking about slow as in slower than
    even naive Python。 So that is why uproot was written to solve some of these issues。
    And since it is written completely in Python， it implicitly solves the first wishes
    out。 of the path。 And although rewriting something in Python might be quite difficult。
    it is not impossible。 Uproot was actually created by a single full-time employee，
    Jim Pivarsky。 and his student， me。 And also， of course， helped by many volunteers
    who still push comments and send full requests。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 它在处理某些类型的数据时速度有点慢。这里我们并不是在谈论Python的慢，而是说慢到甚至比简单的Python还要慢。这就是为什么`uproot`被编写出来以解决这些问题。而且由于它完全用Python编写，它隐含地解决了路径上的第一个愿望。尽管用Python重写某些东西可能相当困难，但并不是不可能的。`Uproot`实际上是由一名全职员工Jim
    Pivarsky和他的学生我共同创建的。当然，还有许多志愿者帮助推动评论和提交请求。
- en: to help in maintaining and developing it。 So， this is one of the most widely
    used Python packages in high-energy physics。 although， it is relatively quite
    new。 Okay， when I said relatively。 it started being written by Jim in late 2017。
    But when you think about it。 the other library that came before it or rather the
    library that。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以帮助维护和开发它。因此，这成为高能物理中最广泛使用的Python包之一，尽管它相对较新。好的，当我说相对较新时，它是由Jim在2017年末开始编写的。但当你考虑到之前出现的其他库时，或者说那个库。
- en: is still being used on the main library root was developed in mid-1990s。 So
    compared to that。 uproot is really quite new。 And it is really just Python。 If
    you look at the graph or rather the bar at the top， you will notice that all of
    it。 is just Python and Jupyter notebooks。 The one when 5% see that is present
    is a developer tool that I wrote that is just to be used。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然在主要库中使用，`root`库是在1990年代中期开发的。因此相比之下，`uproot`确实相当新。而且它真的只是Python。如果你查看图表，或者说顶部的柱形图，你会注意到所有的内容都是Python和Jupyter笔记本。当你看到5%的开发工具时，那是我编写的，仅供使用。
- en: for and by developers and users don't interact with it。 And if you look at the
    graph。 you will realize that uproot is used equally up there with。 the other industry
    tools for scientific computing like NumPy and SciPy。 So it is quite popular。 And
    this graph was plotted from scientific Linux usage only。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员和用户不与它互动。如果你查看图表，你会意识到`uproot`的使用率与其他科学计算行业工具如NumPy和SciPy是一样的。因此它相当受欢迎。这个图表仅是基于科学Linux的使用情况绘制的。
- en: Scientific Linux was created in formula for use by this is。 And we rejected
    the other operating systems because those contain some noise with data。 from batch
    jobs and such。 So this is quite more accurate than other devices。 So Python is
    not so slow。 Contrary to popular reading。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 科学Linux是为此用途而创建的公式。我们拒绝了其他操作系统，因为那些系统在数据中包含一些噪音，来自批处理作业等。因此，这比其他设备要准确得多。所以Python并没有那么慢，与流行的说法相反。
- en: But that is only when used with libraries like NumPy or NumPy or other libraries。
    I am sure there are a bunch of them out there that include performance or release
    the GIL。 or something。 And okay， so in this big in this benchmark with the time
    and the speed up。 It is performed on a code computing a fractal。 If you want to
    look at the code。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 但那仅在与像NumPy或其他库一起使用时。 我相信还有很多包含性能优化或释放GIL的库存在。好的，在这个基准测试中，时间和速度提升是在计算一个分形的代码上执行的。如果你想查看代码。
- en: there is the link to the notebook at the bottom。 If you look at this closely。
    you will notice that the vector is NumPy platforms almost。 as fast as C++ root
    with vector is NumPy at 30 times the speed up 95th on the root at。 32 times the
    speed up 95th on。 And if you use something like NumPy。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在底部有一个笔记本的链接。如果你仔细观察，你会注意到向量在NumPy平台上的速度几乎和C++一样，`vector`在根目录下提升了30倍的速度，而在这里则提升了32倍的速度。如果你使用像NumPy这样的东西。
- en: then it is much faster than C++ root with the compiled。 by NumPy number benchmark
    at 90 times speed up with the root just at 32 times。 But this is to be taken with
    a pinch of salt because this again this is for just one piece。 of code that we
    chose especially to show that Python doesn't mean that it is slow。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 它的速度比用NumPy编译的C++ root快得多，在基准测试中速度提升了90倍，而root仅为32倍。但这需要谨慎对待，因为这只是针对我们特别选择的一段代码，显示Python并不意味着慢。
- en: And I am sure that for more general uses， they would be at par or C++ root would
    be faster。 than uproot。 So this is a tool that was developed outside of pinaigee
    physics unlike a lot of the things。 that I have been talking about。 And I think
    most of you might have heard of this already。 Pyvine 11 is a very popular tool
    that is used in industry and even by hobbyists I would， say。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信在更广泛的应用中，它们会平起平坐，或者C++ root会比uproot更快。这是一个在高能物理之外开发的工具，与我之前讨论的许多事情不同。我想你们中的大多数人可能已经听说过。Pyvine
    11是一个非常流行的工具，被行业甚至爱好者广泛使用。
- en: If you look at the GitHub stars， there are 7，000 stars that reminds me I should
    probably go。 and start it myself since I started using it。 And if the stars are
    7，000。 I am sure the actual number of people that are using it are， a bunch more。
    By bunch。 I mean exponentially more。 And so my point in this slide is not to talk
    about Pyvine 11 itself but how we can use。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看看GitHub上的星标，有7000个星标，这让我想我可能应该去开始使用它。如果星标是7000个，我相信实际使用它的人数会多得多。我的意思是成倍增加。因此，我在这一幻灯片中的观点并不是讨论Pyvine
    11本身，而是我们如何使用。
- en: Pyvine 11 for high energy physics software。 So why would a high energy physics
    researcher use Pyvine 11？
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Pyvine 11用于高能物理软件。那么，高能物理研究人员为什么会使用Pyvine 11呢？
- en: It is easy to do have existing C++ code in Pyvine 11 and it is not always easy
    to vectorize。 all operations implemented in Python even if you are using a library
    like NumPy。 Although we showed that Python does not necessarily mean false， it
    was for a particular process。 like I said earlier。 In general， I guess naive C++
    code will always be faster than naive Python code。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在Pyvine 11中拥有现有的C++代码很简单，但向量化并不总是容易。即使使用像NumPy这样的库，所有在Python中实现的操作也不总是方便。虽然我们展示了Python不一定意味着慢，但这是针对特定过程的。就像我之前说的，总的来说，我猜天真的C++代码总是比天真的Python代码快。
- en: There might be a few exceptions but yeah， C++ faster than Python。 And I am going
    to again talk about awkward array， the library that I mentioned at the。 start
    of this talk。 So awkward array was initially written solely in Python but it was
    recently implemented in。 C++ and Pyvine 11 with a lot of success。 Even though
    it is still in development。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会有一些例外，但是的，C++确实比Python快。而我将再次谈到“awkward array”，这是我在本次演讲开始时提到的库。最初“awkward
    array”完全用Python编写，但最近在C++和Pyvine 11中成功实现。尽管它仍在开发中。
- en: a lot of physicists have already started using， it。 So there are multiple reasons
    why the author decided to rewrite it in C++ and Pyvine 11。 The original NumPy
    interface was hard to extend and maintain。 And also the author conducted a survey
    where he asked physicists what they required and。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 很多物理学家已经开始使用它。因此，作者决定用C++和Pyvine 11重写的原因有很多。原来的NumPy接口难以扩展和维护。而且作者还进行了调查，询问物理学家他们需要什么。
- en: they said that although they appreciate a NumPy interface and they like to use
    it but。 they still sometimes would need an interface for imperative。 There are
    other high-level physics libraries except awkward array that are using Pyvine，
    11 already。 For example， the first histogram library， PyFMC and Goofy。 This brings
    me to the Scikit-Her project。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 他们表示，尽管他们欣赏NumPy接口并喜欢使用它，但他们有时仍需要一个命令式的接口。除了“awkward array”，还有其他高层次物理库已经在使用Pyvine
    11。例如，第一个直方图库PyFMC和Goofy。这让我想到了Scikit-Her项目。
- en: So the Scikit-Her project is meant to contain all Python tools that might be
    required for。 research in high-energy physics。 There are a lot of active developers
    building tools in Python for using high-energy physics。 that are housed under
    this project。 And since all of the tools are in Python。 one can actually consider
    it to be a more， utilized tool set and physicists can choose the library that
    they need for their current。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Scikit-Her项目旨在包含高能物理研究所需的所有Python工具。许多活跃的开发者正在为高能物理构建Python工具，这些工具归于这个项目。由于所有工具都在Python中，因此可以将其视为一个更被广泛使用的工具集，物理学家可以选择他们当前所需的库。
- en: use case at that point of time。 And then once they're done with that and they
    need to do something else。 they can just move， to another library。 And also some
    of the libraries under Scikit-Her are extensions to industry or develop libraries。
    And this means that it does not require a lot of reinventing the wheel for high-energy。
    physics uses。 And the Scikit-Her project also has an actively monitored heater
    channel。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在那个时候的用例。 一旦他们完成了这项工作并需要做其他事情。 他们可以直接转移到另一个库。 而且，Scikit-Her下的一些库是行业或开发库的扩展。
    这意味着在高能物理应用中不需要大量的重复造轮子。 Scikit-Her项目还有一个积极监控的加热器频道。
- en: So if you want to reach out to people in this community， I have the name of
    the channel。 in the slide。 So please go ahead and I'm sure you'll find a lot of
    people willing to talk to you。 So this is a list of currently active packages
    under the Scikit-Her project。 This slide was presented by Eduardo Rodriguez at
    CHF 2019。 If you look at the slide closely。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想联系这个社区的人，我在幻灯片上有频道的名字。 所以请大胆去联系，我相信你会找到很多愿意和你交流的人。 这是当前在Scikit-Her项目下活跃的包的列表。
    这张幻灯片由Eduardo Rodriguez在CHF 2019上展示。 如果你仔细看看幻灯片。
- en: you will see that there are tools for everything。 There are tools for tracking
    particles and decays。 but histogramming， even processing， fitting， simulation，
    everything。 The Scikit-Her project is growing with many new packages still coming
    up。 This is not very surprising as it mirrors the Python growth plot that I had
    shown in。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现有各种工具。 有用于跟踪粒子和衰变的工具，但直方图处理、拟合、模拟，样样俱全。 Scikit-Her项目正在不断发展，许多新包仍在推出。 这并不令人惊讶，因为它反映了我之前展示的Python增长图。
- en: an earlier slide。 This is made more evident by the fact that if you look at
    the slide。 you will notice that， some packages are tagged as new packages。 These
    were developed after CHF 2019。 So they are quite new。 I think the recent advances
    in the fields of machine learning and deep learning have played。 a major role
    in the shift from root and C++ to Python in the form of Pyroot and uproot。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 早期的幻灯片。 这一点通过观察幻灯片更为明显。 你会注意到，一些包被标记为新包。 这些是在CHF 2019之后开发的。 所以它们相当新。 我认为机器学习和深度学习领域的最新进展在根和C++向Python的转变中发挥了重要作用，形成了Pyroot和uproot。
- en: Root has its own machine learning library， TMBA， but in my personal opinion，
    I think it。 cannot really measure up to industry standard libraries such as PyTorch
    and TensorFlow。 But high energy physicists are open to change and invite people
    from industry to speak at。 their conferences。 For example， so much in Tala， one
    of the creators of PyTorch was invited to speak at ACAD 2019。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Root有自己的机器学习库TMBA，但在我个人看来，我认为它。 真的无法与像PyTorch和TensorFlow这样的行业标准库相比。 但是高能物理学家对变化持开放态度，邀请行业人士在他们的会议上发言。
    例如，PyTorch的创始人之一Tala被邀请在ACAD 2019上发言。
- en: about how physicists can use PyTorch for their research。 So far。 this has all
    been from the perspective of a computer science student， me。 But let's see what
    high energy physicists have to say。 This is a slide by Chris Bird that he presented
    at PiHab 2018。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 关于物理学家如何将PyTorch用于他们的研究。 到目前为止。 这一切都是从计算机科学学生我的角度出发。 但让我们看看高能物理学家有什么看法。 这是Chris
    Bird在PiHab 2018上展示的一张幻灯片。
- en: He says that 90% or more of the code that he writes will probably never be used
    again。 The time it takes to write and execute his code is important to him。 Okay，
    C++ is fast。 but it probably takes longer to write C++ code than Python code。
    So in certain cases。 the benefit of performance in C++ might actually be costing
    him time over。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 他表示，他写的90%或更多的代码可能永远不会被再次使用。 编写和执行代码所需的时间对他而言很重要。 好吧，C++很快。 但编写C++代码可能比编写Python代码花费更多时间。
    因此，在某些情况下，C++的性能优势可能实际上在浪费他的时间。
- en: writing something in Python。 Python is designed to be readable。 It is quite
    easy to read when compared to other languages like C++。 His last point elaborates
    on what I have already discussed in some earlier slides。 So we can see that there
    are compelling arguments that make some physicists want to switch over。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 用Python编写某些内容。 Python旨在易于阅读。 与C++等其他语言相比，它相当容易阅读。 他最后一点详细说明了我在早期幻灯片中已经讨论过的内容。
    所以我们可以看到，有一些有力的论据使得一些物理学家希望转向。
- en: to Python from C++。 So far， I have been talking about Python usage in high energy
    physics。 but I would like to， briefly talk about Python usage in other physics
    fields。 So I think the physics field having the most usage of Python is astronomy。
    AstroPy is a really well known library。 It is a little similar to scikit help。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 关于从C++到Python的转变。到目前为止，我一直在谈论Python在高能物理中的使用，但我想简要谈谈Python在其他物理领域的使用。我认为，Python在天文学领域的使用最多。AstroPy是一个非常知名的库，它与scikit帮助有些相似。
- en: although I would say that it has more adoption than， scikit at least at this
    current stage。 And if you look at the plot on the slide， you will notice that
    when software is mentioned。 in astronomy publications， the tendency for it to
    be written in Python has exponentially。 grown over the years and completely dominates
    over other languages used for writing software。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我会说，在这个当前阶段，Python的采用程度超过了scikit。如果你查看幻灯片上的图表，你会注意到，在天文学出版物中提到软件时，用Python编写的趋势在这些年中呈指数增长，完全主导了用于编写软件的其他语言。
- en: in astronomy like ideal math lab or footram。 So in my mind。 there are three
    main ways to push Python adoption in high energy physics。 So this slide describes
    what I think should be the way to promote Python for libraries。 that already exist。
    So one could use Cpvy to create Python findings。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在天文学中，如理想的数学实验室或footram。因此在我看来，有三种主要方法可以推动高能物理中的Python采用。因此，这张幻灯片描述了我认为应该如何推广已有库的Python。我认为可以使用Cpvy来创建Python绑定。
- en: And this is definitely the easiest way to do it because like I said， you just
    need a few。 Python files to do all of the binding。 But this may not be ready for
    generalize to see。 The more common option as in used outside of energy physics
    is using pi by 11。 But again。 it's tedious to have entire code bases in pi by
    11。 But then again。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这绝对是最简单的方法，因为正如我所说的，你只需几个Python文件就可以完成所有绑定。但这可能尚未准备好推广到更广泛的应用。像在高能物理之外使用的更常见的选项是使用pi
    by 11。但是，再说一次，在pi by 11中拥有整个代码库是相当繁琐的。
- en: it's easier than rewriting the entire code base in Python。 And since it is used
    outside of energy physics， you will find people that have faced the problems。
    that you face by trying to use pi by 11 to wrap all of your code。 So help might
    be more easily available。 And the third option is rewriting it all in Python。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这比在Python中重写整个代码库要容易得多。由于它在高能物理之外使用，你会发现那些遇到过你尝试使用pi by 11来封装所有代码时所面临的问题的人。因此，帮助可能更容易获得。第三个选项是将所有内容重写为Python。
- en: And this might be a little more difficult than the other two options。 But this
    can be done as demonstrated in up。 But then again。 it's impossible to rewrite
    all of the C++ physics libraries in Python。 For energy physics libraries that
    have not yet been written or are being planned to be。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能比其他两个选项稍微困难一些。但这可以如上所示完成。不过，再说一次，重写所有的C++物理库在Python中几乎是不可能的。对于尚未编写或正在计划中的高能物理库来说。
- en: written in the next few days， this is what I recommend。 So one can use CPP，
    but again。 it's not really ready for generalize to use it in my opinion。 And if
    you try using it。 you might run into some unsarmontable problems。 The other option
    is using pi by 11。 And using pi by 11 probably involves writing a lot of additional
    code in addition to your， C++。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几天中写的，这是我推荐的。因此，可以使用CPP，但再说一次，我认为它并不真正适合普遍使用。如果你尝试使用它，你可能会遇到一些无法解决的问题。另一个选项是使用pi
    by 11，使用pi by 11可能涉及在你的C++代码之外编写大量额外的代码。
- en: But then again， it is not really difficult to do this。 And this is definitely
    the goal to strategy C++ if required。 And the third option is rewriting the entire
    thing in Python。 And for a new library。 this might be preferred because for a
    physicist who does not know C++。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，这真的并不难做到。如果需要，确实应该把策略C++作为目标。第三个选项是将整个项目重写为Python。对于一个新的库来说，这可能是更可取的，因为对于一个不懂C++的物理学家来说。
- en: or Python or any language for that matter， using Python might be easier because
    it is。 easier to learn than other languages。 But then again， if performance is
    critical。 then it is recommended that you only write， it in Python if you are
    familiar with the ecosystem and libraries such as Numpy and Namba that would。
    help you get the performance that you desire。 To conclude。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是Python还是其他语言，使用Python可能更容易，因为它比其他语言更容易学习。但再说一次，如果性能至关重要，那么建议你只有在熟悉生态系统和像Numpy和Namba这样的库的情况下，才用Python编写。这将帮助你获得你所期望的性能。最后总结。
- en: I would like to say that it is evident from my talk that Python is a popular，
    language。 even in sciences like high energy physics where performance is critical。
    Python is quite readable compared to other languages like C++。 And this is something
    that people whose primary interest is not learning any programming language。
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我想说，从我的演讲中可以明显看出，Python是一种受欢迎的语言，甚至在像高能物理这样的科学领域，性能至关重要。与C++等其他语言相比，Python的可读性相当高。这是对于那些主要兴趣不在于学习任何编程语言的人来说。
- en: would desire。 And according to me， Python is most definitely the natural bridge
    to machine learning and。 other statistical software within outside of high energy
    physics。 Although there are some alternatives in other languages， the most popularly
    known and used。 ones are definitely in Python。 Newcomers to high energy physics。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为，Python无疑是机器学习和其他统计软件与高能物理之间的自然桥梁。尽管其他语言中有一些替代品，但最知名和使用的绝对是在Python中。新来者对高能物理的认识。
- en: you probably know about industry standard tools like pandas。 and tensorflow
    as compared to the root alternatives like RTF， FAM， and TMBA。 So in my firm opinion。
    I believe that Python is here to stay in the high energy physics。 community for
    the foreseeable future。 So several people have helped me with my talk。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你们可能知道行业标准工具，如pandas和tensorflow，而与之相比，根替代品如RTF，FAM和TMBA。根据我坚定的看法，我相信Python在高能物理社区将会长期存在。因此，有几个人帮助了我的演讲。
- en: I would really like to acknowledge that help。 Jim Pivarsky， Jeff Tamblon， Henry
    Steiner。 Eduardo Rodriguez and many others were motivated， to me and helped me
    write my slides。 So here are some links， mostly talks that you might want to look
    at if you want to know。 more about how we use Python for high energy physics research。
    On this slide。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我真的想感谢那些给予帮助的人。吉姆·皮瓦斯基，杰夫·坦布隆，亨利·斯坦纳，爱德华·罗德里格斯，以及许多其他人激励了我，并帮助我写幻灯片。所以这里有一些链接，主要是讲座，如果你想了解更多关于我们如何使用Python进行高能物理研究的信息。就在这张幻灯片上。
- en: I have the links to the projects that I mentioned in my slides。 If you want
    to go ahead and look at the source code and maybe even contribute to some of them。
    That brings me to the end of my talk。 If you want to contact me， you might do
    so at ricktas@gmail。com。 And if you want to view my work， you can do that at GitHub
    under the name ricktas。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我有我幻灯片中提到的项目的链接。如果你想查看源代码，甚至可能为其中一些项目贡献，那我就结束我的演讲了。如果你想联系我，可以通过ricktas@gmail.com与我联系。如果你想查看我的工作，可以在GitHub上找到我，用户名是ricktas。
- en: Thank you for listening to my talk。 [BLANK_AUDIO]。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢你们聆听我的演讲。[BLANK_AUDIO]。
- en: '![](img/a9a4e892500dae9f5e728b3864abe80c_3.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a9a4e892500dae9f5e728b3864abe80c_3.png)'
