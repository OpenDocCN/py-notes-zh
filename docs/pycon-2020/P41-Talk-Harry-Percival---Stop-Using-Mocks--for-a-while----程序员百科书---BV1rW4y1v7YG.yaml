- en: P41：Talk Harry Percival - Stop Using Mocks (for a while) - 程序员百科书 - BV1rW4y1v7YG
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P41：Talk Harry Percival - Stop Using Mocks (for a while) - 程序员百科书 - BV1rW4y1v7YG
- en: '![](img/70f450bbad5ae8f4921bcddae5be82cc_0.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](img/70f450bbad5ae8f4921bcddae5be82cc_0.png)'
- en: 好的，我叫哈里，你可以在 hjwp的 twitter上找到我，我代表一个叫宇宙蟒蛇点的网站，COM，宇宙蟒，我肯定你想知道这一切是什么 在古希腊的宇宙中是混乱的对立面。所以我们在那个网站上讨论的是如何确保你的蟒蛇代码保持在混沌的对立面，越多越好，嗯，所以这就是我要说的，一个可能的技术是停止使用混合氧化物酶，停止使用莫克斯，什么，好的，我应该说，嗯，我有点争议。在标题中，我不会称之为点击诱饵，但让我们说停止使用标记一段时间，所以这就是我今天要向你推销的，这一切是从哪里来的，我以谈论测试驱动开发而闻名，但在过去的几年里，我一直对，嗯，我想软件架构。我在一家叫
    made com的公司工作，哪里呃，你知道我们在这里跟随一个英雄的旅程，你知道吗，就像我认为所有的陈述都是为了讲述一个故事，所以英雄的旅程，你知道我们有冒险的召唤，与导师见面，拒绝通话。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我叫哈里，你可以在 `hjwp` 的 Twitter 上找到我，我代表一个叫宇宙蟒蛇点的网站，COM，宇宙蟒，我肯定你想知道这一切是什么。在古希腊的宇宙中是混乱的对立面。所以我们在那个网站上讨论的是如何确保你的蟒蛇代码保持在混沌的对立面，越多越好，嗯，所以这就是我要说的，一个可能的技术是停止使用混合氧化物酶，停止使用莫克斯，什么，好的，我应该说，嗯，我有点争议。在标题中，我不会称之为点击诱饵，但让我们说停止使用标记一段时间，所以这就是我今天要向你推销的，这一切是从哪里来的，我以谈论测试驱动开发而闻名，但在过去的几年里，我一直对，嗯，我想软件架构。我在一家叫
    `made.com` 的公司工作，哪里呃，你知道我们在这里跟随一个英雄的旅程，你知道吗，就像我认为所有的陈述都是为了讲述一个故事，所以英雄的旅程，你知道我们有冒险的召唤，与导师见面，拒绝通话。
- en: 我们去和怪物战斗，在这种情况下，不会是怪物，这将是代码的设计决策，但尽管如此，还是会有来龙去脉，利弊，然后我们会带着长生不老药回来，英雄的旅程到此结束，你可以看看英雄的旅程，如果不熟悉，总之。带着长生不老药回来，我要回我的村庄，我的管道社区，嗯，带着一些带着一些宝藏，用一些长生不老药，关于如何构造代码的一些想法，我认为你可以做的一件事就是如果你停止使用，一些处理代码中某些东西的有趣的新方法。所以这就是我今天想说的，所以谢谢你能来，如果你在封锁期间看这个，就像我就像，不管是什么状态
    我都要录下来，在你们国家，我希望你看到了这种奇怪情况的好处，我们都参与进来，尽可能地减少负面影响。如果你在 COVID十九危机的另一面看这个，好吧，那么我只希望所有的时尚选择，已经预示了在疯狂的麦克斯电影真的成为现实，你真的在摇滚一些伟大的后世界末日朋克服装，如果在代码中使用
    mock，好吧。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们去和怪物战斗，在这种情况下，不会是怪物，这将是代码的设计决策，但尽管如此，还是会有来龙去脉，利弊，然后我们会带着长生不老药回来，英雄的旅程到此结束，你可以看看英雄的旅程，如果不熟悉，总之。带着长生不老药回来，我要回我的村庄，我的管道社区，嗯，带着一些带着一些宝藏，用一些长生不老药，关于如何构造代码的一些想法。我认为你可以做的一件事就是如果你停止使用一些处理代码中某些东西的有趣的新方法。所以这就是我今天想说的，所以谢谢你能来，如果你在封锁期间看这个，就像我就像，不管是什么状态，我都要录下来，在你们国家，我希望你看到了这种奇怪情况的好处，我们都参与进来，尽可能地减少负面影响。如果你在
    COVID 十九危机的另一面看这个，好吧，那么我只希望所有的时尚选择，已经预示了在疯狂的麦克斯电影真的成为现实，你真的在摇滚一些伟大的后世界末日朋克服装，如果在代码中使用
    mock，好吧。
- en: 我假设每个人，所以我为什么要停止使用模拟，这到底是怎么回事，我不是说模拟是不好的，你永远不应该使用它们，一旦你对软件架构和软件设计感兴趣，你知道吗，陈词滥调，所有的交易，你知道这取决于，所以我想说的是。混合氧化物是一种常见的工具，让你知道，尝试使用不同的，你可能会发现在某些情况下
    你有一个更好的工具，在其他情况下，所以，我要谈很多利弊，在这里面没有黑白分明，其实只是正反两方面。所以每次我提出一个新的想法或新的模式，我将讨论它的优点和缺点好了，没有任何进一步的废话，让我们进入它，所以如果你和我一样，我从made。com的同事那里学到了很多关于软件架构的知识。尤其是在与导师的会面中，一个叫鲍勃的家伙，但当我最终写了一本关于这个的书时，这就是所谓的建筑模式与蟒蛇，你可以在宇宙蟒蛇上找到更多关于它的信息，DOT，COM，鲍勃和我就像在某个商业领域工作。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我假设每个人，所以我为什么要停止使用模拟，这到底是怎么回事，我不是说模拟是不好的，你永远不应该使用它们，一旦你对软件架构和软件设计感兴趣，你知道吗，陈词滥调，所有的交易，你知道这取决于，所以我想说的是。混合氧化物是一种常见的工具，让你知道，尝试使用不同的，你可能会发现在某些情况下你有一个更好的工具，在其他情况下。所以，我要谈很多利弊，在这里面没有黑白分明，其实只是正反两方面。所以每次我提出一个新的想法或新的模式，我将讨论它的优点和缺点好了，没有任何进一步的废话，让我们进入它，所以如果你和我一样，我从
    `made.com` 的同事那里学到了很多关于软件架构的知识。尤其是在与导师的会面中，一个叫鲍勃的家伙，但当我最终写了一本关于这个的书时，这就是所谓的建筑模式与蟒蛇，你可以在宇宙蟒蛇上找到更多关于它的信息，DOT，COM，鲍勃和我就像在某个商业领域工作。
- en: 所以我想我从和他一起编程中学到了一些我所说的东西，所以我想为你重现一下，通过一些示例代码 我们可以用来说明我们在这里得到的想法，例如在物流领域，嗯，让我们想象一下，你有货物，你想追踪的。所以一批货物将是一系列产品的集合，所以一批货物会有多个订单线
    订单线就像某个产品的一定数量，我使用一个叫做倾斜库存单元的产品标识来标识产品，你可能会发现，有一个数量，然后货物有一系列的线。上面是这些订单的列表，它有自己的编号，它有一个埃塔
    有一个 o项，你不需要知道具体细节，我想做的是给你看一些简单的东西，然后我抛出了一个，里面有一些商业术语，只是为了暗示现实生活的复杂性。因为你知道像这样的演示的问题是
    你必须有一个简单的例子，大多数时候，你试图灌输的模式或想法在复杂的情况下是最有用的，为了暗示复杂性，我有一些随意的行话，术语是要做的事情，我甚至不确定这一点，是关于。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我想我从和他一起编程中学到了一些我所说的东西，所以我想为你重现一下，通过一些示例代码我们可以用来说明我们在这里得到的想法，例如在物流领域，嗯，让我们想象一下，你有货物，你想追踪的。所以一批货物将是一系列产品的集合，所以一批货物会有多个订单线，订单线就像某个产品的一定数量。我使用一个叫做倾斜库存单元的产品标识来标识产品，你可能会发现，有一个数量，然后货物有一系列的线。上面是这些订单的列表，它有自己的编号，它有一个埃塔，有一个
    O 项，你不需要知道具体细节，我想做的是给你看一些简单的东西，然后我抛出了一个，里面有一些商业术语，只是为了暗示现实生活的复杂性。因为你知道像这样的演示的问题是你必须有一个简单的例子，大多数时候，你试图灌输的模式或想法在复杂的情况下是最有用的，为了暗示复杂性，我有一些随意的行话，术语是要做的事情，我甚至不确定这一点，是关于。
- en: 法律上的嗯状态，货物变更所有权的，就像它离开的时候，穷人，是吗？当它到达另一个港口时，不管什么条件，是啊，是货物的属性，这是我们用来表示系统中数据的相似模型，或许我们有办法把它们保存到数据库里。这是我们的第一个业务要求，当我制造出货时，我需要把它和货物接口同步，第三方应用程序接口，所以这次谈话的一部分来自与布莱恩·奥肯的谈话，嗨，测试代码播客的布莱恩，他说你，哈里的人总是问我。如何编写针对第三方
    api的测试，这就是我今天要讲的，我在他的播客上说过一点，我在博客上说过一点，在宇宙巨蟒网站上，我不确定我有没有提到那个网站，但这里更好，我说的是蟒蛇。所以当我们需要创建一个系统时
    我们需要将它同步到第三方货运应用程序接口，那看起来像什么，所以在我的代码里，我在这里有一个功能，这有点像控制器的功能，或者我代码里的商业服务，所以如果你用的是姜戈或烧瓶。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 法律上的嗯状态，货物变更所有权的，就像它离开的时候，穷人，是吗？当它到达另一个港口时，不管什么条件，是啊，是货物的属性，这是我们用来表示系统中数据的相似模型，或许我们有办法把它们保存到数据库里。这是我们的第一个业务要求，当我制造出货时，我需要把它和货物接口同步，第三方应用程序接口。所以这次谈话的一部分来自与布莱恩·奥肯的谈话，嗨，测试代码播客的布莱恩，他说你，哈里的人总是问我。如何编写针对第三方
    API 的测试，这就是我今天要讲的，我在他的播客上说过一点，我在博客上说过一点，在宇宙巨蟒网站上，我不确定我有没有提到那个网站，但这里更好，我说的是蟒蛇。所以当我们需要创建一个系统时，我们需要将它同步到第三方货运应用程序接口，那看起来像什么。所以在我的代码里，我在这里有一个功能，这有点像控制器的功能，或者我代码里的商业服务，所以如果你用的是
    `姜戈` 或 `烧瓶`。
- en: 这可能是类似的东西，就像风景，或者你从视图中调用的东西来创建一个货物，我要带一些产品，基本上我想那是一本关于产品标识的字典，我想要多少和一个编码术语，我将为它生成一个随机引用。使用
    uuuid来建立我的模型，对象，一些订单和一批货物，我要把它保存到15号线的数据库里，接下来我要做的就是把它和应用程序接口同步，所以我把它隐藏在另一个功能中，把它和应用程序接口同步，好吧。我要把我的货，我将把一些属性构建到简单的数据结构中，我基本上会把它们作为
    json发送到第三方应用程序接口，有一个请求帖，我有一些数据，这里发生的事情是我希望观看这个节目的人熟悉的事情，嗯。我们处理了一些数据，我们把它变成 json来满足第三方的要求，太好了，1。我怎样测试它，最经典的是我们拿着模拟，尤其是，单元测试标记模块和两个特定的技术是打补丁，以及模拟对象的使用，所以在模拟补丁会说。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是类似的东西，就像风景，或者你从视图中调用的东西来创建一个货物。我想带一些产品，基本上我想那是一本关于产品标识的字典，我想要多少和一个编码术语，我将为它生成一个随机引用。使用
    `uuuid` 来建立我的模型，对象，一些订单和一批货物，我要把它保存到 15 号线的数据库里，接下来我要做的就是把它和应用程序接口同步，所以我把它隐藏在另一个功能中，把它和应用程序接口同步，好吧。我要把我的货，我将把一些属性构建到简单的数据结构中，我基本上会把它们作为
    JSON 发送到第三方应用程序接口。有一个请求帖，我有一些数据，这里发生的事情是我希望观看这个节目的人熟悉的事情，嗯。我们处理了一些数据，我们把它变成 JSON
    来满足第三方的要求，太好了，1。我怎样测试它，最经典的是我们拿着模拟，尤其是，单元测试标记模块和两个特定的技术是打补丁，以及模拟对象的使用，所以在模拟补丁会说。
- en: 好吧，当我做这个测试的时候，与其打电话，去真正的外部互联网，我要喊出一个模拟物体，所以在测试期间，模拟顶部补丁将阻止我们的请求调用，所以当我调用 create
    shipping函数时。我可以设置一些关于预期数据应该是什么的断言，然后我可以说我应该打电话请求，请求与某些调用参数一起发布，所以我的测试是这样的，如果我在模拟中使用补丁，到目前为止一切都好，好吧，所以我有我的要求。我需要写一个测试，我只有一个测试，我想说这不是我见过的最漂亮可读的测试，但这肯定是可以管理的，如果你用过药几次，你可以看看那个，你知道发生了什么，但生活从来没有那么简单，是吗？这是第二个业务需求。为新的货物做一个帖子，为现有的货物做一个帖子，好吧，你知道典型的应用程序接口，不管出于什么原因，它很安静，就像他们可能已经有了一批特定的参考，如果你做一个帖子，那是，一个你需要做推杆的错误。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，当我做这个测试的时候，与其打电话，去真正的外部互联网，我要喊出一个模拟物体，所以在测试期间，模拟顶部补丁将阻止我们的请求调用，所以当我调用 `create
    shipping` 函数时。我可以设置一些关于预期数据应该是什么的断言，然后我可以说我应该打电话请求，请求与某些调用参数一起发布，所以我的测试是这样的，如果我在模拟中使用补丁，到目前为止一切都好，好吧，所以我有我的要求。我需要写一个测试，我只有一个测试，我想说这不是我见过的最漂亮可读的测试，但这肯定是可以管理的，如果你用过药几次，你可以看看那个，你知道发生了什么，但生活从来没有那么简单，是吗？这是第二个业务需求。为新的货物做一个帖子，为现有的货物做一个帖子，好吧，你知道典型的应用程序接口，不管出于什么原因，它很安静，就像他们可能已经有了一批特定的参考，如果你做一个帖子，那是，一个你需要做推杆的错误。
- en: 因为你说你在修改现有的货物，不管是什么，所以我对 api代码的同步突然变得更加复杂，好吧 我必须做得很好，我之前做的同样的请求帖子，但另一种可能是，我怎么知道，有趣的是，检查权，不管什么东西是否存在。我可以用来检查，但在他们的数据库里，所以我需要先做一个获取请求，然后我会说也许他们使用的参考号与我们的参考号略有不同，我需要，你知道吗，查一下，你又知道了，您不需要了解此代码的细节，我只是给你看。你应该熟悉的代码类型，一些最初看起来很简单的事情，更狡猾一点，更重要的是，但这是一个直截了当的要求，你可能每天都会遇到更重要的事情，这对我们的测试有什么影响，所以让我们想象一下做那个测试，为了推杆。这就是我的下场，为这个示例编写一个测试，我现在需要修补的不仅仅是请求模块，还有
    uid模块，因为我需要检查我们是否，为什么 因为我需要喜欢，确保 get请求有一个对象。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 因为你说你在修改现有的货物，不管是什么，所以我对 API 代码的同步突然变得更加复杂，好吧我必须做得很好，我之前做的同样的请求帖子，但另一种可能是，我怎么知道，有趣的是，检查权，不管什么东西是否存在。我可以用来检查，但在他们的数据库里，所以我需要先做一个获取请求，然后我会说也许他们使用的参考号与我们的参考号略有不同，我需要，你知道吗，查一下，你又知道了，您不需要了解此代码的细节，我只是给你看。你应该熟悉的代码类型，一些最初看起来很简单的事情，更狡猾一点，更重要的是，但这是一个直截了当的要求，你可能每天都会遇到更重要的事情，这对我们的测试有什么影响，所以让我们想象一下做那个测试，为了推杆。这就是我的下场，为这个示例编写一个测试，我现在需要修补的不仅仅是请求模块，还有
    uid 模块，因为我需要检查我们是否，为什么，因为我需要喜欢，确保 get 请求有一个对象。
- en: 已经有了 create munch函数生成的 uid，所以我要在这里有个关于呜呜的断言，不好意思，我在这里会有一个断言，关于请求点，邮政呼叫是假的，提出请求，应该叫，考试时间要长得多。希望我对这两个测试不那么满意，我肯定已经达到了中等恐怖程度，我有两个模拟你的方式推理，这种测试有点乏味，所以我希望你们都熟悉这种情况，让我们继续前进，把它带到下一个层次，尽管第三项要求罚款。你已经在第三方之后发货了，他们现在知道如何把你的东西带上船了，嗯，最重要的是，我们需要知道那些，因为我们需要知道什么时候能把它们卖给真正的客户，所以你知道它什么时候会到达这里。基本上我们要对第三方应用程序接口进行投票，以确定事情什么时候到达，又有很多代码，你不必明白，但这是你可能写的代码去拉这个想象中的货物，一拉，这条想象中的船一次应用程序接口。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 已经有了 create munch 函数生成的 uid，所以我要在这里有个关于呜呜的断言，不好意思，我在这里会有一个断言，关于请求点，邮政呼叫是假的，提出请求，应该叫，考试时间要长得多。希望我对这两个测试不那么满意，我肯定已经达到了中等恐怖程度，我有两个模拟你的方式推理，这种测试有点乏味，所以我希望你们都熟悉这种情况，让我们继续前进，把它带到下一个层次，尽管第三项要求罚款。你已经在第三方之后发货了，他们现在知道如何把你的东西带上船了，嗯，最重要的是，我们需要知道那些，因为我们需要知道什么时候能把它们卖给真正的客户，所以你知道它什么时候会到达这里。基本上我们要对第三方应用程序接口进行投票，以确定事情什么时候到达，又有很多代码，你不必明白，但这是你可能写的代码去拉这个想象中的货物，一拉，这条想象中的船一次应用程序接口。
- en: 想想你可能需要多少测试来完成这类事情，我试着编写的代码 看起来更像我们每天使用的典型业务代码，所以我要说的是，哦，如果我想找一批货，它不在那里，所以这是个错误，所以我需要做个测试，我们设置它的地方，哦。这是警告，我们是这么做的，第二个测试是我需要轮询一个新的
    api端点，所以我要模拟这个新的 NPI端点，有一个商业案例 我们说，好吧，预计到达时间不变，在这种情况下，提前返回罚款，我需要一个测试。然后翻转一边，假设不是，不一样，估计的时间比我们现在估计的要大，这意味着有某种延迟，所以我要想象一下，想让我们通知一下，对，比如通知这批货延迟了，所以这将是一个考验，也可能是一个测试。它确实发生在一个测试中，不会发生的，还有两个测试，然后再来一次，我在想象一些其他的商业案例，在哪里或特定的，INO术语，当线条超过一定长度时，意味着这是个大货，所以这需要经过另一个过程。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 想想你可能需要多少测试来完成这类事情，我试着编写的代码看起来更像我们每天使用的典型业务代码，所以我要说的是，哦，如果我想找一批货，它不在那里，所以这是个错误，所以我需要做个测试，我们设置它的地方，哦。这是警告，我们是这么做的，第二个测试是我需要轮询一个新的
    API 端点，所以我要模拟这个新的 NPI 端点，有一个商业案例我们说，好吧，预计到达时间不变，在这种情况下，提前返回罚款，我需要一个测试。然后翻转一边，假设不是，不一样，估计的时间比我们现在估计的要大，这意味着有某种延迟，所以我要想象一下，想让我们通知一下，对，比如通知这批货延迟了，所以这将是一个考验，也可能是一个测试。它确实发生在一个测试中，不会发生的，还有两个测试，然后再来一次，我在想象一些其他的商业案例，在哪里或特定的，INO术语，当线条超过一定长度时，意味着这是个大货，所以这需要经过另一个过程。
- en: 所以我们还有两个测试，根据我的计算，我们把它保存下来，这大约是12个或更多的测试，每一个测试都要模拟三个不同的东西，旅行的目的，把现有的货物，柱子和推杆，我们进入了模拟，你得到的恐怖。每次测试都有五六个，里面有不同的嘲笑，很难解释到底发生了什么，年长的众神正在激荡，这还不是说，就像，你知道吗，这里还有一个要求，嗯，人们说，模拟考试很脆弱，你的每一块贴片都说，哦，我去模拟一下。进入你的模块，但是如果你不做导入请求，从请求导入，你所有的测试都被打破了，或者如果您决定需要使用请求会话，因为你需要转移，就像，我不知道，一些，嗯嗯，业绩原因，你要重复使用同一段对话。或者做些饼干什么的，基本上是对您的代码实现的微小更改，这些更改对您提出请求的方式没有真正的影响，会打破你所有的嘲笑，所以当你用这样的模仿和修补，你的测试也很脆弱，所以让我们回顾一下。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们还有两个测试，根据我的计算，我们把它保存下来，这大约是 12 个或更多的测试，每一个测试都要模拟三个不同的东西，旅行的目的，把现有的货物，柱子和推杆，我们进入了模拟，你得到的恐怖。每次测试都有五六个，里面有不同的嘲笑，很难解释到底发生了什么，年长的众神正在激荡，这还不是说，就像，你知道吗，这里还有一个要求，嗯，人们说，模拟考试很脆弱，你的每一块贴片都说，哦，我去模拟一下。进入你的模块，但是如果你不做导入请求，从请求导入，你所有的测试都被打破了，或者如果您决定需要使用请求会话，因为你需要转移，就像，我不知道，一些，嗯嗯，业绩原因，你要重复使用同一段对话。或者做些饼干什么的，基本上是对您的代码实现的微小更改，这些更改对您提出请求的方式没有真正的影响，会打破你所有的嘲笑，所以当你用这样的模仿和修补，你的测试也很脆弱，所以让我们回顾一下。
- en: 赞成和反对的人都会这样谈论，我们寻求利弊，我们使用模拟是因为它们很熟悉 因为这意味着我们不需要对代码做任何更改，我们已经写了，我可以写我的同步到api函数与它的请求，一路走来。猴子补丁的魔力可以跳进去写一个不与真正的互联网对话的单元测试，所以他们很熟悉，我说，低努力，我是说写这些测试真的很难，但这是很低的努力，因为我不必太努力地改变事情，我可以像在其他地方一样使用模拟。我希望我已经说明了缺点，你引入你嘲笑的东西的具体方式，例如，但是您的测试也是在测试实现细节，而不是测试行为，第二个稍微微妙的问题，也许是您需要记住
    为每一个测试调用 mock dot patch。所以我不知道你是否见过自己运行单元测试套件的时候，你意识到，哦耶，我忘了其中一个测试是叫那个东西，那个东西打电话给互联网，而且互联网很慢，所以我的测试。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 赞成和反对的人都会这样谈论，我们寻求利弊，我们使用模拟是因为它们很熟悉因为这意味着我们不需要对代码做任何更改，我们已经写了，我可以写我的同步到 API
    函数与它的请求，一路走来。猴子补丁的魔力可以跳进去写一个不与真正的互联网对话的单元测试，所以他们很熟悉，我说，低努力，我是说写这些测试真的很难，但这是很低的努力，因为我不必太努力地改变事情，我可以像在其他地方一样使用模拟。我希望我已经说明了缺点，你引入你嘲笑的东西的具体方式，例如，但是您的测试也是在测试实现细节，而不是测试行为，第二个稍微微妙的问题，也许是您需要记住为每一个测试调用
    mock dot patch。所以我不知道你是否见过自己运行单元测试套件的时候，你意识到，哦耶，我忘了其中一个测试是叫那个东西，那个东西打电话给互联网，而且互联网很慢，所以我的测试。
- en: 所以你需要记住把这些模拟补丁放在所有可能与第三方 api对话的测试上，最后，这使得它太容易混淆业务逻辑，我欠担心，所以在我的测试中所有的东西，比如json和它的终点。而
    id是什么 与我在这里的例子中试图表示的业务逻辑无关，商业逻辑是，你知道吗，如果货物晚点，然后通知下面的人，如果是大批货 而且准时的话，然后我需要做这些事情，就像我想在我的代码中分开一样。"什么是杰森"的概念以及字典里的"喜欢"的概念，我的商业规则和策略是什么？你不要逼我，最重要的是，我可以写出所有这些模拟，但我还是需要一些集成测试，或者首尾相连的测试，让自己放心，事情实际上是有效的。你可能听过类似
    mox测试模拟器的笑话，而不是，你知道吗，就像你离现实世界太远了，但你需要某种保证，让你相信事情真的有效，换句话说，你会发现自己滑向什么，我的朋友兼科技评论家艾德·荣格打电话给莫海勒姆。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你需要记住把这些模拟补丁放在所有可能与第三方 API 对话的测试上，最后，这使得它太容易混淆业务逻辑，我欠担心，所以在我的测试中所有的东西，比如 JSON
    和它的终点。而 ID 是什么与我在这里的例子中试图表示的业务逻辑无关，商业逻辑是，你知道吗，如果货物晚点，然后通知下面的人，如果是大批货而且准时的话，然后我需要做这些事情，就像我想在我的代码中分开一样。"什么是杰森"的概念以及字典里的"喜欢"的概念，我的商业规则和策略是什么？你不要逼我，最重要的是，我可以写出所有这些模拟，但我还是需要一些集成测试，或者首尾相连的测试，让自己放心，事情实际上是有效的。你可能听过类似
    mox 测试模拟器的笑话，而不是，你知道吗，就像你离现实世界太远了，但你需要某种保证，让你相信事情真的有效，换句话说，你会发现自己滑向什么，我的朋友兼科技评论家艾德·荣格打电话给莫海勒姆。
- en: 顺便说一句，在去年的蟒蛇大会上发表了演讲，如果你看过他的谈话，它被称为，我认为嘲笑和修补陷阱，他还在"模拟"的标题下给出了，地狱，我喜欢把这看作是一种回顾和续集，一旦你到了马尔库，让我们谈谈替代方案。所以我们别再用盒子了好吗，那么我们该怎么办呢，以下是我的建议，建议，第一，构建适配器，我说的适配器是什么意思？我是说，我呼唤的
    API，让我们围绕，我所需要的，嗯，让我们给它一个应用程序接口。让我们把它从我们应用程序的核心中分离出来，我们商业逻辑的核心，我为什么要用适配器这个词，这有点像是对端口和适配器的大喊，它是一种建筑模式，我们在书中再多谈谈好吗？你可以在宇宙巨蟒网站上找到这本书。我不确定，如果我提到，嗯，端口、适配器和体系结构模式，如果你读过这本书，你可能会遇到六边形建筑，或端口和适配器，洋葱式建筑
    干净的建筑，这些都非常非常相似，UM建筑，和，所以我打电话给适配器。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，在去年的蟒蛇大会上发表了演讲，如果你看过他的谈话，它被称为，我认为嘲笑和修补陷阱，他还在"模拟"的标题下给出了，地狱，我喜欢把这看作是一种回顾和续集，一旦你到了马尔库，让我们谈谈替代方案。所以我们别再用盒子了好吗，那么我们该怎么办呢，以下是我的建议，第一，构建适配器，我说的适配器是什么意思？我是说，我呼唤的
    API，让我们围绕，我所需要的，嗯，让我们给它一个应用程序接口。让我们把它从我们应用程序的核心中分离出来，我们商业逻辑的核心，我为什么要用适配器这个词，这有点像是对端口和适配器的大喊，它是一种建筑模式，我们在书中再多谈谈好吗？你可以在宇宙巨蟒网站上找到这本书。我不确定，如果我提到，嗯，端口、适配器和体系结构模式，如果你读过这本书，你可能会遇到六边形建筑，或端口和适配器，洋葱式建筑，干净的建筑，这些都非常非常相似，UM建筑，和，所以我打电话给适配器。
- en: 但是让我们看看这个例子，看看它到底是什么样子的，我要说的是，我将在这里使用一个类来表示我的适配器，你不用上课，我喜欢避免使用类，只要有可能，如果你从来没有见过一个经典的派克
    在谈话中被称为。停止使用 jack dieder的课程，我非常推荐它，为了这个例子，很高兴能想到，就像应用程序接口是个东西，我要把它变成一门课，它将会有一个应用程序接口，我说的应用程序接口
    有应用程序接口的意思是。会有一些公开的方法，那我该怎么办？我想做的是，好的，好吧，我的商业逻辑是什么，我的申请需要什么？从这种第三方依赖，用我自己的语言，不是用第三方的语言，但在我的语言里
    我需要把东西和它同步。我需要最新的预计到达时间 你可以称之为别的东西，你可以叫它发送，或者你可以称之为初始化，然后得到以后可以被称为像检索，航运，最新情况，或者你喜欢的任何东西，但我会用我的语言来表达，这是有道理的。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 在我的代码中看起来很好，然后我将隐藏语言的种类和那个应用程序接口的低级细节的复杂性，在我的适配器后面，所以那些关于，出货，身份证和做一个得到找出，如果这将是一个帖子
    或。我可以在我的应用程序代码中忽略它，实际上我应该说我们找到了这些解决方法的建议，直觉上，即使我想展示这个示例代码，我在第一张幻灯片里，创建出货，我确实喜欢创造出货的东西，我们做模特的地方。我把和
    api的同步放到一个单独的函数里，但我只是想说 让这成为你结构中明确的一步，当你说我要和互联网上的第三方整合的时候，我说做一个适配器，做一件事，给它起个名字，这对我们的测试有什么影响，好吧。而不是修补请求模块，我要把我自己的货运
    API类，嗯，我要去，呃，然后当我打电话给创造出货，我可以说模拟货物 api um的叫法如下，所以它的同步呼叫记录是一个出货通知，这很好，我想说如果你。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: 如果你回想第一次测试，我的断言以前类似于断言模拟请求 post dot json double equals，你知道吗，我至少简化了一点 我的测试看起来像什么，因为与其模仿请求模块和它所有的复杂性。我在模拟一个由我控制的应用程序接口，稍微干净一点，所以这是第一步，让我们已经接受了，迈出一步
    考虑利弊，在专业方面，你知道吗，喜欢 td和测试技术以及模仿和修补技术的人，有这个经验法则说。不要嘲笑你不拥有的东西，我我必须说实话，我不明白这有多复杂，但这里发生的部分事情与这个规则有关，当我标记出请求库时，请求库可以做数百件事，我可以做后看跌期权，它可以做会议，它可以你知道吗。创建您所知道的适配器，改变您处理
    http请求的方式，但当我嘲笑我的，货运 API级，简单多了，我不需要担心我的代码，你知道吗，我知道它只有两个可能的功能，同步可以晚点，CTA，所以。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: 我不需要担心我是否打电话，张贴或放置或补丁或选项，或者别的什么，这意味着模拟更容易写，我对我的代码实际上在做什么更有信心，因为我的模拟更简单。我想也许在概念上
    我已经把我的基础结构代码和我的业务逻辑解耦了，所以我说了 我想从我的货物应用程序界面上得到什么，我需要能够同步，我需要能得到最新的 ETAS，如果后来公司说你知道吗
    忘了第三方吧。我们要和另一个第三方谈谈，我们想把货物寄给他们，他们使用了一个完全不同的集成系统，比如xml而不是json，因为他们喜欢90年代，但它可能仍然有完全相同的同步方法和完全相同的获取最新的埃塔方法。所以对我的核心业务逻辑的所有测试都不需要改变，所以我给自己买了一些未来的打样，我做了一些脱钩，这些都是优点，囚犯是免费的，有更多的代码，我不得不建立这个班级，否则我不会，我不得不加一层。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 这总是额外的复杂性，人们会看着这个 然后问到底什么是真正的货运应用程序接口，什么是点同步，在你看请求帖之前，所有人都知道，他们清楚地知道请求帖子是做什么的，这是第一步，但我们不会就此罢休，好了。这次演讲的题目是停止使用混合氧化物，我们继续下一个建议，伪造你的适配器，阿卡停止使用莫克斯，第一部分，而不是用混合氧化物酶，我要鼓励你制造一个假的，什么是假的，假的和假的有什么区别。我不想在这个问题上纠缠太多，嗯，但基本上，虽然模拟是一个物体，假装要做的事，我以后可以问我的模拟问题
    说嘿，马克是谁 打电话给你的，他们怎么称呼你的，某个模拟呼叫记录，废话，假的是另一种考试替身。这是一种不同的假东西，你把真正的依赖换成了假的依赖，但不是以后再问它问题，它将建立一个简化但实用的真实版本，你要取代的是，让我们在现实生活中看到它，我觉得这样更有意义，所以嗯，如果你喜欢。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: 您可以定义一个抽象基类，或者如果你真的喜欢打字提示和打气 五四四，您可以定义一个协议，说明货物api需要以下两种方法，获取最新和同步，因此，真正的一个与真正的互联网对话有一个最新的同步。然后我会建立一个假的版本，同样的东西，有这两个公共方法，获取最新的埃塔和同步，但它的行为会像一个真正的货运应用程序接口，但实际上是假的，它只是把东西储存在记忆中，所以很多时候你最终会这样做。就像这只是记忆中的一个小事情，如果我和它同步，它把装运对象，它会把它放进一个小字典里，基翁参考，如果我要求精英埃塔，它会去字典里查找参考资料，并把那批货的预计到达时间还给你，所以有点，因此。dunder
    contains方法将是一个可爱的语法糖，我可以在下一点中使用，让我们看看它对测试的影响，我还在用模拟补丁，但我要实例化我的假 API对象，我要说的是使用
    mock api返回值。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: 我要说的是在这些测试中，用这个假的代替模拟的，当我打电话给创造出货，它会用那个假的应用程序接口，然后我的断言只是一个假的应用程序接口中的搜索货物，当我制造出货时，货物最终应该会出现在假的
    API中。所以我希望你会同意，这最终是一个比我们以前更易读的测试，如果你回想一下整个模拟请求，点后点呼叫日志等于预期的废话 明矾，您可以看到我们是如何通过构建一个假的
    api来使我们的测试更具可读性的，所以是的。我可以得到更多可读的测试，但是缺点呢，我们会回来施加线路压力，缺点呢，好吧，我在测试中得到了更多的代码，所以我做了一个适配器，我的应用程序代码里有更多的代码，造一个假的，我有更多的代码在我的测试代码。所以我不得不建立这个类的假
    API的东西，我给自己增加了一个维护的负担 每次我更换真正的应用程序接口，我需要回去手动更改我的假 API 以一种我不需要使用模拟的方式，所以我给自己额外的工作。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: 它给我买了一样东西，哪个测试更易读，它还能给我买到其他东西吗，也许这是有争议的，但它施加设计压力的想法是一个有趣的想法，我想说的是 当我试图，API适配器，我真正的货运应用程序接口，我想让它看起来不错。是什么给那口井施加了设计压力，当我在代码中使用它时，当我在写我的创建出货方法的时候，我现在好了，所以我会做快速同步，是什么让这个
    api这么好，我在那里使用它的事实，把它用在第二个地方。通过强迫我自己重新实现那个 api 作为一个假的，我是，一些可以理解的事情，就越难伪造你的东西，你越要问自己，你是否知道你的事情太复杂了，如果造一个假的
    真的很难，你可能会想坚持住。就像很难假装出来一样，也许这应该是两个物体，就像两个简单的物体结合在一起，这就是我所说的施加设计压力，就像你给自己写作的努力，这个假代码可能会转化为更多关于如何保持代码干净和可管理的信号，这就是理论。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 真的很像，这是你只有通过尝试才能发现的事情，所以这就是我在整个演讲中想要做的，给你一些想法，试试看，所以二话不说，我再给你点东西试试，如果你觉得最后一件事听起来像是做了很多有问题的工作。接下来的事情实际上是一个脏话或蟒蛇世界的禁忌，你应该用它来进行依赖
    注入，所以这是我停止使用莫克斯，第二部分，我说过不用模拟物体，你应该使用假货，第二部分是用猴子补丁单元测试补丁代替。我认为您应该尝试使用依赖注入，现在，如果这已经让你生气了，你开始认为这听起来又像企业贾里的东西了，我不想改变你的一生，我只是想让你尝试一些东西，所以与其在现实生活中用代码来尝试。为什么不看看我的例子中的代码，因此，依赖注入只需要向我的create
    shipping添加一个额外的参数，它说基本上，为了制造出一批，我需要知道，什么产品，什么数量，我需要知道一个术语，因为无聊的事情。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 我还需要一个货运应用程序接口，因为制造一批货物，我需要把它和一个货运应用程序接口同步，我将在创建出货的函数中明确说明这一点，其余的代码基本上不会改变，不是将货物实例化。导入货物
    api 并在此模块中实例化，我要把它送进去，所以我要让它通过注射，或者传递依赖项，让我们看看这对我的测试有什么影响，所以我把我的假应用程序接口，你会注意到在测试的顶部没有更多的模拟补丁。当我打电话给创造出货，我刚刚通过那个假的应用程序接口，然后我说用假的
    API搜索一批货，所以我做了一个假的应用程序接口，当我打电话给你的时候，我说货应该在假的 API里。我认为这是对这段代码最简单也是最容易理解的测试，同样，如果你把它和旧版本以及它的模拟补丁进行比较，你知道点返回值，类似的东西，这个简单多了，如果你认为整个方法的模拟点
    张贴点请求点称为，整个意外的事情。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: 我们不得不猴子修补你的身份模块，您可以看到，这至少为您购买了一些非常好的可读性测试，所以这是一个优点，更好的测试，第二个可能的专业 这可能更微妙一点，但你还记得
    当我们想起。修补每一个可能与第三方应用程序接口对话的测试，通过建立所需的依赖关系，通过提出必要的论点，我不可能写一个测试来创建出货，除非我通过某种货运应用程序接口，所以我不需要记住，我知道当我称之为。它会向我要一个，还有一个值得商榷的好处，这种依赖性现在更加明确了，所以，你知道人们想告诉我，当我第一次想到使用依赖注入，我你知道我仍然认为这是完全有争议的，但是嗯，你知道，当我看到创建出货功能。我马上就能看到它需要一个货运应用程序接口，所以当我试图找出我的代码中的哪些部分在互联网上有依赖关系或任何第三方的依赖关系时，也许你在同步一些云文件存储或发送推文，或者我不知道它是什么。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 你可以在函数的签名中看到，你说它需要这些，你不必去寻找实现，看看它，看看，它是否导入请求 并通过代码表示，哦耶，是呼叫请求邮件，您的依赖关系是明确的，所以你知道。找出这是否是一件好事的最好方法是尝试一下，当然这些都不是免费的，所以我的生产代码增长了，这个，然后像传递这些依赖项这样的依赖注入变得更加繁重，工作很辛苦，层数越多，所以我现在只有一个。创建出货
    使用 api，但如果创造出货的东西说，重新评估货物，它打电话给另一个东西说从尼特，这批货又被称为同步设备，然后我就得把这个论点传递给一系列的函数，那就太乏味了。你知道有很多方法可以解决这个问题，您可以使用依赖项注入库，哪种帮助，但我不会坐在这里为这些争论
    因为我并不总是爱他们，您还可以使用体系结构模式来尝试将这种困难最小化。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: 我们会在宇宙巨蟒网站上更多地讨论这个问题，或在我写的书中，我不知道，如果我提到我写了一本关于东西的书，请了解更多关于它的信息，完全免费，你什么都能看，我在网上写的东西都是免费的，但是是的。这可能会变得更加繁重，有更多的层次，所以这是你必须尝试并看到的东西，利大于弊，但我只想说，这种不必要的争论才是我生活中真正陷入的争论，我就是做不到，我想当人们对我说想尝试依赖注射时。你给我们买了这么多东西，我只是我做不到，我不能你知道，将不必要的参数添加到我的
    create shipping函数中，我做不到，我知道我只是进口的东西，这是对代码来说最干净的方式。当我在顶部导入它的时候，然后代码就在那里，你让我给这个函数添加一个额外的奇怪的和不必要的参数，我拒绝让我的应用程序代码变得丑陋，只是为了让我的测试更好，可能是斯德哥尔摩综合症，但我已经克服了。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: 我觉得你至少应该试试，但事实是，就像，你知道吗，有哪些事情可以证明更改应用程序代码是合理的，使其更具可读性，使其更易于维护，嗯，试图使它更有组织，这些都是更改我的应用程序代码的好理由，然后我有一件事。我被困在那里，说，比如让我的测试更容易写
    不是一个可以接受的理由，但最终你知道测试是应用程序的一部分，你知道 如果你能让你的测试，你知道你知道你知道的两倍容易和更容易维护。代价是使您的应用程序代码更难维护和阅读10%，你知道这可能是一个很好的交易，所以至少考虑一下，所以收尾，我还有几件事要谈，所以你可以对我说，好的，哈哈干得好，哈利，我们已经不用莫克斯了。但我们仍然有最初的问题，那就是，你仍然需要一些真正的测试来检查它是否真的有效
    干得好，你可以写一个假的测试，但你仍然需要检查真正的东西是否有效，我如何测试实际的适配器？
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: 我在测试我的适配器是否有效时赌了一把，也许我最终会用模拟来测试这一点，所以我想说这是一段代码，适配器是一段代码，其全部工作是与第三方集成，我建议最好的测试是集成测试，所以让我们看看，会是什么样子。如果我确实使用
    mokey和 patching来测试 api 实例化 api等于真正的货物 api在顶部，我会试着在9号线呼叫 api同步，我的丑陋和我在最初的设置中一样，我要说的是
    如果你能避免。别这样，加载真实的货物api，并将其指向某种沙箱，所以希望与你交谈的第三方有一个沙箱或一个测试帐户，你可以使用，然后把真正的货物交给它 或者一个实际的水泥物件，然后当你想断言它起作用了吗。我要去应用应用程序接口
    然后说货物成功到达了吗，正确的数据通过了吗，我认为这是最好的数据，这将告诉你事情真的成功了，并注意到这是对post请求的测试，这是我之前的快乐之路，和测试。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: 我们在故事中的第二个测试，我们说，哦等等，你需要做一个推杆请求，如果货物已经存在，我们就开始讨论，像猴子一样，修补uid模块，并确保它看起来像已经有一个和废话，废话废话，这个测试可以变得更易读，当你说。如果你能更新，第二个请求应该是
    put请求，我只做了两个请求，我要同步一些东西，我要改变一下，我要再次同步，我想说的是，事实上，在引擎盖下，用来放置而不是柱子的重要要求并不重要，你开始考虑测试行为。而不是测试实现细节，重要的是
    如果已经有一批货，我已经同步过一次了，或者有人已经同步了一次，当我做的时候，第二次它还能用的东西，重要的是它仍然在同一时间工作，你做了一个帖子，所以这个测试更好，更易读。更接近您想要的，所以是的，你也许会同意我的观点，很好，当然，集成测试可能是适配器的最佳测试，但你确实需要一个测试沙箱，如果我没有呢，问得好，但即使你有一个测试，沙箱右，就像你的第三方可能不会投资。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在故事中的第二个测试，我们说，哦等等，你需要做一个推杆请求，如果货物已经存在，我们就开始讨论，像猴子一样，修补 `uid` 模块，并确保它看起来像已经有一个和废话，废话废话，这个测试可以变得更易读，当你说。如果你能更新，第二个请求应该是
    `put` 请求，我只做了两个请求，我要同步一些东西，我要改变一下，我要再次同步，我想说的是，事实上，在引擎盖下，用来放置而不是柱子的重要要求并不重要，你开始考虑测试行为。而不是测试实现细节，重要的是如果已经有一批货，我已经同步过一次了，或者有人已经同步了一次，当我做的时候，第二次它还能用的东西，重要的是它仍然在同一时间工作，你做了一个帖子，所以这个测试更好，更易读。更接近您想要的，所以是的，你也许会同意我的观点，很好，当然，集成测试可能是适配器的最佳测试，但你确实需要一个测试沙箱
- en: 在他们的测试沙箱里有同样多的钱，他们可能正在制造，在他们真正的生产系统中，他们经常是这样，它们可能又慢又脆，它们可能会导致缓慢而脆弱的测试，哪一个，众所周知，我知道乐趣，别忘了清理，对。所以如果你有三四个不同的开发人员
    或者一整天都在做这件事，你们要确保不会踩到对方的脚趾头，所以你要为所有的东西生成唯一的 ID，所以三四个开发人员每小时进行五到十次测试，然后有一个集成的连续集成循环。每当有人做一个git时，它就会运行一个测试，推嗯，我当然记得有一个第三方说我们是这样做的，在我们整合两周后
    打电话给我们说 伙计们，沙箱账号里有十万新对象，你都干了些什么？
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在他们的测试沙箱里有同样多的钱，他们可能正在制造，在他们真正的生产系统中，他们经常是这样，它们可能又慢又脆，它们可能会导致缓慢而脆弱的测试，哪一个，众所周知，我知道乐趣，别忘了清理，对。所以如果你有三四个不同的开发人员或者一整天都在做这件事，你们要确保不会踩到对方的脚趾头，所以你要为所有的东西生成唯一的
    ID，所以三四个开发人员每小时进行五到十次测试，然后有一个集成的连续集成循环。每当有人做一个 `git` 时，它就会运行一个测试，推嗯，我当然记得有一个第三方说我们是这样做的，在我们整合两周后打电话给我们说伙计们，沙箱账号里有十万新对象，你都干了些什么？
- en: 因为我们一直没有找到删除它们的方法，在沙箱里变得越来越慢，所以你确实需要这些东西，还有那种，把我引向第三个或最后一个给你的建议，也就是说，构建一个假的
    api用于集成测试，所以我说。如果你在融入真实事物方面遇到了真正的问题，为什么不造一个假的，这里绝对有一丝危险的味道，所以先忍耐一下，让我们看看建立一个与你整合的第三方的假版本有多容易，而不是依靠真正的第三方。如果我只是旋转一个小码头集装箱，以及我剩下的集装箱，不管是什么，您正在旋转您的测试环境，它就会假装是第三方应用程序接口的行为
    就像它做的那样，其实很简单，我在我的时间里写过一些这样的东西。它们只适合一页代码，通常是因为你整合的大多数东西都是某种肮脏的东西，你知道创建读更新，休息 api通常会说
    如果你把东西发给我，然后你做一个得到，你会让东西回到或多或少相同的形状，我可以假装说。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们一直没有找到删除它们的方法，在沙箱里变得越来越慢，所以你确实需要这些东西，还有那种，把我引向第三个或最后一个给你的建议，也就是说，构建一个假的
    `api` 用于集成测试，所以我说。如果你在融入真实事物方面遇到了真正的问题，为什么不造一个假的，这里绝对有一丝危险的味道，所以先忍耐一下，让我们看看建立一个与你整合的第三方的假版本有多容易，而不是依靠真正的第三方。如果我只是旋转一个小码头集装箱，以及我剩下的集装箱，不管是什么，您正在旋转您的测试环境，它就会假装是第三方应用程序接口的行为就像它做的那样，其实很简单，我在我的时间里写过一些这样的东西。它们只适合一页代码，通常是因为你整合的大多数东西都是某种肮脏的东西，你知道创建读更新，休息
    `api` 通常会说如果你把东西发给我，然后你做一个得到，你会让东西回到或多或少相同的形状，我可以假装说。
- en: 如果你把这个发给我，对我来说，我要把它存储在内存字典里，如果你要我帮你，我要找出你发给我的那个 json 然后把它发给你，你知道吗，模一些小的变换，因此，建立一个虚假的第三方版本非常容易，你能买到的是。嗯，你会得到更可靠的测试，是的，因为不是在真正的互联网上交谈，你在和一个你控制的假货说话，如果第三方
    api不是应用程序的主要部分，就像我确定在这三个星期里 你要和货运应用程序接口整合。你真的很关心并发誓，你知道吗，六个月后，这件事你很久以前就解决了，在现实生活中永远不会出错，但你的考试总是不及格，因为他们的沙箱很脆弱，或者因为不管，这对你的应用程序来说并不是那么重要。你在想为什么你要破坏你的建筑，嗯，你知道吗，为了一件在现实生活中永远不会中断的事情，一周两次，也许把它换成更多的东西是一件好事，记住这一点，你知道吗，好的，那么这些测试还有什么意义吗，是啊。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你把这个发给我，对我来说，我要把它存储在内存字典里，如果你要我帮你，我要找出你发给我的那个 `json` 然后把它发给你，你知道吗，模一些小的变换，因此，建立一个虚假的第三方版本非常容易，你能买到的是。嗯，你会得到更可靠的测试，是的，因为不是在真正的互联网上交谈，你在和一个你控制的假货说话，如果第三方
    `api` 不是应用程序的主要部分，就像我确定在这三个星期里你要和货运应用程序接口整合。你真的很关心并发誓，你知道吗，六个月后，这件事你很久以前就解决了，在现实生活中永远不会出错，但你的考试总是不及格，因为他们的沙箱很脆弱，或者因为不管，这对你的应用程序来说并不是那么重要。你在想为什么你要破坏你的建筑，嗯，你知道吗，为了一件在现实生活中永远不会中断的事情，一周两次，也许把它换成更多的东西是一件好事，记住这一点，你知道吗，好的，那么这些测试还有什么意义吗，是啊。
- en: 你还在测试你是适配器，可以打真正的电话，因为你知道你要把电话打到一个单独的容器上，你要测试一下，你对 json进行了正确的编码和解码，当然，你仍然可以让自己选择在真实的音箱上运行测试。所以这是个值得思考的问题，就像，也许我们已经有了一些东西，我们对真正的沙箱进行了测试，但不是在本地的开发机器上，或者每天早上六点在芝加哥，它与真实的东西背道而驰，尽管像白天的常规检查，与假东西赛跑。或者更聪明的人，它查看被更改的代码，或者查看pull请求的标题，以确定这看起来是否像更改了集成的代码，它应该与真实的东西背道而驰，或者它应该与假的，你可能会发现这给你买了很多。并且让您有一个适当的端到端测试，不会因为外部依赖而减慢速度，所以这只是最后八个
    我想和你一起生活，还有其他的话题，你可以进入一次，你开始有一个假的，通过反对，你知道吗。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你还在测试你是适配器，可以打真正的电话，因为你知道你要把电话打到一个单独的容器上，你要测试一下，你对 `json` 进行了正确的编码和解码，当然，你仍然可以让自己选择在真实的音箱上运行测试。所以这是个值得思考的问题，就像，也许我们已经有了一些东西，我们对真正的沙箱进行了测试，但不是在本地的开发机器上，或者每天早上六点在芝加哥，它与真实的东西背道而驰，尽管像白天的常规检查，与假东西赛跑。或者更聪明的人，它查看被更改的代码，或者查看
    `pull` 请求的标题，以确定这看起来是否像更改了集成的代码，它应该与真实的东西背道而驰，或者它应该与假的，你可能会发现这给你买了很多。并且让您有一个适当的端到端测试，不会因为外部依赖而减慢速度，所以这只是最后八个我想和你一起生活，还有其他的话题，你可以进入一次，你开始有一个假的，通过反对，你知道吗。
- en: 现在您有了一系列针对真实依赖关系和虚假依赖关系的测试，你可以称之为经过验证的赝品，有一些文献在那里，有一个合同测试的想法，你在测试，与其说是整合，但你测试的是你知道的或期望的第三方的特定行为。尤其是当你面对的是一个有漏洞的第三方，写一个测试说，断言错误仍然存在，如果情况有所改变，你就会知道，最后是一个非常酷的库
    叫做 vcr pi，它是一种替代，你知道吗，单元中的嘲笑和修补，测试模拟道。它可以让你对真正的应用程序接口进行测试，它会记录下，下一次你做这些测试的时候，会回放相同的反应，这可能是解决整个问题的一个很好的办法，尽管根据我的经验，有时也会变得非常复杂。但你可以在宇宙巨蟒网站上了解更多，我有一篇关于这个主题的博客文章，叫做针对第三方API的写作测试，所以一定要去看看，嗯，所以回顾一下，我的建议是什么
    你应该停止使用标记，你应该做什么。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您有了一系列针对真实依赖关系和虚假依赖关系的测试，你可以称之为经过验证的赝品，有一些文献在那里，有一个合同测试的想法，你在测试，与其说是整合，但你测试的是你知道的或期望的第三方的特定行为。尤其是当你面对的是一个有漏洞的第三方，写一个测试说，断言错误仍然存在，如果情况有所改变，你就会知道，最后是一个非常酷的库叫做
    `vcr pi`，它是一种替代，你知道吗，单元中的嘲笑和修补，测试模拟道。它可以让你对真正的应用程序接口进行测试，它会记录下，下一次你做这些测试的时候，会回放相同的反应，这可能是解决整个问题的一个很好的办法，尽管根据我的经验，有时也会变得非常复杂。但你可以在宇宙巨蟒网站上了解更多，我有一篇关于这个主题的博客文章，叫做针对第三方
    `API` 的写作测试，所以一定要去看看，嗯，所以回顾一下，我的建议是什么你应该停止使用标记，你应该做什么。
- en: 您应该构建一个适配器，表示外部依赖关系的适配器，它以一种很好的方式做到了这一点，它有一个很好的api，在你的代码中看起来很好，然后你应该尝试使用 而不是嘲笑它，你应该试试，你应该试着用你自己写的假的。所以写你自己的假类假装是真正的第三方，它通常是某种简单的记忆收集，所以试着这样做，然后尝试使用依赖注入，而不是用单元测试点补丁来代替东西，您可能会发现这给您带来了更多可读的测试，最后。考虑使用集成测试作为适配器的主要测试类型，然后，如果你发现自己处于这样一种情况，你有片状的ci构建和首尾相连的测试，考虑为您的测试构建一个虚假的第三方版本，而且可能比你想象的要少得多。它可能会给你带来比你最初想象的更多的回报，嗯，然后一点点废话，为什么我们要做这些事，我们正在做，因为它会给我们更好的测试，更易于维护的测试，更容易阅读和编写
    更可靠测试的测试，它会施加设计压力。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该构建一个适配器，表示外部依赖关系的适配器，它以一种很好的方式做到了这一点，它有一个很好的 `api`，在你的代码中看起来很好，然后你应该尝试使用而不是嘲笑它，你应该试试，你应该试着用你自己写的假的。所以写你自己的假类假装是真正的第三方，它通常是某种简单的记忆收集，所以试着这样做，然后尝试使用依赖注入，而不是用单元测试点补丁来代替东西，您可能会发现这给您带来了更多可读的测试，最后。考虑使用集成测试作为适配器的主要测试类型，然后，如果你发现自己处于这样一种情况，你有片状的
    `ci` 构建和首尾相连的测试，考虑为您的测试构建一个虚假的第三方版本，而且可能比你想象的要少得多。它可能会给你带来比你最初想象的更多的回报，嗯，然后一点点废话，为什么我们要做这些事，我们正在做，因为它会给我们更好的测试，更易于维护的测试，更容易阅读和编写更可靠测试的测试，它会施加设计压力。
- en: 我的意思是，这将帮助你思考你是如何分离你的外部依赖，并确保这些是小的，可管理的和可用的，实际上，有一点是关于强迫脱钩，所以这真的会迫使你把你的商业逻辑，应用程序的核心。你的客户真正关心的东西
    从某种低级的基础结构细节，不是因为你知道其中一个一定比另一个更重要，就像他们都需要工作，否则你就不会写了，但是因为这允许它们以不同的速度变化。我可以在不改变业务逻辑的情况下
    改变 api，我可以在不改变 api的情况下 改变业务逻辑，所以脱钩，我想很多，原来如此，希望你喜欢，非常感谢你能忍受我，在宇宙蟒蛇网站了解更多信息，嗯是的。我真的很感激你抽出时间，我希望你喜欢这些东
    西，如果你真的决定停止使用莫克斯，请让，我知道怎么回事，推特或写一篇关于它的博客文章，我很想听到你的消息，我不知道我有没有提到，我写了一本书，非常感谢。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我的意思是，这将帮助你思考你是如何分离你的外部依赖，并确保这些是小的，可管理的和可用的，实际上，有一点是关于强迫脱钩，所以这真的会迫使你把你的商业逻辑，应用程序的核心。你的客户真正关心的东西从某种低级的基础结构细节，不是因为你知道其中一个一定比另一个更重要，就像他们都需要工作，否则你就不会写了，但是因为这允许它们以不同的速度变化。我可以在不改变业务逻辑的情况下改变
    `api`，我可以在不改变 `api` 的情况下改变业务逻辑，所以脱钩，我想很多，原来如此，希望你喜欢，非常感谢你能忍受我，在宇宙蟒蛇网站了解更多信息，嗯是的。我真的很感激你抽出时间，我希望你喜欢这些东西，如果你真的决定停止使用莫克斯，请让我知道怎么回事，推特或写一篇关于它的博客文章，我很想听到你的消息，我不知道我有没有提到，我写了一本书，非常感谢。
- en: '![](img/70f450bbad5ae8f4921bcddae5be82cc_2.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/70f450bbad5ae8f4921bcddae5be82cc_2.png)'
