- en: P34：Talk Dustin Ingram - Static Typing in Python - 程序员百科书 - BV1rW4y1v7YG
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P34：Talk Dustin Ingram - Static Typing in Python - 程序员百科书 - BV1rW4y1v7YG
- en: '![](img/2244bd48a54c022aa361fb2911a29521_0.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2244bd48a54c022aa361fb2911a29521_0.png)'
- en: 我是达斯汀，我是谷歌的开发者倡导者，我也是得克萨斯圆周率会议的组织者，在德克萨斯的奥斯汀，如果你想来的话，我也在做一堆蟒蛇的东西，但我今天不是来跟你说这些的，相反，我在这里和你谈谈静态打字。我想先做个小测验，python是动态类型还是静态类型，所以也许你认为是的，Python是一种动态类型语言，所以它是动态类型的，或者你觉得呃，这是一个关于
    python中静态类型的讨论。很可能是静态类型的，或者你觉得这是个骗人的问题，这是个骗人的问题，所以答案是 python可以被动态类型化，但是也可以选择像您希望的那样静态类型，这个答案可能对你来说没有意义，如果没有也没关系。你在看正确的谈话，理解这个问题答案的步骤
    首先是，我们需要谈谈蟒蛇的类型，然后一般的类型系统，Python中的动态分型，蟒蛇的静态分型，一旦我们明白了 我们可以讨论如何使用静态类型。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我是达斯汀，我是谷歌的开发者倡导者，我也是德克萨斯圆周率会议的组织者，在德克萨斯的奥斯汀，如果你想来的话。我也在做一堆 Python 的相关工作，但我今天不是来跟你说这些的，相反，我在这里和你谈谈静态类型。我想先做个小测验，Python
    是动态类型还是静态类型？所以也许你认为是的，Python 是一种动态类型语言，所以它是动态类型的，或者你觉得这是一个关于 Python 中静态类型的讨论。很可能是静态类型的，或者你觉得这是个骗人的问题。这是个骗人的问题，所以答案是
    Python 可以是动态类型的，但也可以选择像您希望的那样静态类型。这个答案可能对你来说没有意义，如果没有也没关系。你在看正确的谈话，理解这个问题答案的步骤。首先是，我们需要谈谈
    Python 的类型，然后一般的类型系统，Python 中的动态分型，Python 的静态分型。一旦我们明白了这些，我们就可以讨论如何使用静态类型。
- en: 当您应该使用静态键入时，另外，当你不应该使用静态类型的时候，所以让我们来谈谈类型，让我们具体地谈谈在蟒蛇中内置的类型，所以在蟒蛇身上，如果我键入4 2，我得到了一个回应，类
    int。我可以做的类型四十二点零，我去弄个班级彩车，foo的类型是类字符串，foo和bar的类型是类列表，你可能会说，哦，我认得这些，这些是我可以用来将一种类型转换为另一种类型的内置信息，你说的对，对。我们可以设定变量
    a等于42，我们可以通过调用，漂浮在上面，把它抛在绳子上，然后我们可以把它放在一个非常丑陋的名单上，所以也许你有一个奇怪的错误，一个字符串实际上变成了一个列表，看起来像这样。你猜怎么着，这是一个类型错误，你来对地方了，似乎这些只是我们唯一可用的类型，在浮子线上，但实际上这些类在
    python中有相应的内置，所以基本上我们在这里做的是类匹配，当我们做一些事情 比如四二。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当您应该使用静态类型时，以及当你不应该使用静态类型的时候，所以让我们来谈谈类型，让我们具体地谈谈在 Python 中内置的类型。在 Python 中，如果我键入
    42，我得到了一个回应，类 int。我可以将类型设置为 42.0，我去弄个班级，foo 的类型是类字符串，foo 和 bar 的类型是类列表。你可能会说，哦，我认得这些，这些是我可以用来将一种类型转换为另一种类型的内置信息，你说得对。我们可以设定变量
    a 等于 42，我们可以通过调用 float 将它转换成一个浮点数，然后我们可以把它放在一个非常丑陋的列表上。所以也许你有一个奇怪的错误，一个字符串实际上变成了一个列表，看起来像这样。你猜怎么着，这是一个类型错误，你来对地方了。似乎这些只是我们唯一可用的类型，在
    float 的旁边，但实际上这些类在 Python 中有相应的内置。所以基本上我们在这里做的是类匹配，当我们做一些事情，比如 42。
- en: 我们看到，如果4 2是int类的一个实例，在这里是一个内置的，还有其他类型类，它们不直接对应内置式，如，例如，无类型，我相信我们在蟒蛇的代码中已经做了很多正确的事情，没有类型就是没有类型。但我们不会用任何类型来描述它，同样，有一个函数类型，但是我们不用函数来定义一个函数，我们说放克，等等，等等，还有很多类似省略号的，所有这些都不直接对应于内置系统，我们得到它们的地方是
    如果我们输入类型。我们可以得到这个巨大的列表所有的类型，我们可以，他们中的许多人生活在类型模块中，所有这些实际上都可以用来实例化一个新的类型，例如一个函数，我们可以实例化一个新的函数，当函数类型打开时。一些亲密的朋友在那里争吵，但我们并不真的这么做，这是有充分理由的，最后看起来会很乱，相反，我们将使用def函数名进行常规操作，所以当我们说
    python是一种动态类型语言，它意味着一些事情。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到，如果 42 是 int 类的一个实例，在这里是一个内置的，还有其他类型类，它们不直接对应内置类型，比如，无类型。我相信我们在 Python 的代码中已经做了很多正确的事情。没有类型就是没有类型。但我们不会用任何类型来描述它。同样，有一个函数类型，但是我们不用函数来定义一个函数，我们说
    foo 等等，还有很多类似省略号的类型，所有这些都不直接对应于内置类型。我们得到它们的地方是，如果我们输入类型，我们可以得到这个巨大的列表，所有的类型。我们可以，他们中的许多人生活在类型模块中，所有这些实际上都可以用来实例化一个新的类型，比如一个函数。我们可以实例化一个新的函数，当函数类型打开时。一些亲密的朋友在那里争论，但我们并不真的这么做，这是有充分理由的，最后看起来会很乱。相反，我们将使用
    def 函数名进行常规操作。所以当我们说 Python 是一种动态类型语言，它意味着一些事情。
- en: 这首先意味着变量可以是任何类型，并且变量的类型可以在程序运行时的过程中改变，整数四二，浮子四二，绳子四二，如果我在这个变量的结果上调用类型 a，什么类型是，答案是，我们不知道这是确定的，不确定的。可能是绳子，可能是个整数，或者它可能是一个流，这取决于选择决定选择什么拉姆，动态类型还意味着函数的参数和返回类型可以是
    python中的任何类型，如果我们从neate写一个这样的函数，返回一个加b加c。如果你写一个这样的函数，我们怎么知道我们得到的是我们期望的类型，所以如果你看到这个函数，你不知道它是做什么的，您希望参数和返回类型是什么，所以你可能会猜到它们是整数，这将是正确的，我们可以从尼特打电话。二三，我们返回这三个数字之和的结果，但是字符串和列表也是如此，基本上其他的都是支持，这里的加法运算符也是，对，我们可以传递三根弦，它最终会把这三个字符串连接在一起，并返回那个值。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这首先意味着变量可以是任何类型，并且变量的类型可以在程序运行时的过程中改变。整数 42，浮点数 42，字符串 "42"。如果我在这个变量的结果上调用类型
    a，什么类型是，答案是，我们不知道。它是不确定的，可能是字符串，可能是整数，或者它可能是浮点数，这取决于选择决定选择什么。动态类型还意味着函数的参数和返回类型可以是
    Python 中的任何类型。如果我们从 neat 写一个这样的函数，返回 a + b + c。如果你写一个这样的函数，我们怎么知道我们得到的是我们期望的类型？所以如果你看到这个函数，你不知道它是做什么的。您希望参数和返回类型是什么，所以你可能会猜到它们是整数，这将是正确的。我们可以从
    neat 调用 2 和 3，我们返回这三个数字之和的结果。但是字符串和列表也是如此，基本上其他的都是支持的，这里的加法运算符也是，对，我们可以传递三根字符串，它最终会把这三个字符串连接在一起，并返回那个值。
- en: 我们不能在这里做的是把整数和字符串混在一起，所以我们不能把1 2作为整数，把foo作为字符串，因为这是个类型错误，我们不能用加号运算符来组合整数和字符串，好吧，所以这个函数很混乱，我们怎么可能修好它呢？
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不能在这里做的是把整数和字符串混在一起，所以我们不能把 12 作为整数，把 foo 作为字符串，因为这是个类型错误。我们不能用加号运算符来组合整数和字符串。好吧，所以这个函数很混乱，我们怎么可能修好它呢？
- en: 我们可以做的一件事是，我们可以编写非常长和详细的文档字符串来描述函数的参数和返回类型，如果你这么做，我会问你自己，你的公司付给你足够的报酬来做这件事吗，因为这是一个很大的工作，在一天结束的时候。它甚至不能控制我们程序的运行时间，对吧，这只是文件，它不能确保我们的开发人员实际上使用您在
    doc字符串中描述的正确参数来调用这个函数，我们可以做的另一件事是。我们可以断言参数类型和所有传递给我们的函数的返回类型，因此，对于每个参数，我们断言类型是我们期望的类型，我们做我们的商业逻辑，然后我们在返回类型上断言断言，然后把它还回去
    这样我们也不会这么做。实际上我之前做过一次这样的演讲，我说没有人会这么做，观众中有人说，是啊，其实我们这样做，所以虽然这是有效的权利，这是类型检查，它有一些问题，首先这里有一点开销，我们在这里要做的每一个断言。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以做的一件事是，编写非常长和详细的文档字符串来描述函数的参数和返回类型。如果你这么做，我想问你：你的公司付给你足够的报酬来做这件事吗？因为这是一个很大的工作，在一天结束的时候。它甚至不能控制我们程序的运行时间，对吧？这只是文件，它不能确保我们的开发人员实际上使用您在
    doc 字符串中描述的正确参数来调用这个函数。我们可以做的另一件事是，我们可以断言参数类型和所有传递给我们的函数的返回类型。因此，对于每个参数，我们断言类型是我们期望的类型，我们做我们的商业逻辑，然后我们在返回类型上进行断言，然后把它还回去。这样我们也不会这么做。实际上我之前做过一次这样的演讲，我说没有人会这么做，观众中有人说，是啊，实际上我们这样做。所以虽然这是有效的类型检查，它确实存在一些问题，首先这里有一点开销，我们在这里要做的每一个断言。
- en: 把我们的程序放慢一点，你可以在运行时优化它，但这并不常见，这里的另一个问题是，如果你忘记写一个断言权利，你的程序缺少了一些，一些类型检查，所以我们不这么做，我们该怎么办，相反，我们做的是鸭子打字。鸭子打字意味着
    如果它像鸭子一样走路，它像鸭子一样嘎嘎叫，可能是只鸭子，这意味着我们决定了函数或变量的类型，根据它是如何在每一个，你可以根据所做的事情来猜测食物和酒吧是什么，在第一个例子中。条形图是一种可迭代的，它可能是一个列表或一个字符串，或者甚至不可能是瘾君子和傻瓜
    是一个列表 理解，所以这将是一个列表，嗯，在第二个例子中，酒吧被比作零，所以它可能是 int或者 float之类的东西。在最后一个例子中，呃，有点暧昧，实际上是禁止一个函数或类，比如这里的食物，它实际上可能是任何东西，现在让我们来讨论静态类型，静态打字的意思，因为它定义了一个变量类型，也不会改变。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 把我们的程序放慢一点，你可以在运行时优化它，但这并不常见。这里的另一个问题是，如果你忘记写一个断言，你的程序就缺少了一些类型检查。所以我们不这么做，我们该怎么办？相反，我们做的是鸭子打字。鸭子打字意味着如果它像鸭子一样走路，它像鸭子一样嘎嘎叫，可能是只鸭子。这意味着我们决定了函数或变量的类型，依据它在每个实例中是如何工作的。你可以根据所做的事情来猜测
    foo 和 bar 的类型。在第一个例子中，bar 是一种可迭代的，它可能是一个列表或一个字符串，或者甚至不可能是。foo 是一个列表，所以这将是一个列表。嗯，在第二个例子中，bar
    被比作零，所以它可能是 int 或者 float 之类的东西。在最后一个例子中，呃，有点模糊，实际上是没有限制的，比如这里的 foo，它实际上可能是任何东西。现在让我们来讨论静态类型，静态打字意味着它定义了一个变量类型，并且这个类型不会改变。
- en: 实际上有很多静态类型的语言，下面是一些相同函数的例子，我们只是在看那些语言，这里有一个 framin c的例子，这里，是爪哇语，这是一个致命的赠品，带着公众的静态和废话，废话，废话，这个是铁锈。你可以看出它是生锈的，因为铁锈有很好的颗粒控制整数类型，U8，这里是一个无符号的八位整数，最后一个是打字稿，JavaScript本身没有类型。但是
    typescript是 javascript类型的实现，这是一个死气沉沉的赠品，那是 typeescript或 javascript，因为在 javascript里。每件事都是所有的数字都是一样的，它们是一个数字，所以我们可以把语言分为两类，第一种动态类型语言和静态类型语言，我们得在蟒蛇旁边加一个星号，因为这就是这次谈话的内容，从技术上讲，鲁比是可选的。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上有很多静态类型的语言，下面是一些相同函数的例子，我们只是在看那些语言。这里有一个 Framin C 的例子，这里是 Java，这是一个静态类型的语言，带着公共的静态类型和冗余。这个是
    Rust。你可以看出它是 Rust，因为 Rust 有很好的粒度控制整数类型，U8，这是一个无符号的八位整数，最后一个是 TypeScript。JavaScript
    本身没有类型，但是 TypeScript 是 JavaScript 类型的实现。这是一个静态类型的语言，因为在 JavaScript 中，每件事都是相同的数字，它们都是一个数字。所以我们可以把语言分为两类：第一种是动态类型语言，第二种是静态类型语言。我们得在
    Python 旁边加一个星号，因为这就是这次谈话的内容。从技术上讲，Ruby 是可选的。
- en: 静态类型检查，但我暂时不把它列在清单上，那么早，我说了，Python是动态类型的，但是也可以选择像您希望的那样静态类型，现在，这里需要注意的是，这并不总是正确的。python中静态类型的故事
    也是静态类型的故事，投递箱，嗯 dropbox是一家拥有数百万行 python代码的公司，基本上在他们历史上的某个时刻。他们认为有那么多非类型化的 python代码实际上是一种负担，对，这减慢了他们的开发人员的速度，使他们更难创建新的功能和进行实际的开发，但还有其他一些事情导致了它，我会在这里谈论这些。第一个是
    pep 3 1 0 7函数注释，我们在2006年用蟒蛇3得到了这个，这样我们就可以编写一个这样的函数，并添加一些额外的元数据来注释参数和函数的返回值，所以这里需要注意的是。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 静态类型检查，但我暂时不把它列在清单上，那么早，我说了，Python是动态类型的，但是也可以选择像您希望的那样静态类型，现在，这里需要注意的是，这并不总是正确的。python中静态类型的故事也是静态类型的故事，投递箱，嗯
    dropbox是一家拥有数百万行python代码的公司，基本上在他们历史上的某个时刻。他们认为有那么多非类型化的python代码实际上是一种负担，对，这减慢了他们的开发人员的速度，使他们更难创建新的功能和进行实际的开发，但还有其他一些事情导致了它，我会在这里谈论这些。第一个是pep
    3107函数注释，我们在2006年用蟒蛇3得到了这个，这样我们就可以编写一个这样的函数，并添加一些额外的元数据来注释参数和函数的返回值，所以这里需要注意的是。
- en: 这对函数的执行没有任何影响，我们可以把我们想要的东西作为这些注释，所有这些都给了我们一个函数的属性，称为dunder注释，它为我们提供了评估所有这些注释的结果，所以这里
    a是 x b是5 6和11的和。C是空列表，返回的类型是9，所以任何编译这个函数或解释这个函数的东西都可以访问这些注释，嗯，但它们不是 这也许不是超级有用的，pep本身列出了这个注释的很多用途，它们基本上都归结为。我们可以用这个做一些看起来像静态打字的事情，同时我们也可以看到一些文件，但基本上目的是让我们做一些看起来像静态输入的东西，所以如果我们考虑这个，通过静态打字的镜头，我们可以这样写注释。注释本身就是我们期望的参数类型，以及返回类型，但这仍然没有给我们任何方法来实际评估这个函数在其他地方是否被正确使用，仍然只是元数据，它也没有给我们一个注释变量的方法，我们只能注释函数。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这对函数的执行没有任何影响，我们可以把我们想要的东西作为这些注释，所有这些都给了我们一个函数的属性，称为dunder注释，它为我们提供了评估所有这些注释的结果，所以这里a是x
    b是5 6和11的和。C是空列表，返回的类型是9，所以任何编译这个函数或解释这个函数的东西都可以访问这些注释，嗯，但它们不是，这也许不是超级有用的，pep本身列出了这个注释的很多用途，它们基本上都归结为。我们可以用这个做一些看起来像静态打字的事情，同时我们也可以看到一些文件，但基本上目的是让我们做一些看起来像静态输入的东西，所以如果我们考虑这个，通过静态打字的镜头，我们可以这样写注释。注释本身就是我们期望的参数类型，以及返回类型，但这仍然没有给我们任何方法来实际评估这个函数在其他地方是否被正确使用，仍然只是元数据，它也没有给我们一个注释变量的方法，我们只能注释函数。
- en: 它们的参数和返回类型，所以就在这本书出版的同时，剑桥大学的一位博士生正在做他的博士研究，他的研究是静态类型和动态类型语言的统一 听起来很有趣，他想在所有事情上使用相同的语言。从非常小的脚本到庞大的多行代码库，他的研究人员还专注于从无类型原型到静态类型产品的逐渐增长，意思是你不必一次做完，因此，您可以从代码库中的一些小部分开始，静态类型并缓慢增长。将静态类型添加到代码库的其余部分听起来相当酷，所以他在2011年发表了他的研究，他的论文基本上是这样的，向动态类型化语言添加静态类型系统可能是一种侵入性的更改，需要对现有程序进行协调的修改。虚拟机和开发工具，然而，可选的可插拔类型系统并不影响程序的运行时语义，因此，它们可以添加到语言中，而不会影响现有的代码和工具，听起来真不错，你可以介绍我的派，如果你以前听说过我的圆周率。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 它们的参数和返回类型，所以就在这本书出版的同时，剑桥大学的一位博士生正在做他的博士研究，他的研究是静态类型和动态类型语言的统一听起来很有趣，他想在所有事情上使用相同的语言。从非常小的脚本到庞大的多行代码库，他的研究人员还专注于从无类型原型到静态类型产品的逐渐增长，意思是你不必一次做完，因此，您可以从代码库中的一些小部分开始，静态类型并缓慢增长。将静态类型添加到代码库的其余部分听起来相当酷，所以他在2011年发表了他的研究，他的论文基本上是这样的，向动态类型化语言添加静态类型系统可能是一种侵入性的更改，需要对现有程序进行协调的修改。虚拟机和开发工具，然而，可选的可插拔类型系统并不影响程序的运行时语义，因此，它们可以添加到语言中，而不会影响现有的代码和工具，听起来真不错，你可以介绍我的派，如果你以前听说过我的圆周率。
- en: 这可能不是你想的，在本摘要中，您可以将我的pi描述为python的实验性变体，它支持编写程序，可以无缝地混合动态和静态类型，当我们今天在他的研究中谈论我的圆周率时，这并不是真的。他真的不能用现有的语言来决定如何做到这一点，他不能像以前那样使用蟒蛇，他所做的是，他创造了自己的语言，这对理论研究来说并不疯狂，这就是变种的样子，它可以被编译成蟒蛇，它看起来有点像蟒蛇，如果你斜视它。这个问题甚至与存在于
    python中的函数注释有关，当时，Python不能支持完全静态类型本身所必需的一切，你可以说他最终把他的项目交给了蟒蛇，后来他跟吉塔和拉姆谈了这件事。pdfl
    python和guido说服他放弃自定义语法，只使用直python 3，让我们在蟒蛇3中这样做，它被修改为检查蟒蛇，这就是我们今天所认为的圆周率，接下来发生在2014年的事情是我们得到了4。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能不是你想的，在本摘要中，您可以将我的pi描述为python的实验性变体，它支持编写程序，可以无缝地混合动态和静态类型，当我们今天在他的研究中谈论我的圆周率时，这并不是真的。他真的不能用现有的语言来决定如何做到这一点，他不能像以前那样使用蟒蛇，他所做的是，他创造了自己的语言，这对理论研究来说并不疯狂，这就是变种的样子，它可以被编译成蟒蛇，它看起来有点像蟒蛇，如果你斜视它。这个问题甚至与存在于python中的函数注释有关，当时，Python不能支持完全静态类型本身所必需的一切，你可以说他最终把他的项目交给了蟒蛇，后来他跟吉塔和拉姆谈了这件事。pdfl
    python和guido说服他放弃自定义语法，只使用直python 3，让我们在蟒蛇3中这样做，它被修改为检查蟒蛇，这就是我们今天所认为的圆周率，接下来发生在2014年的事情是我们得到了4。
- en: 83，是输入型理论，这是关于静态类型如何在 python中工作的一些想法，这个 pep描述的一件事是可选输入，这意味着添加注释不会影响程序的运行时，带注释的函数应该与未带注释的函数运行相同的函数。我认为这来自于我们从蟒蛇两到三次迁徙中学到的一些教训，基本上，添加静态类型不应该妨碍您的程序，另一个描述是逐渐打字，基本上的想法是，我们不要一蹴而就，渐进式键入只允许实体程序的一部分。从而同时利用动态和静态类型的理想方面，此外，它描述了一种做变量注释的方法，以3
    1 0 7为基础 给我们提供一种方法来注释 不仅仅是函数，所以这意味着用我们原来的功能。我们可以在实际的biz中添加一个类型注释作为z变量，这里它为python
    two引入了类型提示，因为在python 3之前，函数注释是不存在的，但即使是那些停留在过去的人 也值得静态打字。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 83，是输入型理论，这是关于静态类型如何在python中工作的一些想法，这个pep描述的一件事是可选输入，这意味着添加注释不会影响程序的运行时，带注释的函数应该与未带注释的函数运行相同的函数。我认为这来自于我们从蟒蛇两到三次迁徙中学到的一些教训，基本上，添加静态类型不应该妨碍您的程序，另一个描述是逐渐打字，基本上的想法是，我们不要一蹴而就，渐进式键入只允许实体程序的一部分。从而同时利用动态和静态类型的理想方面，此外，它描述了一种做变量注释的方法，以3107为基础给我们提供一种方法来注释不仅仅是函数，所以这意味着用我们原来的功能。我们可以在实际的biz中添加一个类型注释作为z变量，这里它为python
    two引入了类型提示，因为在python 3之前，函数注释是不存在的，但即使是那些停留在过去的人也值得静态打字。
- en: 所以在python 3中，我们可以写一个像这样的小函数，其中所有参数类型返回类型都有注释，但是在 python 2中我们有一个方法来写相同的函数，同类型注释，但是只要使用类型注释就可以了。最后还介绍了一些特殊的类型构造，因此，这些是基本的构建块，我们需要做静态类型，这些都是基于现有的类型，比如int
    float string，没有类型给我们一些新的类型，像任何一个。它与任何类型的结合都是一致的，一种或几种类型的组合，选择性，它是type的并集的别名，而not
    type是tuple，这将是，你知道吗，一对夫妇的物品有这些类型，可调用，etc。所以我们可以这样写一个函数，然后一个整数，第三个参数可能是整数，也可能是漂浮的，取决于用户如何称呼它，pep还提供了容器类型，所以容器类型非常重要，因为它们允许我们定义容器类内部的类型，例如。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 所以在python 3中，我们可以写一个像这样的小函数，其中所有参数类型返回类型都有注释，但是在python 2中我们有一个方法来写相同的函数，同类型注释，但是只要使用类型注释就可以了。最后还介绍了一些特殊的类型构造，因此，这些是基本的构建块，我们需要做静态类型，这些都是基于现有的类型，比如int
    float string，没有类型给我们一些新的类型，像任何一个。它与任何类型的结合都是一致的，一种或几种类型的组合，选择性，它是type的并集的别名，而not
    type是tuple，这将是，你知道吗，一对夫妇的物品有这些类型，可调用，etc。所以我们可以这样写一个函数，然后一个整数，第三个参数可能是整数，也可能是漂浮的，取决于用户如何称呼它，pep还提供了容器类型，所以容器类型非常重要，因为它们允许我们定义容器类内部的类型，例如。
- en: 我可以加整数，这很好，但如果我想加上一些东西 比如绳子，会失败的，同样地，对于字典来说，我可以输入键和值，整数的值，所以我可以让某个人等于四二，这很好，但我不能用整数的钥匙，这个
    pep还为我们提供了。当类或函数以泛型方式行为时，所以如果我想输入一个可迭代的函数 我不在乎，我可以在这里使用可迭代的泛型，最后，我们有了类型别名，这使我们能够更简洁地使用我们的类型。这意味着如果我们想变得更像
    javascript，我们可以创建一个数字类型，这是所有可用的数字类型的组合，我们可以用它来注释我们的函数，下一步我们得到的是四八四，这是在214的类型提示。这就规范了四八三的一切和我儿子的行为，它引入打字模块以提供标准定义，基本构件和工具，它还介绍了很多关于边缘情况和特定用例的细节，本质上是如何在
    python中构建类型检查器。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以加整数，这很好，但如果我想加上一些东西比如绳子，会失败的，同样地，对于字典来说，我可以输入键和值，整数的值，所以我可以让某个人等于四二，这很好，但我不能用整数的钥匙，这个pep还为我们提供了。当类或函数以泛型方式行为时，所以如果我想输入一个可迭代的函数，我不在乎，我可以在这里使用可迭代的泛型，最后，我们有了类型别名，这使我们能够更简洁地使用我们的类型。这意味着如果我们想变得更像javascript，我们可以创建一个数字类型，这是所有可用的数字类型的组合，我们可以用它来注释我们的函数，下一步我们得到的是484，这是在214的类型提示。这就规范了483的一切和我儿子的行为，它引入打字模块以提供标准定义，基本构件和工具，它还介绍了很多关于边缘情况和特定用例的细节，本质上是如何在python中构建类型检查器。
- en: 它很大程度上依赖于圆周率 此时已经在做的事情，在蟒蛇三五，我们得到了四号宠物的支持，以及216年的打字模块，我们得到了用于变量注释的pep5-2-6语法，因此。现有的评论风格注释对于python
    two来说是很好的，但在其他地方不是很好，这样我们就可以得到这样的注释样式注释，并将它移动到变量声明的一部分，常见样式注释的一个问题是。我们不能为变量定义类型而不指定初始类型，所以现在宠物五六，我们可以说船长变量是一个字符串，它没有初始值，类似地，对于类变量，我们现在可以这样排队了，所以蟒蛇三六，我们得到了宠物五二六的支持。我们几乎可以在
    python中做静态类型检查，除了一个类型检查器，现在有两种类型的类型检查器，静态和动态，静态类型触发器实际上并不运行代码，当它没有被评估时，他们会静止不动地看着它，动态检查，然而。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 它很大程度上依赖于圆周率，此时已经在做的事情，在蟒蛇三五，我们得到了四号宠物的支持，以及216年的打字模块，我们得到了用于变量注释的pep 526语法，因此。现有的评论风格注释对于python
    two来说是很好的，但在其他地方不是很好，这样我们就可以得到这样的注释样式注释，并将它移动到变量声明的一部分，常见样式注释的一个问题是。我们不能为变量定义类型而不指定初始类型，所以现在宠物56，我们可以说船长变量是一个字符串，它没有初始值，类似地，对于类变量，我们现在可以这样排队了，所以蟒蛇三六，我们得到了宠物526的支持。我们几乎可以在python中做静态类型检查，除了一个类型检查器，现在有两种类型的类型检查器，静态和动态，静态类型触发器实际上并不运行代码，当它没有被评估时，他们会静止不动地看着它，动态检查，然而。
- en: 会在应用程序实际运行时检查类型，所以在这一点上，我的圆周率已经从一个python变体转变为一个类型检查器，它可以在圆周率上找到，你可以安装它，所以你可以安装我的圆周率，您可以编写一些类型注释函数。你会经营它，如果你错误地使用了你的类型，所以实际上除了我的派之外
    还有一堆类型检查器，在这一点上，我的圆周率主要由Dropbox拥有，谷歌有圆周率类型，脸书有圆周率，微软有黄铁矿，Pymany。实际上有一个内置的类型检查器，实际上，其中大部分都可以与您的编辑器集成，所以你可以混合选择，如你所愿，也有其他不支持宠物四四规范的，还有一些在运行时运行的动态类型检查，所以免责声明我在谷歌工作。我在这里得到的不可避免的问题是，如果他们都支持宠物4
    4，他们有什么不同，为什么我会选择一个而不是另一个，所以我主要是用我的圆周率和圆周率类型，我来谈谈这两者的区别。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 会在应用程序实际运行时检查类型，所以在这一点上，我的**圆周率**已经从一个python变体转变为一个类型检查器，它可以在圆周率上找到，你可以安装它，所以你可以安装我的**圆周率**，您可以编写一些类型注释函数。你会经营它，如果你错误地使用了你的类型，所以实际上除了我的**派**之外，还有一堆类型检查器，在这一点上，我的**圆周率**主要由Dropbox拥有，谷歌有**圆周率**类型，脸书有**圆周率**，微软有**黄铁矿**，**Pymany**。实际上有一个内置的类型检查器，实际上，其中大部分都可以与您的编辑器集成，所以你可以混合选择，如你所愿，也有其他不支持**宠物4
    4**规范的，还有一些在运行时运行的动态类型检查，所以免责声明我在谷歌工作。我在这里得到的不可避免的问题是，如果他们都支持**宠物4 4**，他们有什么不同，为什么我会选择一个而不是另一个，所以我主要是用我的**圆周率**和**圆周率**类型，我来谈谈这两者的区别。
- en: 圆周率和圆周率的区别可以归结为两个方面，一个是跨函数地狱，另一个是运行时宽大处理，我会更详细地讨论这些，这就是我所说的交叉函数推断，这里我们有一个函数g，当我们调用这个函数的时候。它现在调用另一个函数
    f，如果我们试着运行这个例子，我们会得到一个类型错误，因为我们要把一个字符串和一个整数，如果我们用我的圆周率，它不会产生错误，原因是我的圆周率不能在多个函数调用中推断出类型。但是如果我们用圆周率类型运行这个，我们会得到我们期望的错误，我们会看到这将产生一个运行时错误，另一个区别是，运行时的宽容度可以归结为这两个工具之间的速度差异，所以pi类型将允许任何在运行时成功的操作。并且不与任何现有的注释相矛盾，这里我们有一个函数f，它被注释为返回一个字符串列表，我们加一个整数进去，这有点像混合类型，但是我们返回了一个字符串列表，如果我们运行这个，我们得到了答案。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**圆周率**和**圆周率**的区别可以归结为两个方面，一个是跨函数地狱，另一个是运行时宽大处理，我会更详细地讨论这些，这就是我所说的交叉函数推断，这里我们有一个函数g，当我们调用这个函数的时候。它现在调用另一个函数f，如果我们试着运行这个例子，我们会得到一个类型错误，因为我们要把一个字符串和一个整数，如果我们用我的**圆周率**，它不会产生错误，原因是我的**圆周率**不能在多个函数调用中推断出类型。但是如果我们用**圆周率**类型运行这个，我们会得到我们期望的错误，我们会看到这将产生一个运行时错误，另一个区别是，运行时的宽容度可以归结为这两个工具之间的速度差异，所以**pi类型**将允许任何在运行时成功的操作，并且不与任何现有的注释相矛盾，这里我们有一个函数f，它被注释为返回一个字符串列表，我们加一个整数进去，这有点像混合类型，但是我们返回了一个字符串列表，如果我们运行这个，我们得到了答案。'
- en: 我们是否期望没有运行时类型错误，我们得到蟒蛇20，如果我们用圆周率类型，上面说没有错误，这不会在运行时产生类型错误，但如果我们用我的圆周率，它说我们试图在列表中添加一个整数，它应该有类型的字符串。但这个失败了，所以你可能会说为什么，虽然什么时候和为什么我应该使用静态打字，首先，我会说什么时候你不应该使用静态打字，答案基本上是永远不会，您应该尽可能自由地使用静态类型，它不会伤害任何东西。我要说的是
    sac打字不能代替单元测试，这里有一点争论，因为有时候当你看单元测试的时候，它们看起来就像你只是在测试你的函数的输入和输出类型，但是实际上单元测试并不能替代类型系统，实际上。你可能只需要单元测试和静态类型，那么你应该在什么时候尽可能多地使用这种打字方式呢？当你是数百万行的规模时，你应该使用静态键入，所以如果你是
    dropbox google facebook。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们是否期望没有运行时类型错误，我们得到蟒蛇20，如果我们用**圆周率**类型，上面说没有错误，这不会在运行时产生类型错误，但如果我们用我的**圆周率**，它说我们试图在列表中添加一个整数，它应该有类型的字符串。但这个失败了，所以你可能会说为什么，虽然什么时候和为什么我应该使用静态打字，首先，我会说什么时候你不应该使用静态打字，答案基本上是永远不会，您应该尽可能自由地使用静态类型，它不会伤害任何东西。我要说的是**sac**打字不能代替单元测试，这里有一点争论，因为有时候当你看单元测试的时候，它们看起来就像你只是在测试你的函数的输入和输出类型，但是实际上单元测试并不能替代类型系统，实际上。你可能只需要单元测试和静态类型，那么你应该在什么时候尽可能多地使用这种打字方式呢？当你是数百万行的规模时，你应该使用静态键入，所以如果你是**dropbox
    google facebook**。
- en: 您可能已经在静态打字上投入了大量资金，因为缺少静态打字，就像我之前说的 对蟒蛇和鳞片来说是一个严重的责任，你可以说在 Dropbox的规模，上面有数百万条蟒蛇。python中的动态类型使代码变得不必要地难以理解，并开始严重影响生产力，所以我做了个图表，随着代码库中代码行的增加，您所需的类型注释也会增加，但是添加类型注释的难度将会降低，所以你可能在这里。这是你应该迁移的地方，这可能是你要迁移的地方，所以记住这一点，当您的代码令人困惑时，您应该使用静态类型，所以老实说，我们都写过令人困惑的代码，您可以将注释看作是经过机器验证的文档。所以如果你觉得有必要记录下你正在写的函数的输入和输出，它应该是静态类型的，当您的代码供公众使用时，您还应该使用静态类型，例如，如果是在
    pi pi上添加类型注释的模块。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经在静态打字上投入了大量资金，因为缺少静态打字，就像我之前说的对蟒蛇和鳞片来说是一个严重的责任，你可以说在Dropbox的规模，上面有数百万条蟒蛇。python中的动态类型使代码变得不必要地难以理解，并开始严重影响生产力，所以我做了个图表，随着代码库中代码行的增加，您所需的类型注释也会增加，但是添加类型注释的难度将会降低，所以你可能在这里。这是你应该迁移的地方，这可能是你要迁移的地方，所以记住这一点，当您的代码令人困惑时，您应该使用静态类型，所以老实说，我们都写过令人困惑的代码，您可以将注释看作是经过机器验证的文档。所以如果你觉得有必要记录下你正在写的函数的输入和输出，它应该是静态类型的，当您的代码供公众使用时，您还应该使用静态类型，例如，如果是在**pi
    pi**上添加类型注释的模块。
- en: 帮助开发人员知道如何使用您的应用程序接口，并帮助我知道如何使用您的应用程序接口，如果您的用户已经在使用静态键入，他们会因此而爱你的，在迁移或进行大的重构之前，您应该使用静态类型。基本上在所有任务中添加静态类型，应用程序的关键部分，然后进行迁移重构，看看是否有任何类型注释开始失败，在那里你可能会发现一些虫子，您也可以使用静态类型来试验静态类型，不痛。从代码库中一些小的灰尘角落开始，或者从整个应用程序中最关键的部分开始，添加一点静态输入，添加静态类型触发器，看看会发生什么，那么，如何在python中使用静态类型只需五个简单的步骤。第一步迁移到一条大于等于3。6的蟒蛇身上，这是可选的，您可以在任何版本的
    python中进行类型注释，但无论如何 你都应该迁移，我们实话实说吧，步骤二在本地安装类型检查器 并将其集成到编辑器中。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 帮助开发人员知道如何使用您的应用程序接口，并帮助我知道如何使用您的应用程序接口，如果您的用户已经在使用静态键入，他们会因此而爱你的，在迁移或进行大的重构之前，您应该使用静态类型。基本上在所有任务中添加静态类型，应用程序的关键部分，然后进行迁移重构，看看是否有任何类型注释开始失败，在那里你可能会发现一些虫子，您也可以使用静态类型来试验静态类型，不痛。从代码库中一些小的灰尘角落开始，或者从整个应用程序中最关键的部分开始，添加一点静态输入，添加静态类型触发器，看看会发生什么，那么，如何在python中使用静态类型只需五个简单的步骤。第一步迁移到一条大于等于`3.6`的蟒蛇身上，这是可选的，您可以在任何版本的
    python中进行类型注释，但无论如何你都应该迁移，我们实话实说吧，步骤二在本地安装类型检查器并将其集成到编辑器中。
- en: 我不在乎是哪一个，你甚至可以安装不止一个，如果你真的想第三步，开始选择性地键入您的代码库，从你的哈里斯档案开始，或最容易键入的文件，2。不要试图一蹴而就，记住这是渐进的
    是有原因的。选择关键区域 然后从那里开始，使用linting运行类型检查器，并在ci中运行linting，反正你也该这么做，五，说服你所有的同事加入你，如果你需要帮助说服他们，感谢收看。你可以在推特上用下划线代码关注我。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我不在乎是哪一个，你甚至可以安装不止一个，如果你真的想第三步，开始选择性地键入您的代码库，从你的**哈里斯**档案开始，或最容易键入的文件。不要试图一蹴而就，记住这是渐进的，是有原因的。选择关键区域然后从那里开始，使用linting运行类型检查器，并在ci中运行linting，反正你也该这么做，五，说服你所有的同事加入你，如果你需要帮助说服他们，感谢收看。你可以在推特上用下划线代码关注我。
- en: '![](img/2244bd48a54c022aa361fb2911a29521_2.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2244bd48a54c022aa361fb2911a29521_2.png)'
- en: 我也想对蟒蛇队的工作人员表示衷心的感谢，感谢他们所做的一切 以及他们为使会议上线所做的一切，他们也绝对值得你的感谢，所以一定要让他们知道，你很感激他们所做的一切努力。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我也想对蟒蛇队的工作人员表示衷心的感谢，感谢他们所做的一切以及他们为使会议上线所做的一切，他们也绝对值得你的感谢，所以一定要让他们知道，你很感激他们所做的一切努力。
