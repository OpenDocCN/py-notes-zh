- en: P83：Tutorial Mariatta - Say it with Bots! - 程序员百科书 - BV1rW4y1v7YG
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P83：Tutorial Mariatta - 通过机器人表达感谢！ - 程序员百科书 - BV1rW4y1v7YG
- en: \>\> Hello， everyone。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '>> 大家好。'
- en: '![](img/3c3588b77123e82a29264958f5086ce4_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_1.png)'
- en: '![](img/3c3588b77123e82a29264958f5086ce4_2.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_2.png)'
- en: '![](img/3c3588b77123e82a29264958f5086ce4_3.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_3.png)'
- en: Thanks for joining me。 Thanks for joining me in this tutorial。 I am presenting
    a tutorial that's been prepared for PiconUS in Pittsburgh。 In this tutorial。 we'll
    be building a GitHub bot together。 I will show you several concepts like what
    our GitHub API is available。 I will walk you through the steps of building a GitHub
    app。 The bot that we will be building。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢你们参加这个教程。感谢你们加入我。我正在为匹兹堡的 PiconUS 准备一个教程。在这个教程中，我们将一起构建一个 GitHub 机器人。我将向你展示几个概念，比如我们可以使用的
    GitHub API。我会带你走过构建 GitHub 应用的步骤。我们要构建的机器人。
- en: it's the bot that we will say thanks to the maintainer， who installed your bot。
    It will also say thanks to new contributors who made pull requests to your repository。
    We will be building this bot using Python 3。7 using the GitHub library and using
    the AI。 HTTP web framework。 I will start with a little bit of introduction about
    myself。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要感谢维护者，感谢他安装了你的机器人。它也会感谢对你的代码库提交拉取请求的新贡献者。我们将使用 Python 3.7 和 GitHub 库以及 AI
    HTTP 网络框架来构建这个机器人。我将首先简单介绍一下我自己。
- en: My name is Marietta and I live in Vancouver， Canada。 I work as back-end engineer
    at Zapier and in my free time， I'm involved in the Python community。 I help buy
    ladies locally and globally。 I help with the PyCasket conference and I contribute
    to open source。 Now， when you contribute to open source too much， in the end，
    they might just give you。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我叫 Marietta，住在加拿大温哥华。我在 Zapier 担任后端工程师，闲暇时间参与 Python 社区。我帮助本地和全球的女性。我参与 PyCasket
    会议，并贡献于开源项目。现在，当你过多地参与开源时，最终他们可能会给你。
- en: commit right to the project。 That's how I became a Python core developer。 That's
    also how I became a core maintainer of the GitHub library that we will be using，
    today。 If at any time you have more questions about this or if you found a tutorial
    is not clear。 any aspects of the tutorial， maybe you found typos in the documentation，
    feel free to leave。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 直接向项目提交代码。这就是我成为 Python 核心开发者的方式。这也是我成为今天将使用的 GitHub 库的核心维护者的原因。如果在任何时候你有更多问题，或者发现某个教程不清楚，或者文档中有拼写错误，请随时反馈。
- en: me feedback。 My email is marietta@python。org。 I'm also on Twitter as marietta
    and you can open a pull request to help fix issues with。 the documentation。 If
    you appreciate my work， if you learned something out of this and you like to show
    your appreciation。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 反馈。我的邮箱是 marietta@python.org。我也在 Twitter 上是 marietta，你可以开个拉取请求来帮助修复文档中的问题。如果你欣赏我的工作，学到了东西，并且想表达感谢。
- en: I can be sponsored through GitHub。 And as well， I really would like。 since I
    did not give this tutorial live， I do not know， how many people are taking this
    tutorial。 So if you do take this tutorial and you learned something out of this，
    you built something， cool。 I'd love to hear about it。 So please do share it with
    me either through Twitter。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以通过 GitHub 获得赞助。而且，我真的很想知道，因为我没有实时进行这个教程，所以我不知道有多少人正在参加这个教程。如果你参加了这个教程，并且学到了东西，构建了某个东西，那太棒了。我很想听到你的反馈。所以请通过
    Twitter 和我分享。
- en: send me an email or you can even open， up an issue， just letting me know of
    your progress。 Alright。 I thought I would start by sharing my screen。 I will share
    you the materials we will use in this tutorial。 In fact， one second， I want to
    share my browser。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 发我邮件，或者你可以开个问题，告诉我你的进展。好的，我想从分享我的屏幕开始。我将分享我们在这个教程中使用的材料。实际上，等一下，我想分享我的浏览器。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_5.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_5.png)'
- en: Alright， so basically we will go through this documentation that I wrote just
    for this， tutorial。 You can go to github-app。tutorial。readthedogs。io and I have
    the link here。 This takes you to the tutorial。 Okay， I will start with introducing
    what our GitHub bots。 why would you want to build one， and then I will give a
    brief introduction of what GitHub hub library is about and why。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，基本上我们将一起阅读我为这个教程编写的文档。你可以访问 github-app.tutorial.readthedogs.io，这里有链接。这会带你到教程页面。好的，我将首先介绍一下我们的
    GitHub 机器人，为什么你想要构建一个，然后我会简要介绍一下 GitHub hub 库的内容和原因。
- en: I recommend using it for building your GitHub bots。 I will share some resources
    related to this tutorial， like basically links to documentations。 and additional
    learnings。 And then we'll start by using GitHub to make API calls to GitHub on
    the command line。 And after that， we will be building a GitHub app together。 I
    will show the steps。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: One step at a time， I will show you how to create the app on GitHub。 I will
    show how to deploy your code to Heroku and all the details。 And then we will be
    building a webhook event handle that is to react to events that occurred。 on GitHub
    so your bot will automatically respond to it。 And that will be done。 Yeah。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: let's get started。 Before starting with this tutorial， because we will be using
    Python 3。7。 make sure you， do have Python 3。7。 I provided a link to very in-depth
    tutorial of how to install Python in a real Python guide。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3c3588b77123e82a29264958f5086ce4_7.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
- en: So if you have trouble with installation， go check this out。 So just make sure
    that you do have Python 3。7。 So if you type in Python 3。7 in your 3。0。 it should
    work like that。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3c3588b77123e82a29264958f5086ce4_9.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
- en: And you will need a GitHub account。 That's where we will be creating the app。
    And make sure you are able to log in to GitHub。 Since we will be deploying this
    to Heroku。 you will need a Heroku account as well。 And because we are just testing
    and playing with this。 you should be able to work with， just the free， free dyno
    on Heroku。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: So you shouldn't need to pay for anything。 And then another useful thing is
    the Heroku 2 belt。 which will be useful for like it has， a CLI to Heroku。 It can
    be useful for debugging later。 Like you can view the logs using the CLI， the Heroku
    logs using the CLI。 So make sure you have those set up。 Now about GitHub bots。
    What are they？
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: These are applications that runs automation on GitHub using GitHub web hooks
    and APIs。 You can do a lot of things with GitHub bots。 It can automatically respond
    to users。 It can automatically apply labels， close these issues， create issues。
    And it can even automatically multiple requests。 The GitHub APIs are often extensive。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: And I truly recommend you look into it and start automating your workflow。 So
    why would you even want to use bots？ If you're maintainer。 you can do all of this
    by yourselves by going to GitHub。 Because you're a person。 you're not on GitHub
    24/7。 So sometimes it's nice if you can automatically reply to your contributors
    so they can receive。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: prompt response instead of waiting until you're back。 Yeah。 I can show you briefly
    of some of the bots that we have in CPython project。 If you rely on automation
    a lot， we even have four different bots to help us。 Here。 let me show you the
    CPython repository。 Basically the four bots help us with many things。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: So one of the bots is a bot called the Knights who says need。 Whenever somebody
    opens a pull request on GitHub， it will check if they have signed the CLA。 So
    it will automatically apply whether the CLA signed or not signed label。 So this
    red label is automatically applied as well as the different states here。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 所以其中一个机器人叫做“说需要的骑士”。每当有人在GitHub上打开一个拉取请求时，它会检查他们是否签署了CLA。因此，它会自动应用签署或未签署的标签。这种红色标签也是自动应用的，以及这里的不同状态。
- en: You see the awaiting code review。 That means the PR is nearly opened。 it's been
    reviewed but it has not been reviewed by a， core developer。 So it's likely that。
    So if it's a new pull request made by a core developer， it will automatically
    apply the。 awaiting code review label， meaning it's waiting for other core developers
    to look into it。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你看到的“等待代码审核”，这意味着拉取请求几乎已经打开。它已经被审核，但还没有被核心开发者审核。因此如果这是一个核心开发者发起的新拉取请求，它将自动应用“等待代码审核”标签，这意味着它在等待其他核心开发者查看。
- en: If the PR is made by someone who is not a core developer， it will be automatically
    applied。 with the awaiting review label。 It means anyone can leave a review， not
    just core developers。 So those are examples and I can't even show some more examples。
    Like we have another bot called Ms。 Islington。 So Ms。 Islington is a bot。 It automatically
    creates pull requests and it automatically merge the pull requests in。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果拉取请求是由非核心开发者发起的，它将自动应用“等待审核”标签。这意味着任何人都可以留下评论，而不仅仅是核心开发者。这些是一些例子，我甚至无法展示更多的例子。比如我们还有另一个叫做“伊斯灵顿女士”的机器人。伊斯灵顿女士是一个机器人。它会自动创建拉取请求，并自动合并这些拉取请求。
- en: the end。 So it's done automatically so we don't have to do so many things as
    the meetings。 So that's that。 Yeah， as you can see there are lots of possibilities。
    I think you should look into your own workflow in your workplace or if you're
    maintaining an。 open source project。 The identify what other things you can automate
    and build your own bots。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 最终。所以这一切都是自动完成的，因此我们不需要像会议那样做这么多事情。就是这样。是的，正如你所看到的，有很多可能性。我认为你应该查看自己在工作场所的工作流程，或者如果你在维护一个开源项目，识别出你可以自动化的其他事情，并构建自己的机器人。
- en: Now get it up。 What is KIDIAP top？ KIDIAP is Python library。 It actually works
    with Python 36 and up。 But in this tutorial we'll use a little feature in Python
    37。 So that's why I ask you to install Python 37。 It is an async library for working
    with KIDIAP APIs。 It supports three other web frameworks like a IOHTP framework
    and a tornado and HTTPX。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在开始吧。什么是KIDIAP？KIDIAP是一个Python库。它实际上支持Python 3.6及以上版本。但在本教程中，我们将使用Python 3.7中的一个小功能。这就是我要求你安装Python
    3.7的原因。它是一个用于处理KIDIAP API的异步库。它支持三个其他Web框架，如IOHTP框架、Tornado和HTTPX。
- en: I think that is one more framework that I do not remember on top of my head。
    Anyway。 it is an open source project。 You can install it with PIP。 And the nice
    thing about KIDIAP is that it abstracts out many details that you need in。 order
    to work with KIDIAP APIs。 For example， when you make API calls to GitHub。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我想这是一个我记不起来的框架。无论如何，它是一个开源项目。你可以通过PIP安装它。KIDIAP的好处在于它抽象出了你在使用KIDIAP API时所需的许多细节。例如，当你对GitHub进行API调用时。
- en: you need to provide things like API tokens。 You need to pass in a certain request
    headers。 And if you were to build that， say， using the request library， I provided
    some example。 like how you would do this with the request library。 You need to
    create the request headers as in the user agent headers。 That is required by GitHub。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要提供一些东西，比如API令牌。你需要传递特定的请求头。如果你要构建这个，假设使用我提供的请求库，我提供了一些示例，比如如何使用请求库来做到这一点。你需要创建请求头，例如用户代理头，这是GitHub所要求的。
- en: You need to pass in the authorization in a header that is token plus your OAuth
    token， there。 You need to specify the accept header。 And then when you make an
    API call。 you need to construct the URLs like API GitHub。com and， the API endpoint。
    And then you make the request。 So there's a lot of details like that with KIDIAP。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要在一个头中传递授权，也就是令牌加上你的OAuth令牌。你需要指定接受头。然后当你进行API调用时，你需要构建URL，如API GitHub.com和API端点。然后你发出请求。因此，在KIDIAP中有很多这样的细节。
- en: Those are abstract away。 So you notice here just by passing in the token， when
    it makes API calls。 KIDIAP constructs， those headers for you。 Additionally。 you
    do not need to provide a full URL to the GitHub's API。 And it really simplifies
    things。 Like you do not need to care about the API endpoint。 However， by default，
    it uses the API KIDIAP。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是抽象的。所以你会注意到，只需传入 token，在进行 API 调用时，KIDIAP 会为你构建这些头信息。此外，你不需要为 GitHub 的 API
    提供完整的 URL。这确实简化了事情。你不需要关心 API 端点。然而，默认情况下，它使用 API KIDIAP。
- en: com URL。 However， there is a way for， if you're using a GitHub enterprise， there
    is a way for you。 to specify a different API endpoint other than the default API
    KIDIAP。com。 Check out the KIDIAP documentation on how to do that。 So as we will
    go through more detailed examples on how to do this later on in the GitHub API。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: com URL。然而，如果你使用的是 GitHub 企业版，有一种方法可以让你指定一个不同于默认 API KIDIAP.com 的 API 端点。查看
    KIDIAP 文档以了解如何做到这一点。因此，稍后我们将通过更详细的示例来介绍如何在 GitHub API 中执行此操作。
- en: using command line section。 KIDIAP also helps with handling webhook events from
    GitHub。 It provides a way for you to define the routes so you can define individual
    routes to handle。 various events that come from GitHub。 We will cover this again
    in detail later on in the responding to webhook events section。 KIDIAP also helps
    verify that webhook delivery headers。 And it also verifies the webhook sequence。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令行部分，KIDIAP 还帮助处理来自 GitHub 的 webhook 事件。它提供了一种方法，让你可以定义路由，以便为来自 GitHub 的各种事件定义个别路由。我们将在稍后的处理
    webhook 事件部分详细介绍这一点。KIDIAP 还帮助验证 webhook 传递头信息，并验证 webhook 顺序。
- en: So you do not need to do this on your own。 It's taken care of。 So all you need
    to do is read the payload from GitHub and do your logic there。 So you do not need
    to check for the secret yourself。 And starting in version 4。1。 which was just
    released。 For this tutorial， it was released yesterday。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你不需要自己做这些。这些事情都已处理好。你需要做的就是从 GitHub 读取负载，并在那儿进行你的逻辑处理。因此，你不需要自己检查密钥。从 4.1
    版本开始，这个版本刚刚发布。对于本教程，它是在昨天发布的。
- en: I made this functionality for within GitHub that can help you work with GitHub
    apps authentication。 things like obtaining the JSON web token。 Yeah， there are
    a few I can show you。 Actually I can show the documentation about it quickly。
    GitHub。 So there is a GitHub GitHub apps module。 That contains utility things
    like how to obtain an installation access token and how。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我为 GitHub 内部开发了这个功能，可以帮助你处理 GitHub 应用程序的身份验证，例如获取 JSON Web Token。是的，我可以给你展示一些。实际上，我可以快速展示一下关于它的文档。GitHub。有一个
    GitHub GitHub 应用模块。里面包含了一些实用功能，比如如何获取安装访问 token 和方法。
- en: to obtain the GWT for working with GitHub apps。 So that's where I need to fix
    this type of。 Yeah。 and since version 4。0， KIDIAP provides support for working
    with GitHub actions。 However。 we will not cover actions in this tutorial。 So in
    case that's something you're interested in。 check out the documentation again。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 获取用于与 GitHub 应用程序配合使用的 GWT。这就是我需要修复这种情况的地方。是的。自版本 4.0 起，KIDIAP 提供了支持与 GitHub
    actions 配合使用的功能。不过，本教程不会涵盖 actions。如果你对此感兴趣，可以再查看一下文档。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_11.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_11.png)'
- en: If you follow through this utility you can use for working with GitHub actions。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遵循这个工具，你可以用它来处理 GitHub actions。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_13.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_13.png)'
- en: So yeah， we'll be using GitHub throughout this tutorial。 All right。 Next。 so
    I have provided some links and for more detailed documentation of the end which。
    we will use to create virtual environment。 There are additional links for GitHub
    APIs that we will be used throughout this tutorial。 So you can read in more details
    there。 We will be using GIDIAP library as I mentioned。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，是的，我们将在整个教程中使用 GitHub。好吧。接下来。我提供了一些链接，用于更详细的文档，我们将用它来创建虚拟环境。这里还有一些关于 GitHub
    API 的额外链接，这些 API 将在整个教程中使用。你可以在那儿阅读更多细节。正如我提到的，我们将使用 GIDIAP 库。
- en: I provided links to the GIDIAP documentation and source code and how to install
    it。 There are additional documentation here。 If you want to learn more about AIH
    TTP。 documentation and source code is linked there。 We also last year Andrew Swadloff
    and I gave a tutorial specifically about AIH TTP。 So if you'd like to learn more
    about it， that's where you can go to。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我提供了关于 GIDIAP 文档和源代码以及如何安装的链接。这里还有其他文档。如果你想了解更多关于 AIH TTP 的内容，文档和源代码在那儿有链接。去年，我和安德鲁·斯瓦德洛夫专门进行了关于
    AIH TTP 的教程。如果你想了解更多内容，可以前往那里。
- en: And also we will use some F strings in this tutorial。 So that's an example of
    how you can build an F string。 And GitHub and AIH TTP are all using libraries
    in Python。 So you can learn more about AIH TTP in this blog post。 And if you want
    to learn more about Python on your hero queue， that's the URL for it。 So yeah。
    there are more details here， but we will not go into details。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本教程中使用一些**F 字符串**。这是构建 F 字符串的一个示例。GitHub 和 AIH TTP 都使用 Python 中的库。你可以在这篇博客中了解更多关于
    AIH TTP 的信息。如果你想在你的英雄队列中学习更多关于 Python 的内容，这就是它的 URL。所以是的，这里有更多细节，但我们不会深入探讨。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_15.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_15.png)'
- en: That's a learning you can do yourself。 Okay， let's start writing some code。
    Let's start by installing GIDIAP and AIH TTP。 So let's go to my terminal。 I'm
    going to start by creating a directory to go to。 Okay。 And directory。 I do have
    a tutorial。 And。 So， sorry。 What are our next steps？ Okay， install it。 So first
    create a virtual environment。 You do。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你可以自己进行的学习。好的，让我们开始写一些代码。我们先安装 GIDIAP 和 AIH TTP。现在去我的终端。我将从创建一个目录开始。好的。然后是目录。我有一个教程。然后。抱歉。我们的下一步是什么？好的，安装它。所以首先创建一个虚拟环境。你可以。
- en: I'm just going to use the end。 I thought 3。7-m， the end。 Up to date。 All right，
    now we're in a VN。 Let's install the AIH2TP and GitHub。 We're in GitHub and AIH2TP。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我将使用结束。我认为是 3.7-m，结束。最新版本。好的，现在我们在一个虚拟环境中。让我们安装 AIH2TP 和 GitHub。我们在 GitHub 和
    AIH2TP 中。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_17.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_17.png)'
- en: Ah， I do it please。 Now， I should see your HTTP GitHub 410。 That's what we get。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 啊，请这样做。现在，我应该看到你的 HTTP GitHub 410。这就是我们得到的。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_19.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_19.png)'
- en: What's next？ Let's create a GitHub personal access token。 Go to that URL。 If
    you go to GitHub。 I logged in。 If you go to settings and develop the settings，
    there's no access token。 So。 create a new token。 Give it a good name。 So， just
    call it something that can remind you what this token was created for。 So， you
    can say it with a tutorial or anything else that can help you。 Remember what it
    is for。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是什么？让我们创建一个 GitHub 个人访问令牌。去那个 URL。如果你去 GitHub。我已经登录。如果你去设置和开发者设置，就没有访问令牌。所以，创建一个新的令牌。给它一个好的名字。所以，给它起个能提醒你这个令牌创建目的的名字。你可以用教程或任何其他可以帮助你记住它用途的东西。
- en: We need the repo scope。 Check the repo and click generate。 So。 it generates
    a really long string like this。 This is the only time you will see it。 So， keep
    it。 save it， copy it， save it。 And keep it somewhere， save。 And， yeah， if you
    forget， if you lost it。 I guess you'll have to delete it。 And generate a new token。
    So， I'm going to save it。 Okay。 So。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要 repo 范围。检查 repo 并点击生成。所以。它生成一个很长的字符串，就像这样。这是你唯一会看到它的时刻。所以，保留它。保存它，复制它，保留它。把它放在某个地方，保存。是的，如果你忘记了，**如果你丢失了它**，我想你必须删除它，并生成一个新的令牌。所以，我将保存它。好的。所以。
- en: don't share this with anyone else， except yourself。 And， by the way。 I will
    be deleting this token after this tutorial。 So， don't try using it after the recording。
    Yeah。 Let's save it in a directory somewhere。 So， one second。 So， just for right
    now。 I'm just going to create a file。 So， I'm going to create a file。 So， I'm
    going to create a file。 So。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 除了你自己，**不要与其他人分享**这个内容。而且，顺便说一下，我将在本教程结束后删除这个令牌。所以，录制结束后**不要尝试使用它**。好的。我们将其保存在某个目录中。等一下。所以，现在我只是要创建一个文件。就是这样。
- en: I'm going to create a file。 So， I'm going to create a file。 And， I'm going to
    save it。 Now。 save it as environment variable。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我将创建一个文件。所以，我将创建一个文件。然后，我将保存它。现在。将其保存为环境变量。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_21.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_21.png)'
- en: '![](img/3c3588b77123e82a29264958f5086ce4_22.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_22.png)'
- en: Okay。 Export gh。eco。long string。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。导出 gh。eco。长字符串。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_24.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_24.png)'
- en: So， it's there。 Well done。 I'm using a Mac。 That's why I use that。 So， I'm going
    to create a file。 And， I'm going to create a file。 And， I'm going to create a
    file。 And， I'm going to create a file。 And， I'm going to create a file。 A simple
    async。io line。 So， import the async。io library。 And， then。 I have something called
    async。dev。 Main。 Going to set my file。 Enter a query。 And， okay。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，它在那里。干得好。我在用 Mac。这就是我使用它的原因。所以，我将创建一个文件。然后，我将创建一个文件。然后，我将创建一个文件。然后，我将创建一个文件。然后，我将创建一个文件。一个简单的
    async。io 行。所以，导入 async。io 库。然后。我有一个叫做 async。dev。Main。要设置我的文件。输入一个查询。好的。
- en: Let's do that。 So， if it's an async。 Python 7 code。 And， let's just make sure
    it's running。 So。 for me， if I click on here， it should just。 I should see a hello
    word。 Let's see what's going on。 And， I'm just going to make sure that it's running。
    And， I'm just going to create a file。 Sorry about this。 Okay。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来做这个。所以，如果这是一个异步的。Python 7代码。并且，让我们确保它正在运行。所以。对我来说，如果我点击这里，它应该就。我要看到一个hello
    word。让我们看看发生了什么。我只是要确保它正在运行。我只是要创建一个文件。抱歉。好的。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_26.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_26.png)'
- en: So， let's do it in command line。 So， if I run that code。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们在命令行中做这件事。所以，如果我运行那段代码。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_28.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_28.png)'
- en: I see a hello word。 So， that's how I know my code is working。 Okay。 We need
    to import the GitHub and aio HTTP libraries。 So， let's add those。 And， for。 let's
    instantiate the GitHub API。 So， that using the code there。 So， instead of hello
    word。 And。 instantiating the GitHub API。 And， I'm going to give it the。 So， in
    the old token there。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我看到一个hello word。所以，这就是我知道我的代码在工作的方式。好的。我们需要导入GitHub和aio HTTP库。所以，让我们添加这些。并且。让我们实例化GitHub
    API。所以，使用那段代码。所以，不要hello word。并且。实例化GitHub API。我将给它。因此，在旧令牌那里。
- en: that's basically the GitHub token that I generated earlier。 And， I save。 And。
    then I'm getting it from the environment variable。 So， that's that。 Now。 what
    we're going to do here is we're going to。 Using the API， we're going to create。
    An issue in my repository。 So， if you look at GitHub's。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上是我之前生成的GitHub令牌。我保存了。然后我从环境变量中获取它。所以，就是这样。现在。我们要在这里做的是。使用API，我们要在我的仓库中创建。一个问题。所以，如果你查看GitHub。
- en: Documentation on how to create an issue using their API。 It says here is basically
    make post request。 To this URL， repos， owner that。 Owner and repo that will be
    the， your， the repository where you want to create it to。 Slash issues。 And， pass
    in this。 This parameter。 So， basically the title is a required parameter。 So。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 关于如何使用他们的API创建问题的文档。这里说的基本上是发出POST请求。到这个URL，repos，owner那。拥有者和repo将是，你的，想要创建的仓库。斜杠issues。并且，传入这个。这个参数。所以，基本上标题是一个必需参数。所以。
- en: basically you can create it。 And， this JSON data title。 So， required body is
    optional。 And。 you can specify the assignments。 So， in GitHub。 It， so when it
    says post to that URL。 In GitHub。 it looks like this。 You use the GitHub that
    the GitHub API that we instantiated for real。 Make a post request to that URL。
    So， that's repos， owner and repo name slash issues。 And。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上你可以创建它。这个JSON数据标题。所以，必需的主体是可选的。而且。你可以指定指派。因此，在GitHub中。当它说向那个URL发布时。在GitHub中。它看起来是这样的。你使用我们为真实实例化的GitHub
    API。向那个URL发出一个POST请求。所以，就是repos，owner和repo名称斜杠issues。并且。
- en: then pass in the data like that。 So， let's copy it。 And， what the code like
    that。 So。 this is how your code would look like。 I'm pretty sure my code looks
    the same。 And， let's run that。 Nothing happens。 So， I'm going to go ahead and
    complete it。 However， if we go to my repository。 We are。 It's relationship。 There
    is an issue that got opened。 We got a problem。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 然后像那样传入数据。所以，让我们复制它。代码是这样的。所以。这就是你的代码看起来的样子。我很确定我的代码看起来一样。让我们运行它。什么都没发生。所以，我要继续完成它。然而，如果我们去我的仓库。我们是。它的关系。已经有一个问题被打开。我们遇到了一个问题。
- en: That's basically what we said here。 The title is， we got a problem。 And。 the
    description is more emoting。 So， it works。 So。 we just use GitHub API to create
    an issue without even going to GitHub。 So。 we just use GitHub API to create an
    issue。 Now， all right。 So， here's an exercise for you。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上就是我们在这里说的。标题是，我们遇到了一个问题。而且。描述更具表现力。所以，它工作。因此。我们只使用GitHub API来创建一个问题，而不需要去GitHub。因此。我们只是使用GitHub
    API来创建一个问题。好的。那么，这里有一个练习给你。
- en: Why don't you leave an additional comment to the same issue that we just created
    here。 So。 we have an issue， but now we want to leave a comment here using the
    API。 The GitHub documentation for that says， make a post request to this URL repo/owner
    repo name/issues/issue number/comments。 So， if you want to pause here and maybe
    take some time yourself to try this on your own。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么不对我们刚刚在这里创建的同一个问题留下一个额外的评论呢。所以。我们有一个问题，但现在我们想用API在这里留下一个评论。GitHub文档对此说，向这个URL
    repo/owner repo名称/issues/issue编号/comments发出POST请求。所以，如果你想在这里暂停，自己花一些时间尝试一下。
- en: you can pause here。 So， in fact， let me pause my recording。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里暂停。所以，实际上，让我暂停我的录制。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_30.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_30.png)'
- en: So， if you want to take a break， try all of this by yourself first。 and then
    I will continue with this solution。 I will show you how I did that。 So， all right。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果你想休息一下，先自己尝试所有这些。然后我会继续这个解决方案。我会向你展示我是怎么做到的。所以，好的。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_32.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_32.png)'
- en: Welcome back。 So， I mentioned about， I hope you had chance to practice and give
    that simple exercise yourself。 But， yeah， let me share how I would do it right
    now。 I'm going to share my screen。 All right。 So。 going to copy this URL， and
    I would adjust the code as follows。 So， owner is myself。 repo is strange relationship
    and issue， issue number and comments。
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎回来。所以，我提到过，我希望你有机会练习并尝试这个简单的练习。不过，好的，让我分享一下我现在会怎么做。我会分享我的屏幕。好的。所以，复制这个URL，然后我会将代码调整如下。所有者是我自己。repo是strange
    relationship，问题，问题编号和评论。
- en: Leave the rest without the trailing slash。 This is the issue that I wanted to
    leave comment on。 Issue number two， 77。 So， let's add that to 77。 And input is
    just a body。 All right。 And save and run it。 And there you go。 Pretty simple。
    I hope you were able to do that yourself。 Let's take a look at another exercise
    here。 That is， let's close the issue that that were created。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 其余部分不要加斜杠。这是我想评论的问题。问题编号是77。所以，让我们把它添加到77。输入的内容就是正文。好的。然后保存并运行它。就是这样。相当简单。希望你能自己做到这一点。我们再来看一个练习。也就是，关闭我们创建的问题。
- en: So， this is a little bit something different。 Okay。 I did an issue。 So。 this
    is the API that this is the documentation that we will take a look at。 You can
    add it in the issue using this endpoint。 It says patch to this URL。 And in here
    you can pass in the state that can be either open or close。 So。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这有点不同。好的。我创建了一个问题。这是我们将要查看的API文档。你可以使用这个端点在问题中添加它。它说要patch到这个URL。在这里你可以传递状态，可以是open或close。所以。
- en: closing an issue is a matter of calling the patch on this URL and passing the
    state as close。 So。 let's do that。 So， that's the URL and instead of GH post，
    we'll call GH Touch without any work。 Actually， yes， we need to pass in the data。
    The state is closed。 And that's the only thing we need。 So， if you save that and
    run it。 And now the issue has been closed。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭一个问题只需在这个URL上调用patch，并将状态传递为close。所以。让我们这样做。那就是URL，代替GH post，我们将调用GH Touch，不带任何工作。实际上，是的，我们需要传递数据。状态是closed。这是我们唯一需要的。所以，如果你保存并运行它。现在问题已经关闭。
- en: Got another exercise that I think would be interesting for you to try。 Here。
    adding a reaction for an issue。 So， basically。 All right。 To add the reaction。
    there is a special URL you make a post to the slash reactions URL。 And you pass
    in the content and the reaction type。 So， you click that again。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我有另一个我认为对你尝试会很有趣的练习。在这里。为一个问题添加反应。所以，基本上。好的。要添加反应，有一个特殊的URL，你需要post到/slash reactions
    URL。并传递content和反应类型。所以，你再点击一次。
- en: You will see the different types of reaction， like plus one， minus one， love
    and everything。 You need to pass in a certain accept header to the API call。 So。
    how does this look like with Gidget Hub library？ So， basically。 Okay。 So， in Gidget
    Hub。 you can see easily as in the accept header by as the argument like this，
    except equal to 77。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到不同类型的反应，比如加一、减一、爱心等等。你需要传递一个特定的accept头到API调用。那么，使用Gidget Hub库时这看起来如何呢？基本上。好的。在Gidget
    Hub中，你可以很容易地将accept头作为参数传递，比如这样，accept等于77。
- en: basically whatever Gidget Hub tells you。 So， copy， paste that accept， put it
    there。 And again。 the URL is reactions。 And the data that we need to pass is content。
    And let's say。 Let's try love。 So， what happens if we run that？ And then we can
    make the mistake in， oh， it's not a patch。 but a post。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，无论Gidget Hub告诉你什么。复制，粘贴那个accept，放在那里。再次，URL是reactions。我们需要传递的数据是content。假设。让我们尝试love。那么，如果我们运行这个会发生什么呢？然后我们可能犯的错误是，哦，不是patch，而是post。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_34.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_34.png)'
- en: All right。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_36.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_36.png)'
- en: Oh， I guess because the issue has been closed。 Let's try on this open issue
    to 76。
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，我想是因为这个问题已经关闭了。让我们尝试在这个开放的问题上进行操作，编号为76。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_38.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_38.png)'
- en: All right。 Yes。 So， we cannot leave reaction on a closed issue。
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。是的。所以，我们不能在关闭的问题上留下反应。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_40.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_40.png)'
- en: So， that probably makes sense。 Yeah。 Now you can see the love emoji on the issue。
    All right。 So。 we've completed that section。 Basically， now you all have some
    experience making API calls to Gidget Hub。 And I hope you understand how to read
    the documentation and find information there。 So。 let's go to the next section
    about now。 We're going to start building a Gidget Hub app。
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这大概是有道理的。是的。现在你可以看到问题上的爱心表情符号。好吧。我们已经完成了这一部分。基本上，现在你们都获得了一些向 Gidget Hub 发起
    API 调用的经验。我希望你能理解如何阅读文档并在其中找到信息。所以。让我们进入下一部分。现在，我们将开始构建一个 Gidget Hub 应用。
- en: In the previous example， I've shown you how to interact with Gidget Hub by performing
    actions。 You make API calls， you make requests to Gidget Hub。 And again。 we're
    doing it locally on your own machine。 So， it's not actually a bot。 It doesn't
    respond to anything， right？ So， we're manually running the code。 So。
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的示例中，我向你展示了如何通过执行操作与 Gidget Hub 进行交互。你发起 API 调用，向 Gidget Hub 发送请求。再次强调。我们在你自己的机器上本地执行这些操作。因此，它实际上并不是一个机器人。它没有响应任何内容，对吧？所以，我们是手动运行代码。
- en: now let's learn about webhooks and what how will this help us build the bot。
    So。 a little bit of more information about webhook events。 When an event is triggered
    in Gidget Hub。 Gidget Hub can notify you about the event by sending， you post
    requests along with a payload。 Some example events that Gidget Hub can send you
    are issues related events。 So。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们了解 webhooks，以及这将如何帮助我们构建机器人。所以。有关 webhook 事件的更多信息。当在 Gidget Hub 中触发事件时，Gidget
    Hub 可以通过发送 POST 请求和有效负载来通知你该事件。一些 Gidget Hub 可以发送给你的示例事件是与问题相关的事件。所以。
- en: whenever there is an issue that got assigned or unsigned， an issue was labeled
    and labeled。 issue opened， issue edited， closed， reopened and so on。 There are
    pull requests related events。 So。 somebody opens a pull request or edit it， close
    it or review the request reviews on those pull requests。 And that is the status
    checks events。
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 每当有问题被分配或取消分配，问题被标记、打开、编辑、关闭、重新打开等等。还有与拉取请求相关的事件。所以。有人打开一个拉取请求或编辑、关闭或审核这些拉取请求的请求评论。这就是状态检查事件。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_42.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_42.png)'
- en: So， whenever there is， this is basically one of those CI status updates。 You
    can see the complete list of the events that Gidget Hub provides。
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，无论何时发生，这基本上就是这些 CI 状态更新之一。你可以看到 Gidget Hub 提供的事件的完整列表。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_44.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_44.png)'
- en: So， I mentioned there are issues and issue comments events and pull requests
    events。 And you can click on them to get even more detailed of examples of like
    what are the payloads that will get sent for those particular events。 Okay。 Now，
    since Gidget Hub needs to send you a post request for these webhooks。 so it can't
    send these events， it cannot make post request to your personal laptop。 So。
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我提到有问题和问题评论事件，以及拉取请求事件。你可以点击它们以获得更详细的示例，比如这些特定事件的有效负载是什么。好的。现在，由于 Gidget
    Hub 需要向你发送一个用于这些 webhook 的 POST 请求，所以它不能发送这些事件，也无法向你的个人电脑发出 POST 请求。所以。
- en: we need to create a web service that is open on the internet。 And this is the。
    this web service is basically what will become our Gidget Hub app。 So。 there are
    lots of options for your hosting， unlike for your hosting options。 You can definitely
    deploy this on your platform of choice。 But for this tutorial， I will use Heroku。
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建一个在互联网上开放的 web 服务。这个 web 服务基本上就是我们将要构建的 Gidget Hub 应用。因此，关于你的托管有很多选项，你可以选择任意平台进行部署。但对于本教程，我将使用
    Heroku。
- en: Heroku is basically what we use for CPython's GitHub bots。 Now。 let's talk about
    the authentication with the Gidget Hub app。 So， in the previous section。 I've
    shown you how to get a personal access token for running out of scripts。 And that
    token is basically how GitHub knows who you are， who's making this call。 And that's。
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Heroku 基本上是我们用于 CPython 的 GitHub 机器人。现在。让我们谈谈与 Gidget Hub 应用的认证。在上一部分，我向你展示了如何获取用于运行脚本的个人访问令牌。这个令牌基本上是
    GitHub 知道你是谁、谁在发起这个调用的方式。
- en: that's how it knows that this API call is to be associated with your account。
    Now。 a GitHub app has a slightly different mechanism for authentication。 So。 your
    GitHub app can actually be installed in various repositories。 It can be installed
    by multiple people if you allow it。 So， now the question is how to identify。
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是它知道这个 API 调用要与你的账户关联的方式。现在，GitHub 应用的认证机制稍有不同。所以，你的 GitHub 应用实际上可以安装在多个存储库中。如果你允许，它可以被多个人安装。那么，问题是如何识别。
- en: how to identify users of the GitHub app。 How can we let GitHub know who's making
    these API calls？
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如何识别 GitHub 应用的用户。我们如何让 GitHub 知道谁在进行这些 API 调用？
- en: And like if we were using the allowed tokens before， does that mean that， you
    know。 we need to ask for access tokens？ From， from people who have installed your
    app。 So， that seems。 that seems not fairly secure and not very practical。 So，
    so it has a different mechanism。 What happens is that when you install a GitHub
    app。
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们之前使用的是允许的令牌，那是不是意味着我们需要向安装了你的应用的人请求访问令牌？所以，这似乎不太安全，也不太实际。因此，它有一个不同的机制。安装
    GitHub 应用时会发生什么。
- en: that installation got assigned an installation ID。 So。 when you receive webhook
    events for your GitHub app。 it will include that installation ID in the part of
    the payload。 Now。 you can use the installation ID from the webhook to create an
    installation access token。
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 该安装被分配了一个安装 ID。所以，当你接收到 GitHub 应用的 webhook 事件时，它会在有效负载中包含该安装 ID。现在，你可以使用来自 webhook
    的安装 ID 创建安装访问令牌。
- en: And once you get the access token， you can use the token to make API calls。
    similar to how you use a personal access token。 So。 it's a little bit complicated
    and you can do more reading on that documentation so it's to better understand
    the process。 So， the question now is that how do we get this installation access
    token？
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你获得访问令牌，就可以使用该令牌进行 API 调用，类似于使用个人访问令牌的方式。所以，这有点复杂，你可以在文档中进一步了解这个过程。现在的问题是，我们如何获得这个安装访问令牌？
- en: That documentation actually explains more details。 The basic process is as follows。
    You will be creating JSON web token using the GitHub app ID and the private key。
    You will then pass in that JSON web token and installation ID to GitHub and GitHub
    will give you back the installation access token。 So， I briefly mentioned this
    in the beginning of the tutorial before we started that。
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 该文档实际上解释了更多细节。基本流程如下。你将使用 GitHub 应用 ID 和私钥创建 JSON web 令牌。然后将该 JSON web 令牌和安装
    ID 传递给 GitHub，GitHub 将返回安装访问令牌。所以，在我们开始之前，我在教程开始时简要提到了这一点。
- en: GitHub provides the utilities to do this。 So， if I open the documentation again。
    this is how you would discover this basically what you will use to get the installation
    access token。 All right， let's get started。 In these sections， we'll do some setup。
    We will need to create a web service in Horroco。 We will need to create a report
    of our code base and we will need to create a GitHub app。
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 提供了进行此操作的工具。所以，如果我再次打开文档。这就是你将用来获取安装访问令牌的方法。好吧，让我们开始。在这些部分，我们将进行一些设置。我们需要在
    Heroku 中创建一个网络服务。我们需要创建我们的代码库的报告，并且我们需要创建一个 GitHub 应用。
- en: So， there is a lot of setup that's taking place and we will be switching from
    one browser to another。 From one side to another。 So， all right， let's start by
    creating the web service。 Let's follow these steps one by one。 To help speed up
    this process。 I created like a boilerplate web service code base that you can
    use。
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这里有很多设置正在进行，我们将从一个浏览器切换到另一个浏览器。从一侧切换到另一侧。好吧，让我们开始创建网络服务。我们一步步跟随这些步骤。为了加快这个过程，我创建了一个可以使用的基础网络服务代码库。
- en: And you can basically just fork this。 Let's go to click whoops did I。 Second。
    All right。 that's the URL。 I'll fix the documentation。 So， it can be linked properly。
    So， basically。 you can fork this if you want and then clone it。 Since I have a
    copy myself。 I'm just going to clone it locally。
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你基本上可以直接分叉这个。让我们去点击，哎呀，我。第二。好吧。那是网址。我会修正文档，以便可以正确链接。因此，基本上。如果你想，可以分叉这个，然后克隆它。由于我自己有一个副本，我只是将其克隆到本地。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_46.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_46.png)'
- en: Let's see。 So， I'm going to clone repo。
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看。我将克隆仓库。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_48.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_48.png)'
- en: All right。 I have fork and clone repo。 Yeah， I guess let's go over the file
    structures there。 You will notice several files。 The proc file。 Let me actually
    open that so you can see the code base。 Yes， this window。 It comes with several
    files。 The proc file is basically a specific file that is needed for Heroku。 This
    is basically telling Heroku how to start a web service。 With me requirements。
    So。
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。我已经分叉并克隆了仓库。是的，我想我们来看看那里的文件结构。你会注意到有几个文件。Proc 文件。让我打开它，以便你能看到代码库。是的，这个窗口。它有几个文件。Proc
    文件基本上是 Heroku 所需的特定文件。它基本上告诉 Heroku 如何启动网络服务。与我要求的。
- en: this is also another file that's needed by Heroku。 Heroku needs to know that
    this is a Python。 Python， Python code base。 It needs to know what dependencies
    are needed by your code。 And it will actually look up the contents in the requirements。txt
    file and install it for your web service。 So， I included the requirements here。
    So。
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是 Heroku 需要的另一个文件。Heroku 需要知道这是一个 Python 代码库。它需要知道你的代码所需的依赖项。它会查找 requirements.txt
    文件中的内容并为你的网络服务安装它。所以，我在这里包含了这些要求。所以。
- en: we need AI or HTTP。 We need GitHub， PyJWT， cryptography and cache tools。 I've
    gone over those。 Okay。 let's talk about runtime。txt。 This is also a Heroku specific
    file。 So， again。 if you're using something else， you might not need the exact
    same file。 So。 this file tells Heroku that you want to run Python 376。 And not
    some other Python versions。 So。
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要 AI 或 HTTP。我们需要 GitHub、PyJWT、cryptography 和缓存工具。我已经介绍过了。好的，让我们谈谈 runtime.txt。这也是一个特定于
    Heroku 的文件。所以，如果你使用其他东西，可能不需要完全相同的文件。这个文件告诉 Heroku，你想要运行 Python 3.76，而不是其他版本的
    Python。所以。
- en: Heroku will install Python 376 for you for your web service。 All right， main。py。
    That's the other code that we need to go through。 We will be working on this file
    mostly。 So。 I'll start from the bottom。 This is the main function。 Basically。
    it tells us -- this is how we tell Python how to start the web service。
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Heroku 将为你的网络服务安装 Python 3.76。好的，main.py。这是我们需要处理的另一个代码文件。我们将主要在这个文件上工作。所以。我从底部开始。这是主函数。基本上。它告诉我们——这是我们告诉
    Python 如何启动网络服务的方式。
- en: This is an AI or HTTP web application。 I'm going to have to set the port。 So。
    I don't think we need to make any changes here。 Okay， I'll tell you about the
    webhook。 So。 this is basically the event handler。 What we have here is that we
    will create the /webhook URL in our web service。 And when we receive requests
    into -- and we're telling this。
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个 AI 或 HTTP 网络应用程序。我需要设置端口。所以。我认为我们不需要在这里做任何更改。好的，我来告诉你关于 webhook 的事情。所以。这基本上是事件处理器。我们这里要做的是在我们的网络服务中创建
    /webhook URL。当我们接收到请求时——我们正在告诉这个。
- en: we're going to accept post requests to this URL。 And we will receive that。 This
    is basically the logic for handling the webhook。 This is where we will read this
    GitHub app secret。 When we instantiate GitHub API。 the secret -- it will use this
    secret and validate against the incoming webhook from GitHub。 So。
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将接受对这个 URL 的 POST 请求。我们将会接收到这个请求。这基本上是处理 webhook 的逻辑。这是我们将读取 GitHub 应用程序密钥的地方。当我们实例化
    GitHub API 时，这个密钥会用来验证来自 GitHub 的传入 webhook。所以。
- en: yeah， I think this -- I have to say there， I guess。 We can try running it locally
    first。
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，我想我必须在这里说一下。我想我们可以先尝试本地运行它。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_50.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_50.png)'
- en: Now， I'm in a new repo。 I'm going to the activity， activity。 My previous session。
    start a new virtual end。 Okay。 So， we can install the requirements。 What am I
    missing？ Oh。 I need to go to the collector folder one second。 Okay。 Let's run
    "PAPINSTALL" again。
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我在一个新的仓库中。我去查看活动，我之前的会话。启动一个新的虚拟环境。好的。那么，我们可以安装这些依赖项。我缺少什么？哦。我需要去 collector
    文件夹，等一下。好的，让我们再次运行 "PAPINSTALL"。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_52.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_52.png)'
- en: Now， we're going to run it locally， which is basically the same command as what's
    in the proc file。
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将本地运行它，这基本上与 proc 文件中的命令相同。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_54.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_54.png)'
- en: It's running。
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 它正在运行。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_56.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_56.png)'
- en: There it is。 Hello， that's that。 Cool。 So， it's working。 So， I recommend that
    you try it。 Make sure it's running。 Okay。 I'm already logged in。 Create new app。
    This is my mariara's。 And by the way， you can rename this later even after you
    created it。 So， yeah， keep that in mind。 All right。 And I'm going to connect to
    my GitHub account， basically。 I'm going to choose。 So。
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 就在这里。你好，就是这样。很酷。所以，它在工作。因此，我建议你尝试一下。确保它在运行。好的。我已经登录。创建新应用。这是我的 mariara 的。顺便说一下，即使在创建后，你也可以稍后重命名它。所以，记住这一点。好的，我将基本上连接到我的
    GitHub 账户。我会选择。
- en: basically， I want to connect the boilerplate repo that I have to。 To Heroku。
    so it can automatically deploy any changes that I committed to this repo gets
    automatically deployed。 So， it just keeps it， makes it simple。 Connect。 And I'm
    going to say wait for a C8 to pass。 And enable automatically deploy。 Okay。 Going
    to see if it's been deployed。 Actually。
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，我想把我拥有的模板仓库连接到 Heroku。这样，它可以自动部署我提交到这个仓库的任何更改。所以，它保持简单。连接。我要说等待 C8 通过。并启用自动部署。好的。要查看它是否已经部署。
- en: I'm going to click deploy right now。 All right。 So， it's been deployed。 So，
    I got a URL here。 And if I go there。 And now it says hello， which is the same
    thing as I said。 with the same result locally。 So， that's great。 Okay。 And yeah，
    if you have the to belt。 Heroku to belt， you can do， you can check the locks。
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我现在要点击部署。好的，已经部署了。所以，我得到了一个 URL。如果我去那儿。现在它显示 hello，这和我在本地说的一样。所以，这很好。好的。如果你有
    Heroku 的日志，你可以查看日志。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_58.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_58.png)'
- en: You can review your locks in the terminal。 So， the app name。 So， Heroku locks，
    locks， dash A。
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在终端中查看你的日志。所以，应用名称。Heroku 日志，日志，-A。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_60.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_60.png)'
- en: And my app name is。
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 而我的应用名称是。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_62.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_62.png)'
- en: Kind of long。 So， there you go。
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 有点长。所以，就这样吧。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_64.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_64.png)'
- en: You can see the running lock of your web service。 Okay。 I'm going to quit there。
    Okay。 What's next？
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到你 Web 服务的运行日志。好的。我就到这里。接下来是什么？
- en: Okay。 We're going to create a GitHub app。 So， go there。 Settings app。 And again，
    you can go here。 If you lost the link somehow， go to your profile settings。 Developer
    settings。 And new click on the new GitHub app。 Okay。 Sorry。 I got this one second。
    Okay。 All right。 Let's create a bot。 We'll go with。 Say it with bot。 So， let's
    see。 What do we need？
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。我们要创建一个 GitHub 应用。所以，去那儿。设置应用。你可以在这里找到。如果你不小心丢失了链接，去你的个人资料设置。开发者设置。然后点击新的
    GitHub 应用。好的。抱歉，等我一下。好的。我们来创建一个机器人。我们选择。说出它是一个机器人。那么，我们需要什么？
- en: The important things are the web hook URL。 That is basically。 Your， your Heroku
    apps URL。 And slash web hook。 And the secret。 And this is， it says it optional。
    but GitHub actually requires this field。 So， type in some secret that will be
    a secret between the GitHub app and your web service。 So， this is to protect you
    from so that you will not run or you will not handle any events or any other request
    from any other sources。
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是 Webhook URL。这基本上是你的 Heroku 应用的 URL，再加上 /webhook。还有密钥。这个说是可选的。但 GitHub 实际上要求填写这个字段。所以，输入一个秘密，这将是
    GitHub 应用和你的 Web 服务之间的秘密。这样可以保护你，不会处理来自其他来源的任何事件或请求。
- en: but only if it comes from， from GitHub and only if the secret matches。 So， if
    you have a， you know。 like a password generator app， you can use it to generate
    some random string， but for simplicity。 I'm just going to do it。 I'm just going
    to type hello here just to make it simple hello。 And what do we need？ I think
    we just need issues and pull request permissions to read and write permissions。
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 但只有在来自 GitHub 并且密钥匹配的情况下。如果你有一个，像密码生成器的应用，你可以用它生成一些随机字符串，但为了简单起见。我就简单地在这里输入
    hello。我们需要什么？我想我们只需要问题和拉取请求的读写权限。
- en: Okay。 Issues make that free and write pull request makes that click and write。
    What else do we need？
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。问题权限设置为可读写，拉取请求设置为可读写。还有其他需要的吗？
- en: Subscribe to events， take the issues and pull requests。 So let's do that。 Subscribe
    to events。 take the issues and pull requests。 And for now， I'm going to allow
    this to be installed by myself。 But if you've developed your GitHub app and you're
    happy with it， you want people to start using it。 So， at that time， you can change
    it to any account。 But for now。
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 订阅事件，获取问题和拉取请求。所以我们就这么做。订阅事件。获取问题和拉取请求。现在，我将允许自己安装这个应用。但如果你已经开发好你的 GitHub 应用并且满意，你会希望别人开始使用它。所以，到时候你可以将其更改为任何账户。但现在。
- en: just for myself and you'll make your app for yourself。 Okay， that's， let's put。
    All right。 Okay。 now we got an app。 And notice we got a client ID client secret。
    These are all important things。 And it helps us to generate a private key。 Yes，
    to do this。 And then we will use this private key later for， you know， a little
    bit。 So。
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 只是为了我自己，你会为自己制作应用程序。好的，让我们来设置。好的。现在我们有一个应用程序。请注意，我们有一个客户端ID和客户端密钥。这些都是重要的东西。它帮助我们生成私钥。是的，做这个。然后我们稍后将使用这个私钥。
- en: click that and click generally。 And okay， I'm going to show how the private
    key file looks like。 So。 it's gonna copy it here so you can all see it。 What's
    going on？ No， I do not want to。 So this is how the private key file looks like。
    What do we do next？ All right。 now we need to set up the environment variables。
    Remember that in our previous tutorial。
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 点击那并点击一般。我将展示私钥文件的样子。所以，我将在这里复制它，以便你们都能看到。这是怎么回事？不，我不想这样。所以这就是私钥文件的样子。接下来我们该做什么？好的。现在我们需要设置环境变量。记得在我们之前的教程中。
- en: when we work with the GitHub using the GitHub APIs in the command line， I asked
    you to store those。 So， we're going to go to the， the odd secret of token as an
    environment variable。 So that is how it will work in with Heroku as well。 So you
    definitely should not commit your secret into your code base。 So。
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在命令行中使用GitHub API时，我让你存储那些。因此，我们将把令牌的奇异秘密作为环境变量。这就是它如何与Heroku一起工作的方式。所以你绝对不应该将你的秘密提交到代码库中。
- en: we're going to be stored as an environment variable within Heroku。 So I'll show
    you how to do that。 So first， let's go through the this the environment variables
    that we need to set the first is GitHub app ID。 And you go to Heroku settings
    file， settings tab。 There is a place here where you can reveal config bars。 Click
    that。 And this is how you will define it。 So we want the GitHub app ID and just
    copy whatever you see in your apps ID。
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将作为环境变量存储在Heroku中。我将向你展示如何做到这一点。所以首先，让我们浏览一下我们需要设置的环境变量，第一个是GitHub应用ID。然后你转到Heroku设置文件的设置选项卡。这里有一个地方，你可以显示配置条。点击它。这就是你如何定义它的方式。因此，我们希望获取GitHub应用ID，并复制你在应用程序ID中看到的内容。
- en: And click add and we'll go through everything else as well。 So the GitHub secret
    is the webhook secret。 So that is basically the hello just now。 Another private
    key。 All right。 So the private key。 And that is the content。 Basically this big
    text here just select all and copy。 And paste it here like that。 Okay。 Okay。
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 点击添加，我们将逐步完成其他内容。因此，GitHub密钥是webhook密钥。这基本上就是刚才的hello。另一个私钥。好的。私钥。这就是内容。基本上，这里这段大文本只需全选并复制，然后像这样粘贴到这里。好的。好的。
- en: we got a website is running。 We got the config files。 So now we can really start
    working on the bots。 So that's done。 Okay， let's go to the next section。 So the
    first webhook events that we want to implement is to thank the maintainer for
    installing it。 So when whenever somebody first install your GitHub app， it has
    the same event。
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的网站正在运行。我们有配置文件。所以现在我们可以真正开始处理机器人了。好的，完成了。让我们进入下一部分。因此，我们想要实现的第一个webhook事件是感谢维护者安装它。因此，每当有人首次安装你的GitHub应用时，它都有相同的事件。
- en: So when you receive it， you can do nothing。 You can ignore the event or you
    can be nice and just say thanks。 Thanks。 Thanks to the maintainers。 Thanks for
    installing me。 Looking forward to work with your something like that。 So。 Okay。
    Now we've learned in the previous section， I've shown you how to create and close
    an issue。
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 所以当你收到它时，你什么也做不了。你可以忽略事件，或者你可以友好地说声谢谢。谢谢。感谢维护者。谢谢你安装我。期待与你合作之类的。好的。现在我们在上一节中学习到，我向你展示了如何创建和关闭问题。
- en: So saying thanks to the maintainer is really just a matter of opening an issue
    which we know how to do。 So the trick here is that we need to find out what is
    where is the report that we want to leave this to open the issue。 Right。 And previously，
    we had it hard coded in the script。 It was pointing hard coded to my my own personal
    repository。
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，感谢维护者实际上只是打开一个我们知道如何做的问题而已。因此，这里的诀窍是我们需要找出我们想要留下这个报告的地方，以打开问题。对吧？之前我们将其硬编码在脚本中。它指向我的个人库。
- en: So now we need to figure out where was this app installed。 And how can we。 how
    can we grab that information。 So， if you look at your hubs event documentation。
    there is an installation event。 There， and it's triggered whenever somebody installs
    or uninstalls。 When somebody installs， you will see the created text value。 And
    if somebody uninstall。
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在我们需要弄清楚这个应用是在哪里安装的。我们该如何抓取该信息。所以，如果你查看你的中心事件文档。会有一个安装事件。并且每当有人安装或卸载时，它会被触发。当有人安装时，你会看到创建的文本值。如果有人卸载。
- en: you will see the deleted value there。 So， here's， here's how this is basically
    what the data that GitHub will send you。 It starts with the， it has the key say
    action that tells you that the installation was deleted。 There is installation
    ID。 And if you look closer， there is even the center。 Let's see。 I think we just
    need the installation ID。 And， there is an app ID that we will need。 Okay。
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到那里被删除的值。所以，这里，基本上就是 GitHub 会发送给你的数据。它以一个键开始，比如 action，告诉你安装已被删除。有安装 ID。如果你仔细看看，那里甚至还有中心。我们来看看。我想我们只需要安装
    ID。而且，还有一个我们需要的应用 ID。好的。
- en: And this is， this is the part that we will need later on。 The repository is
    the full name is basically what will tell us like where that repository is。 And
    that's where you will open the issue。 All right。 Now let's go back to our code。
    In main。py。 I've created this router here。 Basically， registered a router based。
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分我们稍后会需要。仓库的全名基本上告诉我们该仓库在哪里。这就是你将打开问题的地方。好的。现在让我们回到我们的代码。在 main.py 中。我在这里创建了这个路由器。基本上，注册了一个基于路由器。
- en: So here is where I will tell the web service。 This is the logic that we will
    have。 we want to execute when we receive the installation created event。 So whenever
    somebody installed your GitHub app， it will be redirected here。 And this is where
    we will implement our logic。 So just look at the parameters here。
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这里是我将告诉 web 服务的。这是我们将要执行的逻辑。当我们接收到安装创建事件时。每当有人安装你的 GitHub 应用，它将被重定向到这里。这就是我们将实现逻辑的地方。所以看看这里的参数。
- en: The event is the payload from GitHub。 That is basically that big JSON data。
    GH is an instance of the GitHub API that we have initial， we have initial， initialize。
    And so that's GH with an instance of GitHub API as shown here。 Now， now we have
    to fill in the rest。 So， again， let's go back to the previous examples where we
    know how to。
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 事件是来自 GitHub 的负载。基本上就是那大 JSON 数据。GH 是我们初始化的 GitHub API 的一个实例。正如这里所示的那样。现在，我们必须填写其余部分。所以，再次让我们回到之前的例子，我们知道如何。
- en: we know how to open an issue on GitHub。 And I will copy paste our previous code。
    So it's something like this。 And we will start to accept and basically make a
    post request to the URL and without。 and basically it's just issues without number，
    we're opening a number of opening a new issue。 And。 and we need the title and
    body in the data。 So， title。 Thanks for installing me。 Body。
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道如何在 GitHub 上打开一个问题。我会复制粘贴我们之前的代码。所以这大致是这样的。我们将开始接受，并基本上向 URL 发出一个 POST 请求，而且基本上它只是没有编号的问题，我们正在打开一个新的问题。而且。我们需要在数据中提供标题和正文。所以，标题。感谢你安装我。正文。
- en: You're the best。 But we don't actually want it on， on this hard coded repo name。
    So we will actually access， we will use the data from， from the payload。 So。 if
    the repo for name is in the repositories and for name。 So the way we will access
    that is all of the portfolio name。 Data。 We posted to us。 The first one。
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 你是最棒的。但我们实际上不希望它在这个硬编码的库名上。所以我们实际上将使用来自负载的数据。所以。如果库的名称在仓库中。那么我们访问它的方式是所有的投资组合名称。数据。我们发送给我们的第一个。
- en: And then make that into an after。 All right。 Now。 All right。 Okay。 Now let's
    go back to the notion of GitHub apps。 So we don't。 In this case。 we don't want
    to use the personal access token。 So what we'll do is we will use the access token。
    the installation access program。 And the code to do that is， is you can copy it
    from here。
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 然后把这个变成一个后续。好的。现在。好的。好的。现在让我们回到 GitHub 应用的概念。所以我们不。 在这种情况下。我们不想使用个人访问令牌。所以我们要做的是使用访问令牌。安装访问程序。执行的代码是，你可以从这里复制。
- en: basically just call the， the get installation access and pass in the GitHub
    API and the installation ID。 And installation ID was something we obtained from
    the web。 So， um， token。 Yes。 That。 Oops。 I did not copy the right one。 Hold on。
    And installation access token。 Yes。 That。 Now that we have it， when we call the
    post， we will pass in that token。 Yes。
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上只需调用获取安装访问权限并传入GitHub API和安装ID。安装ID是我们从网络上获取的。所以，嗯，令牌。是的。那个。哎呀。我没有复制正确的。等一下。和安装访问令牌。是的。那个。现在我们有了，当我们调用post时，我们将传入那个令牌。是的。
- en: Installation access to just like that， just by passing in the token parameters。
    So I've done that。 Okay。 Now something cool。 We want to say， we want to say， we
    want to say thanks to the person。 We want to figure out who installed it。 And。
    In fact， GitHub also tells you。 gives you that information。 If you look at the
    payload examples here。
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 安装访问权限就是这样，只需传入令牌参数。所以我已经做到了。好的。现在一些很酷的事情。我们想说，我们想说，谢谢那个人。我们想弄清楚是谁安装了它。而且，事实上，GitHub也会告诉你，给你这个信息。如果你查看这里的有效载荷示例。
- en: There is the sender and the login name。 So it means that it was。 it was user
    octocat who installed your GitHub app。 So if you want to adjust your code to say。
    you know， in the body and the username。 So basically。 Yes， even data。 Sender。
    I forgot。 So just pass that into the body or in the title or something。 However
    you like。 All right。 So。 Yeah。
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 发送者和登录名都在。这意味着是用户**octocat**安装了你的GitHub应用程序。所以如果你想调整你的代码来显示，你知道，在正文和用户名中。基本上。是的，甚至数据。发送者。我忘了。所以只需将其传递到正文中或标题中，随你喜欢的方式。好的。那么。是的。
- en: So actually， okay。 Yeah。 So in fact， because it's possible for you to receive
    more than one installations。 When they choose to install your GitHub app， they
    can choose multiple repos at the same time。 So yes， this will be a list which
    you can look through。 So actually。 Yeah。 it will be better if we actually。 Look
    through that。 Okay。 Let's adjust the code。 So for repo in。
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，好的。是的。因为你可能会收到多个安装。当他们选择安装你的GitHub应用时，他们可以同时选择多个仓库。所以是的，这将是一个你可以浏览的列表。所以实际上。是的。如果我们实际查看一下，那会更好。好的。让我们调整代码。所以对于每个repo。
- en: And。 So。 The whole name is the repo for named。 All right。 That should do it。
    And because。 Right。 because our bot。 Say it has gone through and created those
    issues。 It can be。 Consider less spamming。 So it would be great if the bot just
    close the issue right away。 So help。 you know， help the maintainer to clean up。
    So how do we do that？ So when we。 Yeah。
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 所以。好的。完整的名称就是命名的repo。好的。这样就可以了。因为。对。因为我们的机器人。假设它已经处理并创建了那些问题。它可以被视为较少的垃圾邮件。所以如果机器人立即关闭问题，那会很好。这样可以帮助，知道，帮助维护者清理。那么我们怎么做呢？所以当我们。是的。
- en: so when we make that， that API call， we received the response back。 There are
    a lot of information that get returned in that response。
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们进行那个API调用时，我们收到了响应回来。响应中返回了很多信息。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_66.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_66.png)'
- en: So let's check that out。
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 那么让我们查看一下。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_68.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_68.png)'
- en: Check out the。 Example response that you will get of the installation。 Oh， no，
    sorry。 The response for them for when you create that。 Issue。 It is a list。 And。
    It returns you the issue number that was opened。 So you can access the data like
    that。 So actually。 I don't think this is the right。 End point。 Oh， but I need
    you create an issue。
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 查看你将收到的安装示例响应。哦，不，抱歉。创建该问题时的响应。这是一个列表。而且，它返回你打开的问题编号。所以你可以像那样访问数据。所以实际上。我认为这不是正确的端点。哦，但我需要你创建一个问题。
- en: This is this is the API call。 So the response here is。 The number is returned
    in the。 In the number key。 All right。 And the issue URL is also there。 Let's take
    a look。 All right。 Yes。 So this is also the API。 This is the issue endpoint。 Okay。
    So we know before from before how to close an issue is basically a patch。
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这是API调用。所以这里的响应是。数字在数字键中返回。好的。问题的URL也在那里。让我们看看。好的。是的。所以这也是API。这是问题端点。好的。所以我们之前知道，关闭一个问题基本上是一个补丁。
- en: To the issues URL and passing in the state close and the end。 This is basically
    the exact same thing。 The only thing we're changing is that。 We're going to use
    the installation access to。 Yes， it is。 It should be more like this。 So issue。
    Your address is basically a response。 You are all。 And then we're going to close
    it by doing。
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 到问题 URL，并传递状态关闭和结束。这基本上是完全一样的。唯一改变的是。我们将使用安装访问。是的，应该更像这样。所以问题。你的地址基本上是一个响应。你都是。然后我们将通过这样关闭它。
- en: G H patch。 To the issue URL。 And passing the data。 State is closed。 And don't
    forget the old token。 There you go。 All right。 So let's。 Commit。 All right。 Let's
    commit this file。 Deploy it to Heroku。 So thanks to the maintainer。 Commit and
    push。 Now let's go to Heroku。 Actually， let's see。 Let's see in the lot。 It fits。
    It's building。 Okay。 Let's see if I can make sure it gets deployed。
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: G H 补丁。到问题 URL。并传递数据。状态为关闭。不要忘记旧的令牌。好了。好的。让我们。提交。好的。让我们提交这个文件。部署到 Heroku。所以感谢维护者。提交并推送。现在让我们去
    Heroku。实际上，让我们看看。在日志中。它正在构建。好的。让我们看看我能否确保它被部署。
- en: Okay。 I'm going to start the deploy。 So here you can see the logs getting updated。
    Okay。 Okay。 Deploy。 And if we go back here， this should give me。 This still works。
    Okay。 All right。 Let's see what happens。 Let's try it out。 Let's install that
    app。 So go back to the GitHub app。 Your GitHub app setting。 Click install app。
    It's just a tutorial。
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。我将开始部署。所以你可以看到日志正在更新。好的。好的。部署。如果我们回到这里，这应该给我。这仍然有效。好的。好的。让我们看看会发生什么。我们试一下。让我们安装那个应用程序。返回到
    GitHub 应用程序。你的 GitHub 应用设置。点击安装应用。这只是一个教程。
- en: I'm just going to install it in my strange relationship repo。 So just under
    one。 Click install。 And it seems to be installed。 Now let's check the web hooks。
    So go back to your GitHub apps list。 Go to the GitHub app。 Go to advanced。 Okay。
    Something's wrong。 What am I？ This arrow 404。 Okay。 Let's figure out what's going
    on。 It's saying this URL is 404。 Okay。 Maybe I did not deploy it。
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我将把它安装在我的奇怪关系库中。所以只需在一个下面。点击安装。似乎已安装。现在让我们检查 web hook。所以返回到你的 GitHub 应用列表。去
    GitHub 应用。进入高级。好的。出了点问题。我是什么？这个错误 404。好的。让我们弄清楚发生了什么。它说这个 URL 是 404。好的。也许我没有部署它。
- en: Already not committed correctly。 GitHub app for the plate。 Yes。 One second。
    I have to say thanks to the maintainer and I have the web hook。 Yeah。 That's actually
    go to the GitHub。 Well， there's no one I want。 Okay。 I got to say thanks。 What's
    going on here？ I believe。 I should not include it。 Right。 Okay。 That's my mistake。
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 已经没有正确提交。GitHub 应用程序用于板块。是的。等一下。我得感谢维护者，我有 webhook。是的。实际上，去 GitHub。好吧，没有我想要的。好的。我得说谢谢。这里发生了什么？我相信。我不应该包含它。对吧。好的。这是我的错误。
- en: Sorry about that。 Go back to the settings of this and。 Yes。 Okay。 All right。
    So there was an error。 Okay。 This is actually a good example now。 So there was
    an error with delivering our web hook。 Now do we need to like reinstall the app
    again in order to receive it？ Well， you don't have to。 And I click advance and
    you can see all the failed deliveries here。 Right。
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 抱歉。返回到这个设置。是的。好的。好的。那里出现了错误。好的。现在这是一个很好的例子。所以在发送我们的 webhook 时出现了错误。现在我们是否需要重新安装应用才能接收它？好吧，你不必。我点击高级，你可以在这里看到所有失败的传送。对吧。
- en: And you don't have to reinstall it。 All you need to do is basically。 Try to
    do it。 And now it works。 So we can go through each of this one one by one。 And
    this is basically the installation that we are looking for the installation。 Web
    for events that we wanted。 So let's read the label that。 Now it's success。
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 你不必重新安装它。你所需要做的就是。尝试这样做。现在它有效了。所以我们可以逐个查看每一个。这基本上是我们要寻找的安装。我们想要的事件的安装。现在让我们读取标签。现在成功了。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_70.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_70.png)'
- en: And let's also read the label。 This again。 Let's see。
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再读取标签。让我们看看。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_72.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_72.png)'
- en: Oh， something's wrong here。 This has 500 errors。
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，这里出了点问题。这个有 500 错误。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_74.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_74.png)'
- en: Okay。 Let's see。 Let's take a look at the love now。
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。让我们看看。现在看看日志。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_76.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_76.png)'
- en: Oh， I did not pass in。 Sorry。 Oh。 Yes。 Actually。 Okay。 What do we need from
    here？
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，我没有通过。抱歉。哦。是的。实际上。好的。我们需要从这里做什么？
- en: I will fix the documentation。 It's。 Look at。 You have documentation。 Oops。 Okay。
    So basically installation ID and app ID and private key。 All right。 Yes。 So one
    second。 Installation ID。 We have it。 We need an ID， which is something we got
    from the。 And what about。 See。 I did this other environment。 We defined earlier
    and private key。 Yes。 Sure。 No typos。
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我会修复文档。看一下。你有文档。哎呀。好的。基本上是安装ID、应用ID和私钥。好的。是的。等一下。安装ID。我们有了。我们需要一个ID，这个是我们从中获得的。那怎么样。看一下。我之前定义的另一个环境和私钥。是的。没错。没有拼写错误。
- en: It's private key。 All right。 Let's commit that。 It's been committed and now
    let's deploy it。 Okay。 All right。 Let's go back to our GitHub apps。
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这是私钥。好的。让我们提交它。已经提交，现在让我们部署它。好的。好的。让我们回到我们的GitHub应用。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_78.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_78.png)'
- en: Like book settings and try to read the label this again。
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 像书籍设置一样，再试着读取这个标签。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_80.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_80.png)'
- en: Okay。 It's successful。 It's passed。 Let's see if we actually create the issue
    that says thank you。 All right。 So there you go。 So this was open and close。 So
    there's an issue created by the bot。 My bot。 And I'm going to go back to the top。
    So there you go。 All right。 So we did all of this。 And let's see。 All right。 So
    we're going to go back to the top。
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。成功了。通过了。让我们看看是否实际创建了一个说“谢谢”的问题。好的。就这样。所以这是开放和关闭。因此，机器人创建了一个问题。我的机器人。我要回到顶部。就这样。好的。所以我们完成了这一切。让我们看看。好的。我们要回到顶部。
- en: And I mentioned how what happens if you have errors in your， webhooks。 I'll
    show you how you can just read the little of the webhook。 It's that like help
    to uninstall it。 Install it again。 So now that you know that the next exercise
    is。 And you can just read the little of the requests。 So if somebody open a pull
    request。
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我提到过如果你的Webhook中出现错误会发生什么。我会告诉你如何读取Webhook的小部分。就像是帮助你卸载它。再安装一次。所以现在你知道下一个练习是什么。你可以简单地读取请求的一小部分。如果有人打开了拉取请求。
- en: And if they have not done it before， so they're new to the， organization。 we
    want to say thanks for your first pull request。 So I've shared some links here
    on details of。 And there is an example of the。 The pull request even table。 So，
    yeah。 perhaps you can take another break time here。 If you want to。
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如果他们之前没有做过，他们对这个组织是新的。我们想对他们说谢谢你首次提交的拉取请求。所以我在这里分享了一些关于的链接细节。而且这里有一个例子。拉取请求甚至表格。所以，是的。也许你可以在这里再休息一下。如果你想的话。
- en: Like if you've been watching and you're itching to try this on， your for yourself。
    So I'm going to pause my recording right now。 Take a break and。 Yeah， try try
    the dog。 Try this exercise on your own and come back and then。 I will show you
    this。 The solution on this。 Hello again。 Welcome back。 Yeah， let me share my screen
    again。 All right。
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你一直在观看并且迫不及待想亲自尝试一下。那么我现在会暂停我的录制。稍作休息，然后。是的，尝试一下这只狗。自己尝试这个练习，然后再回来。我会给你展示这个。解决方案。再次你好。欢迎回来。是的，让我再次分享我的屏幕。好吧。
- en: so I hope you you had chance to do this。 But if not， that's fine。 So yeah。 let's
    write out this code。 So we want to。 We want to thank a contributor when they open
    the pull request。 So how do we do that？ First， we're going to take a look at the
    pull request event， documentation。 Okay。 So we want to open it。 So we also need
    to figure out what is the peer number。
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我希望你有机会做这个。如果没有，也没关系。所以，是的。让我们写出这段代码。所以我们想在他们打开拉取请求时感谢贡献者。那么我们该怎么做呢？首先，我们将查看拉取请求事件的文档。好的。所以我们想打开它。因此我们还需要弄清楚什么是对等编号。
- en: So we can respond to their pull request。 So if we look at the payload example。
    For when we receive the， okay， this is deployment status。 Actually one second。
    Okay。 So this is an example of this is the documentation for the， pull request。
    And here is the webhook payload。 So you will receive from GitHub the action name。
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们可以回应他们的拉取请求。如果我们查看有效负载示例。当我们接收到时，好的，这是部署状态。其实等一下。好的。这是文档的示例，关于拉取请求。这里是Webhook有效负载。所以你会从GitHub收到动作名称。
- en: That is whether it was opened or closed， the pull request number。 And what else
    are important here。 We should have as well。 Who created the pull request if you
    scroll all the way down。 Right。 The sender again， we've seen a similar structure
    before。 Send a login。 And another important。 Important info out of this。 Is that
    is this often association value that is sent alongside the。
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是打开还是关闭，拉取请求编号。这儿还有什么重要的内容？我们也应该有。谁创建了拉取请求，如果你向下滚动到最底部。对。发件人再次，我们之前见过类似的结构。发送登录。还有另一个重要的信息。就是这个通常与之一起发送的关联值。
- en: work of data。 There are various。 I think for possible value。 Possible values
    here。 Owner means the owner of the， the report， the owner of the organization。
    And there are other。 Here I wrote in the documentation here。 So if the， if that
    value is member。 it means they are a member of the， organization。 For example，
    if they are a maintainer of that repo。
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 数据的工作。有各种。我认为可能的值。这里可能的值。所有者意味着，报告的所有者，组织的所有者。还有其他的。我在这里的文档中写过。所以如果该值是成员。意味着他们是组织的成员。例如，如果他们是该仓库的维护者。
- en: the contributor means they have contributed to that repository， before。 meaning
    they have open a pull request。 It was accepted。 And then they become a contributor。
    Now。 if it's none， it means they， this is there for the time opening the， pull
    request there。 So with that information， with that information， you can find out。
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 贡献者意味着他们之前已对该仓库做出贡献。这意味着他们打开了一个拉取请求，并且被接受了。然后他们成为贡献者。现在。如果没有，意味着他们这是第一次打开拉取请求。所以根据这些信息，你可以找出。
- en: whether this is someone new or whether this is experienced， contributed to your
    repo。 So those are the important details。 So how do we write a code for this？
    Yeah。 So let's start by subscribing to the pull request。 So we have open event。
    So basically let's just copy this code there。 That we know that we will need to
    make an API call。
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这是否是新人，或者这是有经验的贡献者。所以这些是重要的细节。那么我们该如何为此编写代码呢？是的。所以让我们先订阅拉取请求。我们有开放事件。所以基本上就复制这段代码。我们知道我们需要进行API调用。
- en: Right。 So something like。 Now we need a URL。 So commenting up on the pull request
    is you will be using the same。 API as commenting on an issue， which we have done
    before。 But I'm going to just check the documentation again。 So it's basically
    post to this URL to the owner repo slash issues。
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 对。所以像这样。现在我们需要一个URL。对拉取请求进行评论时，你将使用与对问题进行评论相同的API，这是我们之前做过的。但是我想再检查一下文档。所以基本上是向这个URL发送POST请求，指向所有者的仓库斜杠问题。
- en: slash the issue number that will be the peer number and comments。 And let's
    see if we get any of those here。 Okay。 So basically the pull request issue URL
    will give you part of the。 part of the， the URL that you need。 So I guess we just
    need to pass in to add in slash comments there。 So let's， let's do that。 Okay。
    So we will use you。 Well， is it and data。 Okay。
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 斜杠后的问题编号将是同行编号和评论。我们来看一下这里是否有任何这些。好的。基本上，拉取请求的问题URL将为你提供所需的一部分URL。所以我想我们只需要传入添加斜杠评论。那我们，来吧。好的。我们会使用你。好吧，数据。好的。
- en: so we need to do that。 And then the actual URL we need is。 So we're going to
    say。 So we're going to say。 Thanks。 And the author and that is basically。 Okay，
    I'm going to do it here。 Yes。 And the login。 So name。 And again， we need to pass
    in the installation access to them。 So just going to copy from the previous step。
    All right。
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们需要这样做。然后我们需要的实际URL是。所以我们将要说。感谢。作者，这基本上是。好的，我会在这里做。是的。还有登录名。所以名字。我们还需要传递安装访问权限给他们。所以只是从上一步复制。好的。
- en: So that will leave the comments saying thank you for the PR。 Thanks for the。
    What else do we want？
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就可以留下评论，感谢PR。感谢。我们还想要什么？
- en: Okay。 Yes。 So we want to， we want to say that thanks only。 So we need to access
    the data as。 Who request and also authentication。 So。 Also association。 So。 Yes。
    And。 So。 Yeah。 So if。 There is value to it。 It's not done。 It means。 Right。 And
    otherwise if it's empty。 That means it is a first time country。 And I would even
    say。 For your first contribution。
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。是的。所以我们想说只感谢。所以我们需要访问数据，比如。谁请求了以及身份验证。所以。还有关联。所以。是的。所以。如果。它有值。这还没有完成。意味着。对。否则如果它为空。那意味着这是第一次贡献。我甚至会说。对于你的第一次贡献。
- en: And so if it's a seasoned contributor， I'm going to say。 Well， come back。 Sander。
    Whoops。 Oh。 I call it username instead of center。 So that's just it。 Oh， yes，
    I did provide a link。 To the solution。 So。 Oh， okay。 Okay， I got that wrong。 So
    we actually need it。 It is。 it is a string that says done。 So。 That's fine。 Yeah。
    So if this is not like that。
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果是一个经验丰富的贡献者，我会说。好吧，回来吧。桑德。哎呀。哦。我称它为用户名而不是中心。所以就这样。哦，是的，我确实提供了一个链接。到解决方案。所以。哦，好的。好的，我搞错了。所以我们实际上需要它。是的。它是一个字符串，表示完成。所以。没问题。是的。如果这不是那样的话。
- en: It means they are a first time contributor。 And for everything else， we're going
    to say。 Well。 let's print that out。 Yeah。 So let's do it。 So let's commit this。
    And pull request。 Create it。 And push。 Yeah。 Deploy。 Okay。 So now。 So I create
    a pull request。 And boom。 Okay。 So that's it。 Okay。 So basically， if there is
    new， new comments on issues that is still open。
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着他们是第一次贡献者。对于其他所有事情，我们会说。好吧。让我们把它打印出来。是的。那么我们来做吧。提交这个。然后拉取请求。创建它。并推送。是的。部署。好的。那么现在。创建了拉取请求。哇。好的。那么就这样。好的。基本上，如果有新的，新的评论在仍然开放的问题上。
- en: we want to automatically give a thumbs up reaction。 So we've done a single thing
    before。 So it's about the same thing。 So let's look at。 Okay。 Issue。 And we're
    going to let a new comment to the issue。 Okay。 So。 That means we want to subscribe
    to the issue command created。 Let's do that。
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要自动给一个点赞反应。所以我们之前做过一件事。所以差不多是同样的事情。那么我们来看一下。好的。问题。我们要让一个新评论到问题。好的。那么。这意味着我们想要订阅问题命令创建。让我们这样做。
- en: So those are the same thing。 All right。 Issue comment created。 And what do we
    want to do？
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这些是一样的事情。好的。问题评论创建。那么我们想做什么？
- en: We want to create a reaction。 So make a post to the issue slash comments， comment
    ID and reactions。 Oh， comment ID。 So we need。
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要创建一个反应。所以发一个帖子到问题的斜杠评论，评论 ID 和反应。哦，评论 ID。所以我们需要。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_82.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_82.png)'
- en: Let's see if it is passed in to the payload。
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看是否传入到有效负载中。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_84.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_84.png)'
- en: Is this issue comment created？ Issue URL。 Okay。 Here is。 I believe this is the。
    No。 that's not the URL we need。 So what do you need again？ Slash comments， last
    comment ID。 Okay。 Let's see if we got a comment ID。 Okay。 There you go。 We've
    got a comment and the ID。 Okay。 So。 And then ID is。 Check that again。 So comment
    ID。 Oops。 And the URL we need。 Yes。 Basically。
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题的评论创建了吗？问题 URL。好的。在这里。我相信这是。不是。那不是我们需要的 URL。那么你还需要什么？斜杠评论，最后的评论 ID。好的。让我们看看是否得到了评论
    ID。好的。来了。我们得到了评论和 ID。好的。那么。然后 ID 是。再检查一下。评论 ID。哎呀。我们需要的 URL。是的。基本上。
- en: Is it your role？ Issue。 And。 Oh， actually we've used the comments。 Is issue
    comment zero。 That gives us the slash comments。 And then we need to comment ID
    and reactions。 Okay。 So。 And it is a。 Content。 Okay。 So get up。 And then we need
    to comment。 You will slash。 Comment ID。 Comment ID。 And。 And again， we need to
    pass in。 And the data is。 Content and reaction type。 Oops。
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 是你的角色吗？问题。还有。哦，实际上我们使用了评论。是问题评论零。那给我们斜杠评论。然后我们需要评论 ID 和反应。好的。那么。它是一个。内容。好的。那么获取。然后我们需要评论。你将斜杠。评论
    ID。评论 ID。还有。我们再次需要传入。数据是。内容和反应类型。哎呀。
- en: And。 Don't forget to put this into F string。 Okay。 We don't even need。 Okay。
    Do we need to use a name？ Yeah。 Because we want。 We want about just live reactions。
    If it's you。 for example， just for fun。 So it will not give heart to somebody
    else on the if it's your own comment。 So。 Okay。 So in that case， we want to check。
    Send a login。 Okay。 So。 If。 If you send in。 Yes。
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 还有。别忘了把这个放入 F 字符串中。好的。我们甚至不需要。好的。我们需要使用一个名字吗？是的。因为我们想要。我们想要只是实时反应。如果是你，比如说，纯粹是为了好玩。那么它不会给其他人点赞，如果是你自己的评论。那么。好的。那么在这种情况下，我们想检查。发送登录。好的。那么。如果。如果你发送。是的。
- en: Myself。 Then I will automatically keep a heart。 Yes。 Commit this。 To my。 That。
    Okay。 Okay。 Decro it again。 Okay。 Okay。 Okay。 Okay。 All right。 All right。 It's
    done。 So let's go to my report again。 Okay。 So if it works properly， if I say。
    I should。 Immediately。 Nope。 It does not do anything。 Okay。 Let's， let's debug
    this together。 Pull request。 Oh， yes。
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我自己。那么我会自动保持一个心。是的。提交这个。到我的。那个。好的。好的。再装饰一下。好的。好的。好的。好的。好的。好的。完成了。那么让我们再去我的报告。好的。如果它正常工作，如果我说。我应该。立刻。没有。它什么都没有做。好的。让我们一起调试一下。拉取请求。哦，是的。
- en: So silly。 Yes。 Yes。 Okay。 Of course， even with。 So when I created this app earlier。
    I believe I did not。 Yes。 I need to take the issue comment。 Events。 Otherwise，
    nothing happened。 So yes。 So take that。 And say。 To the。 To the。 You have settings。
    Advanced。 Actually。 I think I need to actually leave another comment here。 Nothing
    happened。
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 真傻。是的。是的。好的。当然，即使有。所以当我早些时候创建这个应用时。我相信我没有。是的。我需要获取问题评论事件。否则，什么也不会发生。所以是的。要获取那个。并说。到。到。你有设置。高级。其实。我想我需要在这里再留一个评论。什么都没发生。
- en: Let's check out the webhooks。 Okay。 There's an error here。 Five hundred。 So
    let's see what's going on。 Check the logs again。 Excuse me。 It actually returns。
    Not found。 Okay。 So let's take a look here。 What is the problem here？ Going to
    do some debugging。 Let's see what is the problem。 And。 I forgot about the error。
    So I don't think I need to debug。
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下网络钩子。好的。这里有一个错误。五百。所以让我们看看发生了什么。再检查一下日志。打扰一下。实际上返回。未找到。好的。所以让我们看看这里。问题是什么？要进行一些调试。让我们看看问题是什么。和。我忘记了错误。所以我认为我不需要调试。
- en: So that accept。 There you go。 This should work。 All right。 Let's get that deployed
    again。 And。 All right。 Let's do it。 Okay。 It seems like it's still not working。
    Okay。 Okay。 Okay。 Okay。 Oh。 this should be a comment。 Comments， you are instead
    of issues。 Okay。 All right。 Okay。 So I believe。 See。 Okay。 All right。 Okay。 What
    did I do？ Comments。 What is this issue？ Oh， gosh。
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 所以接受。好了。这应该有效。好的。让我们再部署一次。好的。我们来做吧。好的。似乎还是不行。好的。好的。好的。哦。这应该是一个评论。评论，你而不是问题。好的。好的。好的。所以我相信。看。好的。好的。我做了什么？评论。这个问题是什么？哦，天哪。
- en: I'm making so many titles。 I'm gonna do one comment。 You are all right。 I've
    got this。
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 我正在创建很多标题。我会做一个评论。你们都没问题。我明白了。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_86.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_86.png)'
- en: Okay。
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_88.png)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_88.png)'
- en: Okay。 Okay。
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。好的。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_90.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_90.png)'
- en: Okay。 Okay。 Okay。 All right。 It's going to work now。
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。好的。好的。好的。现在应该可以工作了。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_92.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_92.png)'
- en: Oh， it's going on。 Okay。 Okay。 Okay。 Okay。 Yes。 Okay。 Okay。
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，进行中。好的。好的。好的。好的。是的。好的。好的。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_94.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_94.png)'
- en: Okay。
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_96.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_96.png)'
- en: All right。 Okay。 There you go。 There is the heart。 All right。 That works。 Yeah。
    Okay。 Shall we go to the next thing？ That's labeled the pull request。 So whenever
    somebody opens a pull request， have it automatically labeled something like pending
    review or something。 Okay。 All right。 So the API call is added an issue。 And in
    here。
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。好了。这就是核心。好的。这有效。是的。好的。我们要继续下一个吗？那个标记为拉取请求。所以每当有人打开拉取请求时，自动标记为待审核或其他。好的。好的。所以
    API 调用是添加一个问题。在这里。
- en: So you call a patch to that issue and put in a label like an array of strings。
    So we have。 we scroll back up。 We already have that handler for when a PR was
    opened。 And now。 I guess what we want to do is add another。 Add more to it saying。
    Okay。 Patch the issue。 We got this URL。 Okay。 Let's think of the URL a little
    bit later。 And the data is。 And。
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你对那个问题调用一个补丁并放入一个像字符串数组的标签。所以我们有。我们向上滚动。我们已经有了处理程序，用于当 PR 被打开时。现在。我想我们想做的是添加另一个。再加一些内容说。好的。修补问题。我们得到了这个
    URL。好的。稍后再考虑这个 URL。数据是。和。
- en: And a ray of strings。 So。 Needs for example。 And。 Don't forget the last。 Again，
    that is。 that is the most complicated part of this。 Figuring out the response。
    Figuring out what how to construct the URL。 So if we go back。 To here， I have
    an example of。 So this was an example of the earlier request open event that my
    bot has received。 So in there。
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 和一个字符串数组。所以。需要，例如。和。不要忘记最后一个。再说一次，那是。这是最复杂的部分。弄清楚响应。弄清楚如何构造 URL。所以如果我们回去。到这里，我有一个早期请求打开事件的例子，我的机器人已收到。所以在这里。
- en: There is the。 So that's what we need。 So basically， the。 In sure you are here。
    That's what。 That's basically what we needed in the API call。 Issues and issue
    number。 So actually just a call request and issue your is all we need。 Which we
    already got it from before。 So let's just commit that。 And。 Okay。 While it's being
    deployed。 Let's go back。
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。这就是我们需要的。基本上，在这里确认你在。这就是。基本上在 API 调用中我们需要的。问题和问题编号。所以其实只需调用请求和问题就行了。我们之前已经得到了。所以我们就提交吧。好的。在部署的同时，我们回去。
- en: And create another beer。 And I want to create a board request。 So let me wait
    until。 The old has been finished。 Okay， starting。 Create a core request。 And then。
    Oh， I did I okay。 I made a mistake here not adding the await。 Okay。 Let's build
    it again。 Okay。 Okay。 Let's just。 Create another pull request。 I'm going to read
    a little bit again anyway。 Still good。
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 并创建另一个请求。我想创建一个拉取请求。所以让我等一下。旧的已经完成。好吧，开始。创建一个核心请求。然后。哦，我是否做错了？我在这里犯了错误，没有添加等待。好吧。让我们再构建一次。好吧。好吧。我们就创建另一个拉取请求。我还是要再读一下。仍然不错。
- en: And I can see already。 The label was added。 The bot。 The comment and it adds
    the needs review label。 So that's that's that。 Yeah， so that's I think that's
    the end of our tutorial。 So we went through a lot of things。 We built a GitHub
    app from scratch。 A working GitHub bot。 So if you were able to follow along。 And
    if you have your own GitHub bot working at this point。
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经可以看到了。标签已被添加。机器人。评论，并添加了需要审查的标签。所以就是这样。嗯，我想这就是我们教程的结束。因此，我们回顾了很多内容。我们从头开始构建了一个GitHub应用程序，一个工作的GitHub机器人。如果你能跟上，并且到目前为止你的GitHub机器人能够正常工作。
- en: congratulations。 It's it's awesome。 I know。 I'm sorry。 I made lots of mistakes
    here that makes this longer than it needs to be。 But I guess the lesson is。 In
    in your real development time。 You'll probably be writing more unit tests instead
    of keeping deploying it like what I did。 I'm going to talk about the web。 I'm
    going to talk about the web。 I'm going to talk about the web。
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 祝贺你。这太棒了。我知道。我很抱歉。我在这里犯了很多错误，这让事情比需要的时间更长。但我想教训是，在你真正的开发时间里，你可能会写更多的单元测试，而不是像我那样不断部署。我将要谈论网络。我将要谈论网络。我将要谈论网络。
- en: I'm going to talk about the web。 I'm going to talk about the web。 I'm going
    to talk about the web。 I'm going to talk about the web。 I'm going to talk about
    the web。 I'm going to talk about the web。 I'm going to talk about the web。 I'm
    going to talk about the web。 I'm going to talk about the web。 I'm going to talk
    about the web。 I'm going to talk about the web。 I'm going to talk about the web。
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 我将要谈论网络。我将要谈论网络。我将要谈论网络。我将要谈论网络。我将要谈论网络。我将要谈论网络。我将要谈论网络。我将要谈论网络。我将要谈论网络。我将要谈论网络。我将要谈论网络。我将要谈论网络。
- en: I'm going to talk about the web。 I'm going to talk about the web。 I'm going
    to talk about the web。 I'm going to talk about the web。 I'm going to talk about
    the web。 I'm going to talk about the web。 I'm going to talk about the web。 I'm
    going to talk about the web。 I'm going to talk about the web。 I'm going to talk
    about the web。 I'm going to talk about the web。 I'm going to talk about the web。
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我将要谈论网络。我将要谈论网络。我将要谈论网络。我将要谈论网络。我将要谈论网络。我将要谈论网络。我将要谈论网络。我将要谈论网络。我将要谈论网络。我将要谈论网络。我将要谈论网络。我将要谈论网络。
- en: I'm going to talk about the web。 I'm going to talk about the web。 I'm going
    to talk about the web。 I'm going to talk about the web。 I'm going to talk about
    the web。 I'm going to talk about the web。 I'm going to talk about the web。 I'm
    going to talk about the web。 I'm going to talk about the web。 I'm going to talk
    about the web。 I'm going to talk about the web。 I'm going to talk about the web。
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我将要谈论网络。我将要谈论网络。我将要谈论网络。我将要谈论网络。我将要谈论网络。我将要谈论网络。我将要谈论网络。我将要谈论网络。我将要谈论网络。我将要谈论网络。我将要谈论网络。我将要谈论网络。
- en: I'm going to talk about the web。 I'm going to talk about the web。 I'm going
    to talk about the web。 I'm going to talk about the web。 I'm going to talk about
    the web。 I'm going to talk about the web。 I'm going to talk about the web。 I'm
    going to talk about the web。 I'm going to talk about the web。 I'm going to talk
    about the web。 I'm going to talk about the web。 I'm going to talk about the web。
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 我将要谈论网络。我将要谈论网络。我将要谈论网络。我将要谈论网络。我将要谈论网络。我将要谈论网络。我将要谈论网络。我将要谈论网络。我将要谈论网络。我将要谈论网络。我将要谈论网络。我将要谈论网络。
- en: I'm going to talk about the web。 I'm going to talk about the web。 I'm going
    to talk about the web。 I'm going to talk about the web。 I'm going to talk about
    the web。 I'm going to talk about the web。 I'm going to talk about the web。 I'm
    going to talk about the web。 I'm going to talk about the web。 I'm going to talk
    about the web。 I'm going to talk about the web。 I'm going to talk about the web。
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 我要谈论网络。我要谈论网络。我要谈论网络。我要谈论网络。我要谈论网络。我要谈论网络。我要谈论网络。我要谈论网络。我要谈论网络。我要谈论网络。我要谈论网络。我要谈论网络。
- en: I'm going to talk about the web。 I'm going to talk about the web。 I'm going
    to talk about the web。 I'm going to talk about the web。 I'm going to talk about
    the web。 I'm going to talk about the web。 I'm going to talk about the web。 I'm
    going to talk about the web。 I'm going to talk about the web。 I'm going to talk
    about the web。 I'm going to talk about the web。 I'm going to talk about the web。
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 我要谈论网络。我要谈论网络。我要谈论网络。我要谈论网络。我要谈论网络。我要谈论网络。我要谈论网络。我要谈论网络。我要谈论网络。我要谈论网络。我要谈论网络。我要谈论网络。
- en: I'm going to talk about the web。 I'm going to talk about the web。 I'm going
    to talk about the web。
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 我要谈论网络。我要谈论网络。我要谈论网络。
- en: '![](img/3c3588b77123e82a29264958f5086ce4_98.png)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3588b77123e82a29264958f5086ce4_98.png)'
- en: I love you。
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 我爱你。
