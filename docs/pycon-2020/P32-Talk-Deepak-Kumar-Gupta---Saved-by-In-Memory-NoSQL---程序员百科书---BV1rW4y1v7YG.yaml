- en: P32：Talk Deepak Kumar Gupta - Saved by In-Memory NoSQL - 程序员百科书 - BV1rW4y1v7YG
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P32：深度交谈Deepak Kumar Gupta - 由内存NoSQL拯救 - 程序员百科书 - BV1rW4y1v7YG
- en: Hello everyone。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 大家好。
- en: '![](img/9bba88217c914fc5eafd190f5aecd9b1_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9bba88217c914fc5eafd190f5aecd9b1_1.png)'
- en: Welcome to the SpyCon 2020 talk titled as saved by in-memory NoSQL， a hitchhiker
    guide。 to black box debugging of Python production code。 Sorry about long title
    but I believe by the end of this talk you will understand all of。 it。 So before
    we go ahead something about me my name is Deepak K。 Gupta， I am a tech consultant。
    and software crafter。 I am working in this industry for more than 20 years and
    these are some social media。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到SpyCon 2020的演讲，题为“由内存NoSQL拯救，黑盒调试Python生产代码的搭便车指南”。抱歉标题太长，但我相信在这次演讲结束时，你会理解所有内容。那么，在我们继续之前，简单介绍一下我自己，我叫Deepak
    K. Gupta，是一名技术顾问和软件工匠。我在这个行业工作了超过20年，这里是我的一些社交媒体。
- en: handles where you can reach out to me。 So let's go ahead and start。 Let's first
    talk about black box。 Now whenever you hear the term black box what comes to your
    mind？
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是可以联系我的方式。那么我们开始吧。首先，我们谈谈黑盒。每当你听到黑盒这个术语，你脑海中想到了什么？
- en: The picture of an airplane。 Because black boxes are generally associated with
    airplane and black box debugging is actually。 inspired by black boxes that are
    there in an airplane。 So the airplane black boxes are extremely durable hardware。
    It is made to survive extremely harsh conditions。 It has all the information about
    the running system in real time and those informations。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 一架飞机的图片。因为黑盒通常与飞机相关，而黑盒调试实际上是受到飞机上黑盒的启发。飞机黑盒是极其耐用的硬件，旨在生存于极端恶劣的条件下。它实时记录运行系统的所有信息。
- en: are encoded in nature which means that if someone gets the black box it is not
    possible。 for that person to take the black box and decode all the information。
    And that's the reason we have specialized labs across the world to decode these
    information。 And the reason for existence of black box is this。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 黑盒是自然编码的，这意味着如果有人获取了黑盒，就不可能让那个人解码所有信息。这就是我们在世界各地设立专业实验室来解码这些信息的原因。黑盒存在的原因就是这个。
- en: In software this can happen quite often that you know something goes wrong in
    the production。 system and we are trying to find the root cause of it。 We are
    not able to find it。 We patch the production system with additional logs within
    the area which we feel that is。 the root cause of the problem and we expect the
    problem to re-occur again。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件中，这种情况很常见，即生产系统出现问题，我们试图找到根本原因，但却找不到。我们在我们认为是问题根源的区域用额外的日志修补生产系统，并期望问题再次发生。
- en: So that we can get more information and we just believe that these logs will
    be able to。 help us in finding the root cause。 That option is not there in an
    airplane。 So in black box debugging we wanted to come up with something similar
    where we rarely need。 to patch the existing production system to find the root
    cause of a problem。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我们可以获得更多信息，我们相信这些日志能够帮助我们找到根本原因。在飞机上是没有这个选项的。因此，在黑盒调试中，我们想出类似的方案，尽量减少对现有生产系统的修补，以找出问题的根本原因。
- en: And here is how the black box architecture looks like it's extremely simple。
    There is a separate entity called black box which is totally separate and it doesn't。
    impact the performance of any of the existing components。 It just get the data。
    get the real time data about component performance。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是黑盒架构的外观，非常简单。它有一个名为黑盒的独立实体，完全分开，并且不会影响任何现有组件的性能。它只是获取数据，实时获取关于组件性能的数据。
- en: Like there are thousands of components in an airplane。 They put their real time
    data into the black box。 Their functionality is not dependent upon the black box。
    So let's talk about how come python and black box comes into picture。 So we were
    building a system with complex set of state machines with hundreds of states。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 像飞机中有成千上万的组件一样。它们将实时数据放入黑盒中。它们的功能不依赖于黑盒。那么我们来讨论一下Python和黑盒是如何结合的。我们正在构建一个复杂的状态机系统，有数百个状态。
- en: events and transitions。 So if you are building a system like this you know that
    there is no happy path。 Happy path means these are not set of states that will
    happen most of the time。 It depends totally upon the end user behavior and environmental
    circumstances and the permutation。 and combination of these state events and transitions
    are kind of limitless。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 事件和转换。所以如果你正在构建这样的系统，你知道并不存在快乐路径。快乐路径意味着这些不是大多数情况下会发生的状态集。它完全取决于最终用户的行为和环境情况，以及这些状态事件和转换的排列组合几乎是无限的。
- en: You know it's very difficult to understand when something happened in this state
    or because。 of this event what leads to triggering of this state and how many
    things happen and。 what leads to this particular state。 That's the reason we wanted
    to have a black box like feature so that each and every state。 activity events
    and transitions are actually recorded。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道，很难理解在这个状态下发生了什么，或者因为这个事件触发了这个状态，并且发生了多少事情，导致这个特定状态。正因如此，我们希望拥有一个类似黑盒的功能，以便每一个状态、活动、事件和转换都被实际记录下来。
- en: And with the recorded log we wanted to generate a visual sequence and activity
    diagram for。 the complete system so that it can help us in understanding what
    happened within the system。 And of course the tool would be sophisticated so that
    if we tell them to generate visual。 diagram from this to this time frame or top
    level or detail level it will be able to do， that。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 有了记录的日志，我们希望生成一个完整系统的视觉序列和活动图，以帮助我们理解系统内发生了什么。当然，这个工具会很复杂，因此如果我们告诉它从这个时间范围生成视觉图，或者是顶层或细节级别，它将能够做到这一点。
- en: And these logs will be released as part of production builds。 Now it's a general
    practice that when we add logs we have different types of log like。 info log debug
    log critical logs and it's also a general practice that when we are giving。 the
    system to production we just enable critical logs of course because of the performance。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这些日志将作为生产版本的一部分发布。现在一般的做法是，当我们添加日志时，有不同类型的日志，比如信息日志、调试日志、关键日志，而在将系统交付生产时，我们通常只启用关键日志，当然这是出于性能考虑。
- en: regions and we do not enable info and debug logs。 Now let's talk about the code
    which we were writing the state machine。 It's a very miniature version of my state
    machine and I just wanted to give you a taste。 of the system how it looks like
    so we had state and event as an abstract base classes。 and we had a state machine。
    This is not the original code this is just the miniature version of a state machine
    just。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 区域和我们不启用信息和调试日志。现在让我们谈谈我们正在编写的状态机的代码。这是我状态机的一个非常简化版本，我只是想给你展示一下这个系统的样子。所以我们有状态和事件作为抽象基类，还有一个状态机。这不是原始代码，这只是一个状态机的简化版本。
- en: to give you an idea how this was actually working so state machine starts with
    state。 it transition to next state there were multiple state machine inner state
    machines and all。 those complexities were built into the system。 So to understand
    the working of the system let's talk about a very simple real time example。 So
    we are in a happy state right now happy state is also in state and we received
    an。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 给你一个关于这实际上是如何工作的想法，所以状态机从状态开始，转移到下一个状态，内部有多个状态机，所有这些复杂性都内置在系统中。为了理解系统的工作方式，让我们谈谈一个非常简单的实时例子。现在我们处于快乐状态，快乐状态也是一种状态，我们接收到了一个。
- en: event called lost money got for it but we received this event and we moved to
    sad state。 We again received an event called gain money and we moved back to happy
    state。 So this is the very simple description of how state machine work but when
    we generated。 the log we didn't want it to write in log that you know I'm in happy
    state I lost money。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 事件称为失去金钱，但我们接收到了这个事件，并转到了悲伤状态。我们又接收到了一个叫做获得金钱的事件，并回到了快乐状态。所以这是状态机工作方式的非常简单的描述，但当我们生成日志时，我们不想在日志中写上“我在快乐状态，我失去了金钱”。
- en: I'm moving to sad state I'm in sad state I gain money I'm moving to happy state
    no。 What we wanted to do is something similar to what black boxes does is that
    we wanted。 to have a encoded information encoded logs and for that we created
    a mapping table something。 very similar to this like you know happy state will
    be represented by one side by two gain。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我正在转向悲伤状态，我处于悲伤状态，我获得了金钱，我转向快乐状态。不，我们想做的是类似于黑盒的功能，我们希望有编码的信息和编码的日志，为此我们创建了一个映射表，类似于这个，你知道快乐状态将用一表示，悲伤状态用二表示，获得金钱用三表示。
- en: and lost money will be represented by Roman one and two and once the log file
    will be generated。 here is how the log file will look like it will be a jump world
    sequence of some characters。 numbers and nobody will be able to make any sense
    of it because they cannot decode it。 And that was extremely beneficial for us
    because we are generating logs in a production system。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 丢失的钱将由罗马数字一和二表示，一旦日志文件生成，日志文件将看起来像跳跃世界的一串字符、数字，没人能理解，因为他们无法解码。这对我们极为有利，因为我们在生产系统中生成日志。
- en: and even if someone accidentally or deliberately get access to these logs it
    is not possible for。 them to decode it。 The other benefit is that you know it
    reduces the logs。 size instead of writing plain text if you write jump world encoded
    short information it will reduce。 the log size。 So this is how logs will be generated
    but to do a black box debugging just generating。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 即使有人意外或故意访问这些日志，他们也无法解码它。另一个好处是，你知道它减少了日志的大小，如果你写跳跃世界编码的简短信息，而不是纯文本，它会减少日志的大小。因此，这就是日志生成的方式，但为了进行黑盒调试，仅仅生成日志是不够的。
- en: logs are not enough we need a complete infrastructure at our end we need data
    structure storage format。 mapping table decoding logic visualizes control basically
    we have to build a complete system at。 our end where we can feed in logs and we
    get the sequence and activity diagrams out of it okay。 So we needed to build a
    complete system it was complex but it was kind of one time job。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 日志不够，我们需要在我们这边构建一个完整的基础设施，需要数据结构、存储格式、映射表、解码逻辑、可视化控制，基本上我们必须在我们这边建立一个完整的系统，以便可以输入日志，并从中得到序列和活动图。好的，因此我们需要建立一个完整的系统，这很复杂，但这算是一次性的工作。
- en: but we needed to build something to be able to see these logs otherwise it's
    very difficult to。 manually decode it and try to get sense of it。 So that was
    the complete idea of black box debugging。 I know you might be thinking it's a
    smart idea and you also know that it will work if we get all。 the information
    it will be easy for us to reconstruct based on the information which we already
    have。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们需要构建一些东西以便能够查看这些日志，否则手动解码并试图理解它是非常困难的。这就是黑盒调试的完整理念。我知道你可能在想这是个聪明的主意，你也知道如果我们获取所有信息，基于我们已有的信息重构会变得容易。
- en: but as the saying goes ideas are good execution is everything。 When we thought
    about black box debugging， the biggest question that came to our mind is about
    performance you might have also guessed。 that performance would be a huge issue
    and we needed disk writes to happen to be able to。 persist the log whether it
    is a file write or database write we needed to write it onto the。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 但正如谚语所说，想法很好，但执行才是一切。当我们想到黑盒调试时，首先想到的最大问题是性能，你可能也猜到，性能会是一个巨大的问题，我们需要进行磁盘写入以便能够持久化日志，无论是文件写入还是数据库写入，我们都需要将其写入。
- en: disk and it's a huge performance issue especially when we want to write such
    a huge amount of logs。 Now we also looked into some of the existing logging strategies
    used by various systems and people。 some of them are called ring buffer circular
    buffer where logs are actually kept in memory before。 writing it onto the disk
    so which means that if you have a circular buffer for let's say one。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 磁盘是一个巨大的性能问题，特别是当我们想要写入如此大量的日志时。现在，我们还查看了一些现有的日志策略，这些策略被各种系统和人们使用。其中一些被称为环形缓冲区，日志实际上在写入磁盘之前保存在内存中，这意味着如果你有一个环形缓冲区，比如说一个。
- en: M besides you will wait for one Mb to fail before writing it into the disk but
    for us this was a。 problem we cannot do that because to be able to behave like
    black boxes we needed real time logs。 especially for state transition and events
    so if an event is being triggered we need to write that log。 because if something
    goes wrong at that time we will lose that information which means that。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: M 另外，你会在写入磁盘之前等待一兆字节的失败，但对我们来说这是一个问题，我们无法这样做，因为要能够像黑盒一样工作，我们需要实时日志，尤其是状态转变和事件，因此如果事件被触发，我们需要写入那条日志。因为如果那时出现问题，我们将失去那条信息。
- en: we need some of the things to be written in real time of course there were few
    things which can。 hold on for a while but state transition and receiving an event
    is something we needed to be。 present in real time。 So here is how the architecture
    of our black box debugging looks like we had a。 totally different dedicated server
    reachable via TCP for the logging and we had our production。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要某些东西实时写入，当然有些事情可以稍等，但状态转换和接收事件是我们需要实时存在的。因此，这就是我们的黑箱调试架构的样子，我们有一个完全不同的专用服务器，通过
    TCP 可访问用于日志记录，而我们的生产。
- en: code running in a different place so the different place could be our own servers
    or some of the。 servers in the cloud they are in a totally different space and
    this dedicated log server is in a。 different space。 So far so good but we were
    still skeptical whether this could work so what we。 did is that you know we gave
    it a first try with file write I mean receiving the TCP。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 代码在不同的地方运行，这些不同的地方可以是我们自己的服务器或云中的一些服务器，它们处于完全不同的空间，而这个专用日志服务器也在不同的空间。到目前为止一切都很好，但我们仍然怀疑这是否可行，因此我们首先尝试了文件写入，也就是接收
    TCP 套接字缓冲区并将其写入文件，正如你可能猜到的那样，这花费了很多时间，并且这是预料之中的。
- en: socket buffer and writing it into a file and as you might have guessed it took
    lots of time。 and it was expected also。 Second was SQL database right and of course
    it was better than file。 writes because it totally depends upon how you create
    this schema whether you can use async and。 other options。 Now one thing for us
    reading was not an issue so creation of join， story。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个是 SQL 数据库写入，当然比文件写入要好，因为这完全取决于你如何创建这个架构，是否可以使用异步和其他选项。对我们来说，读取不是问题，所以创建连接，故事。
- en: data was not an issue for us because we didn't want it to read in real time。
    For us writing the。 logs was the biggest thing it was better but still not up
    to the mark as far as performance is concerned。 So we gave it a third try with
    a no SQL database right it was generally better but not always so。 again it depends
    upon the type of data you want to use and depends upon how you put the data how。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 数据对我们来说不是问题，因为我们不想实时读取。对我们来说，写日志是最重要的，虽然有所改善，但在性能上仍未达到标准。因此，我们用无 SQL 数据库进行了第三次尝试，总体上更好，但并不总是如此。这再次取决于你想使用的数据类型以及如何放置数据。
- en: you rearrange the data so basically data engineering matters over here。 Now
    I am not taking the name of， SQL and no SQL databases because we are not judging
    the database we are not benchmarking them。 What we had is a different kind of
    problem which we were trying to solve it has nothing to do with。 the capability
    or usability of our database。 So this is how it looked like but still the performance。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你重新排列数据，所以基本上数据工程在这里很重要。现在我不提 SQL 和无 SQL 数据库的名称，因为我们并不是在评判数据库，也不是在基准测试它们。我们面对的是一种不同类型的问题，试图解决的与数据库的能力或可用性无关。因此，这就是它的样子，但性能仍然。
- en: was an issue。 Now the performance impact was still beyond acceptable limit so
    we were in。 words of discarding this idea before that we thought of trying no
    SQL in memory database writes。 So in memory databases we are not the first choice
    because it is limited by the memory。 of the system which is much much lesser as
    compared to disk space of the system。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个问题。现在性能影响仍然超出了可接受的限制，因此我们在考虑放弃这个想法之前，想到尝试无 SQL 内存数据库写入。所以，内存数据库并不是我们的首选，因为它受到系统内存的限制，而系统的内存远远低于磁盘空间。
- en: So it was not possible， for us to store all the data in the memory so we came
    up with a trick。 What we did is that you， know we allowed no SQL in memory database
    to listen to the TCP connection and receive all the logs。 and store it and what
    we did is that we run a batch system behind the scenes which we will trigger。
    after some time or when the memory usage goes beyond a acceptable limit it will
    run it will put the。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们无法将所有数据存储在内存中，因此想出了一个技巧。我们所做的是，让无 SQL 内存数据库监听 TCP 连接，接收所有日志并存储它，我们的后台运行一个批处理系统，当内存使用超出可接受的限制时，它会被触发。
- en: data into a persistent disk so in that way this was working。 So finally this
    gave us some of the。 acceptable performance limit。 Now one caveat if you just
    replace your you know disk database with。 in-memory database and expect a huge
    performance gain this is not going to happen you need to。 engineer how you want
    to store data in memory database also because data structures if they。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 将数据转移到持久化磁盘，这样就能正常工作。因此，最终这给了我们一些可接受的性能极限。现在有一个警告，如果你仅仅将你的磁盘数据库替换为内存数据库，并期望获得巨大的性能提升，这是不可能的。你还需要设计如何在内存数据库中存储数据，因为数据结构如果。
- en: start taking more time it will negate the benefits of in-memory database so
    we didn't got perfect。 results in first go we had to do some kind of data engineering。
    Now this was in acceptable limits。 but we thought that you know can we improve
    the performance bit more we came up with an idea and。 it actually indeed improved
    the performance。 So the optimization is that our production code is。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果开始花费更多的时间，这会抵消内存数据库的好处，所以我们在第一次尝试时并没有得到完美的结果，我们不得不进行一些数据工程。现在这在可接受的范围内，但我们想知道是否可以进一步改善性能，我们提出了一个想法，并且确实改善了性能。因此，优化是我们的生产代码是。
- en: running into different servers maybe in cloud maybe in our own premise。 What
    we did is that we。 created as instance of in-memory DB within that server itself。
    So logs will be written in this。 in-memory DB within that server where the production
    code is running and there will be a bad job which。 will take the data from this
    in-memory and transfer it into a physical database。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在不同的服务器上运行，可能是在云中，可能是在我们自己的场地。我们所做的是在那台服务器内部创建一个内存数据库的实例。因此，日志将被写入这台服务器内部的内存数据库，其中生产代码正在运行，并且会有一个糟糕的任务将从这个内存中提取数据并转移到物理数据库。
- en: So this bad job will， be running in each and every server。 Now I would like
    to share one observation and that's a very， important information。 So within a
    server the communication will be fast but if we replaced in。 memory DB with another
    disk DB the performance difference is sometimes negligible and it。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这个糟糕的任务将在每一台服务器上运行。现在我想分享一个观察，这是一个非常重要的信息。服务器内部的通信会很快，但如果我们用其他磁盘数据库替代内存数据库，性能差异有时几乎可以忽略不计。
- en: exactly depends upon that kind of data we are writing amount of data we are
    writing especially。 if you are using some SSDs the performance difference is non-countable
    for a small amount of data but。 we had to end up using in-memory DB because you
    know in a disk DB you need to write it on the disk。 as well as read from the disk
    so that your bad job can transfer it onto a physical DB。 In in-memory。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这确切地取决于我们写入的数据类型和数量，特别是如果你使用某些SSD，小数据量的性能差异几乎不可计量。但我们最终不得不使用内存数据库，因为在磁盘数据库中，你需要将数据写入磁盘，同时从磁盘读取数据，以便你的糟糕任务可以将数据转移到物理数据库中。在内存中。
- en: DB you have to read from the memory itself which is again bit faster so overall
    it turned out to be。 faster。 So that's on what we did and I hope that I was able
    to explain you in this particular talk。 Now before I close some caution about
    black box debugging it's generally a very complex undertaking。 so you are just
    creating a short-lived a small project maybe it's not a best idea to use this。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库你必须从内存中读取，这又快了一点，所以总体上结果显示它变得更快。这就是我们所做的，我希望在这个特定的讨论中能够向你解释清楚。在结束之前，关于黑箱调试的一些警告，这通常是一个非常复杂的工作。因此，如果你只是创建一个短暂的小项目，可能不太适合使用这个。
- en: particular thing it is good for long-term or critical system。 Again even if
    you are writing in-memory， it will take some time even if nanosecond millisecond
    but it will take some time and if you can afford。 that it's a good idea to write
    all those logs it will help you not only in understanding the problems。 in the
    production system but will also help you in understanding the behavior of the
    system。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个特定的事情对长期或关键系统是有好处的。再次强调，即使你是在内存中写入，它也会花费一些时间，即使是纳秒或毫秒，但总会需要一些时间。如果你能承受的话，写入所有这些日志是个好主意，它不仅会帮助你理解生产系统中的问题，还会帮助你理解系统的行为。
- en: which you can look and think about optimizing it。 Third and final thing this
    is not limited to。 just Python you can use this particular idea of black box debugging
    in almost any programming。 language and all the database provides driver to write
    in it from any other programming language。 including in memory database。 So that's
    all I had for this particular talk thanks a lot for listening。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以查看并考虑如何优化它。第三个也是最后一个，这并不仅限于Python，你几乎可以在任何编程语言中使用这种黑箱调试的理念，所有的数据库都提供驱动程序，可以用其他编程语言进行编写，包括内存数据库。因此，我在这个讲座中就这些内容，谢谢大家的倾听。
- en: thank you picon 2020 for providing this opportunity thanks a lot good day take
    care， [ Silence ]。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢Picon 2020提供这个机会，非常感谢，祝你有美好的一天，保重，[沉默]。
- en: '![](img/9bba88217c914fc5eafd190f5aecd9b1_3.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9bba88217c914fc5eafd190f5aecd9b1_3.png)'
