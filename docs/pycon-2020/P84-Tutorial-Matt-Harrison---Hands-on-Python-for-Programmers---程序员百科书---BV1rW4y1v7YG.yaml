- en: P84：Tutorial Matt Harrison - Hands-on Python for Programmers - 程序员百科书 - BV1rW4y1v7YG
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P84：教程Matt Harrison - 程序员的动手Python - 程序员百科书 - BV1rW4y1v7YG
- en: Okay， welcome to Hands-on Beginning Python。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，欢迎来到动手开始Python教程。
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_1.png)'
- en: We're going to talk about making a COVID-19 plot。 So this is probably a little
    bit different than other tutorials that you've been in。 There aren't any slides
    for this。 So this is a highly interactive Hands-on tutorial。 The idea here is
    that we'll talk about code and I'll demo it and you follow along on your。 own
    machine。 So this should work on a Windows machine， on a Mac machine or on a Linux
    machine。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论制作COVID-19图表。这可能与您参与过的其他教程略有不同。这里没有幻灯片，所以这是一个高度互动的实践教程。我们会讨论代码，我会演示，你在自己的机器上跟着做。这应该适用于Windows、Mac或Linux机器。
- en: You just need to get your environment ready。 And the main thing to get your
    environment ready is to have a window or to have Python。 installed and to have
    some understanding of how to move around from the command line using。 the command
    prompt or from the terminal in Linux or Mac。 Little bit about me。 My name is Matt
    Harrison。 I run a company called Metasnake， also an author。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你只需准备好你的环境。准备环境的主要步骤是安装Python并了解如何通过命令提示符或Linux、Mac的终端进行操作。关于我自己，我叫Matt Harrison，经营一家名为Metasnake的公司，同时也是一名作者。
- en: So I've written a couple books on Python and data science and I teach people
    how to leverage。 Python and in corporate training environments。 Also teach them
    how to leverage data and data science。 make models， clean data， understand， what
    their data is telling them。 And up until recently I've been doing a lot of live
    training and now that's sort of shifted。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我写过几本关于Python和数据科学的书，并教人们如何在公司培训环境中利用Python。此外，我还教他们如何利用数据和数据科学，建立模型、清理数据，理解他们的数据所传达的信息。直到最近，我一直进行大量的现场培训，现在这有所转变。
- en: to virtual training and whatnot。 But this class that we're going to do is similar
    to a lot of stuff that I do in my corporate。 training where we have a portion
    where it's very hands-on and the idea here is that I。 can tell you something all
    day or you could look at slides all day and it might be interesting。 right？ But
    most of it's going to go in one ear and out the other。 But if you can try it。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 对于虚拟培训等。但我们要进行的课程与我在公司培训中进行的许多内容相似，我们有一部分是非常实践的，想法是我可以整天告诉你一些事情，或者你可以整天看幻灯片，这可能会很有趣，对吧？但大部分内容可能会听进去又忘掉。如果你能试一试。
- en: I'm a firm believer that if you actually do the muscle memory。 then it's going
    to help you master it better。 So I've got a directory here and I'm just making
    sure that Python is installed to type Python。 3 on Mac or on Linux and you should
    see that Python is installed。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我坚信，如果你真的去做这些肌肉记忆，那么它会帮助你更好地掌握。所以我这里有一个目录，我只是确保输入Python 3在Mac或Linux上，你应该看到Python已安装。
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_3.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_3.png)'
- en: So you should have a directory somewhere where you want to follow along and
    type Python 3。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你应该在某个地方有一个目录，准备跟着并输入Python 3。
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_5.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_5.png)'
- en: I'll show it on Windows as well。 On Windows you don't have to type Python 3
    just Python and you'll note that this has Python。 3。6 installed on my Windows。
    I'm going to quit out of here。 Now some of you might have installed on Windows
    and it might not work。 So one common thing I see when I'm teaching people， so
    they installed on Windows but there's。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我也会在Windows上展示。在Windows上，你不需要输入Python 3，只需输入Python，你会注意到我的Windows上安装了Python
    3.6。我现在退出这个。你们中的一些人可能在Windows上安装了Python，但可能无法正常工作。一个常见的问题是，有人安装了Python，但没有。
- en: an option on Windows to add Python to your path that hasn't been checked normally
    by。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上有一个选项可以添加Python到你的路径，这个选项通常没有被选中。
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_7.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_7.png)'
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_8.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_8.png)'
- en: default。 And so I'm going to demo what happens if you didn't add to your path
    by typing "Bython"。 and it says "Bython is not recognized as internal command。"。
    This is typically a problem if you "installed Python but did not add it to your
    path。"。 So the easiest way to add it to your path is to actually reinstall if
    you have the same。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，如果你没有将其添加到路径中，输入“Bython”会显示“Bython不是内部命令”。如果你“安装了Python但没有将其添加到路径中”，通常会出现这个问题。因此，添加到路径的最简单方法实际上是重新安装，如果你有相同的版本。
- en: installer that you use to install Python。 You can just do， you can click that，
    double click it。 it'll say "Do you want to fix your， install？"， That's a little
    bit quicker than just doing a full on reinstall but you want to make sure。 on
    the first page of the Wizard of Installation for Windows there's a little checkbox
    that。 says "Add Python to your capital P-A-T-H。"， And if you do that you should
    be able to run Python from the command line。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你用来安装Python的安装程序。你可以点击它，双击，它会问你“你想修复你的安装吗？”，这比完全重新安装要快一点，但你要确保。在Windows安装向导的第一页，有一个小复选框，上面写着“将Python添加到你的大写P-A-T-H。”，如果你勾选这个，你应该能够从命令行运行Python。
- en: Why is it important to run Python from the command line？
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么从命令行运行Python很重要？
- en: I'm a firm believer that if you want to be proficient in Python you should know
    how to。 use the command line because a lot of tools are run from the command line。
    We'll be demoing a lot of them today in our course。 We'll be demoing creating
    virtual environments。 We'll be demoing running code coverage and running tests
    and all those are done from。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我坚信，如果你想熟练掌握Python，你应该知道如何使用命令行，因为许多工具都是从命令行运行的。今天我们将在课程中演示许多工具。我们将演示创建虚拟环境，运行代码覆盖和运行测试，所有这些都是从命令行完成的。
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_10.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_10.png)'
- en: the command line。 If you're not comfortable from the command line I highly encourage
    you to try it out and。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行。如果你对命令行不熟悉，我强烈鼓励你尝试一下。
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_12.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_12.png)'
- en: get comfortable from it。 Also believe that if you understand how things are
    going underneath the covers and abstractions。 such as IDs and what not are going
    to be easier to use because you're going to know what they're。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让自己适应它。还要相信，如果你理解背后的机制和抽象，例如ID等，将会更容易使用，因为你知道它们的工作原理。
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_14.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_14.png)'
- en: doing behind the scenes。 So if Windows is not working for you and you're following
    along on Windows now it'd。 be a great time to pause the video， go and install
    Windows， reinstall Python on it and。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在后台进行操作。所以，如果Windows对你不起作用，现在在Windows上跟着操作，那是一个很好的时机暂停视频，去安装Windows，重新安装Python。
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_16.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_16.png)'
- en: make sure it's working。 I'll be demoing today on Windows and on Mac。 If you're
    on Linux。 Linux is very similar to what I'm doing with Mac。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 确保它能正常工作。今天我将在Windows和Mac上演示。如果你在Linux上，Linux与我在Mac上做的非常相似。
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_18.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_18.png)'
- en: Again， we're using Python 3 there instead of Python because a lot of Mac or
    Linux distributions。 include Python 2 as well。 So Python 3 is just a little bit
    more specific there。 So make sure that you can run that if you can't do it on
    Linux， should be able to run。 Python 3 on Linux if you can't use the correct command
    to install it on Mac。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 再次提醒，我们在这里使用Python 3而不是Python，因为许多Mac或Linux发行版也包括Python 2。因此，Python 3在这里更加具体。如果你不能在Linux上运行，它应该能够在Linux上运行Python
    3，如果你无法在Mac上使用正确的命令安装。
- en: You'll need to install Python 3。 You can use homebrew or you can go to Python。org
    and install Python。 Make sure that that is working before continuing with the
    tutorial。 Okay。 I'm going to pretend I'm a motivational speaker and do my little
    Dr。 Mom should be。 able to do this when I'm teaching people and training them。
    So the D in Dr。 Mom。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '你需要安装Python 3。你可以使用homebrew，或者去Python.org安装Python。在继续教程之前，确保它能正常工作。好的，我假装自己是一个励志演讲者，并且做我应该做的Dr.
    Mom。 '
- en: this little acronym about learning is to decide。 Decide you want to learn。 For
    the next little bit。 if you're following along you're going to be here and this
    is。 an intensive environment so decide you want to do it。 Next part is our relax。
    Pylons can be frustrating programming， can be frustrating and you can have errors
    and。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 关于学习的小首字母缩略词是决定。决定你想学习。在接下来的时间里，如果你跟着一起，你会在这里，这将是一个密集的环境，所以决定你想要这样做。下一部分是放松。编程
    Python 可能很令人沮丧，你可能会遇到错误和。
- en: so you need to relax。 Also a lot of people come to Python from other languages
    that might be a little bit。 different。 And so if Python is a little bit different
    don't try and force your other language into。 Python but take a deep breath and
    realize that Python is what it is。 We'll try and show some of the functionality
    of Python in some ways for interacting with。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你需要放松。另外，很多人是从其他语言转到 Python 的，可能会有些不同。因此，如果 Python 有些不同，不要试图强迫你使用的其他语言适应 Python，而是深呼吸，意识到
    Python 就是 Python。我们会尝试以某种方式展示 Python 的一些功能来进行交互。
- en: Python that might be a little bit different than what you're used to in some
    of your。 other environments。 Okay， the M， the first M in Dr。 Mom is for what's
    your motivation。 If you can visualize what your motivation is that's going to
    make it better for you to。 have a better learning experience。 So right now， Python
    is a popular language。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Python 可能与您在其他环境中习惯的有些不同。好的，Dr. Mom 中的第一个 M 是关于你的动机。如果你能想象出你的动机，这将使你有更好的学习体验。所以现在，Python
    是一种流行的语言。
- en: There's a lot of demand for Python and we'll see that once you learn Python
    you can leverage。 a lot of tools you can stand on the scrollers of giants。 So
    if you can just take a minute and think about why you want to do this that can
    help。 you follow along and learn better。 The O is for observe。 Contrary to popular
    belief。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的需求量很大，一旦你学会 Python，你可以利用许多工具，站在巨人的肩膀上。因此，如果你能花一分钟思考一下你为什么想要这样做，这可以帮助你更好地跟随和学习。O
    是观察。与流行观点相反。
- en: humans are not good at multitasking。 So if you've got other things that are
    distracting you， again。 there's no slides in this。 So I'm going to be typing a
    bunch of code expecting you to follow along and learn by。 following along。 And
    if you're distracted that's going to make learning a little bit harder。 So my
    ask would be to remove those distractions at this point。 And finally。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 人类不擅长多任务处理。因此，如果你有其他分心的事情，再次。这里没有幻灯片。所以我将输入一堆代码，期待你跟着一起学习。如果你分心，这将使学习变得更加困难。所以我希望此时能消除这些干扰。最后。
- en: the last M is for the mechanics。 I can talk to you all day long but it's probably
    going to go one in one ear and out the other。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个 M 是关于机制。我可以整天和你谈话，但这可能会一耳进一耳出。
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_20.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_20.png)'
- en: So I'm a huge proponent of trying things out and I want to give you the muscle
    memory and。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我非常支持尝试新事物，我想给你肌肉记忆和。
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_22.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_22.png)'
- en: let you type out a bunch of Python code。 So we're going to work on that today。
    Write a bit of Python code and explain what's going on and some of the errors
    and some of。 the issues that you might run into。 I want to empower you to leverage
    the tools and understand what's going on as well。 One other thing to be aware
    of is we're going to talk about Python today。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让你输入一堆 Python 代码。所以我们今天会在这方面努力。写一点 Python 代码，解释发生了什么，一些错误和可能遇到的一些问题。我想让你能够利用这些工具，理解发生了什么。另一个需要注意的事情是，今天我们将讨论
    Python。
- en: The purpose is to talk about Python。 You'll probably see some things that will
    be easier done in pandas or other tools or。 other libraries。 So obviously we could
    do a lot of what we're doing in pandas with a few lines of code。 But the purpose
    here is not to talk about pandas。 My pandas tutorial wasn't accepted by Python
    committee but my Python one was。 So I want to talk about some of the basic data
    structures and other features in Python。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 目的就是谈论 Python。你可能会看到一些在 pandas 或其他工具或库中更容易完成的事情。因此，显然我们可以用几行代码在 pandas 中完成我们正在做的许多事情。但这里的目的不是谈论
    pandas。我的 pandas 教程没有被 Python 委员会接受，但我的 Python 教程被接受了。因此，我想讨论 Python 中的一些基本数据结构和其他特性。
- en: that you can leverage and that mastery of these will allow you to be a better
    programmer。 Not saying that the code that we're creating here is necessarily going
    to be production。 or what I would do if I was doing a consulting gig or what not。
    But I think there is a lot that we can learn from writing this code about how
    Python works。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以利用这些知识，而掌握这些将使你成为更好的程序员。并不是说我们在这里创建的代码一定会进入生产环境，或者是我在做咨询工作时会如何做。但是我认为我们可以从编写这段代码中学到很多关于
    Python 工作原理的知识。
- en: under the covers。 Some of the basic data structures， how to interact with Python，
    how to debug。 how to， write tests， how to understand how your code is working，
    etc。 So let's get started。 I want to share a little reference that might help
    you along the way。 This is the tiny Python notebook。 This is a reference that
    when I'm doing live training。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后。一些基本的数据结构，如何与 Python 交互，如何调试，如何编写测试，如何理解你的代码是如何工作的等等。所以让我们开始吧。我想分享一个小参考，可能会在此过程中帮助你。这是一个微型
    Python 笔记本。当我进行现场培训时，这是一个参考资料。
- en: I typically give people a physical， copy of it。 But the source here is that
    this GitHub link。 And so I'll paste that into this read me here and you'll have
    access to that。 This is a nice little reference。 It talks about all the syntax
    in Python three eight and will refer to it a bit during this。 course。 And then
    go back and it will show you how a bunch of this standard data structures work。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我通常会给人们一份实体副本。但这里的源链接是这个 GitHub 链接。所以我会将其粘贴到这个读我文件中，你将能访问到它。这是一个不错的参考。它讲述了 Python
    3.8 中的所有语法，我们在这个课程中会稍微提到它。然后再回去，它会展示这些标准数据结构的工作方式。
- en: as well。 I'm also putting in a link here to this bitly link。 This is a drop
    box share。 So everything that I create today will be available in this drop box
    share。 You can go to that drop box share。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我还在这里放了一个 bitly 链接。这是一个 Dropbox 分享。因此，今天我创建的所有内容都会在这个 Dropbox 分享中可用。你可以访问这个
    Dropbox 分享。
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_24.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_24.png)'
- en: You can download this read me that I'm typing in right now that has these URLs
    inside the。 share will also have the files that we create。 It will have the test
    files that we create。 And it will have coverage results and whatnot。 Okay。 so
    if you click on this Python three eight here， I'm going to show you one section。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以下载我现在正在输入的这个读我文件，其中包含这些网址。分享中也会有我们创建的文件。它会包含我们创建的测试文件。并且会有覆盖率结果等内容。好的，所以如果你点击这里的
    Python 3.8，我将展示一个部分。
- en: that's very useful。 We're going to make virtual environments。 Environments are
    a way to isolate or sandbox project requirements from one another。 So here's the
    section on environments in here。 And we're going to make a virtual environment
    here。 The reason we're doing this is because we're going to be using some third
    party libraries， today。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常有用。我们将创建虚拟环境。环境是一种将项目需求相互隔离或沙箱化的方式。这里有关于环境的部分。我们将在这里创建一个虚拟环境。我们这样做的原因是因为今天我们将使用一些第三方库。
- en: And if you've got multiple projects， depending on those third party libraries，
    you don't want。 them to come flick with one another。 So I'll show how to do it
    on my Mac here。 And the way to do on the Mac is very similar to how you do on
    Linux。 And then we'll show how to do on windows as well。 So I'm in my terminal。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有多个项目，依赖于这些第三方库，你不希望它们互相干扰。所以我将展示如何在我的 Mac 上做到这一点。在 Mac 上的操作与在 Linux 上非常相似。然后我们也会展示如何在
    Windows 上操作。因此，我在我的终端中。
- en: And I'm just going to type Python three dash m Vm and the dash m there says
    run this module。 the VM module that's found somewhere in the past that Python
    looks for for libraries。 So rather than loading as a library， it's going to execute
    it。 We'll see how there's a slight distinction between executing and loading as
    a library。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我只需输入 Python 3 -m Vm，-m 表示运行这个模块。VM 模块在过去某处，Python 会查找库。因此，它不是作为库加载，而是将其执行。我们将看到执行与作为库加载之间有些微的区别。
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_26.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_26.png)'
- en: later。 We do the dash H command here。 This tells us all the options we can do。
    But basically we're just going to put it in a we're just going to specify a directory。
    Now normally I would put it in the current directory of my project and I just
    make a directory。 called env like this。 And this would be the command。 So this
    is the command I recommend you run。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后。我们在这里使用 dash H 命令。这告诉我们可以做的所有选项。但基本上我们只会将它放在一个，我们只是指定一个目录。现在通常我会把它放在我的项目的当前目录中，我只是创建一个叫
    env 的目录。像这样。这就是我推荐你运行的命令。
- en: I'm not going to do this though because again， this directory is being synced
    to Dropbox。 And I don't want to share my virtual environment。 Virtual environments
    aren't meant to be shared。 They're meant to be easily created。 So I'm actually
    going to put this in the temp directory and I would recommend you not do。 this。
    I'm putting it there again because I don't want to sync to Dropbox。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 不过我不会这样做，因为这个目录正在与 Dropbox 同步。我不想分享我的虚拟环境。虚拟环境并不是为了共享。它们是为了方便创建的。所以我实际上会把它放在临时目录中，并建议你不要这样做。我再把它放在那里是因为我不想同步到
    Dropbox。
- en: But also I create these all the time and so they're easy for me。 However。 if
    you put yours here in the temp directory when you reboot your machine it， will
    disappear。 So you probably don't want to do this。 I'm just putting it here again
    to not sync it。 Okay。 so after I've done run the command it's going to make a
    little install of Python。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 不过我经常创建这些，所以对我来说很简单。然而，如果你把你的放在临时目录中，当你重启机器时，它会消失。所以你可能不想这样做。我只是再放在这里以免同步。好的，所以在我运行命令后，它将安装一个
    Python。
- en: in that directory and it will copy over some binaries in there as well。 I'm
    going to use the source command to activate the binaries。 But before I do that
    I'm going to run this which Python 3 command。 This tells me which Python I'm currently
    using when I invoke Python 3。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在那个目录中，它也会复制一些二进制文件进去。我将使用 source 命令来激活这些二进制文件。但在我这样做之前，我会运行这个 which Python
    3 命令。这告诉我当前在调用 Python 3 时正在使用哪个 Python。
- en: You can see I'm using a Python from Anaconda。 Now if I source this virtual environment
    and there's a bin directory inside of that there's。 an activate file you can see
    that my prompt is changed and now it says emv or the name。 of the virtual environment。
    And when I say which Python now I'm using the Python in my virtual environment。
    So if I were to install packages or what not at this point when I'm activated
    I'm going。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到我正在使用 Anaconda 的 Python。现在如果我激活这个虚拟环境，并且里面有一个 bin 目录，那里面有一个 activate 文件，你可以看到我的提示符已经改变，现在显示为
    env 或虚拟环境的名称。当我说哪个 Python 时，现在我正在使用我虚拟环境中的 Python。所以如果我在这个时候安装包或其他什么，当我激活时，我将。
- en: to put them in this environment。 Let's look at how to do this on Windows。 It's
    very similar on Windows however sources a Unix command it doesn't exist on Windows。
    So on Windows instead of saying Python 3 I just say Python dash mv and then again
    I。 would say env if I was in the directory again this directory is the same directory
    it's the。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 将它们放入这个环境中。让我们看看如何在 Windows 上做到这一点。在 Windows 上非常相似，但是 sources 是一个 Unix 命令，在
    Windows 上不存在。所以在 Windows 上，我只需说 Python dash mv，然后我会说 env，如果我在这个目录中，这个目录就是同一个目录。
- en: drop box share that's synced there。 I'm not going to use this directory here。
    I actually already have one so a virtual environment in my see users mat I have
    a directory。 called env and inside that I have a three six virtual environment
    so this would be the。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个与 Dropbox 同步的共享文件夹。我在这里不会使用这个目录。实际上我已经有一个了，所以我在我的用户目录下有一个叫 env 的虚拟环境，在里面我有一个三点六版本的虚拟环境，所以这将是。
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_28.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_28.png)'
- en: one that I would call env but it's called three six on my Windows machine and
    if I run。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我会称之为 env，但在我的 Windows 机器上它叫三点六，如果我运行。
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_30.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_30.png)'
- en: that will create it and then I can activate it on Windows node I can say there's
    no which。 command on Windows to say which Python I'm using however there is a
    where command and。 so if I type out the where command you can see that it's going
    to show which Python I'm， using。 So here I'm typing out how to activate it you
    can say it says inside of the virtual environment。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 它会创建这个，然后我可以在 Windows 上激活它。我可以说在 Windows 上没有命令可以告诉我正在使用哪个 Python，但是有一个 where
    命令。所以如果我输入 where 命令，你可以看到它将显示我正在使用的 Python。现在我在输入如何激活它，你可以看到它显示在虚拟环境内部。
- en: there instead of bin directory there's a scripts directory and inside that there's
    an activate。 problem just going to run that you can see if I run where Python
    now says I'm running the。 Python from my virtual environment rather than the Python
    that I've installed in program。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，bin 目录被 scripts 目录替代，里面有一个 activate 脚本，我将运行它，如果我运行 where Python，现在显示的是我在我的虚拟环境中运行的
    Python，而不是我在程序中安装的 Python。
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_32.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_32.png)'
- en: files so that's how we activate our virtual environment you can also see that
    my prompt。 has changed on Windows as well so make sure that you have a virtual
    environment created。 and activated to follow along you might want to stop the
    video at this point make sure that。 you have that working again there's the GitHub
    link there if you use that GitHub link to the。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们激活虚拟环境的方式，你还可以看到我的提示符在 Windows 上也发生了变化，所以确保你创建并激活了虚拟环境以便跟上进度，你可能想在此时暂停视频，确保你已经成功运行，GitHub
    的链接在这里，如果你使用那个 GitHub 链接。
- en: book that will show how to do it as well there's the instructions on the GitHub
    you create your。 virtual environment on Windows there's the instructions for creating
    it there's the activation。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一本将展示如何操作的书，此外在 GitHub 上也有相关说明，你可以在 Windows 上创建你的虚拟环境，并且有创建和激活的说明。
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_34.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_34.png)'
- en: for both Unix and Windows so the activation is slightly different because source
    is a bash。 command that doesn't exist on Windows。 Okay at this point I'm going
    to start idle idle as an editor that comes with Python and。 this is the command
    to launch it I say Python 3-m idlelib。idl and this is going to launch。 idle again
    the -m command says look in the places where Python looks for loading files。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Unix 和 Windows，激活方式稍有不同，因为 source 是一个在 Windows 上不存在的 bash 命令。好了，现在我要启动 idle，idle
    是随 Python 一起提供的编辑器，这是启动它的命令，我输入 `Python 3 -m idlelib.idle`，这将启动 idle，再次使用 -m 命令表示在
    Python 查找加载文件的地方。
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_36.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_36.png)'
- en: and there should be an idle lib directory in there and inside of that there's
    an idle。py。 launch that some of you might think well I'll just go to Python and
    click on idle and。 launch it that way and that's not what you want to do why don't
    you want to just click。 on the gooies because the gooies are going to use the
    system Python and we're going to。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 应该在里面有一个 idle lib 目录，里面有一个 idle.py。启动它，有些人可能会想，我只需去 Python 并点击 idle 来启动，这不是你想要的。为什么不想仅仅点击
    GUI 呢？因为 GUI 将使用系统 Python，而我们将会。
- en: be installing third-party libraries we won't have access to them from idle if
    we're using。 our system Python so we want to be sandboxed and that's why we do
    it from the command line。 So you see I've just run this command and I've launched
    idle and here is idle pulls。 up a little window you can see that there's a prompt
    there and there's a cursor that's。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 安装第三方库时，如果我们使用系统 Python，就无法从 idle 访问它们，因此我们希望保持沙箱环境，这就是为什么我们从命令行操作。所以你看到我刚刚运行了这个命令并启动了
    idle，这里是 idle 弹出的一个小窗口，你可以看到有一个提示符和一个光标。
- en: blinking this is often called the REPL。 It will short for read evaluate print
    and loop when we type in code into here Python。 will read it it will evaluate
    it it will print and it will loop it will give us back another。 prompt so you
    can see that typed in my name made a variable I can type in some math operations。
    and it will evaluate that and give us the result of that。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这个闪烁的光标通常称为 REPL，代表读取、评估、打印和循环。当我们在这里输入代码时，Python 会读取它，评估它，打印它，然后循环，它会给我们另一个提示符，所以你可以看到我输入了我的名字，创建了一个变量，我可以输入一些数学运算，它将评估并给出结果。
- en: We're going to be using the REPL a bit throughout today and I want you to get
    used to it that's。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 今天我们将会多次使用 REPL，我希望你能习惯它。
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_38.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_38.png)'
- en: one of the main things I want you to see when we do this class。 Let's launch
    idle on Windows similar command again we say Python instead of Python 3 dash。
    m idle lib。idle same command just for saying Python instead of Python 3 there。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我希望你在这节课中看到的主要内容之一。让我们在 Windows 上启动 idle，使用类似的命令，我们输入 Python 而不是 Python 3
    -m idlelib.idle，命令是一样的，只是说 Python 而不是 Python 3。
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_40.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_40.png)'
- en: Okay when you launch that you're going to get a prompt very similar to what
    we see and。 I can type in name is equal to mat this is the REPL I can do the same
    things on Windows。 or on Mac or on Linux that's one of the nice things about idols
    it comes with you with。 the environment。 Now some of you might be like oh no I
    don't want to use idle I have my editor。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，当你启动这个时，你会看到一个非常类似于我们所见的提示。我可以输入名称等于mat，这是REPL，我可以在Windows、Mac或Linux上做同样的事情，这正是IDLE的优点之一，它为你提供了环境。现在有些人可能会觉得“哦不，我不想用IDLE，我有我的编辑器”。
- en: Yeah editors are somewhat of a religious choice what I would ask is that I don't
    I'm not saying。 that you always use idle what I would say this for this class
    try and follow along using。 idle there's some nice benefits of it because I'm
    going to talk about a couple features of。 idle but then when you get done with
    this class figure out how to do the things that。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，编辑器在某种程度上是一个宗教选择，我想问的是，我并不是说你必须一直使用IDLE，我想说的是，在这门课上，尽量跟着使用IDLE，因为它有一些很好的好处，我会谈论IDLE的几个功能，但在你完成这门课后，想办法在你自己的环境中实现这些功能。
- en: we did with idle with your favorite environment and one of those main things
    is the ability。 to take code and run it in the REPL I'll be demoing that a lot
    today hopefully you'll。 be able to do that in your other environments as well。
    What are some other environments you might want to use I mean let emax is a great
    one but。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在IDLE中做了和你最喜欢的环境相同的事情，其中一个主要的功能是能够在REPL中运行代码。今天我会演示很多这一点，希望你在其他环境中也能做到。你可能想使用的一些其他环境，我的意思是Emacs是一个很好的选择。
- en: a lot of people don't like that there's a steep overhead pie charm is good vs
    code there。 are a lot of tools that you can use for writing Python most modern
    editors have some support。 for Python but again what I recommend is that you learn
    how to take your code and run it。 in the REPL from your environment if you can
    do that you're going to be a lot more productive。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 很多人不喜欢这种情况，因为开销很大，PyCharm不错，VS Code也好，有很多工具可以用来写Python，大多数现代编辑器都有一些对Python的支持，但我再次推荐的是，学习如何在你的环境中运行代码并在REPL中执行。如果你能做到这一点，你会更高效。
- en: and will be demoing a lot of that functionality today so again recommend trying
    idle following。 along with idle and then taking what you learn here and applying
    it to your favorite environment。 Okay so what we're going to do is we're going
    to go to this covid tracking github this is。 a github project that tracks the
    states of the United States and every day they do an。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 今天我将演示很多这样的功能，所以再次建议尝试使用IDLE，跟随IDLE，然后将你在这里学到的知识应用到你最喜欢的环境中。好的，我们要做的是去这个COVID跟踪GitHub，这是一个跟踪美国各州的GitHub项目，他们每天都会进行更新。
- en: update to their data in a csv file that has the number of positives the number
    of tests。 the number of hospitalized people etc so I've been using this data on
    my end to track the。 local Utah growth of covid just because I have I've been
    creating some plots and I haven't。 seen other plots that really do what I want
    and and so there's this 4pm dataset that's。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 更新他们在csv文件中的数据，该文件包含阳性病例、检测数量、住院人数等信息。因此，我一直在使用这些数据跟踪犹他州的COVID增长，因为我一直在创建一些图表，而我没有看到其他图表能够真正满足我的需求，所以有一个4pm数据集。
- en: supposed to be updated every at 4pm Eastern time every day that's a little generous
    it's。 not typically updated at 4pm but it is updated typically daily so it's in
    this data directory。 here so we'll open that and you can see that there are various
    csv or comma separated value。 files in there I'm going to click on this one so
    you can see what it looks like this is。
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 数据应该在东部时间每天的下午4点更新，这有点宽松，通常不是在4点更新，但通常是每天更新，所以在这个数据目录中。我们会打开它，你会看到里面有各种csv文件或以逗号分隔的值文件。我将点击这个，你可以看看它的样子。
- en: the one that I like to use it has daily information but it also has historical
    information for。 every state and it's got a dozen or so columns of various pieces
    of information so the ones。 I find interesting the number of tests the number
    of positive results of the test the。 number of hospitalized people the number
    of deaths and so you can sort of track those growth。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢使用这个文件，它有每日信息，但也有每个州的历史信息，并且有十几个不同的信息列。所以我发现有趣的是检测数量、阳性结果的数量、住院人数、死亡人数等，这样你就可以追踪这些增长。
- en: rates of those one thing that's interesting to me and I'm not an epidemiologist
    but you。 know positive testing tracking positive is sort of an apples to oranges
    comparison across。 state boundaries or whatnot because different states are testing
    in different ways and what。 not so one thing that might be better is is looking
    at hospitalized right that might be。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个我觉得有趣的地方，我不是流行病学家，但你知道，阳性测试跟踪阳性在州界或其他方面的比较有点像苹果与橙子的比较，因为不同州的测试方式不同。所以可能更好的一个方向是查看住院情况。
- en: a more apples to apples comparison in there but you can see here's an example
    of the data。 you've got a date you've got state for every state and you've got
    all these columns there。 are some missing values in there but this is updated
    every day and has the latest stats。 from official sources supposedly so I'm going
    to click on this raw link here this lets us。
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个更直接的比较，你可以看到数据的一个例子。你有日期，有每个州的状态，还有这些列。里面有一些缺失值，但这是每天更新的， supposedly 来自官方来源的最新统计数据，所以我将点击这个原始链接，这样可以。
- en: look at the raw CSV file and I'm going to take that URL and that URL is what
    we're going。 to download our data from so we're going to download this raw data
    here just make a variable。 called URL and paste that value in it now I'm going
    to use Python to download the contents。 of this CSV file I want to be able to
    read the contents and slice and dice it filter it。
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 查看原始的 CSV 文件，我将获取该 URL，而这个 URL 就是我们将下载数据的地方。因此，我们将下载这个原始数据，并创建一个名为 URL 的变量，把这个值粘贴进去。现在我将使用
    Python 来下载这个 CSV 文件的内容，我希望能够读取内容并进行切片和过滤。
- en: and make a plot from this so in order to do this we're going to use a library
    in the standard。 library called URL lib this is a package in the standard library
    there's a module inside。 of that package called request and we're just going to
    alias that as req now I know some。 of you might be thinking why aren't we using
    a third party library to do this we certainly。
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 然后从中生成一个图表。因此，为了做到这一点，我们将使用标准库中的一个库，叫做 URL lib，这是标准库中的一个包，里面有一个叫做 request 的模块，我们将其别名为
    req。现在我知道你们中的一些人可能在想，为什么我们不使用第三方库来做这个，我们当然可以。
- en: could use a third party library like request to do this I'm just going to use
    something。 that's in the standard library because it's a little bit easier to
    use than going off。 and installing another third party tool so we're just aliasing
    it as req this is going。 to make a variable in my namespace called req that's
    pointing to the request module not。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以使用像 requests 这样的第三方库来做这件事，但我只是想使用一些标准库中的东西，因为这比安装另一个第三方工具稍微简单一些，所以我们将其别名为
    req。这将在我的命名空间中创建一个名为 req 的变量，指向请求模块。
- en: that I'm doing this from the REPL and there's nothing wrong with writing code
    from the REPL。 we'll see that after I have written this and tried it out I'll
    probably push it into a。 file so I can reuse it now not that one of the nice things
    about idle is the idle gives。 a syntax highlighting you see the import and as
    or orange so anything that's orange and。
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我在 REPL 中进行这个操作，编写代码没有错。我们将看到，在我写完并尝试之后，我可能会把它推到一个文件中，以便可以重用。现在，idle 的一个优点是，idle
    会给出语法高亮，你看到 import 和 as 是橙色的，所以任何橙色的内容都。
- en: idle is a keyword or syntax and you can't for example I can't make a variable
    called。 imports going to give me an error if I do that you see that I can inspect
    req at this。 point and it says req is a module I'm going to make a variable called
    f in that's just。 going to be pointing to this req I'm going to say open the endpoint
    there this URL this。
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: idle 是一个关键字或语法，例如我不能创建一个名为 imports 的变量，如果我这样做，会给我一个错误。你看到此时我可以检查 req，结果显示 req
    是一个模块。我要创建一个名为 f 的变量，这将指向这个 req，我将说打开那里的端点，这个 URL。
- en: is going to give us a file handle like object that we can read from we're going
    to read。 from that and make a variable called data that has the results of reading
    from that so if。 I do that I now have a variable called data now be careful I
    don't want to print out。 data in the REPL at least not in idle idle has problems
    printing out big things you can。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给我们一个文件句柄对象，我们可以从中读取，我们将从中读取并创建一个名为 data 的变量，存储读取的结果。因此，如果我这样做，现在我有了一个名为 data
    的变量。要小心，我不想在 REPL 中打印出 data，至少在 idle 中不要，idle 打印大东西时有问题。
- en: see that this is almost a quarter of a million characters long and idle will
    just not be。 happy if you print it out so we're not going to print it out but
    you can see that we've。 got like I said a quarter of a million characters I'm
    just going to write some notes here in。 the REPL here so again orange anything
    that's orange in idle that's keyword or syntax。
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到这几乎有二十五万字符，而IDLE如果你打印出来将不会开心，所以我们不打算打印出来，但你可以看到，正如我所说的，有二十五万字符，我将在REPL中写一些注释，再次，任何在IDLE中显示为橙色的内容都是关键字或语法。
- en: will be seeing a lot of that today I'll later show how you can get documentation
    about that。 anything that's purple is in the built-in namespace so we'll see a
    bunch of things that are in。 built-in namespace those are typically functions
    classes and exceptions that Python just has。 those for you and that you can access
    we'll talk about the mechanism for Python to look。
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 今天我们将看到很多这类内容，稍后我会展示如何获取关于它的文档，任何显示为紫色的内容都是在内置命名空间中，因此我们将看到一堆在内置命名空间中的东西，这些通常是Python为你准备的函数、类和异常，你可以访问，我们将讨论Python查找的机制。
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_42.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_42.png)'
- en: things up later in our course if you look at the type of data the type of it
    is bytes so。 when we downloaded this it's downloading binary data typically a
    lot of things these days。 when you download them or they're stored in the file
    they're stored as UTF-8 bytes I'm。 going to use a special tool or feature of Python
    called slicing and I'm going to take。
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们课程的后面部分，如果你查看数据类型，它的类型是字节，因此当我们下载这个时，它是下载的二进制数据，通常现在很多东西在下载时或者存储在文件中时，它们都是以UTF-8字节的形式存储的，我将使用Python的一个特殊工具或功能，称为切片，我将。
- en: that data and I'm going to do the square bracket notation with a zero colon
    100 this。 is called a slice it says start at index position zero go up to but
    not include index。 position 100 and you can see that this returns a byte string
    or binary data you can see。 the B on the left hand side there that indicates that
    this is not a normal string but it is。
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 那些数据，我将使用方括号表示法，写成`[0:100]`，这称为切片，它表示从索引位置0开始，一直到但不包括索引位置100，你可以看到这返回了一个字节字符串或二进制数据，你可以看到左侧的`B`表示这不是一个正常字符串，而是。
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_44.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_44.png)'
- en: a byte string now we probably want to deal with this as a normal string so we'll
    talk。 about dealing with it as a normal string or how to get a normal string out
    of it this。 is probably UTF-8 encoded data about I don't know what the numbers
    are probably 80% of what's。 available on the internet these days is UTF-8 encoded
    so when we will save this to a file。
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可能想将其作为正常字符串处理，因此我们将讨论如何将其作为正常字符串处理，或者如何从中获取正常字符串，这大概是UTF-8编码的数据，我不知道这些数字是什么，可能是目前互联网上大约80%的内容都是UTF-8编码的，因此当我们将其保存到文件中。
- en: as a binary we'll write it out as binary but then we'll read it in as a string
    data so。 this is how we write it we're gonna say f out is equal to open you can
    see the open is。 purple so this is a built-in function I'm going to write a file
    called covid。csv and you can。 see that idle pulls up a little tooltip it says
    we can specify the mode the buffering etc so。
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 作为二进制我们将其写出为二进制，但随后我们将以字符串数据的形式读取它，这就是我们如何写入，我们将说`f out`等于打开，你可以看到打开是紫色的，所以这是一个内置函数，我将写一个名为`covid.csv`的文件，你可以看到IDLE弹出一个小提示，说明我们可以指定模式、缓冲等。
- en: our mode we're going to change the mode here and the default mode is for to
    read we don't。 want to read we want to write and we're going to say wb to write
    a binary file we already。 have binary data so it will be easy for us to write
    it we just say f out dot write we're。 going to pass in data into that we enter
    there it's going to spit out a number that's how。
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要在这里改变模式，默认模式是用于读取，我们不想读取，我们想写入，我们将使用`wb`来写入二进制文件，我们已经有了二进制数据，所以写入对我们来说很简单，我们只需说`f
    out.write`，我们将传入数据进去，进入后它将输出一个数字，这就是如何。
- en: many bytes it wrote out now one thing you want to be sure to do is after you've
    written。 out data you want to make sure you close the file so we can say f out
    dot close there and。 at this point on our disk there should be a file called covid。csv
    that has been written。 out with the bytes that we just got I'm going to use my
    REPL here or my terminal and I'm。
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 写出了多少字节，现在你想确保的一件事是，在你写出数据后，你要确保关闭文件，因此我们可以说`f out.close`，此时在我们的磁盘上应该有一个名为`covid.csv`的文件，里面写入了我们刚获得的字节，我将使用我的REPL或终端。
- en: going to inspect what's in my directory and make sure just check to make sure
    that we。 have this covid。csv file in there。 Okay so it looked like that worked
    let's what I want to do now is make a file I'm going。 to make it I went up to
    new file and I'm going to take my code from the REPL and I'm going。 to kind of
    refactor it pull it from the REPL and put it into a new file you can do this。
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我将检查我的目录中有什么，并确保检查一下我们是否有这个covid.csv文件。好的，看起来工作正常，我现在想做的是创建一个文件，我会创建它。我上到新建文件，将从REPL中提取代码并进行重构，放入新文件中，你可以这样做。
- en: on windows or on Mac or on Linux you just go up to file and you say new file
    now this。 looks somewhat similar to the REPL but it's not a REPL note that if
    I say names equal。 to mat and then hit name or type 2 plus 5 it doesn't print
    the result right so it's not。 a pure REPL like this REPL is over here this is
    actually an editor and this is where we。
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows、Mac或Linux上，你只需上到文件，然后说新建文件。现在这看起来与REPL有些相似，但它不是REPL。请注意，如果我说names等于mat，然后按name或输入2加5，它不会打印结果，对吧？所以这不是一个纯粹的REPL，这里的REPL在另一边，这实际上是一个编辑器，我们在这里。
- en: type Python code we write Python code and then we execute this file this file
    that we。 edit a little bit different than the REPL but one of the things I want
    you to be aware。 of is the relationship between editor and REPL I'll show that
    you can actually take。 code that's in your editor and run it in the REPL that's
    very useful so now what I'm doing。
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 输入Python代码，我们编写Python代码，然后执行这个文件，这个文件与REPL略有不同，但我希望你注意编辑器与REPL之间的关系。我将展示你如何将编辑器中的代码在REPL中运行，这非常有用，所以现在我在做什么。
- en: is I'm doing my refactoring I'm just copying the code and I'm going to paste
    it over into。 my editor window so I'm going to copy our import we're going to
    copy this little line。 here to open the URL we're going to copy the line to read
    our data and we'll also copy。 the code to write out our file as well so note that
    I've got some hard coded values in there。
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我在进行重构时，正在复制代码并粘贴到我的编辑器窗口中，所以我要复制我们的import，我们将复制这一小行打开URL的代码，我们将复制读取数据的行，也会复制写出文件的代码，所以请注意我在里面有一些硬编码的值。
- en: I've got a URL variable in there I've got a covid。csv file name string that's
    what you。 can consider a magic number a number or a value that's hard coded in
    there that has。 meaning to the person who wrote the code but not necessarily to
    someone else so we'll have。 to fix that also this is all happening at the global
    level I'd probably prefer it to。
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里有一个URL变量，还有一个名为covid.csv的文件名字符串，这可以被视为一个魔法数字，一个硬编码在里面的值，对写代码的人来说有意义，但对其他人未必有意义，所以我们也需要修复这个问题。这一切都是在全局级别上发生的，我可能更希望它在。
- en: happen at the non-global level so we'll make a little function to deal with
    that and the。 function will have to be parameterized here and we'll pass in the
    URL and that we want。 to fetch the data from and we'll pass in the name of the
    CSV file that we want to save。 it to as well。 Okay so what I'm going to do is
    make a function here and my function is I'll just show you。
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在非全局级别上发生，所以我们将创建一个小函数来处理这个问题，函数将需要参数化，我们将传入要获取数据的URL，以及我们希望保存的CSV文件名。好的，我将创建一个函数，我会给你展示。
- en: how a function works you can see I type def I'm going to make a very basic function。
    I'm going to type def add like this。 Okay so over here this is all here so this
    is a special sensor keyword here I'm making。 a function called add and it has
    X and Y these things following the print or inside the。 parentheses are called
    parameters these are what we're passing into the function function。
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到我输入了def，我要创建一个非常基础的函数。我将这样输入def add。好的，这里所有的内容都在这里，这是一个特殊的传感器关键词，我正在创建一个名为add的函数，它有X和Y，这些在打印或括号内的内容称为参数，这些是我们传递给函数的内容。
- en: you're going to give us a black box or box you pass things into it and it passes
    things， out of it。 Now this function isn't very useful it does XY but it doesn't
    return anything so if I。 said like add 10 and 20 down here it doesn't return anything
    because I didn't use the return。 statement so what I'm going to do is I'm going
    to edit this and fix it so I'm going。
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 你将给我们一个黑箱或盒子，你把东西传入其中，它会把东西传出来。现在这个函数不是很有用，它做XY但不返回任何东西，所以如果我在这里说add 10和20，它不会返回任何东西，因为我没有使用return语句，所以我将编辑它并修复。
- en: to put my cursor here's a feature of I like to put my cursor back up here to
    this code。 and I can hit enter and then when I do that it allows me to edit this
    and now I can change。 it I'll hit enter twice here and now I'm going to hit command
    key on on Mac or you can hit。 alt key or alt alt key on Linux or Windows to get
    the previous command there。
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 把光标放在这里，这是我喜欢的一个功能，我可以将光标放回到这段代码上，然后按回车，这样我就可以编辑它了。我会按两次回车，然后在 Mac 上按命令键，或者在
    Linux 或 Windows 上按 alt 键来获取之前的命令。
- en: Okay so now this is taking in two variables or parameters and it's returning
    to some of。 those so this is a function you can see that def is orange and return
    is orange so these。 are special keywords that allow us to define functions and
    return data from them so I'm。 going to make a function up here and define a function
    called fetch URL it's going to。
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在这个函数接受两个变量或参数，并返回其中的一些数据。所以这是一个函数，你可以看到 def 是橙色的，return 也是橙色的，这些都是特殊的关键字，允许我们定义函数并从中返回数据。我将要在这里定义一个名为
    fetch URL 的函数。
- en: have we're going to say you have to pass a URL and you're going to pass in a
    file name。 here into this line I'm going to put a colon。 Now one thing you need
    to be aware of in Python is when you have a colon at the end of that。 line you
    want to indent everything that's inside of this function here so I can highlight。
    all this I can go up here to format and I can say indent region that will shift
    this over。
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要说的是，你需要传递一个 URL，并且你将传递一个文件名。在这一行中，我将放置一个冒号。现在，在 Python 中需要注意的一件事是，当你在行末有一个冒号时，你需要缩进这个函数内部的所有内容，所以我可以高亮所有这些内容，我可以上去格式化，然后选择缩进区域，这样就会将这些内容向右移动。
- en: in Python we typically end up with four spaces you can see that there's a nice
    clean indentation。 right there so this is the fetch URL function here and now
    what I want to do is I want to。 try this and make sure that it works now right
    here I've got COVID CSV I don't want to do。 that I want to change that to maybe
    F name right there so I'm going to pass in a URL。
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，我们通常使用四个空格，你可以看到这里有一个整齐的缩进。这就是 fetch URL 函数，现在我想尝试一下，确保它可以正常工作。现在在这里我有
    COVID CSV，我不想这样，我想把它改成 F name 所以我将传递一个 URL。
- en: and I'm going to pass in a file name of where I want to save it as so what's
    what I can do。 in idle to run this I'm going to come up here to run and I'm going
    to say run module。 okay it's going to say that I do want to save it and yeah I'll
    say I want to save it。 okay it's going to ask me where I want to save it I'm going
    to save it in the directory。
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 并且我将传递一个文件名，告诉我想要保存的地方。那么在 IDLE 中，我可以怎么做来运行这个程序呢？我会去运行，然后选择运行模块。好的，它会问我是否要保存，我会说是的，我想保存。好的，它会问我想保存到哪里，我将在我工作的目录中保存这个。
- en: I'm working in and then I'm just going to save this as COVID。py okay and over
    here in。 the REPL when I do that you'll see that says restart and at this point
    if I look what's。 available here there's a function in the built-in namespace
    called drr if I look at that I can。 see that there is now my fetch URL tells me
    that fetch URL is now in my namespace so。
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我将把它保存为 COVID.py。好的，在 REPL 中，当我这样做时，你会看到它显示重启，此时如果我查看这里可用的内容，内置命名空间中有一个叫做 drr
    的函数。如果我查看它，我可以看到我的 fetch URL 现在在我的命名空间中。
- en: drr function it's purple it's in the built-in namespace and if you run it by
    itself it。 will tell you what you have access to so there's a bunch of things
    with underscores here but。 there's this function that URL that we have access
    to right here so let's try and run it。 let me just go so I'll just copy I'll just
    try and copy the same URL here let's just say。
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: drr 函数是紫色的，它在内置命名空间中，如果你单独运行它，它将告诉你你可以访问什么。因此，这里有很多带下划线的东西，但这里有我们可以访问的这个 URL
    函数，所以让我们试着运行它。让我复制同样的 URL，假设。
- en: URL is equal to this and I'm gonna say F name is equal to test。csv and I say
    fetch URL and。 I'm gonna say URL and F name okay I think that worked let me just
    validate that and I。 can see that here we have test。csv here so I believe that
    that did work it looks like。 it worked awesome so what we've done here hopefully
    this makes sense I've demoed trying。
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: URL 等于这个，F name 等于 test.csv，然后我说 fetch URL，传入 URL 和 F name。好的，我想这有效，让我验证一下，我可以看到这里有
    test.csv，所以我相信这确实有效，效果不错。所以我们在这里做的事情希望是有意义的，我演示了尝试。
- en: stuff out over here in the REPL and then pushing it over here into code that
    is parameterized。 it's a function and now we can reuse this so now anytime you
    want one to fetch a URL they。 could do this let me just briefly clean this code
    up a teeny bit here if you wanted to。 you could come right here and you could
    put a string immediately following the declaration。
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 将东西放到 REPL 中，然后推送到参数化的代码。这是一个函数，现在我们可以重用它，所以现在每当你想获取一个 URL 时，他们都可以这样做。让我简单清理一下这段代码，如果你想的话。你可以在声明后立即放入一个字符串。
- en: here I'm gonna put a triple quoted string triple quoted string and Python allows
    me to。 spend multiple lines and this string right here is called a doc string
    and this just。 says you know I can put save a URL to a local file and I could
    put in more documentation。 if I wanted to I'm just gonna sort of leave that as
    that here one of the nice things about。
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我将放入一个三重引号的字符串，Python 允许我。跨越多行，而这个字符串就叫做文档字符串，这只是。说你知道，我可以将一个 URL 保存到本地文件中，如果我想的话，我可以放入更多文档。我就把它留在这里，关于这点的好处。
- en: that is if I run this again so I'm gonna have come up here and hit 5 to run
    it again at this。 point the fetch URL now is what's called a doc string and I
    can call this help function。 which is included with Python I can say help I know
    what fetch URL does and it says it says。 it says a URL to a file name and gives
    me the parameters there so this is a nice little。
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，如果我再次运行这个，那么我会来到这里按 5 再次运行它。在这个时刻，`fetch URL` 现在被称为文档字符串，我可以调用这个帮助函数。它是
    Python 自带的，我可以说帮助，我知道 `fetch URL` 做什么，它说它说。它说一个 URL 到一个文件名，并给我参数，所以这是一个不错的小工具。
- en: way to add documentation to your code and be able to inspect it so one thing
    I would hope。 that you come out of this cloud knowing about is the DIR function
    that allows you to inspect。 objects and to help function which allows you to understand
    the documentation for objects。 here so one last thing most most modern Python
    people would not write these three lines of。
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这是向你的代码添加文档并能够检查它的一种好方法，所以我希望你能从这个云中了解到的一件事是 `DIR` 函数，它允许你检查对象，还有帮助函数，它可以让你理解对象的文档。因此，最后一件事是，现代
    Python 使用者通常不会写这三行。
- en: code like this so you always want to make sure you close your files certain
    operating。 systems or all operating systems have a limit on how many files a process
    can have open。 it once and so you might run into that it's pretty high but it's
    possible to run into。 it and so also on some operating systems if you have a file
    open and you don't close it。
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 像这样编写代码，因此你总是想确保关闭你的文件。某些操作系统或所有操作系统对一个进程可以同时打开多少个文件有一个限制。所以你可能会遇到这个，虽然这个限制相当高，但可能会遇到。并且在某些操作系统上，如果你有一个文件打开而不关闭它。
- en: other process can use it as well now when you go out of the scope of a function
    a file。 will be closed automatically for you but Python has a nice way of just
    ensuring that when。 you're done with a file it will close it for you instead so
    instead of writing this this。 way how we write it is say when you use this thing
    called a context manager you can see。
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 其他进程也可以使用它。当你退出函数的作用域时，文件会自动为你关闭，但 Python 有一种好的方式来确保当你完成一个文件时，它会为你关闭它。因此，不是这样写，而是我们用一种称为上下文管理器的东西来写，你可以看到。
- en: it's orange here this is special syntax in Python where I'd say with and I would
    say。 instead of making a variable f out I'd say with open as f out okay and then
    at the end。 of here I put a colon now again anytime where you have a colon at
    the end of a line in Python。 you're going to indent the following line so I like
    to do my indentation dance it's like。
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是橙色的，这是 Python 中的一种特殊语法，我会说使用 `with`，而我会说。与其创建一个变量 `f out`，我会说 `with open
    as f out` 好的，然后在这里的最后。我加了一个冒号，现在再次强调，任何在 Python 中行末有冒号的地方。你都需要缩进下一行，所以我喜欢做我的缩进舞蹈，它就像是。
- en: a fortnight dance here where I pretend like I'm pushing the code over here but
    you can。 see that when you do that idle will indent for you automatically so just
    going to take。 this next line here f out dot write data and we'll write that and
    then while this is indented。 the file will be open right here when we come out
    so I can say like a pawn un indent file。
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个假装我正在把代码推到那里的舞蹈，但你可以。看到当你这样做时，IDLE 会自动缩进。所以我将带上下一行 `f out.write(data)`，我们将写入，然后在这缩进时。文件将在这里打开，当我们出来时，我可以说像一个
    `unindent` 文件。
- en: is closed automatically so these three lines of code can be replaced with these
    two lines。 of code so this makes what's called context this is the with statement
    create the context。 manager creates a context when you go into this indented block
    you're inside the context。 when you un indent your outside the context the side
    effect of using open inside of a context。
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这个会自动关闭，所以这三行代码可以用这两行代码替换。这称为上下文，这是with语句创建上下文。当你进入这个缩进块时，你就在上下文中；当你缩进回去时，你就在上下文之外。使用open在上下文中的副作用。
- en: manager is that when you come out of the block it closes the file for you automatically
    okay。 I could run that if I wanted to and you could validate that that works as
    well but we're。 going to move on from here okay so now we have our data let's
    mess around with our data here。 so I'm going to come over here and I'm going to
    say f in is equal to open and I'm going。
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 管理器的作用是当你退出这个块时，它会自动为你关闭文件。好的，我可以运行这个，如果我愿意，你也可以验证它是否有效，但我们将从这里继续。好的，现在我们有了数据，让我们来处理一下数据。所以我要过来，我会说“f
    = open”，我将要。
- en: to open my file and I believe it's called covid csv and I can pass in a mode
    the default mode。 is read and I can pass in and then coding as well and so I believe
    that this is probably。 encoded as UTF-8 so I'm not going to read it binary bytes
    I'm going to read it as data。 in order to get it string data I can pass in by
    default python will read it as string。
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 打开我的文件，我相信它叫covid.csv，我可以传入模式，默认模式是读取，我也可以传入编码，我相信这可能是编码为UTF-8的。所以我不会以二进制字节读取，而是以数据的形式读取。为了获取字符串数据，我可以传入，默认情况下，Python会将其读取为字符串。
- en: data unless I say read it as binary but I want to pass in the encoding just
    to be safe here。 and I believe the encoding is UTF-8 I'm going to say encoding
    is UTF-8 one of the nice features。 about Python 3 is it Python 3 has support for
    Unicode streams natively so we should have。 that here and let's start playing
    around with this so I'm going to say I'm just going to。
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 数据，除非我说以二进制方式读取，但为了安全起见，我想传入编码。我相信编码是UTF-8。我会说编码是UTF-8，Python 3的一个好处是它对Unicode流的原生支持，所以我们应该在这里有。让我们开始玩弄这个，所以我会说我只是要。
- en: make a variable called line there must be line is equal to this thing right
    here so。 then this right here what I did square brackets by itself this is called
    an empty list literal。 and so what is a list literal what do I mean by literal
    well it's literal literally a list。 but when we say literals and program language
    it means some little bit more specific it means。
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为行的变量时，行必须等于这个东西。那么，这个方括号本身就是一个空列表字面量。那么，什么是列表字面量呢？我所说的字面量，实际上就是一个列表。但当我们在编程语言中提到字面量时，它的意思更加具体。
- en: that this is special syntax for creating a list and so we can use this special
    syntax。 with the square brackets there to create a list and Python will do that
    for us automatically。 so a list is a sequence of objects we can append things
    into it and so what I'll do here。 is I'll just loop over my lines I'll say for
    line in a fan turns out in Python when you。
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用于创建列表的特殊语法，因此我们可以使用这种特殊语法。使用方括号可以创建列表，Python会自动为我们完成这个操作。所以，列表是我们可以添加对象的一个序列，接下来我要做的是遍历我的行，我会说“对于行在一个风扇中”。
- en: open a file in text mode you can loop over it and when you loop over it you
    loop over。 the lines and that's kind of nice so I'm gonna say for line in look
    at that for is orange。 in is orange so these are all keywords in the language
    and what I'm gonna do here is。 I'm gonna call it the end when I got a call it
    and I need to indent the next line here。
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 以文本模式打开一个文件，你可以遍历它，当你遍历它时，你遍历的是行，这样做相当不错。所以我要说“对于行 in”，看看那，for是橙色的，in也是橙色的。这些都是语言中的关键字，我要做的是。我要在结束时调用它，而我需要在这里缩进下一行。
- en: and I'm just gonna say lines the append my line and I enter a couple times and
    at this。 point if I look at the length of lines here there's 2，000 entries and
    I can look at the。 first line here say lines zero there's the first line I can
    look at the last line I can。 say lines my one to look at the last line so there
    there's our data in there now in this。
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我将说“行.append(我的行)”并按几次回车。此时，如果我查看“行”的长度，这里有2,000个条目，我可以查看第一行，称为“行[0]”，这是第一行。我可以查看最后一行，称为“行[-1]”，所以这里面有我们的数据。
- en: list it's a list of strings I can look at the type of lines of zero and it's
    a list of。 strings in here so we're gonna manipulate these strings to be able
    to pull data out for us。 Okay so let's talk about list for a little bit and if
    I have a list let me just remember。 one of the things I want you to understand
    how to use is the dir function and the help。
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 列表是字符串的列表，我可以查看lines的类型为零，它是这里的字符串列表，因此我们将操作这些字符串，以便提取数据。好的，我们来谈谈列表，如果我有一个列表，让我记住。你需要理解如何使用dir函数和help。
- en: function so let me show you how to use dir on a list I have a list I can say
    dir of lines。 and this tells me that there are a bunch of things on the lines
    there are a bunch of。 these things with underscores on them and there are some
    things like a pen clear copy。 etc so these things that have underscores in them
    these we call dunder methods that's。
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我给你展示如何在列表上使用dir。我有一个列表，可以说是lines的dir。它告诉我在lines上有一堆东西，有很多带下划线的东西，还有一些像是pen
    clear copy等。因此，这些带下划线的东西我们称之为dunder方法。
- en: not for dunder method and the dunder there is short for saying double underscore。
    And so these are the protocols that Python responds to。 Okay so this dunder add
    means that you can take a list and you can call dunder add in。 it this dunder
    contains means that I can say it is something in a list I can do something。
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: dunder方法中，dunder是指双下划线的缩写。这些是Python响应的协议。好的，dunder add意味着你可以拿一个列表，并在其中调用dunder
    add。这个dunder contains意味着我可以说某个东西是否在列表中，我可以执行某些操作。
- en: this like is name in lines is there a string called name in lines there isn't
    but there。 is a string there's this one right here and if I copy this and say
    is the string found。 lines will say true so because this list implements this
    dunder contains method that allows us。 to use this in statement here。 If I want
    to get the documentation for these if I want to know like what does a pen do。
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在lines中是否有一个名为name的字符串？没有，但这里有一个字符串，如果我复制这个并说这个字符串是否存在，lines会返回true，因为这个列表实现了这个dunder
    contains方法，使我们可以在这里使用in语句。如果我想获取这些的文档，如果我想知道pen的作用。
- en: you can see that I used a pen right up here as a method what a pen does I can
    do this I。 can say help lines。append。 I mean another time I'm just saying lines。append
    I'm not calling append I'm not putting， parentheses after append I have a frenzy
    here for help because I'm calling help but I'm。 not calling append I'm just passing
    append in there and this gives me the documentation。
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到我在这里使用了pen作为方法，pen的作用是什么？我可以这样做，我可以说help lines.append。我的意思是我只是说lines.append，
    我没有调用append，没有在append后面加上括号，因为我正在调用help，我只是在那里传递append，这样可以给我文档。
- en: and it says you can pass in an object here and is a method of the built in list
    instance。 and it pens object to the end of the list。 Okay let me just give you
    another nice feature of the Python REPL if if you're in the Python。 REPL you can
    say help by itself and this puts you into a help。 Okay and this allows you to
    do various things it says you can say modules keywords symbols。
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 它说你可以在这里传入一个对象，这是内置列表实例的方法，并将对象添加到列表末尾。好的，让我给你另一个Python REPL的好功能，如果你在Python
    REPL中，你可以单独输入help，它会将你带入帮助模式。好的，这允许你做各种事情，它说你可以查看模块、关键字、符号。
- en: or topics look at this you can say keywords here this is kind of cool so I can
    come over。 here and say keywords and when I do this it gives me the list of all
    the Python keywords。 and so we can see that here's deaf we just saw deaf here
    we saw four anything that's。 orange here these are the things that are orange
    and Python so if I want to know what。
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 或者主题，看这个，你可以在这里说keywords，这很酷，我可以在这里说keywords，当我这样做时，它会给我Python所有关键字的列表。所以我们可以看到，deaf就在这里，我们刚看到deaf，看到四，任何在这里是橙色的东西，这些在Python中都是橙色的。
- en: four does I can just type four right here and help it says it squeeze 59 lines
    of text。 just double click that to expand it here and this tell gives us documentation
    here in。 the help about how to use a four statement see the prompt here is also
    a help prompt。 well if I want to exit out of this help prompt I can just hit enter
    by itself and it will。
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以在这里直接输入四，帮助它显示59行文本。只需双击即可在这里展开，它会为我们提供文档，说明如何使用四个语句。请查看这里的提示，它也是一个帮助提示。如果我想退出这个帮助提示，我可以单独按回车键。
- en: put me back into the Python prompt so again how I did that is I typed in help
    and just。 called help and then I said like keywords or you can do symbols or topics
    so if you know。 come over here you can say topics I'll give you a bunch of things
    that you can look for。 information on and so one of those is lists and one is
    list literals so if I wanted to。
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 把我放回 Python 提示符，所以我这样做是输入 help，然后叫 help，接着我说像 keywords，或者你可以使用 symbols 或 topics，如果你知道的话，你可以过来这里说
    topics，我会给你一堆可以查找信息的东西。其中一个是 lists，一个是 list literals，所以如果我想要。
- en: have some information about lists I can come over here and it says here is immutable
    list。 type and these are the things that you can do with that。 Okay so that's
    kind of nice that's in the Python then it's part of Python I'll also you。 know
    I linked to my book here if you want this instead of maybe more digestible form。
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 关于列表的一些信息，我可以过来这里，这里说的是不可变的列表类型，这些是你可以对它做的事情。好的，这挺不错的，这是 Python 的一部分，我还可以知道，如果你想要，我在这里链接到我的书，可能会更易于理解。
- en: you can come up here in my book and there's a section on lists here right here
    so here's。 some examples of using lists there's some tables down here that says
    here are the list。 operations and here are the dender methods that provide those
    operations here and then。 these are the these are the methods on lists as well。
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在我的书上找到这里有关于 lists 的一节，这里有一些使用列表的例子，下面有一些表格，这里说的是列表操作，以及提供这些操作的 dunder 方法，然后这些也是关于列表的方法。
- en: Okay so so at this point I have this list of if I want to see what's in my name
    so I。 can say DIR and I have this list called lines here this is all my lines
    so what I want to。 do is I want to make a list I have a list of strings here these
    strings aren't particularly。 useful you can look at like lines one you can see
    that like I guess this is I'm not sure。
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，此时我有这个列表，如果我想看看我的名字里面有什么，我可以说 DIR，这里有一个名为 lines 的列表，这就是我所有的行。所以我想做的是，我有一个字符串列表，这些字符串不是特别有用。你可以看看
    lines[1]，我想这是什么，我不太确定。
- en: AK is that Arkansas or Alaska I'm not sure but this is an entry for the 12th
    for a single。 state right it comes separated this is not useful by itself so we're
    going to parse this。 apart a little bit and this is a string so let's talk about
    how we can manipulate strings。 so again same thing we can come over here we can
    say I'm gonna say control P to get the。
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: AK 是阿肯色州还是阿拉斯加，我不太确定，但这是第 12 个条目的单一州的输入，它是分隔开的，单独来看这并不有用，所以我们将稍微解析一下。这是一个字符串，所以我们来谈谈如何操作字符串。所以再次，我们可以过来这里，我会说
    control P 来获取。
- en: previous line here on Mac if I was on Windows or Linux I would hit P there gonna
    put my。 cursor front of this I'm gonna say let's do the DIR of the string and
    let's see what attributes。 the string has and you can see how much of DUNDER attributes
    here and it has a bunch。 of other methods as well again you can go to the book
    and you can just scroll up a little。
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Mac 上的前一行，如果我在 Windows 或 Linux 上，我会按 P，接下来我会把光标放在这里，想说让我们做字符串的 DIR，看看这个字符串有什么属性。你可以看到这里有很多
    DUNDER 属性，还有其他许多方法，你可以翻书稍微往上滚动一下。
- en: bit talks about strings these are all things you can do with strings or you
    can you can。 find that from the help as well so what I want to do is I'm gonna
    split this string here。 on Thomas so let's just try that you can see that there's
    actually a split method right。 here so what I'm gonna do is I'm gonna say line
    lines one dot split and may go to the。
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 有点儿讨论字符串，这些都是你可以对字符串做的事情，你也可以从帮助中找到这些。所以我想要在这里将这个字符串分割，按 Thomas 来分割，所以我们试一下。你可以看到这里实际上有一个
    split 方法，所以我要说的是 line lines[1].split，然后转到。
- en: front of my line here and say help one note split does and this says you can
    pass in。 a separator and we'll return a list of words in the string using step
    as the delimiter。 okay so let's try that out here I'm gonna say alt P here delete
    that go to the front of。 my line delete delete these guys at the end and just
    call split I'm gonna split on the。
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的行前面说 help，note split 的功能是什么，这里说你可以传入一个分隔符，我们会返回一个使用该分隔符的字符串中的单词列表。好的，让我们试一下，我在这里按
    alt P，删除那个，回到我行的前面，删除这些，然后调用 split，我要以。
- en: comma here that looks like he's doing a pretty good job so you can see that
    there's some empty。 strings here because we just had commas next to each other
    so these were presumably columns。 with missing data here another thing to note
    this is the last line here has a new line at。 the end of it so 306 new line is
    probably not a valid integer so we might want to trim that。
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的逗号看起来不错，所以你可以看到这里有一些空字符串，因为我们只有逗号相邻，因此这些很可能是缺少数据的列。还有一点要注意的是，最后一行这里在末尾有一个换行符，因此
    306 可能不是一个有效的整数，所以我们可能想要修剪掉它。
- en: out here you can see that there's a method here called strip and strip is gonna
    do what。 we want it to do and that is trim white space if I if I want to find
    out what strip does。 again I can say help and say help and I don't even have to
    say lines one I can actually put。 an empty string here and I say I say what does
    if you have an empty string and you try。
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到这里有一个名为 `strip` 的方法，`strip` 将执行我们想要的操作，去掉空格。如果我想了解 `strip` 的作用，我可以再次调用帮助，甚至不需要指定行数，我可以在这里放一个空字符串，我会问如果你有一个空字符串，尝试。
- en: and do strip on it what does that do and it says you're passing characters that
    characters。 is default to none it says it returns a copy of the string with the
    leading and trailing。 white space removed awesome it says that the characters
    is given and not none remove the。 characters instead so I if I had something like
    this I could say like strip key that would。
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 并在其上调用 `strip`，这会有什么效果呢？它说你传递的字符默认为 None，它返回一个字符串的副本，去掉了前导和尾随的空格。太棒了，它说如果提供了字符而不是
    None，那么去掉这些字符。因此，如果我有这样的内容，我可以说像 `strip` 字符串那样去掉。
- en: get rid of the keys here but what I have is something like this where I have
    like a you。 know a new line or tab here and I just want to say like strip those
    off and you see that。 this gets rid of white space so what I can do from this
    other one here is before I call。 split on it I can call strip is gonna return
    a new string and I can split off of that you。
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 去掉这里的键，但我有像这样的一些内容，其中有一个换行符或制表符，我只想说去掉这些，你会看到这去掉了空格。因此，在我调用 `split` 之前，我可以调用
    `strip`，这会返回一个新字符串，然后我可以基于这个进行分割。
- en: can see that the new line is no longer there okay so this is looking pretty
    good now and。 so now I should be able to get each this is if you're thinking this
    like maybe a spreadsheet。 this is you know every value for every cell in there
    so what we could do is we could make。 a list of lists and we could have you know
    we could pull out those entries that way but。
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到换行符不再存在了。好的，这看起来不错。因此现在我应该能够获取每个值。如果你把这想成一个电子表格，每个单元格的每个值。我们可以做的是我们可以制作一个列表的列表，我们可以那样提取这些条目。
- en: I'm not going to use a list of lists rather I'm going to use a different data
    structure。 that's commonly used in Python I'm going to use a dictionary instead
    so a dictionary is。 something like this let me just show you an example of a dictionary
    let me say that B。 is equal to curly braces and this right here is the empty dictionary
    literal again what。
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我不打算使用列表的列表，而是要使用一种在 Python 中常用的不同数据结构。我将使用字典，因此字典是。像这样，让我给你展示一个字典的例子。假设 B。等于花括号，这里是空字典字面量。
- en: do I mean by literal I mean that that is syntax is built into the language when
    you use curly。 braces by themselves like that it makes a dictionary for you what
    does a dictionary do。 it maps keys to values if you're not familiar with the dictionary
    let me just briefly go。 over a dictionary say I have a English to Spanish dictionary
    or something or I just have。
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我所说的字面意思是，这是一种内置于语言中的语法，当你像那样单独使用花括号时，它会为你创建一个字典。字典的作用是什么？它将键映射到值。如果你不熟悉字典，我就简单介绍一下字典，假设我有一个英语到西班牙语的字典，或者我只有。
- en: an English dictionary unless they have English dictionary and I want to insert
    cat and I。 want to say cat is equal to a furry feline and I want to insert into
    it a dog is equal。 to a cozy canine or something like that okay at this point
    if I look at deed you can。 see that we have cat here and we have furry feline
    so cat is what in Python parlance。
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 一个英语字典，除非它有英语字典，我想插入 cat，并且我想说 cat 等于一个毛茸茸的猫科动物，我想插入一个 dog 等于一个温馨的犬科动物，类似这样的内容。好的，此时如果我查看字典，你会看到我们有
    cat 和毛茸茸的猫科动物，因此在 Python 术语中 cat 是什么。
- en: we call cat is a key and furry feline is a value if you're thinking of this
    is like an。 English dictionary cat is the word for a feline is the definition
    similar to an English dictionary。 you don't use an English dictionary to look
    up a word you already have the word right。 if I want to know what the definition
    of cat is I have cat I don't need to look up cat。
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们称`cat`为键，`furry feline`为值，如果你把这个看作一个英语词典，`cat`是指代一个动物，`feline`是定义，类似于英语词典。你不会使用英语词典查找你已经拥有的单词，对吧？如果我想知道`cat`的定义，我已经有`cat`，不需要查找它。
- en: I need to look at the definition for it so you have a key or a word and use
    that to look。 up a definition or a value so how we do that in Python we just say
    d cat this is called。 an index operation here and you can say that here is the
    value for that it's for a feline。 so this up here where we have an equals here
    is called index assignment this down here。
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我需要查看它的定义，所以你有一个键或单词，并用它来查找定义或值，那么我们在Python中如何做到这一点？我们只需说`d['cat']`，这称为索引操作，你可以说这就是对应的值，它是指代一种动物。所以我们这里有一个等号，这是索引赋值，而这里。
- en: is called index access here and again if you look in the book here you can see
    that there's。 an example of lists and after that there's an example of dictionaries
    here and here's。 all the dunder methods for dictionaries and all the other operations
    for dictionaries。 as well okay and so we're going to use this syntax right here
    this little snippet that。
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这里称为索引访问，如果你查看书中的内容，你会看到有一个列表的示例，之后有一个字典的示例，这里是所有字典的双下划线方法以及字典的所有其他操作，好的，因此我们将使用这里的这个语法，这段小代码。
- en: we can create a dictionary mapping column names to the values so that this we're
    going to。 leverage this so watch what we can do here we're going to use the zip
    built-in function。 and pass that into the dictionary constructor so this here
    dict and zip these are both in。 the built-in namespace and dict this will create
    an instance of a class much like that。
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建一个字典，将列名映射到值，以便我们可以利用这个功能。请注意我们在这里可以做什么，我们将使用内置的`zip`函数，并将其传递给字典构造函数，所以这里的`dict`和`zip`都是在内置命名空间中的，`dict`将创建一个类似于字面量的类实例，但我们调用的是类构造函数，而不是使用字面量。
- en: literal will but we're calling the class constructor rather than using the literal
    there and so。 that's what we're going to do here we'll do something like this
    where we're going to。 say well if we have lines zero and we split it strip it
    and then we split it on comma these。 are all the headers okay so this is all the
    headers in my csv file and so what I'm going。
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们要做的事情，我们会做类似这样的事情，假设我们有`lines[0]`，我们将其拆分、去除空格，然后按逗号拆分，这些都是头部信息，好的，这就是我CSV文件中的所有头部信息，因此我将要做的是。
- en: to do here is I'm going to say I want to zip line zero and I'm going to do that
    with。 line one here is going to give me this zip object and Python three is lazy
    so it doesn't。 actually it returns me this instance the zip object here if I were
    to loop over this what。 it does is it takes each value from each of these parallel
    arrays and sort of zippers。
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我想说的是，我要将`line[0]`与`line[1]`进行配对，这将给我这个zip对象，Python 3是惰性处理的，因此它实际上返回的是这个zip对象的实例，如果我对其进行循环，它会将这两个并行数组中的每个值进行“拉链”式组合。
- en: them together so you get what it gives you is tuples of sequences here so let
    me just。 show you how we can look at that we can take this same thing here and
    we can put it into。 a list constructor or this list and zip those are all purple
    those are in the built-in namespace。 here and you can see that here is a list
    and these things in here are called tuples so。
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你得到的结果是这里的元组序列，所以让我向你展示一下我们如何查看这个，我们可以将这个同样的内容放入一个列表构造函数中，或者这个`list`和`zip`都是紫色的，都是在内置命名空间中的，你可以看到这里是一个列表，这里的这些东西被称为元组。
- en: this is just taking each subsequent value from these two parallel arrays and
    putting。 them each into their own tuple so here's the date here's the state here's
    the positive。 etc okay so if instead of calling list here we take this and we
    call dict this is going。 to give this is a dictionary with each of those keys
    mapping to each of those values。
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是将这两个并行数组中的每个后续值取出，并将它们各自放入自己的元组中，所以这里是日期，这里是州，这里是正值，等等。好的，所以如果我们不是在这里调用`list`，而是调用`dict`，这将给出一个字典，每个键映射到每个值。
- en: okay so having said that let's try this out with our code here what I'm going
    to do here。 is I'm going to say maybe I'll make a little function here called
    like read a CSV file。 it's going to have a file name maybe I'll just try this
    out here I'm going to say with open。 fname I'm going to say encoding is utf8 now
    again some of you might say why am I implementing。
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，既然这么说了，让我们尝试一下我们的代码。我要做的是，可能会定义一个小函数，比如叫做读取CSV文件。它将接收一个文件名，可能我会在这里尝试一下。我会说用`with
    open`来打开`fname`，编码设为utf8。现在你们中的一些人可能会问，为什么我在实现。
- en: CSV there's actually a module in Python for doing CSV or why aren't I using
    pandas I'm。 doing this because I'm showing you how Python works and I want you
    to be familiar with some。 of the common data structures in Python namely a list
    and a dictionary use those all over。 the place yeah so if this reproduction code
    I wouldn't use read CSV right I would be using。
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: CSV实际上在Python中有一个处理CSV的模块，或者我为什么不使用pandas呢？我这么做是因为我想展示Python是如何工作的，并且我希望你熟悉一些Python中的常见数据结构，即列表和字典，这些结构在很多地方都可以使用。所以如果这是重现代码，我不会使用`read
    CSV`，我会使用。
- en: probably the CSV module which is included in standard library or I personally
    would probably。 using pandas instead like I said everything we're doing here we
    could probably do in two。 or three lines of pandas but the purpose of this isn't
    to explore pandas the purpose of。 this is to give you a chance to understand the
    tooling in Python and some of the basic。
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 可能是标准库中包含的CSV模块，或者我个人可能会选择使用pandas。就像我说的，我们在这里做的一切，实际上可以用两三行pandas代码完成，但这样做的目的并不是探讨pandas，而是让你有机会理解Python中的工具及一些基本概念。
- en: data structures in Python and some best practices in Python okay so I'm going
    to say with open。 fname I'm going to say as f in here you're calling the entry
    need to indent that and。 then maybe I'll say like rose and rose is going to be
    a list here and then I'm going。 to say or line in f in this is going to loop over
    each line okay so what I want to do is。
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: Python中的数据结构和一些最佳实践。好的，我要说用`with open`来打开`fname`，我会说作为f在这里，你需要缩进，然后可能我会说`rose`，`rose`将是一个列表，然后我会说对于`line
    in f`，这将遍历每一行。好的，所以我想做的是。
- en: I want to pull off the first line the first line is going to be the headers
    and I don't。 want to stick the headers in the rows so I'm just going to pop the
    first line and I'll。 say if and how do I determine whether I'm at the first line
    one way to do that is to。 look at the length of my rose so I can say if the length
    of rose is equal to zero then。
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我想提取第一行，第一行将是标题，我不想把标题放在行中，所以我只需弹出第一行。我会说，如果我怎么确定我在第一行呢？一种方法是查看`rose`的长度，所以我可以说，如果`rose`的长度等于零，那么。
- en: I'm just going to say headers is equal to line dot strip and then I'm going
    to split。 that on the comma and I can actually maybe I'll do this instead I know
    I'm going to do。 this for everything so maybe I'll do this instead I'm going to
    put this right above here I'm。 going to say headers say this is the values then
    down here I'll just say headers is equal。
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我只需说`headers`等于`line.strip()`，然后我会按逗号分割。实际上，也许我会这样做，我知道我会为所有内容这样做，所以也许我会把这个放在这里的上面。我会说`headers`，说这是值，然后在下面我只需说`headers`等于。
- en: to the values of them on the first one otherwise look at that if and else those
    are both orange。 so these are syntax that's built into the language so I can have
    an if statement I can。 put this conditional here and then I can have an else statement
    after it and otherwise I'm。 going to say a rose dot append and I'm going to say
    let's append and I'm going to say bit。
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个的值在第一个，否则看看if和else，它们都是橙色的。这些是内置于语言中的语法，所以我可以有一个if语句，我可以在这里放一个条件，然后在后面有一个else语句，另外我要说的是`rose.append`，我会说让我们附加上并且我会说bit。
- en: of the zip of the headers with my values make sure that your parentheses match
    up that's。 one of the things a lot of people run into problems with when they're
    writing programs。 here is you know we've got some nested calls to some functions
    here and methods you need。 to make sure that these parentheses match up at the
    end here if they don't you're going。
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 将标题和我的值进行zip，确保你的括号匹配。这是很多人在编写程序时会遇到的问题之一。这里我们有一些嵌套的函数调用和方法，你需要确保这些括号在最后是匹配的。如果不匹配，你将会遇到。
- en: to syntax or idle nicely highlights them for you so you can see those match
    up and then。 I'm going to bump out of here and I'm just going to say return rose
    at the end of this。 now one more thing to note this lane of rose is equal to zero
    turns out the Python if you。 have an empty list let me just show you here if I
    convert it into a boolean so there's a。
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 语法或 IDLE 会很好地高亮显示它们，所以你可以看到这些匹配。然后我将退出这里，最后我会说返回行。现在还有一件事要注意，这个行的长度等于零，事实证明在
    Python 中，如果你有一个空列表，让我给你展示一下，如果我把它转换为布尔值。
- en: boolean type of Python if I have an empty list and I put it in there it's fault
    if I have。 a list that has something in it like maybe one and two or three it
    is true so it turns。 out that saying bool of just a list is the same it's saying
    bool of the length of the。 list is equal to zero sorry it's not the same it's
    the opposite of that so I can come up。
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的布尔类型，如果我有一个空列表并将其放入其中，它是 False；如果我有一个包含内容的列表，比如 1、2 或 3，它是 True。所以说一个列表的
    bool 与说一个列表的长度是否等于零是相同的，抱歉，这并不是相同的，而是相反的，所以我可以得出结论。
- en: here and I can say instead of doing this I'd say if not rose if I don't have
    rose stick。 the headers and the values otherwise I do have rose and appendent
    okay so let's try this。 now and let's see if this works so if I were to just come
    down here and try this we called。 this thing reads yes be I'm just going to zoom
    this back or squeeze this back so we。
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我可以说与其这样做，我会说如果没有行，如果我没有行就保持标题和数值，否则我有行并附加它。好的，所以让我们尝试这个，看看是否有效。如果我只是下来尝试这个，我们称这个为
    reads，是的，我只是将它缩回或挤回去。
- en: can see both of them here okay so so if I come down here and I in my REPL I
    want to。 try my code out here so hopefully you're seeing how I like to work I
    like to try a right code。 and then try it out but if I were to try read CSV and
    then they'll say that result is equal。 if you read CSV and this is called covid。csv
    I get this name error read CSV is not defined。
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里看到两个值，所以如果我在这里的 REPL 中想尝试我的代码，希望你看到我喜欢的工作方式，我喜欢尝试编写代码，然后试用它。但如果我尝试 read
    CSV，然后说结果等于，如果你读取 CSV，这被称为 covid.csv，我会得到这个名称错误：read CSV 未定义。
- en: so name error you can see see red in idle here this is an exception or trace
    back and。 this is the error right here name error name error means that Python
    is looking for a name。 or a variable and it can't find it Python looks for a variable
    in three places looks for in。 the local namespace the global namespace and the
    built-in namespace now in this case when。
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 所以名称错误，你可以在 IDLE 中看到红色，这是一个异常或回溯，这就是错误，名称错误，名称错误意味着 Python 正在寻找一个名称或变量，但找不到它。Python
    在三个地方查找变量：在局部命名空间、全局命名空间和内置命名空间。现在在这种情况下，当
- en: we're in the REPL over here we're at the global level and you can type in DIR
    and you。 can see what are the variables defined at the global level here and you
    can see that read。 CSV is not in it that's because you see there's a little asterisk
    up here I didn't save this。 and reload this so even though I've typed in code
    over here I mean even if I do save this。
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里的 REPL 中，处于全局级别，你可以输入 DIR，查看在全局级别定义的变量，你可以看到 read。CSV 并不在其中，这是因为你会看到上面有一个小星号，我没有保存这个并重新加载，所以即使我在这里输入了代码，我的意思是即使我保存了这个。
- en: no I just say that the asterisk went away if I typed DIR over here it's still
    not in there。 we don't get access to this until we come up here and say format
    not format run module。 and run it okay so after this it's going to run and we
    should have access to it right。 here so let's try it now now I do have it let's
    look at the length of res let's look at。
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 不，我只是说如果我在这里输入 DIR，小星号就消失了，它仍然不在其中。我们不能访问它，直到我们到这里并说格式，而不是格式，运行模块。然后运行它，好的，所以在这个之后，它将会运行，我们应该可以在这里访问它。现在让我们尝试一下，现在我有了它，让我们查看
    res 的长度。
- en: the length of res is zero that's not very good okay so I've got a bug in here
    we'll have。 to debug what's going on so let me show you how to debug that we got
    a couple ways to。 debug that one one way to debug is what's called rubber duct
    debugging so rubber duct。 debugging is sort of what it sounds like a lot of people
    have a rubber duct and they。
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: res 的长度为零，这不是很好。好的，我这里有个错误，我们需要调试一下发生了什么，所以让我给你展示如何调试，有几种方法可以调试，调试的一种方法称为橡皮鸭调试。橡皮鸭调试听起来就是这样，很多人都有一个橡皮鸭。
- en: stick it on their computer and they talk to their rubber duct and it helps them
    out so。 I don't have a rubber duct here but maybe I have the beetles over here
    so I'm going to。 take my little beetles guys from my yellow submarine Lego set
    I'll talk to maybe Ringo。 and I'll say hey Ringo this is what I'm doing here I'm
    opening up my file name I'm making。
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 把它放在他们的电脑上，他们和他们的橡胶鸭子说话，这帮助了他们。所以我这里没有橡胶鸭子，但也许我有甲壳虫在这里。所以我要从我的黄色潜水艇乐高套件中拿出我的小甲壳虫，和Ringo说，嘿Ringo，我在做的事情是，我正在打开我的文件名，我在制作。
- en: a variable called rows to hold each row I'm looping over the lines in my file
    and then。 I'm getting the values for every line and if I don't have rows then
    I'm making headers。 equal to that values otherwise I'm appending into my rows
    those values there and then at。 the end I'm returning those rows okay Ringo you
    didn't help me this case Ringo didn't really。
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 一个变量叫做rows，用来保存我在文件中循环的每一行，然后我获取每一行的值，如果我没有rows，那么我就将headers设置为这些值，否则我将这些值附加到我的rows中，最后我返回这些rows。好的，Ringo，这次你没帮到我，Ringo并没有真正。
- en: help me but a lot of times the act of explaining something to someone else even
    if it's a rubber。 duct will put your brain in a different state such that you
    can understand it another option。 is to use what's called print debugging so you
    might want to do that where you could come。 here you can say like print that or
    we can print maybe over here I'll come over here and I'll。
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 帮助我，但很多时候，向别人解释某事的行为，即使是橡胶鸭子，也会让你的大脑处于不同的状态，从而让你理解它。另一个选择是使用所谓的打印调试，所以你可能想这样做，你可以过来，在这里打印一下，或者我们可以在这里打印，也许我会过来。
- en: say print values and I'll and I'll just say print rows as well。 and let's just
    run this and see if this gives me some insight here。 okay so so this this looks
    like it's giving me some insight here it looks like it's going。 to print out all
    about two thousand rows of that so maybe I come over here and stop that。
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 说打印值，我也会说打印rows。让我们运行一下，看看这是否能给我一些洞见。好的，看起来这给了我一些洞见，它看起来会打印出大约两千行，所以也许我在这里停下来。
- en: but it looks like that's problematic in that we're looping over our lines if
    we don't have rows。 we're doing that otherwise we're saying rows。append。 so it
    looks like rows isn't getting appended to which is kind of weird。 okay yeah so
    so we're saying if not rows and and so we're making those headers there and then。
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 但是看起来这有问题，因为如果我们没有行的话，我们就在循环我们的行。否则我们在说rows.append。所以看起来rows没有被附加，这有点奇怪。好的，是的，我们在说如果没有rows，因此我们在那里制作这些标题。
- en: we're never appending anything in there so in this case our logic is bad because
    we're never。 appending into the rows there so that so that's our problem we're
    never appending into the rows so。 our logic is depending on this appending into
    it and we're not and so maybe we want to do something。 else here hopefully this
    will stop here but let me let me just show you another thing you can do。
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从来没有在里面附加任何东西，所以在这种情况下，我们的逻辑是错误的，因为我们从来没有在rows中附加。所以这是我们的问题，我们从来没有在rows中附加。因此，我们的逻辑依赖于附加，而我们并没有，所以也许我们想做一些别的事情。希望这会在这里停止，但让我给你展示你可以做的另一件事。
- en: if you want to keep track of the index in Python what I can do is I can instead
    of looping over just。 this at at thin right here I can loop over enumerate calling
    f in and enumerate is a built-in function。 in Python and what it will return is
    when you loop over it is the index position so let's say i comma。 line and and
    the item of iteration here so here I'll say if i equals zero then we'll do that。
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在Python中跟踪索引，我可以做的是，不仅仅循环这个。我可以循环使用enumerate，调用f，enumerate是Python中的一个内置函数。它返回的是当你循环时的索引位置，所以假设i，行，以及迭代的项目，这里我会说如果i等于零，我们就这样做。
- en: otherwise we'll append here okay so so this should work。 note that I said that
    idle doesn't really like printing out lots of stuff here you can see the。 idle
    is just like being annoying over here so let's run that and see if we can get
    it to work here。 okay so restart gonna go read that let's look at the length of
    reds here okay so now we do have。
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 否则我们在这里附加。好的，所以这应该可以。注意，我说IDLE并不喜欢打印很多东西，你可以看到IDLE在这里有点烦人，所以让我们运行一下，看看能否让它工作。好的，重启，去读取那个，让我们看看reds的长度。好的，所以现在我们有。
- en: those items and let me just show you one more way to debug this the print debugging
    in my case。 help me figure it out but another way to debug it is you can use the
    built-in debugger in Python you。 can say import pdb and then put a semicolon there
    and say pdb。set trace and as of recent versions of， Python you can just say breakpoint
    instead here but this will work in all versions of Python 3 here。
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 让我再给你展示一种调试的方法，在我的情况下，print调试帮助我找出问题，但另一种调试方法是使用Python内置的调试器。你可以说import pdb，然后加一个分号，接着说pdb.set_trace。从最近的Python版本开始，你可以直接说breakpoint，但这在所有Python
    3版本中都有效。
- en: so let me just run this and show you that very quickly here。 okay so so now
    let's run this line right here again to run that line i just put my cursor at
    the end。 and hit enter twice you can see that my prompt change here it says pdb
    instead so this is the。 Python debugger it's included in the Python standard library
    i can hit h here and it will tell me what。
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 让我快速运行一下这个，看看吧。好，现在我们再运行这一行，只需将光标移到末尾，按两次回车。你可以看到我的提示符变成了pdb，所以这是Python调试器，它包含在Python标准库中。我可以在这里按h，它会告诉我所有可以执行的命令。
- en: all the commands i can do so that's sort of your uh wife jackie here so here's
    the commands i like to。 do i like to say l which is shorthand for list and that
    lists where you are you can see there's this。 little arrow it says that we're
    in open so i can actually inspect f name because i'm inside of this。 function
    here um so i can go to the next line by saying n i want to know what n does i
    can say h。
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是你所说的命令，所以我喜欢使用l，这是list的简写，它会列出你当前的位置。你可以看到有一个小箭头，表示我们在open函数内，我可以检查f name，因为我在这个函数里面。我可以通过按n来进入下一行，想知道n的作用可以按h。
- en: n help on n says this is what n does so you can see if i do l again because
    i'm now at this rose line。 i can go to the next line here and i can look at uh
    rose if i wanted to i can go to the next line and。 look at line there's my line
    i can go to next line look at values。 some other commands that you might want
    or like s this will step into a function or a method i'm not。
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: n的帮助信息显示了n的作用。如果我再次按l，因为我现在在这一行上，我可以继续下一行，并查看内容。如果我想查看rose，我可以继续下一行，查看line，然后继续下一行，查看值。你可能想要的其他命令是s，这将进入一个函数或方法。
- en: i don't have any really to step into here um you can go up and down so i can
    go up from my stack。 whoops not s i can go up from here and in this case it's
    not really useful or i can go down back。 into it so if i've got multiple levels
    i can do that i can say q to continue running or not qc to。 continue running or
    i can say q to quit so that's another way that you can debug this as well so i'll。
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有什么可以逐步进入的内容。你可以向上或向下移动，所以我可以从堆栈中向上移动。哎，不是s，我可以从这里向上，在这种情况下并不是特别有用，或者我可以向下返回。如果我有多个级别，我可以这样做，我可以按q继续运行或qc继续运行，或者按q退出。这也是一种调试方法。
- en: just comment this out here i'll leave that code in there if you if you want
    to see that okay at this。 point we've got a bunch we've got a bunch of data here
    let's try and do some filtering of it so let me。 look at my namespace here um
    i've got res here uh so so what i want to do i'm going to um look at。 the results
    for utah here so let's look at just res zero what a single row looks like and
    you can。
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这里暂时注释掉，如果你想看代码的话。这时候我们有了一些数据，让我们尝试对其进行过滤。我来看一下我的命名空间，我这里有res，所以我想要查看utah的结果。让我们只查看res的第零项，看看一行是什么样子。
- en: see that there's a state there and so what i'm going to do is i'm going to filter
    all the ones where。 it's utah so i'm going to say ut res is equal to a list we'll
    say four row in res。 i'm going to say if row and then i'm going to pull out the
    state so this is a dictionary right so。 i can pull out that state and say yes
    the state is equal to ut and then i'm going to put a colon there。
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 看到这里有一个状态，所以我要筛选所有状态为utah的项。我要说ut res等于一个列表，我们说for row in res，然后我会说if row，我将提取状态。这是一个字典，所以我可以提取状态并说是的，状态等于ut，然后我会放一个冒号。
- en: i need to indent note the idles indenting for me just kind of say ut res that
    append i'm going to。 append my row into utres okay at this point if i look at
    length of ut res i should have。 about 37 entries there okay so let me just look
    at utres zero or something and see what the first one。 is okay so this is for
    the 12th this is yesterday and in covid cases there are 2，303 positive cases。
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我需要缩进，注意空闲的缩进对我来说只是简单地说`utres.append`，我将把我的行添加到`utres`中，好的，在这一点上，如果我查看`utres`的长度，我应该有大约37个条目，好的，让我看一下`utres[0]`或类似的东西，看看第一个是什么，好的，这是12号，这是昨天，在新冠病例中有2,303个阳性病例。
- en: 41，000 negative cases and you just go through these you can see all of those
    here so maybe we。 want to make a plot of like the number of positives the number
    of deaths and maybe the hospitalization。 numbers there and see what that looks
    like over time so that's what we're going to try and do。 now another thing to
    note if you look at this you can see that like the positive here is actually。
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 41,000个负例，你可以通过这些来看所有这些，所以也许我们想制作一个图表，比如阳性数量、死亡人数以及住院人数，看看这些随时间的变化情况，所以这就是我们要尝试做的。现在另一个要注意的事情是，如果你看这个，你会发现阳性这里实际上是。
- en: string this is a string literal right to 23。03 it's hard to do math on a string
    so you might want。 to convert that into an integer so what we could do is we could
    say like utres and then like pull。 off positive now time just chain chaining these
    index operations together here so if we pull off。 the positive we get that string
    here we get look at a type of this if we wanted to verify it's a。
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串这是一个字符串字面量，右边是`23.03`，在字符串上做数学运算是困难的，所以你可能想把它转换为整数。所以我们可以这样做，我们可以说`utres`，然后像这样提取正值，现在只是将这些索引操作链在一起，所以如果我们提取正值，我们得到那个字符串，这里我们看一下它的类型，如果我们想验证它是一个。
- en: string bag i mean from inspection i can tell that it's a string if i wanted
    to make this an integer。 what i could do is i could say int and then if you look
    at that you can see that there are no quotes。 around it so with this i can do
    something i guess where i can say you know add a hundred to it that's。 what it
    might look like tomorrow if i had the previous case where it was uh where was
    just this。
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串包，我的意思是通过观察我可以告诉这是一个字符串，如果我想把它变成一个整数，我可以说`int`，然后如果你看看那个，你可以看到没有引号在周围。所以有了这个，我可以做一些事情，我想我可以说你知道加一百到它，这可能是明天的样子，如果我有之前的情况就是这个。
- en: where's a string if i try to add a hundred to it we get an error here where
    it says python can't give。 you type or can't really handle that for you so i want
    to make sure that we have the right types。 here um one thing that we might want
    to do is we might want to just loop over our values and try。 and convert them
    into integers so i'm going to do that here i'm just going to sort of brute force
    it。
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是一个字符串，如果我尝试加一百到它，我们得到一个错误，提示python无法给你类型，或者无法真正处理它，所以我想确保我们有正确的类型。这里，嗯，我们可能想做的一件事是循环遍历我们的值并尝试将它们转换为整数，所以我将在这里做，我会稍微强制一下。
- en: um i'm going to say for uh val in values， now i'm going to try and convert it
    into an integer here okay so remember values is a list of what's in。 a single
    row i can do something like this where i can say val is equal to int val。 now
    this this will not stick it back into the list so i want to try and convert it
    and then i'm going to。 try and stick it back into the list so i do that uh it's
    a little bit hard to stick it back into the。
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，我要说，对于`val`在`values`中，现在我将尝试将其转换为整数，好的，所以记住`values`是单行中的内容列表，我可以这样做，我可以说`val`等于`int(val)`。现在这不会把它放回列表中，所以我想尝试转换它，然后再试着放回列表中，所以我这样做，嗯，有点难把它放回。
- en: list uh with this but i can use my little secret here i can come up here and
    say well i can use my。 enumerate to pull out the position of it in that list。
    and then i can do something like this where i can say values j is equal to val。
    okay let's just run this and see if this works i'm going to come up here to run
    and say run module。
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 列表嗯，我可以在这里使用我的小秘密，我可以上来并说，我可以用我的`enumerate`来提取它在那个列表中的位置。然后我可以做这样的事情，我可以说`values[j]`等于`val`。好吧，让我们运行这个，看看是否有效，我将上来运行并说运行模块。
- en: so this is like a very poor man's csv file now having said this like if you
    were to use the csv。 file package in the python standard library you would have
    to do some conversion in there it doesn't。 do conversion for you automatically
    pan does on the other hand we'll try and do some conversion。 for you but it might
    fail okay so i'm i'm going to come over here and i'm just going to hit uh。
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这就像是一个非常简陋的CSV文件。话虽如此，如果你使用Python标准库中的CSV文件包，你需要在里面做一些转换，它不会自动为你转换。另一方面，pan会尝试为你做一些转换，但可能会失败。好的，我要过来这里，然后我就要按一下。
- en: go P or alt P depending on your platform a couple times。 to get my data here
    there you go okay and when i did this i got another error。 so uh you know this
    red splotch here you got an error value error this time so this invalid literal。
    for int so try to convert ak to an integer and pythons as i don't know what ak
    is so what i'm going to do。
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 按P或alt P，具体取决于你的平台，几次。来获取我的数据。好了，当我这样做时，我得到了另一个错误。这个红色斑点，出现了值错误，这次是无效的字面量。因此，尝试将ak转换为整数，而Python说我不知道ak是什么。所以我将要做的是。
- en: here is i'm going to show you some code how to respond to exceptions here you
    see over here that。 this says it's in line 25 we called the red csv function here
    and then in line 25 that's this line。 right here you can look in the lower right
    hand corner and see line 25 here this line is causing。 the problem so what i'm
    going to do is right before this line i'm going to hit enter i'm going to。
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我要给你展示一些如何响应异常的代码。你在这里看到，它说在第25行，我们在这里调用了red csv函数，然后在第25行，这一行。你可以查看右下角，看到这里的第25行正在引发问题。所以我将要做的是在这一行之前按回车，我将要。
- en: take type try with a colon at the end see that try is orange it's a syntax in
    python for handling。 the exception now in this case if i hit enter it's going
    to indent me but i don't want to do that。 what i want to do is i want to go to
    the next line and hit tab and then this next line i want to try。 and run this
    line okay i'm going to go to the end of this line and unen unen indent and say
    accept。
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 试图类型尝试，末尾有个冒号，看到try是橙色的，这是Python处理异常的语法。现在在这种情况下，如果我按回车，它会缩进，但我不想那样做。我想去下一行并按tab，然后在下一行我想尝试并运行这一行。好的，我要去这一行的末尾并取消缩进，然后说接受。
- en: accept i got a value error if i got a value error i'm going to put a colon in
    this line and then i'm。 just going to say if i got that just pass so try and convert
    it into an integer if you can if you。 can't that's okay we'll just use the original
    value there and we'll stick that in okay now this。 part right here we're saying
    values j is equal to val we can do that again it's going to either stick。
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 接受我得到了一个值错误。如果我得到了一个值错误，我会在这一行加上冒号，然后我就会说，如果我得到了这个，就跳过。所以尝试将其转换为整数，如果可以的话，如果不行，那也没关系，我们就使用原始值，然后把它放进去。好的，现在这一部分我们说values
    j等于val，我们可以再这样做，它会放入转换后的值或原始值。
- en: in the converted value or stick in the original value if we didn't want to stick
    in the original。 value it turns out that python has another thing that we can
    do is we can put an else。 clause with a tri statement now this is a little bit
    different than what you might be used to。 but python allows you to do this you
    can put the else clause right here and this says try and run。
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不想放入原始值，结果是Python还有另一个可以做的事情，那就是我们可以在tri语句中放入else子句。这和你可能习惯的有些不同，但Python允许你这样做。你可以把else子句放在这里，这表示尝试运行。
- en: this if it has an exception do this if it doesn't have an exception do this
    okay so let's run this now。 okay and we'll try and run run that and that looks
    like it does work awesome okay so i'm going to。 this would be a great time if
    you're doing this at home to make sure that yours can read this。 function and
    that works also if you look at res zero here you can see that like these are numbers。
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有异常，就这样做；如果没有异常，就那样做。好的，那我们现在来运行这个。好的，我们来尝试运行一下，这看起来是有效的，太棒了。那么我将要做的是。如果你在家做这个，现在是确保你能读取这个函数的好时机，这也有效。如果你查看res零，你可以看到这些都是数字。
- en: here so that's cool so yeah if great time here if you're falling along at home
    or you're trying to。 do this as a tutorial pause the video and make sure that
    that is working okay so we're gonna。 cruise along now so maybe we want to make
    a little filter function here let's let's let's make a。 filter function i like
    trying things out in the REPL but then after i've done them in the REPL a。
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 这很好，所以如果你在家跟着，或者你试图把这当作教程，请暂停视频，确保它正常工作。好了，我们将继续前进，所以也许我们想在这里做一个小的过滤函数。让我们创建一个过滤函数，我喜欢在
    REPL 中尝试东西，但在我在 REPL 中做过之后。
- en: little bit i get i'm a programmer programmers are lazy and so instead of doing
    that all the time i。 will take what i do multiple times and make a function to
    help me out so i'm gonna come over。 here and maybe i'll make a filter function
    and it's going to take rows and maybe it's going to take a。 state to allow me
    to filter by state here and we'll just come down here and we're gonna say res。
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我明白了，我是程序员，程序员都懒，所以我不会总是这样做。我会把我做过的事情多次整理成一个函数来帮助我。所以我会过来，可能会创建一个过滤函数，它将接受行，并且可能会接受一个状态，来让我通过状态过滤。在这里我们会说
    `res`。
- en: is equal to an empty list here i'm gonna say for row in res。 and i can say if
    row and has a state if the state is equal to the state that we pass in。 then we
    can say res。append row and then we'll un indent here and say return res now。 the
    one thing to be aware of is just the indentation we have a bunch of indentation
    up here uh note that。
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`res` 在这里是一个空列表，我要说对每一行 `row` 在 `res` 中。然后我可以说如果 `row` 有状态，如果这个状态等于我们传入的状态。然后我们可以说
    `res.append(row)`，接着我们将缩进解除，并说返回 `res`。现在需要注意的一点是缩进，我们在这里有很多缩进，呃，注意到。'
- en: my return here is indented at the same level as the four statement here and
    so if you're you could。 put this return you know here if you put it here it's
    not it's not gonna do the right thing so make。 sure that is in the right place
    now note sometimes if you if i do this i'll actually get an error let。 me just
    show you the error this is something that might get you if you're new to python
    here。
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我这里的返回是与 `for` 语句在同一缩进级别的，所以如果你想的话，你可以把这个返回放在这里。如果你把它放在这里，那就不对了，所以确保它放在正确的位置。现在注意，有时如果我这样做，我实际上会遇到一个错误。让我给你展示这个错误，这可能会让你感到困惑，如果你是
    Python 新手的话。
- en: gonna run this and it says expected an indented block now watch what happens
    when i hit okay。 says it's expecting us to indent and it puts this little salmon
    colored splotch of death right here。 and so basically when you see something like
    this in idle it's telling you that it expected this。 to be indented and then it
    expected that because you ended in a colon right there so remember my little。
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行这个，它提示需要一个缩进块，现在看看我点击确定后发生了什么。它说它期待我们缩进，并且在这里出现了这个小的鲑鱼色的致命斑点。所以基本上，当你在 IDLE
    中看到这样的东西时，它在告诉你，它期待这个部分。要缩进，然后它期待那个，因为你在这里以冒号结束了，所以记住我的小缩进舞。
- en: indentation dance there anytime you're in the line in a colon you got to indent
    that next line。 there so we'll just indent that and that should work fine now
    let me just show you another example。 here i'm on this res here after res is equal
    to an empty list i'll maybe just indent this line here。 now this is like i didn't
    expect it to be indented but you did indent it so this is sort of the opposite。
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 只要你在冒号后面的行中，你就必须缩进下一行。所以我们就缩进一下，这样应该就可以正常工作了。现在让我给你展示另一个例子。在这个 `res` 之后，`res`
    等于一个空列表，我可能会在这里缩进这一行。现在这个情况就像我没想到它需要缩进，但你确实缩进了，所以这是有点相反的。
- en: situation here it's going to ask me to save it and it says unexpected indent
    okay so and then there's。 the pink right here it says this was an unexpected indent
    so complains about that let me show you。 another error that's common i see among
    people who are new to python or who were trying to fall。 this at home maybe they
    didn't put these closing parentheses here just run this without these closing。
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 这个情况会让我保存它，并且说出现了意外缩进。所以这里的粉色部分提示这是一个意外的缩进，抱怨这个问题。让我给你展示另一个常见错误，我看到很多新手 Python
    用户或者在家试图跟着做的人，可能他们没有在这里放上这些闭合括号。只需在没有这些闭合括号的情况下运行这个。
- en: parentheses and they get invalid syntax now the invalid syntax is on this line
    right here which。 is a little bit weird let me maybe justify why python is giving
    you this line is invalid syntax。 the issue is is that you have open parentheses
    here and so python saying you have open parentheses i'm。 going to keep parsing
    this until i get the corresponding closing parentheses but you've got an open。
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 括号问题导致了无效语法，现在无效语法在这一行，这有点奇怪，让我解释一下为什么Python认为这一行是无效语法。问题在于你这里有一个打开的括号，所以Python会说你有一个打开的括号，我会继续解析，直到找到对应的关闭括号，但你这里有一个打开的括号。
- en: parentheses here which is actually for this dict call you've got a return inside
    of the dict call。 you can't have a return inside of a dict call it has to be on
    its own line not inside of。 prints a parenthetical like that and so that's why
    it's giving you the syntax error here on this but。 typically in general if you're
    in idle and you see you know the red splotch of death here it。
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的括号实际上是这个字典调用的，你在字典调用内有一个返回值。你不能在字典调用内有返回，它必须在自己的行上，而不能在括号内部。这就是为什么在这里给你语法错误的原因。一般来说，如果你在IDLE中看到红色的死亡斑点。
- en: typically means somewhere to the left of this either you did not indent this
    or you need to go up to。 the lines above it and fix the lines above it and so
    this i can tell pretty easily by just looking at。 these previous line ended in
    parentheses that my syntax errors that i have my parentheses are。 not sufficient
    here let me just maybe stick an extra princey at the end there and let's see what
    that does。
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 通常意味着在这左边的某处，你要么没有缩进，要么需要向上调整它上面的行。通过查看这些以括号结尾的前几行，我可以很容易地判断出我的语法错误，括号不够。让我在最后加一个额外的括号，看看这样会有什么结果。
- en: involves syntax as well at this point i get the invalid syntax right there saying
    hey you've got。 an extra right princey i don't know what to do with it so just
    get rid of that and you should be good here。 okay so at this point you should
    be able to let's run this here we're gonna read our csv file。 and then we're going
    to say res and i'm going to Utah here if you want to do a different state you。
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这涉及语法问题，此时我在这里得到了无效语法，提示你有一个额外的右括号，我不知道该怎么处理它，所以把它去掉就好了。好吧，这样你应该能够运行这个，读取我们的csv文件，然后说res，我在这里选择犹他州，如果你想要选择不同的州，你可以。
- en: can but i'm going to say filter in the filter roads with my state let's look
    at the length of。 res Utah okay and so that didn't work what's going on there。
    yeah so so maybe i'll use my debugging techniques to figure out what went wrong。
    so i've got my beetles here i mean let's talk to maybe Paul maybe Paul can help
    me this time so。
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 但我打算说在过滤行中根据我的状态，让我们看看res的长度，犹他州，好吧，这没有工作，发生了什么。是的，所以我可能会使用调试技巧来弄清楚出了什么问题。这里是我的调试信息，让我们跟保罗聊聊，也许这次他能帮我。
- en: Paul i am calling the filter function here i've got a bunch of rows and i've
    got a state and i want to。 filter those rows which are rows is a list of dictionaries
    and i want to see if there's a state。 key pull that out to make sure that's equal
    to whatever the state value is i'm going to make a。 variable called res which
    is the results i'm going to return and then i'm going to loop over every row。
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 保罗，我在这里调用过滤函数，我有一堆行，还有一个状态，我想要过滤那些行，这些行是字典的列表，我想查看是否有状态键，把它提取出来，确保它等于我所需的状态值，我要创建一个变量叫做res，这是我将要返回的结果，然后我将遍历每一行。
- en: in res hmm Paul why would i loop over every row in res i'm going to loop over
    the row in rows。 and so there i think there is my problem you can see i actually
    have another problem here i'm going。 to actually not show it to you right now
    let's run this while i'm doing that i found another problem。 see like i said when
    you're programming you're going to run into errors all the time it's like。
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在res中，嗯，保罗，我为什么要遍历res中的每一行，我会遍历行中的每一行。因此，我认为这就是我的问题，你可以看到我实际上还有另一个问题，我现在不打算给你看，让我们运行这个。在此过程中，我发现了另一个问题。正如我所说，当你编程时，你会经常遇到错误。
- en: frustration app or frustration so you just need to get used to that and sometimes
    you might need to。 go take a walk take a deep breath um your brain can get into
    a place where it's so frustrated or you're。 you know i've been staring at this
    for an hour and i can't figure out what's going on。 take a break and step back
    typically helps okay so now let's let's just make sure that res has a。
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 挫折应用程序或挫折，所以你只需要习惯这些，有时候你可能需要去散步，深呼吸，你的大脑可能会进入一个非常沮丧的状态，或者你知道我已经盯着这个看了一个小时，我无法搞清楚发生了什么。休息一下，退后一步，通常有帮助。好吧，现在让我们确保res有一个。
- en: length here didn't break that okay that does have a length now let's try and
    do this one here。 oh now i got a name error name error name rue is not defined
    okay so this is one of those things。 that might get you if you need a python is
    that like turns out that this is perfectly valid syntax。 but this is actually
    there's actually an error here um now idl doesn't capture this but some of the。
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 长度，这没有破坏好的，现在我们试试这个。哦，现在我得到了一个名称错误，名称rue未定义。好吧，这是一种可能让你感到困扰的情况，Python中出现的情况。结果是，这实际上是完全有效的语法，但实际上这里有一个错误，现在idl没有捕捉到这一点，但有些。
- en: more advanced editors would um you know my emax configuration would capture
    this or if i'm using。 pie charm it would figure this it would like put a red squiggly
    line under this and tell you that。 you're you're you're trying to access a variable
    that's not defined here the problem is i have a。 typo this should be res not rue
    and so what we might want to do is have a test here to test this。
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 更高级的编辑器，比如我的emax配置，会捕捉到这一点，或者如果我使用PyCharm，它会在这里加上红色波浪线，告诉你你正在尝试访问一个未定义的变量。问题是我有一个拼写错误，这里应该是res而不是rue，所以我们可能想在这里做一个测试来检查这个。
- en: code to make sure that it works rather than you know just running it and making
    sure it works at。 runtime so that's what a lot of people do is they will put tests
    around their code to tighten that。 down here just going to fix that and let's
    try it again okay we'll just push this car back up the。 hill see if it comes crashing
    down see if it goes off the jump and lands and let's see if it does land。
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 代码确保它在运行时正常工作，而不是仅仅运行它并确保它在运行时正常工作。因此，很多人会在他们的代码周围放置测试以收紧这一点。这里只是要修复这个，然后再试一次，好吧，我们将把这辆车推回山上，看看它是否会崩溃，看看它是否会跳跃着落地，看看它是否会落地。
- en: here resute okay so and so now this is look like it looks like it's working
    awesome so if i wanted。 just to get like the deaths in you in you tie could do
    something similar here so。 looks like a resute zero here um so here are um let's
    see the deaths there's deaths right there。 so maybe that's a little bit more but
    you know just look at the positives right i'm gonna get all。
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是resute，好吧，现在看起来工作得很好。如果我想获取像你那样的死亡人数，我可以在这里做类似的事情。看起来这里是resute零，所以这里有死亡人数，死亡人数就在那儿。也许这稍微多一点，但你知道，看看积极的一面，我将获得所有。
- en: the positives in you tie can do something this i can say pause it's equal to
    an empty list i can say。 four row in ut。re or resute and i can say pause。append
    and say row and pull off positive。 okay and let's look at pause here and now it's
    just that sequence okay so that looks like we did a。 pretty good job we might
    want to reverse this turn if we look at the door of pause。
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在你那里获取积极的东西，我可以说pause等于一个空列表，我可以说对于ut.re或resute中的每一行，我可以说pause.append，并说行并拉出积极的内容。好的，现在让我们看看pause，这就只是那个序列，所以看起来我们做得相当不错，我们可能想反转这个，如果我们查看pause的内容。
- en: we have a reverse method here so it turns out that we can say what does this
    reverse method do we。 can say pause。reverse help pause。reverse and it says it
    reverse method of built-in's list reverse in place。 so what that in place means
    is that this is not going to return a new list it's just going to。 reverse it
    in place but note that this did not return anything but if i look at pause now。
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个反转方法，所以结果是我们可以说这个反转方法做了什么，我们可以说pause.reverse帮助pause.reverse，它说这是内置列表的反转方法，就地反转。那么“就地”意味着这不会返回一个新的列表，它只是会在原地反转，但请注意，这并没有返回任何东西，但如果我现在查看pause。
- en: it reverses it in place it takes the list and mutates it in place okay so that
    looks like。 it's doing a pretty good job there at this point we could probably
    plot this um so so maybe we'll。 make in little another function here um maybe
    rather than doing that i've got this utah res here。 or resutah and i don't want
    to look at all those lines let me just look at the first one here。
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 它在原地反转，它会变更列表，直接在原地进行操作。好的，看起来做得不错，在这个时候我们可能可以绘制一下，也许我们会在这里再做一个小函数，也许与其这样，我有这个utah_res，或者resutah，我不想查看所有那些行，让我只查看第一行。
- en: okay so here's the first one it's got a date here maybe maybe what we should
    do is we should sort。 them by date so let me just show you a cool way that we
    can sort with python here python has a。 built-in function of sort head the sort
    head will take anything that's iterable here and it has a。 thing called a key
    that you can pass in so a key is a custom function that can be customized the
    sort。
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这是第一个，它有一个日期，也许我们应该按日期排序。所以让我给你展示一个在Python中排序的好方法，Python有一个内置函数叫做排序头，排序头可以接收任何可迭代的对象，并且有一个称为key的参数，你可以传递一个自定义函数来进行排序。
- en: order so so watch what i can do here i can make this key i can say death i'm
    gonna find。 it the key as get the date and it's going to take a single row here
    it's going to return a row date。 and then i can say sort head and i can do utah
    and maybe i'm going to call this mute_sort it just to。 not print it out i can
    say sort head i'm going to sort my iterable which is utah_res。
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以在这里做一些事情，我可以制作这个关键字，我可以说“死亡”，我要找到它，关键字是获取日期，它将返回一行日期。然后我可以说排序头，我可以做utah，也许我会把这个叫做mute_sort，只是为了不打印出来，我可以说排序头，我将对我的可迭代对象进行排序，也就是utah_res。
- en: and i'm going to say key is equal to get date， oh and i have it it's res_ute
    not utah_res。 okay and if i look at the lenn of utah。sorted just validate okay
    that looks like it's good we can。 say utah sorted zero what does the first one
    look like the first one looks like this is march seventh。 awesome and let's look
    at the last one here， minus one is the last one and that looks like it's good
    if it's so it says minus one here is sort。
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我会说key等于get_date，哦，我有了，是res_ute而不是utah_res。好的，如果我查看utah_sorted的长度，确认一下，好的，看起来不错。我们可以说utah_sorted[0]，第一个看起来像是3月7日。太棒了，我们来看看最后一个，-1是最后一个，看起来也很好。
- en: of weird to you living index operation on minus one let me show you what that
    means in the python。 world it means that we're instead of doing minus one you
    can think of that it's saying the length of。 utah sorted and then subtract one
    from that which is the same as that so the length of utah sorted。 is that 37 and
    if you look at utah sorted try to pull off 37 that's out the end of the range。
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 你会觉得在减去1时进行索引操作有点奇怪，让我告诉你在Python中的意思。它的意思是，我们不是简单地做减去1，你可以理解为这表示utah_sorted的长度，然后减去1，实际上是一样的。所以utah_sorted的长度是37，如果你查看utah_sorted，试图获取37，那是超出范围的。
- en: because python is zero base so you've got to actually go one before that to
    get the second。 last one which is going to be 36 here okay so we can make a little
    sort by if we want to so。 let's do that we're going to say def sort by and this
    is just going to be a wrapper around。 sorted so i'm going to take rows and then
    i'm going to take a column and this is just going to be。
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 因为Python是零基础，所以你必须实际向前走一位才能得到倒数第二个，即36。好的，我们可以做一个排序，如果我们想要的话。让我们来做这个，我们会说def
    sort_by，这只是对sorted的一个包装，我将接收行，然后接收一个列名，这将是。
- en: the column name so this will allow me to just pass in a column name to sort
    it by here and then。 what i'm going to do here is i'm going to define a function
    inside of this say get called name。 and it's going to take a single row single
    row item it's going to say return。 row and do an index and say call name so this
    is kind of interesting python will light a nest。
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 列名，这将允许我只传递一个列名来进行排序。接下来我会在这里定义一个函数，叫做get_called_name，它将接收一个单行项并返回。行和索引，返回列名，这在Python中有点有趣。
- en: function in here so i can define a function here this is the local function
    that will be used。 when sort by is called and then when sort by goes away this
    function will go away as well so you don't。 have access to it at the global level
    you only have access to it inside of sort by and then i'm just。 just going to
    say return sorted rows key equal call name okay so let's run this what i'm going
    to do。
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 这里定义一个函数，以便我可以在这里定义一个本地函数，这个函数将被用于`sort by`的调用中。当`sort by`结束时，这个函数也会消失，因此你不能在全局层面访问它，只能在`sort
    by`内部访问它。我将说返回排序后的行，关键字等于调用名称，好吧，我们来运行这个，我将要做的是。
- en: at the bottom here is i'm just going to i'm typed in a bunch of stuff and i'm
    a lazy program i don't。 like to keep typing that so i'm going to say res is equal
    to read csv i'm going to read covid。 csv and then i'm going to say utres is equal
    to filter rows and then the state will be ut and then。 i'm going to say utres
    is equal to sort by just going to and then sort utres by the date。
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在底部，我输入了一堆东西，我是个懒惰的程序员，不喜欢不断输入。因此，我将说res等于读取csv，我将读取covid.csv，然后我将说utres等于过滤行，然后状态将是ut，然后我将说utres等于按日期排序。
- en: in there okay so let's just run that and see if this works。 okay and i got i
    got an error here name error on 148 says rows is not defined and that's because。
    i have res instead of that okay okay let's just push it back up the hill fix that
    come up here。 push it back up the hill see if it explodes again。
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们就运行一下看看这是否有效。好的，我在这里遇到了一个错误，148行的名称错误表示行未定义，这是因为我有res而不是那个。好的，好的，让我们把它推回山上，修复那个，回到这里，再推回去看看是否会再次爆炸。
- en: okay now it says stir is not callable here okay and so you got an error here
    on line 45。 so this is line 45 right here and i can do various debugging techniques
    again i can do my uh you know。 my rubber duct debugging so this time maybe i'll
    ask ringo what's going on here so i'm passing in。 rows and a column name and i
    what i want to do ringo is i'm going to take my rows and i want to pull。
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 现在它显示“stir”不可调用，好的，且你在45行这里遇到了一个错误。这是第45行，我可以使用各种调试技术，再次我可以进行我的橡胶鸭调试。这次也许我会问ringo这是什么情况，所以我传入了行和列名，而我想要做的是从我的行中提取。
- en: off the value for each column name there and sort by the value for each column
    name so i'm going to。 do that ringo is i'm going to make a function that pulls
    off the value for the column name and sort。 by that function as the key function
    so i'm going to pass in into the sorted my rows and as key i'm。 going to pass
    in the key function oh look at that i passed in call name i did not pass in this。
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我将要做的是，我要创建一个函数，从列名中提取值，并将其作为关键函数进行排序。所以我将传入排序我的行，并将关键传入关键函数。哦，看那，我传入了调用名称，而不是我正在创建的这个函数，所以我在这里输入了正确的内容。
- en: function that i'm getting that i'm creating here so here's put in that right
    there okay so。 hopefully this helps you see like this helps me be a little bit
    more lazy i would have had to type。 that out a couple times and just by putting
    in there i don't have to type it out as much so。 hopefully it works now push it
    back up the hill， okay cool so i think i think we're good on that so link the
    utah res 37 mute res zero。
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这能帮助你看到这让我变得懒惰一点，我本来需要多次输入那段代码，而通过把它放在这里，我不需要那么多次输入。所以希望它现在能工作，将它推回山上。好的，我想我们在这方面做得不错，所以链接到犹他州的res
    37，静音res零。
- en: okay so there's the first one looks like we have sorted data now okay so now
    would be a great time to。 pause your code and make sure that you can get sorted
    data here and and if you have errors or。 whatnot fix those errors hopefully i've
    showed you some of the techniques that you can use to debug。 those errors and
    solve those okay at this point what we're going to do is we're going to step onto。
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，首先的结果看起来我们已经有了排序的数据。现在正是暂停代码并确保你能在这里获取排序数据的好时机，如果你有错误或者其他问题，请修复那些错误。希望我已经展示了一些你可以用来调试那些错误的技巧并解决它们。现在我们要做的是，我们将逐个处理每个列名的值，并根据每个列名的值进行排序。
- en: our next point and that is we're going to plot these so let's do some plotting
    here in order to。 plot these i want to use a library called mapplotlib python
    doesn't have a plotting library。 built into the standard library so we're going
    to use mapplotlib to do this there is a library。 called mapplotlib。org and this
    is a nice little library it's been around for a long time but。
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们要做的就是绘制这些图形。为了绘制这些，我想使用一个叫做 mapplotlib 的库，Python 的标准库中没有内置绘图库，所以我们将使用 mapplotlib
    来完成这个任务。这个库叫做 mapplotlib.org，它是一个存在了很长时间的不错的小库。
- en: allows you to do two-dimensional plots you can do some three-dimensional plots
    you can also animate。 some plots as well let me just show you maybe what i think
    is the most best feature of this。 website here is this examples page， so if you
    if you go to the examples page here you can see just a bunch of different plots。
    and if you click on one of them， it will load the code for that。
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 允许你进行二维绘图，还可以进行一些三维绘图，甚至可以为某些图形添加动画。让我给你展示一下我认为这个网站上最好的功能就是这个示例页面，所以如果你访问示例页面，你会看到一堆不同的图形。如果你点击其中一个，它会加载该图形的代码。
- en: and so what you should be able to do is you should be able to download those
    and put it in its own file。 and it should make a plot here now generally when
    i'm using mapplotlib i'm using it from jupiter。 notebooks instead of idle here
    but you can take this and put it in idle as well so this is really。 cool what
    it allows you to do is basically you know you download a python file here you
    can run。
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你应该能够下载这些代码并将其放入自己的文件中。这样应该能在这里生成一个图形。通常，当我使用 mapplotlib 时，我是从 Jupyter 笔记本中使用，而不是在
    IDLE 中使用，但你也可以把它放到 IDLE 中，这真的很酷。它允许你下载一个 Python 文件并运行。
- en: this if you want to and make sure that it works now in our case is not going
    to work right now。 because we don't have mapplotlib installed so let's let's work
    on getting mapplotlib installed so。 that's what we're going to do right now um
    i'm going to go back to my terminal here now you probably。 only have one terminal
    open because um because you started idle with that and so this is the one。
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想这样做，确保它能正常工作。现在在我们的情况下，它现在不会工作，因为我们没有安装 mapplotlib。所以我们现在要做的就是安装 mapplotlib，这就是我们要做的。嗯，我要回到我的终端。现在你可能只有一个终端，因为你是用这个打开了
    IDLE，所以这是那个终端。
- en: where i started idle it's got all this noise in it right now don't necessarily
    want you to kill。 idle what i want you to do is make a new terminal and with your
    new terminal you can activate your。 virtual environment here so we're going to
    say source temp mind in the temp directory your。 yours should probably be in the
    same directory so you can just cv to that directory and on unit。
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 我在启动 IDLE 时，它现在有很多噪音，我并不一定想让你关闭 IDLE。我想让你做的是打开一个新的终端，在这个新的终端中你可以激活你的虚拟环境。我们将说
    source temp，假设在 temp 目录中，你的应该也在同一个目录下，所以你可以直接 cd 到那个目录。
- en: systems you say source temp emv bin activate and there we go we are activated
    and all we have to do。 now is say pip install mapplotlib and this is going to
    go out and install mapplotlib for us。 let me show you how to do that on windows
    here same thing i mean i need to come over here and start a new。 command prompt
    here so i'm going to change i'm going to say cd to the directory where i am。
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 系统上你说 source temp emv bin activate，就这样，我们激活了，现在我们要做的就是说 pip install mapplotlib，这将为我们安装
    mapplotlib。让我给你展示在 Windows 上怎么做，方法是一样的，我需要过来这里，打开一个新的命令提示符，所以我将改变目录，cd 到我所在的目录。
- en: okay and then inside of this i'm going to activate my virtual environment here
    and so。 remember uh source does not exist on windows my virtual environment in
    this case is in my users。 mat in v's three six and then in there there's a script
    file not a bin file but a script。 file in there there's an activate and here i
    can just say pip install appplotlib。
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，然后在这里我将激活我的虚拟环境。请记住，source 在 Windows 上并不存在。我的虚拟环境在我的用户目录下的 mat 的 v3.6 中，里面有一个脚本文件，而不是
    bin 文件，里面有一个 activate，我在这里可以直接说 pip install appplotlib。
- en: okay um you can see that's thinking over here， so。 trying to record the screencast
    and broadcast it simultaneously to link in and。 twitter is bringing my computer
    down to its knees but it should respond here pretty quickly。 so so the idea of
    what we want to do is we want to take our data here uh our death data or our。
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，你可以看到这里在思考，尝试同时录制屏幕录像并广播到LinkedIn和Twitter，这让我的电脑变得很慢，但应该很快就会响应。因此，我们想做的是使用我们的数据，呃，我们的死亡数据。
- en: positive data and we want to make a little plot from that so we'll we'll do
    that as soon as we get。 mapplotlib loaded here let me talk about pip pips is short
    for pip installs python and it's a tool。 that's included in python three again
    if you go to my book tiny python notebook at the bottom of。 that there's that
    section on environments and right here there's a small section on installing。
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要从正数据中制作一个小图，所以在我们加载matplotlib后立刻会做到这一点。让我谈谈pip，pip是“pip installs python”的缩写，它是Python
    3中包含的工具。如果你去看我的书《微型Python笔记本》，在底部有一个关于环境的小节，这里有一个关于安装的小节。
- en: you just say pip install your package and it will install those package you
    can also uninstall。 packages if you want to okay so it looks like our windows
    version worked。 um our our mac version okay did work now okay so now what we're
    going to do is we're going to make。 our little plot so i'm going to go back up
    to the top here and i'm going to say import matplotlib。
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 你只需输入`pip install your package`，它就会安装那些包，如果你想的话也可以卸载包。好的，看起来我们的Windows版本成功了，我们的Mac版本也可以工作，现在好的。那么我们要做的就是制作我们的小图，所以我会回到顶部，然后说import
    matplotlib。
- en: py， plot as pl looks space as plt so inside of places where python looks to
    load libraries there's a。 directory called matplotlib so i have that there's a
    file called pyplot。py and i'm aliasing that as。 plt that's a common alias that
    people who use matplotlib use so i'm just following suit and using。 that alias
    here allows me to get access to various matplotlib functionality here okay so
    what i'm。
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '`py， plot as pl`看作`plt`，所以在Python加载库的地方，有一个目录叫做matplotlib，我有这个目录，里面有一个文件叫做`pyplot.py`，我将其别名为`plt`，这是使用matplotlib的常见别名，所以我只是在遵循这个惯例，使用这个别名使我能够访问各种matplotlib功能。'
- en: going to do here is i'm going to just run this code again and i should have
    the matplotlib in there。 and i'm going to try and see if i can make a little plot
    maybe before i i do this this might crash my。 machine hopefully it doesn't but
    just for funsies i know when i do trainings like this a lot of people。 really
    like to have this terminal output here so i'm going to save this before i do anything
    too。
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里要做的是再次运行这段代码，应该会有matplotlib在里面。我会尝试看看能否画一个小图，可能在我做这件事之前，这会崩溃我的机器，希望不会，但只是为了好玩，我知道像这样的培训很多人真的喜欢在这里看到终端输出，所以在我做任何事情之前我会先保存一下。
- en: bad here to make sure you have it so this is just i'm going to call this rub
    bold。txt i'm just going to， save this so this will be in the dropbox as well if
    you want to access that okay so this point if。 we look we say dur looking what's
    in our namespace we have uh plt and we have utah res here so so this。 is awesome
    what i can do is i can say on plt you can say dur on plt you can see what's in
    there。
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我会确保你有它，所以这只是我会叫这个文件为rub bold.txt，我会保存它，因此如果你想访问的话，这也会在Dropbox中。好吧，这时如果我们查看，输入`dur`来查看我们的命名空间，我们有`plt`和`utah
    res`，所以这太棒了，我可以在`plt`上输入`dur`，你可以看到里面有什么。
- en: 67 lines so there's a bunch of stuff in here uh don't really have time to go
    over much of any of。 matplotlib would advise you you know if you want to understand
    it better check out the documentation。 or various courses or whatnot in there
    um there there's a lot of good material for matplotlib。 but what i'm going to
    do is i'm going to i'm going to make a figure what's called a figure and an。
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 有67行，所以这里有很多内容，没时间详细讨论。关于matplotlib，我建议你如果想更好地理解，查看文档或各种课程，那里有很多很好的资料。但我将要做的是制作一个被称为“图”的图形。
- en: axis here i'm going to say plt。subplots， and then i am going to say ax so figures
    like paper axis is where the plot is i'm going to say。 x。plot and let's try mplot
    and we've got this res uh utah res here okay so what i want to plot。 maybe is
    the positive values here so just to get the positive um maybe i'm gonna jump in
    the。 gun a little bit maybe i want to do a another function here that says death
    get value so it's。
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我将说plt。子图，然后我将说ax，所以图形就像纸上的坐标轴，我将说。x。绘制，让我们试试mplot，我们有这个res，犹他州的结果在这里。好的，所以我想绘制的可能是这里的阳性值。只是为了获取阳性值，嗯，也许我会有点急，可能我想做另一个函数，说死亡获取值，所以。
- en: going to take rows and it's going to have a key name or call a name。 and it's
    going to uh say the results is equal to this and then it's going to say four row
    in rows。 we're just going to pull out and say res。append into our res we're going
    to pull out from our row the。 column name this will pull it left plot like positive
    and have it just be a list of just the。
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 将要获取行，并且它将具有一个键名或调用名。然后它将说结果等于这个，然后将说对于行中的每一行。我们将提取并说res。追加到我们的res中，我们将从我们的行中提取列名，这将提取出正值的左侧图，并且它只会是一个正值的列表。
- en: positive values here okay let's let's push this back up the hill so come up
    here to run and say run。 module okay so this looks like it's working okay um。
    we'll come up here we'll make our plot we'll say ax。plot and we're gonna say utah
    res and we don't。 want plot utah res we're on to get value on utah res and we're
    going to get the positives。
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 阳性值在这里，好吧，让我们把这个推上山，所以上到这里，运行并说运行。模块，好吧，这看起来工作正常。我们会在这里制作我们的图，我们会说ax。绘制，我们将说犹他州的结果，我们不想绘制犹他州的结果，我们想获得犹他州结果的值，并且我们将获取阳性值。
- en: okay so this gave us this map plotlib result if we want to look at that we're
    going to say klp。show。 and there we go there is our little plot this is the plot
    for utah of the positive values in。 coronavirus so this is interesting i can i
    i've been tracking this locally just because i couldn't。 find anything that this
    and i wanted to see like you know does social distancing work or what not it。
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这给了我们这个map plotlib的结果。如果我们想看这个，我们会说klp。显示。来吧，这就是我们的小图，这是犹他州的阳性值的图。很有趣，我一直在本地跟踪这个，因为我找不到任何相关信息，我想看看，比如说，社交距离是否有效等等。
- en: looks like at least from the point of view of utah it sort of has um after you
    know the 15th or so people。 start staying home it looks like we've had like linear
    growth since then so the scale here there's。 not a logarithmic scale and so if
    this was you know exponential you would see the curve sort of go。 up but it's
    just you know the past two weeks has basically been flat growth so it's not stopping。
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来至少从犹他州的角度来看，差不多在15号之后，人们开始待在家里，看起来从那时起我们就经历了线性增长。所以这里的尺度并不是对数尺度，所以如果这是，嗯，指数增长，你会看到曲线在上升，但它只是，过去两周基本上是平稳的增长，所以没有停止。
- en: growing but it's not doesn't seem to be increasing growing as well okay so that's
    kind of cool um。 let's do something else here let's plot in addition we'll plot
    death let's see if we're gonna do death。 okay and let's also plot i think there's
    a hospitalized in there let's just look at eukres and see。 i'm gonna say eukres
    zero and pull off the keys here so look at the keys in there and there is。
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在增长，但似乎没有显著增加，好的，这有点酷。嗯，让我们做点别的，除了绘图，我们还要绘制死亡人数，让我们看看是否要绘制死亡人数。好吧，我觉得这里有住院人数，让我们看看eukres。我会说eukres零，并提取这些键，因此查看那里的键。
- en: hospitalized there let's let's try and do that as well， okay and then we'll
    do klk。show again。 and hopefully this pulls it up okay we might need to。 the interaction
    here with uh with idle is probably not ideal um and map plotlib so。 okay and so
    here's our plots here you can see these sort of get blown out the deaths and the。
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 住院在那儿，我们来试试这个，好吗，然后我们再做klk。再次显示。希望这能正常显示，我们可能需要。这里与闲置的交互可能不是理想的，嗯，还有map plotlib。所以。好吧，这里是我们的图，你可以看到这些死亡人数被放大了。
- en: hospitalized relative to these other ones here i think is that we are plotting
    all of those on。 the same plot here okay um is this the best plot ever no it's
    not the best plot um can we clean up。 yeah we could clean it up um rather rather
    than spend a lot of time cleaning it up and sort of you。 know this is not a case
    course on map plotlib it's more just on how to use python but i'd like to do。
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 与这些其他图表相比，我认为我们将所有这些都绘制在同一个图表上。好的，这个图表是最好的图表吗？不是的，它不是最好的图表。我们可以清理一下吗？是的，我们可以清理一下，但与其花大量时间来清理，而你知道，这不是关于
    Matplotlib 的课程，它更多的是关于如何使用 Python，但我想要。
- en: rather instead is now jump ship a little bit and put some tests around our code
    show how to do some。 testing with our code and then show how to make a command
    line interface for our code so now would。 be a great time to pause this and make
    sure that you have this code working and make sure that you're。 able to make a
    little plot of of the values there okay so what we're going to do now is we're
    going。
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，现在稍微跳出主题，为我们的代码添加一些测试，展示如何对我们的代码进行一些。测试，然后展示如何为我们的代码创建一个命令行接口，所以现在是暂停并确保你有这个代码运行的好时机，并确保你能够制作出一些值的图表。好的，现在我们要做的是。
- en: to do some tests around this so what i want to do is i'm going to come up here
    to file and say new。 file let's make a test we're gonna we got a couple options
    for writing tests i'm just going to leverage。 the built-in testing framework in
    python this is called a unit test framework here and so。 we'll use that we're
    gonna so make a new file here and at the top of your new file you're gonna say。
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 进行一些测试，所以我想要做的是，我将来到文件并选择新建文件。让我们创建一个测试，我们有几个选项来编写测试，我将利用。Python 中内置的测试框架，这叫做单元测试框架，因此。我们将使用这个框架，所以在你的新文件的顶部，你需要写。
- en: import unit test and unit test is a library it's in the standard library of
    python it came out。 around the year 2000 and python 2。0 and this library was ported
    from java so there's a。 library in java called j unit java's object oriented programming
    language python supports。 object oriented programming but you can see we haven't
    defined any classes over here we've just。
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '`import unittest`，而 `unittest` 是一个库，它在 Python 的标准库中，大约在 2000 年左右与 Python 2.0
    一起发布。这个库是从 Java 移植过来的，所以在 Java 中有一个库叫做 JUnit，Java 是一种面向对象的编程语言，Python 也支持。面向对象编程，但你可以看到我们在这里没有定义任何类，我们只是。'
- en: done everything at the function level so python is actually what i would call
    a multi-paradomatic。 programming language it supports object oriented programming
    supports procedural programming so。 what we've been doing is more procedural also
    supports functional constructs which is you would。 find in a list or closure or
    scheme but because this unit test library was ported from java it。
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数级别上完成了一切，所以 Python 实际上是我所称之为的多范式编程语言，它支持面向对象编程，也支持过程式编程。因此，我们一直在做的更多是过程式编程，同时也支持函数式构造，这些构造你可以在列表、闭包或
    Scheme 中找到，但由于这个单元测试库是从 Java 移植过来的，它。
- en: requires you to use classes so let's let's use some classes here so i'm going
    to say class and i'm。 i'm going to make a class called test uh covid and you'll
    not be class is orange because that's。 the keyword that's part of the language
    when you're defining a class you have to say class this test。 covid is the name
    of the class in this case we're going to subclass unit test here so i'm going
    to。
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 需要你使用类，所以我们来用一些类。我将说 `class`，我将创建一个叫做 `TestCovid` 的类，而 `class` 这个关键词是语言的一部分，当你定义一个类时，你必须说
    `class`，在这种情况下 `TestCovid` 是类的名称，我们将从 `unittest` 子类化。
- en: say unit test。test。capital case here and put that in parentheses here if we're
    defining our own。 class we don't need to subclass it we would just put the class
    name and then put a uh。 parentheses or a colon at the end now remember whenever
    we have a colon at the end of the line we。 need to indent that next line here
    so you're going to indent the next line and maybe i'll。
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 说 `unittest.TestCase`，在这里以大写形式写入，并将其放在括号中，如果我们正在定义自己的类，我们不需要子类化它，只需写下类名，然后在末尾加上一个。括号或冒号。现在记住，每当我们在行末有冒号时，我们需要缩进下一行，因此你将缩进下一行，也许我会。
- en: all write a little test to test read csv i'm not going to do one to fetch url
    just because i don't。 want to do the network uh traffic here but um i'll all right
    one to test read csv and so unit test。 module follows the x unit paradigm the
    x unit paradigm came out with small talk the x unit。 paradigm says if you're going
    to test something you do some setup you call you call your unit you。
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 我会写一个小测试来测试读取csv，我不打算写一个来获取url，只是因为我不想在这里进行网络流量。但我会写一个来测试读取csv，因此单元测试模块遵循x unit范例，x
    unit范例来自于small talk。x unit范例说如果你要测试某些东西，你需要进行一些设置，然后调用你的单元。
- en: make some assertion about the call to your unit and then you do some tear down
    the setup and tear。 down in order to get your test in a state where they will
    run consistently in our case um our setup。 would be making sure that we have some
    csv file on the disk in this case i do have a csv file on。 the lid on the disk
    so i'm not really going to go through setup here but if this were production i。
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 对你的单元调用做一些断言，然后进行一些拆卸，设置和拆卸，以便让你的测试处于一种可以一致运行的状态。在我们的例子中，我们的设置是确保我们在磁盘上有一些csv文件，在这种情况下我确实在磁盘上有一个csv文件，所以我并不打算在这里详细说明设置，但如果这是生产环境，我会。
- en: would want to make sure that i have this csv file on there so you might want
    to do that if you're。 doing production i'm not really going to go over that just
    i'll just sort of say be aware of that if。 i move the csv file since this test
    is not dependent on it it would fail so we're going to say uh the。 result is equal
    to read csv and we're going to say covid。
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 我想确保我在这里有这个csv文件，所以如果你正在进行生产，你可能想要这样做。我并不打算详细说明，只想提醒你注意，如果我移动csv文件，由于这个测试不依赖于它，它将会失败，所以我们将说，结果等于读取csv，我们将说covid。
- en: dot csv and then just give us a result and i'm also going to say self dot assert
    equals and i'm going。 to assert that the the length of res whatever it is i think
    it's 2014 or something let's do that and。 we'll see what happens here okay so
    there there is our test so so here is calling our unit our quote。 unit and here
    is making insertion about it now you'll note that the assert equals here this
    looks like。
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: .csv，然后给我们一个结果，我还将说self.assertEquals，我将断言res的长度，无论它是什么，我认为是2014之类的，我们来试试，看看会发生什么。因此，这就是我们的测试，这里调用我们的单元，而这里进行了一些断言。你会注意到assertEquals，这看起来像。
- en: what's called camel casing and over here i'm using underscores between words
    uh so again this is due。 to the fact that this unit test library came from java
    this is the naming images that java uses。 python there's a document called pepe
    which recommends not using this naming convention however。 there are contradictions
    inside the standard library python itself where some naming conventions。
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 这里所说的叫做驼峰命名法，而我在这里使用的是下划线分隔单词。这是因为这个单元测试库来源于java，这是java使用的命名方式。Python中有一个文档叫做pepe，建议不要使用这种命名约定，然而，Python标准库内部存在一些命名约定的矛盾。
- en: are violated so just just be aware of that fyi okay at the bottom of this i'm
    going to put a little。 snippet here i'm going to say if under name equals equals
    the stringed under main so this little snippet。 right here if this is true this
    means that we're executing this file let's put a little else here。 otherwise we
    are loading this file， as a library， i'm about to print loading down here and
    if i'm executing it what i want to do is i want to say unit test。
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 被违反了，所以请注意这一点，供你参考。在此底部，我将放一个小片段，我会说如果__name__等于字符串__main__，那么这个小片段如果成立，这意味着我们正在执行这个文件。让我们放一个else，否则我们正在将这个文件作为库加载，我即将打印加载，如果我在执行它，我想说unit
    test。
- en: not main so in a unit test module there's a main function if i run that what
    it will do is it will。 look for any classes at subclass unit test look for any
    methods that are test that start with test。 in there and it will run those and
    it will report on those okay so at this point we have our basic unit。 test ready
    we're going to come up here to run and say run it i'm going to put it in the same
    directory。
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在单元测试模块中有一个主函数。如果我运行它，它将寻找任何子类为unit test的类，寻找任何以test开头的方法，并运行它们，最后报告结果。因此此时我们已经准备好我们的基本单元测试，我们将来到这里运行并说运行它，我将把它放在同一目录中。
- en: as our covet here it's going to ask us to save it and i'm going to say that
    as test underscore covet。 i don't need to save it as this but it's good naming
    convention to use start naming it with test。 because there are multiple test run
    well there are test runners in python and one that's very popular。 pie test adopts
    this convention so if you use that convention it will be able to discover these
    tests。
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 作为我们的 `covid`，它会要求我们保存它，我将其命名为 `test_covet`。我不需要这样保存，但使用这种命名约定是好的，开始命名时用 `test`，因为有多个测试运行。好吧，Python
    中有测试运行器，而其中一个非常流行的 `pytest` 采用了这种约定，所以如果你使用这种约定，它将能够发现这些测试。
- en: here okay so this should save this it should run over here it should say restart
    you see that i'm。 restarting it and i've got some output here and i got namair
    we got the dreaded namair okay so namair。 online six here it's complaining about
    this online six so namair again what does namair mean namair means。 that python's
    looking for a variable and can't find it it's looking for reach csv and can't
    find it。
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，这应该保存，它应该在这里运行，它应该说重新启动。你看到我正在重新启动，并且得到了些输出，我得到了 `NameError`，我们得到了可怕的 `NameError`。好吧，`NameError`
    在第六行，它在抱怨这一行。所以 `NameError`，那 `NameError` 是什么？`NameError` 意味着 Python 在寻找一个变量却找不到，它在寻找
    `read csv`，却找不到它。
- en: so python looks basically in three places it looks in the local namespace the
    global namespace and。 the built-in namespace and in this case is read csv in the
    local namespace no what's in the local。 namespace we are in a method here and
    the method has self and res in the local namespace but there's。 no reads csv in
    there so doesn't find it there so it looks in the built-in or the global namespace。
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 所以 Python 基本上在三个地方查找，它查找本地命名空间、全局命名空间和内置命名空间，而在这个例子中，本地命名空间没有 `read csv`。在本地命名空间中，我们在一个方法里，这个方法有
    `self` 和 `res`，但是没有 `read csv`，所以它在那里找不到，于是它在内置或全局命名空间中查找。
- en: what's in the global namespace well we define this class at the global level
    so that's global。 and the unit test import there is global but read csv is not
    so can't find it there finally it looks。 in the built-in built-in is anything
    that's purple like print read csv is not purple so it fails so。 we get hence we
    get this name error over here so in order to give this to work we need to leverage。
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 全局命名空间中有什么呢？我们在全局级别定义了这个类，所以这是全局的，而单元测试导入也是全局的，但 `read csv` 不是，所以在这里找不到。最后，它查看内置的，内置的就是任何像
    `print` 这样的紫色对象，而 `read csv` 不是紫色的，所以失败了。因此，我们得到了这个名称错误。所以为了让这个工作，我们需要利用。
- en: this module over here so remember i saved in the same directory as that so i
    can come over here and。 i can say import covid and because there's a file called
    covid。py in the same directory python。 we'll be able to load it now i could run
    this again and i'll do that just for funsies you know see that。 it will still
    fail here because now covid is in our namespace but reads csv is still not but
    if we。
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模块在这里，所以记住我在与那个文件相同的目录中保存的，所以我可以过来并且可以说 `import covid`，因为在同一目录中有一个名为 `covid.py`
    的文件，Python 能够加载它。现在我可以再次运行这个，只是为了好玩，看看它仍然会失败，因为现在 `covid` 在我们的命名空间中，但 `read csv`
    仍然不在。但如果我们。
- en: came over here after this runs it's thinking okay it failed if we if we do a
    dura on this we'll see。 that covid is in our namespace we do a dura on covid covid
    or if we just look at covid。 covid is a module and you can see that it's a python
    file that's what a module is and we can say。 dura on the file you can see that
    inside of that we do have read csv so in order to access this over。
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个运行后过来，它在思考，好吧，它失败了。如果我们对这个做一个 `dir`，我们会看到 `covid` 在我们的命名空间中。我们对 `covid` 做一个
    `dir`，或者如果我们只是查看 `covid`，`covid` 是一个模块，你可以看到它是一个 Python 文件，这就是模块的定义。我们可以对文件做一个
    `dir`，可以看到里面确实有 `read csv`，所以为了访问这个。
- en: here what we say is covid period so python when period follows a name it's going
    to search in。 that object for that name here at this point it should work keep
    my fingers crossed push this。 back up the hill see if it runs or explodes okay
    it's thinking。 okay and yeah it looked like it ran now we have an assertion error
    uh 2112。
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们说的是 `covid` 模块，所以 Python 当名字后面跟着一个点时，它会在该对象中搜索这个名字。在这一点上，它应该能正常工作，祈祷一切顺利，看看它是运行还是崩溃。好的，它在思考。好吧，看起来它运行了，现在我们有一个断言错误，错误代码为
    2112。
- en: and i equal to 2215 so if i changed this here 2212 just going to assume that
    that's a correct one。 by inspection uh and we'll change that there when we rerun
    this it should say that we ran one test。 and it did not fail okay it says please
    use assert equal instead of this so there's a。 application error so we can fix
    that and run it again it should just say ran one test。
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 我把 i 设置为 2215，所以如果我把这里改为 2212，只是通过检查假设这是正确的。我们在重新运行时，它应该说我们运行了一个测试，并且没有失败。好的，它说请使用
    assert equal 而不是这个，所以有一个应用程序错误，我们可以修复它并再次运行，它应该只是说运行了一个测试。
- en: okay cool so there is a little test to test that out um let's write another
    test here maybe we'll。 test like get value here so i can come over here to def
    test get value and this is a method so it。 needs to have self as the parameter
    as a parameter to the method there uh so this takes rows and a。 column name and
    it returns just the value from that so i can i can stub out some data if i want
    to i。
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，很好，所以有一个小测试来测试一下。嗯，让我们再写一个测试，可能我们将测试像 get value 这样的东西，所以我可以过来这里，定义 test get
    value，这是一个方法，所以它需要有 self 作为参数。它接受行和列名，并仅返回该值，所以如果我想，我可以先创建一些数据。
- en: can say data is equal to a dictionary it has name mat and then another dictionary
    that has name。 to z okay and if i were to call this now the result is equal to
    covid get value and i want to get。 from data uh the column name name and then
    i should be able to say self assert equal and res。 should be a list with mat and
    suzi in it and so i have access to the assert equal method because i。
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 可以说数据等同于一个字典，它有名称 mat，然后另一个字典名称为 z。好吧，如果我现在调用这个，结果等于 covid 的值，我想从数据中获取列名为 name
    的内容，然后我应该能够说 self assert equal，结果应该是一个包含 mat 和 suzi 的列表，因此我可以访问 assert equal 方法，因为我。
- en: subclass this test up here so let's run that and see if this works。 okay cool
    so we have two tests that work that looks like it's working awesome。 okay so now
    would be a great time to pause this and make sure that your tests run and。 if
    you have issues getting them running common issues that i see getting them running
    you're not。
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在这里子类化这个测试，然后运行看看是否有效。好的，很好，我们有两个测试可以工作，看起来不错。好吧，现在是暂停的好时机，确保你的测试能运行。如果你在运行测试时遇到问题，常见的问题是你没有。
- en: importing or you didn't save this file in the same directory as the other one
    or you didn't。 save this file as lowercase covid dot 19 or lowercase covid dot
    py this is looking for the same。 file name without the py on it in in the same
    directory okay so what i'm going to do now is i'm。 going to demo installing another
    library and we'll look at code coverage for this so maybe i'll。
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 导入文件时，或者你没有将此文件保存在与另一个文件相同的目录中，或者你没有将此文件命名为小写的 covid dot 19 或小写的 covid dot py。这个程序正在寻找相同文件名的文件，而没有
    py，且在同一目录中。好的，所以我现在要做的是演示安装另一个库，我们将看看代码覆盖率。
- en: jump over to my windows machine it might be a little bit snappier for me since
    it's not doing all this。 other stuff so i'm going to say pip install coverage
    we're going to install a code coverage tool now if。 let me just show you what's
    going on behind the scenes when you say pip install coverage。 um there there's
    a website called pypi this is a python package index and this is a website that。
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到我的 Windows 机器可能会让我感到更顺畅，因为它没有做其他所有的事情。所以我将说 pip install coverage，我们将安装一个代码覆盖工具。让我先给你展示一下在你说
    pip install coverage 时，后台发生了什么。嗯，有一个名为 pypi 的网站，这是一个 Python 包索引，这个网站基本上是所有人想发布并提供给其他人的
    Python 包的仓库。
- en: basically is a repo for all the python packages that people want to release
    and make available to。 others this is the cool thing down here if you look at
    this there are almost a quarter of a million。 projects that you can leverage with
    python so this is really cool um basically allows you to stand。 on the shoulders
    of giants so if i wanted to find out about code coverage i can type in coverage。
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 这下有趣的地方是，如果你看这里，几乎有四分之一百万的项目可以用 Python 利用，所以这真的很酷，基本上允许你站在巨人的肩膀上。如果我想了解代码覆盖率，我可以输入
    coverage。
- en: into here and i can see that there are various tools for code coverage and click
    on this right。 here and this says coverage dot 5。1 i know that this is the code
    coverage tool that i want to use。 all you have to do is say pip install coverage
    remember because we made a virtual environment this。 will be isolated to our sandboxed
    install and so if some other project used a different version of。
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我看到有各种代码覆盖工具，点击右侧，这里显示的是 coverage 5.1。我知道这是我想使用的代码覆盖工具。你所要做的就是输入 pip install
    coverage，记住，因为我们创建了一个虚拟环境，这将与我们的沙盒安装隔离，所以如果其他项目使用了不同版本的覆盖工具，我们就不会发生冲突。
- en: coverage we want to have a conflict with that okay and then all we have to do
    is it's it's pretty。 straightforward to use i'll just show you how to use it right
    here um so i have an installed here i。 should be able to take coverage dot h or
    dash h this says you can measure collect and report on。 code coverage in python
    program so this is one of the reasons why i recommend that you use the。
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们要做的事情相当简单。我将向你展示如何使用它。我已经安装了这个工具，我应该能够输入 coverage -h 或 coverage --help，这里显示你可以测量、收集和报告
    Python 程序中的代码覆盖率，所以这也是我推荐你使用的原因之一。
- en: command line because you're going to get access to these tools a lot of them
    run from the command line。 if you're not familiar with them that can be or if
    you're not familiar with the command line。 that can hamper you doing a lot of
    things so if that's sort of like a hurdle that you you know。 haven't really you
    know you've always just clicked on things you never use the command line。
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行，因为你将会频繁使用这些工具，很多工具都是通过命令行运行的。如果你不熟悉这些工具，或者如果你对命令行不熟悉，那可能会妨碍你完成很多事情。所以如果这对你来说是一个障碍，你知道，你可能一直只是点击东西，从未使用过命令行。
- en: something that you need to get over if you if you really want to leverage the
    power python。 like i said i always think it's great to uh understand what's going
    on underneath。 again there are wrappers around coverage and and you can leverage
    those by um i'm。 for and believer that you should at least do it once or twice
    the hard way not that this is the。
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你真的想利用 Python 的强大功能，这需要你克服一些障碍。正如我所说，我始终认为了解底层发生的事情非常重要。再次强调，有关于代码覆盖的封装工具，你可以通过这些工具进行利用。作为一个信奉者，我认为你至少应该尝试一次或两次较为复杂的方法。
- en: hard way at all it's actually pretty straightforward so i'm gonna say coverage
    and then instead of。 saying python uh test that i'm just gonna say coverage test
    covid dot p y and and that didn't work。 i need to say coverage run yeah you see
    the the commands are i can say coverage run coverage。 whatever so i'm going to
    do coverage run okay and it looked like you gave me the same results here。
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上并不困难，我将输入 coverage，然后不输入 python test，而是直接输入 coverage test covid.py，但这没有成功。我需要输入
    coverage run。你看，这些命令我可以说 coverage run coverage。好的，我将执行 coverage run，结果看起来和之前一样。
- en: said ran to test blah blah blah um but if we look at in here um not i'll ask
    but dare you can see that。 it now drop this little coverage blob in here dot coverage
    and so what i can do now is this this is。 where coverage recorded what it instrumented
    so i can do coverage i want to generate a report i'm。 going to say coverage html
    okay so this is thinking。
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 我说运行测试等等，但如果我们在这里查看，你可以看到它现在在这里生成了一个小的覆盖 blob，名为 .coverage。我现在可以做的是，查看覆盖记录了什么。我想生成一个报告，我将输入
    coverage html。好的，这个过程正在进行中。
- en: okay and after we run that there is a directory called html cub and if you look
    inside of html。 cub there are a bunch of files in there so it did some some reporting
    in that let me just。 i'll open this from over here i'm gonna say open html cub
    and and that's a。 should be an index in here um html cub， let's open this one
    okay um。
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，在我们运行后，会生成一个名为 htmlcov 的目录，如果你查看 htmlcov 目录里面有一堆文件，所以它确实做了一些报告。让我从这里打开它，我将输入打开
    htmlcov，应该有一个 index 文件，嗯，htmlcov，我们打开这个文件。
- en: okay so here here is uh yeah there should there should be an index i think it's
    just copying it。 it hasn't copied it over yet， yeah so there there's an index
    following here let's see if it's see if it's still there。 okay so here here's
    our index you can see these are all the files that we did coverage on you can。
    see there are a bunch of uh map plotlib files that did but the ones we care about
    for example are。
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这里应该有一个索引，我想它只是还没有复制过来。好的，我们可以看到这里的索引，这里是我们进行了覆盖测试的所有文件，你可以看到有一些map plotlib文件，但我们关心的是比如说。
- en: test covid so these are test cases you can see that we did not cover this line
    of code down here。 and if we look at our actual code here our covid。py you can
    see that even this red was not covered。 so we did filter we did sort by we did
    get values here but we did not。 execute this fetch URL so that's one way to instrument
    your code understand what's going on there。
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 测试COVID，这些是测试用例，你可以看到我们没有覆盖下面这行代码。如果我们查看实际代码，covid.py，你可以看到甚至这个红色部分没有被覆盖。因此我们确实进行了过滤，确实进行了排序，确实得到了值，但我们没有。执行这个fetch
    URL，所以这是了解代码运行情况的一种方式。
- en: so this would be a great time to pause and make sure that you can run coverage
    on your code。 again how we did that was we said pip install coverage um， oops。
    okay we did pip install coverage then that installed coverage and then after that。
    we had a coverage binary here then we said coverage and then we did the run command。
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是暂停的好时机，确保你能对代码进行覆盖测试。再次回顾，我们使用了`pip install coverage`，然后安装了coverage，之后我们有了一个覆盖的二进制文件，接着我们执行了覆盖的运行命令。
- en: and we said coverage run test our test file there and then after that we did
    coverage html to。 generate our html report that made this a file that had the
    html in there that we can inspect。 so make sure you can get that working on your
    machine should be straightforward if you have。 created a virtual environment okay
    at this point what i want to do is what i consider the last part。
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 我们运行了coverage test我们的测试文件，然后在那之后我们执行了coverage html，以生成我们的html报告，这生成了一个可以检查的html文件。因此，确保你能在你的机器上运行这个，如果你创建了虚拟环境，这应该很简单。好吧，此时我想做的是我认为的最后一部分。
- en: of our little assignment here i want to make a command line application for
    this so we got our。 covid code right here i've hard coded doing utah right here
    but what i want to do instead。 so i'm going to make a little function here called
    plot state it's going to have a state。 it's going to have a file name and what
    i want to do basically i want to do this here。
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的这个小任务中，我想制作一个命令行应用程序，所以我们有我们的COVID代码。我在这里硬编码了犹他州，但我想要做的。是创建一个叫做plot state的小函数，它将有一个州和一个文件名，我基本上想要做的是。
- en: so i'll just indent this code here and um so maybe this is going to be the csv
    name and we'll make。 another one that's going to be the plot name okay so we're
    going to pass in the csv name here。 and we're going to filter by our state and
    then we are going to。 we're going to say fig comma ax is equal to plt dot subplots
    we make our subplots and then we'll say。
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 我将缩进这段代码，也许这将是csv名称，我们还将制作另一个作为plot名称。好的，所以我们将传入csv名称，然后按州过滤，然后我们将。我们将说fig，ax等于plt.subplots，我们制作我们的子图，然后我们将说。
- en: ax dot plot and we're going to say i think utres it's probably not a very good
    variable name because。 it's not ut anymore um maybe i'll just call this state
    res so this is the state。 res and then i'm going to plot get value from state
    res。 and we're going to plot death and positive and hospital hospitalized here。
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: ax.dot.plot，我们将说我想，utres这个变量名可能不是很好，因为它已经不再是ut了，也许我只会叫它state res。这是state res，然后我将从state
    res中获取值进行绘制，绘制死亡和确诊以及住院情况。
- en: whoops didn't want to do that， okay so okay so positive。 and hospitalized okay
    and then at the end after we've done this i believe there is a thing called。 save
    fig on our map plotlib so it's a fig which is the page and i think it's save fig。
    and we're going to save this as plot name， okay so let's just test this out make
    sure that this works。
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀，我不想这样做，好吧，所以我们将绘制确诊和住院情况。好的，最后在完成后，我相信在我们的map plotlib中有一个叫做save fig的东西，它是一个图形，我想是save
    fig。我们将把它保存为plot name，好吧，让我们测试一下，确保它有效。
- en: so again i'll just come up here to run and say run module。 okay and this is
    we're going to call the plot state function here， okay so let's do that plot state。
    and maybe we'll do ny and this csv name is covid dot csv and the plot name is
    going to be ny dot tng。 okay and we have utres here this needs to be state res
    they will push it back up the hill。
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我会回到这里运行，选择运行模块。好的，我们将调用 plot state 函数，所以让我们这样做 plot state。也许我们会用 NY，而这个 CSV
    名称是 covid.csv，图表名称将是 ny.tng。好的，我们在这里有 utres，这需要改为 state res，然后将其推回去。
- en: those name errors can get you again idl doesn't really do much to help you with
    that but there。 some other editors that are a little bit more powerful that will
    put little squiggles under that。 so i'm just going to put my cursor at the end
    of this line to copy it and i'll hit enter twice。 it's thinking okay it looks
    like it it might have generated a plot here let me just open this。
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 那些名称错误可能会再次出现，IDL 在这方面并没有提供太多帮助，但有其他一些更强大的编辑器可以在下面加上小波浪线。所以我将把光标放在这一行的末尾以进行复制，然后按两次回车。它在思考，好像生成了一个图表，让我打开看看。
- en: open and write up png， okay so there there is our new york city plot。 so again
    the map plotlib here is is a little a little buggy i'm going to i'm going to leave。
    that as an exercise to the reader to actually clean that up。 again this isn't
    a map plotlib class per se i want to show working with python more than than doing。
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 打开并写入 PNG，好的，所以这是我们的纽约市图表。所以这里的地图绘图库有点小问题，我将把这个作为练习留给读者去清理。再次强调，这并不是一个地图绘图库课程，我想展示的是如何更好地使用
    Python。
- en: that okay so so this looks like it's working what i'm going to do now is i'm
    going to add。 uh command line argument to this so we can run this from the command
    line and not have to use the。 rebel to do this let me just talk about various
    options for doing that if you are new to python。 you search for command line arguments
    you'd find that there's probably about 40 or 50 or 500 different。
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，所以看起来这个是有效的，我现在要做的是添加一个命令行参数，这样我们就可以从命令行运行它，而不必使用 REPL 来实现。让我谈谈各种选择，如果你对
    Python 不熟悉，你搜索命令行参数，会发现大概有 40、50 或 500 种不同的选项。
- en: options for doing that seems that basically a lot of people when they come to
    python they。 their first bike shedding experiences writing their own way to do
    command lines。 i'm going to use one that's in the python standard library called
    arg parcel let me just show you。 what's in there so i'm going to open this up，
    now this is the documentation on the python standard library the python standard
    library。
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 进行这项工作的选项似乎是，很多人在接触 Python 时，他们的第一次磨合经历是编写自己的命令行方式。我将使用一个在 Python 标准库中的，叫做 arg
    parse，让我给你展示一下里面有什么。所以我要打开这个，现在这是 Python 标准库的文档。
- en: tends to be more descriptive documentation describing all the options and what
    not。 rather than tutorial like this one's sort of an exception in fact at the
    very first here it has。 an example of how to use the code it actually links to
    a tutorial inside the python standard。 library this is in an exception most libraries
    in the python standard library documentation。
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 这个网站的文档通常更加详细，描述所有的选项等等，而不是像教程一样，实际上这是一个例外，事实上在最开始这里有一个如何使用代码的示例，它实际链接到 Python
    标准库内的一个教程。这是个例外，大多数 Python 标准库文档并不是这样的。
- en: aren't like this or more if you scroll down here like。 here's the class and
    here are all the parameters to it and and that sort of thing so useful if you。
    want to sort of have a deep understanding not very useful or not maybe as useful
    if you just。 want to get something going quick but this right here is the basic
    just about to use it you import。
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 并不像这样，如果你向下滚动，像这里是类，那里是所有参数等等，这在你想深入理解时很有用，但如果你只是想快速上手，可能就不太有用了，不过这里是基本的用法，你导入它。
- en: the library and you make this argument parser object here you add arguments
    to it to parse off。 what's passed in on the command line and then you call this
    parse args method here that dynamically。 creates an object that has whatever you
    passed in has attributes for that so that's what we're。 going to use i'm going
    to show you another website that i like as well this is this pie motw this is。
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个库中，你会创建一个参数解析对象，添加参数以解析命令行传入的内容，然后调用这个解析方法，动态创建一个对象，具有你传入的所有属性。所以这就是我们要使用的，我还想给你展示另一个我喜欢的网站，这是
    pie motw。
- en: the python module of the week by Doug Hellman it's a great website or i mean
    it was his blog i believe。 or a website he created as sort of a pseudo blog and
    eventually it became into a book and so this is。 a nice documentation you have
    there's a book here but it's also available online and this is more。 of tutorial
    type documentation and rather reference type documentation so check that out if
    you're。
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 每周的 python 模块，由 Doug Hellman 编写，这是一个很棒的网站，或者我认为它是他的博客，我相信或者是他创建的一个伪博客，最终变成了一本书，因此这是一个很好的文档，你可以看到这里有一本书，但它也可以在线获得，这更像是教程类型的文档，而不是参考类型的文档，所以如果你有兴趣，请查看一下。
- en: interested but again we are importing the library we make an instance of this
    argument parser we add。 arguments and then we parse the arguments here okay so
    let's do this on ours we're going to import。 the library up here so i'm going
    to come up to the top here i'm going to put my import after。 map potlib i like
    to separate my imports and pep8 uh recommends that as well map potlib is a third-party。
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣，但再次强调，我们正在导入库，我们创建这个参数解析器的实例，我们添加参数，然后我们在这里解析参数。好的，所以让我们在我们的代码中执行这个，我们将从上面导入库，所以我会回到顶部，我将在
    map potlib 之后放我的导入。我喜欢分开我的导入，pep8 也推荐这样，map potlib 是一个第三方库。
- en: library so i'm just going to leave that sort of as its own grouping here arg
    parse and you are a。 libr in the standard library we also need another library
    from the standard library which is the。 syst library syst library is going to
    allow us to read uh files off of the command line。 okay so you'll need to add
    those two imports arg parse and syst then let's go back to the bottom。
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 库，所以我只是把它留作自己的分组在这里 arg parse，你是标准库中的一个库，我们还需要另一个来自标准库的库，即 syst 库。syst 库将允许我们从命令行读取文件。好的，所以你需要添加这两个导入
    arg parse 和 syst，然后让我们回到底部。
- en: here and we're going to put a little snippet of code down here i'm going to
    say if under name。 equals equals the string under main okay if this is the case
    then we're going to call the。 a main function with syst。argv argv of the command
    line arguments we're going to slice those。 let's say slice them off from one to
    the end so why are we slicing these we're slicing these because。
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将放一个小代码片段，我将说如果 __name__ 等于字符串 __main__，好的，如果是这种情况，我们将调用一个 main 函数，传入
    syst.argv，命令行参数的 argv，我们将切片。假设从一切到最后切片，所以我们为什么切片，因为。
- en: syst。argv which is what python gives us as a list of the command line arguments
    includes the name of。 the python file that we're running by default we actually
    don't care about that python files we're。 pulling it off okay let's make a function
    called main there's no hard requirement that the function。 be named main but a
    lot of people do name functions main at the bottom let's just say we have a main。
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: syst.argv，这是 python 提供给我们的命令行参数列表，包括我们正在运行的 python 文件的名称，默认情况下，我们实际上不关心那个 python
    文件，我们将其移除。好的，让我们创建一个名为 main 的函数，函数名没有强制要求，但很多人确实将函数命名为 main。最后，让我们说我们有一个 main
    函数。
- en: function here that takes some command line arguments and we're going to make
    an argument parse i'm going。 to say ap is equal to arg parse argument parser okay
    on that i'm going to add some options here maybe。 i want to specify a state so
    i'm going to say add argument and the argument is state um。 we'll add and maybe
    we can say add argument dash dash state and i'll make a short option。
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个函数，它接受一些命令行参数，我们将创建一个参数解析器，我将说 ap 等于 arg parse 的参数解析器。好的，我将在这里添加一些选项，也许我想指定一个状态，所以我将说添加参数，参数是状态。
- en: dash s so we can do it like that okay and do the same thing add argument and
    we'll say。 c and dash just csv this is a csv file and we'll say ap to add argument。
    and we'll say dash o we'll say output and we can come over here and you can say
    help is equal to we。 can we can put a little help you can say that help is equal
    to。
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: dash s，所以我们可以这样做，好的，做同样的事情，添加参数，我们将说 c 和 dash 仅为 csv，这是一个 csv 文件，我们将说 ap 添加参数。我们将说
    dash o，我们将说输出，你可以过来，你可以说帮助等于，我们可以放一些帮助，你可以说帮助等于。
- en: kng file name show you what this does when we do it okay okay at this point
    we have made our。 arguments we're going to find what i'm going to say is i'm going
    to say opt is equal to， ap。parse args and we're going to parse the args that were
    passed in we're going to say if， opt。state if we got state then what we're going
    to do is we're going to call plot state。
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: kng 文件名展示了当我们这样做时的效果，好吧，现在我们已经定义了我们的参数，我们要找出我将要说的内容，我将说 opt 等于 ap.parse args，我们将解析传入的参数，我们将说如果
    opt.state 如果我们得到了状态，那么我们要做的是调用 plot state。
- en: and we're going to pass in opt。state opt。state opt。csv and opt。output okay i'm
    going to say this。 now i'm going to go to the command line i'm going to run this
    from the command line let me show you。 the code there again we added this little
    if under name equals the stream under main again this is。 saying this is saying
    are we executing this file are we running this file from the command line。
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将传入 opt.state，opt.state，opt.csv 和 opt.output，好的，我现在要说这个。现在我要去命令行，我将从命令行运行这个，让我给你看。代码，再次添加这个小
    if 语句，检查 name 是否等于主程序，这在说我们是否在执行这个文件，还是从命令行运行这个文件。
- en: note that over here in our test in our test file here we are loading covid but
    we're not executing。 the command line so this this wouldn't this line would not
    execute when we imported it it only。 executes when you run it from the command
    line or alternatively if we come up here and say run module。 okay and then we
    add to this little main function that's just going to check what's on the command。
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在我们的测试文件中，我们加载了 COVID，但并没有执行命令行，因此这行在我们导入时不会执行，它仅在你从命令行运行时执行，或者如果我们回到这里说运行模块。好吧，然后我们添加到这个小主函数，它将检查命令中的内容。
- en: line arguments so i'm going to go to command line let's see if we can run this
    from the command line。 here so here's my command line， okay so here's my command
    line and i'm going to say python three covid dy-h。 and it's running it's thinking
    now again my my computer is pretty lagged down with a lot of things。 but there
    you go um note that it gave us this little nice documentation here。
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 行参数，所以我将去命令行，看看我们是否可以从命令行运行它。这里是我的命令行，好的，所以这是我的命令行，我将说 python 3 covid dy-h。它正在运行，它在思考，现在我的计算机被许多事情拖慢了。但你看，呃，请注意，它给我们提供了这个很好的文档。
- en: it even spit out this png file name for us here so let's try and run it。 let's
    say python three and we're going to say state is ut-c that's covid。csv and dash
    oh i'm going。 to say utad。png here okay and it says can't open file ut so i got
    an error here let's let's see if。 i can fix that plot state should give us the
    state。
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 它甚至为我们生成了这个 png 文件名，所以我们来尝试运行它。我们说 python 3，并且我们会说 state 是 ut-c，这个是 covid.csv
    和 dash oh，我将说 utad.png，好的，它说无法打开文件 ut，所以我在这里遇到了错误，让我们看看我能否修复它，plot state 应该给我们状态。
- en: oh yeah my bad um yeah you just say python covid。py there you go okay。 okay
    well that's something i'll just run this from windows as well python covid， and
    covid。py and i'll do dash h here you see that it gives us the help i'm going to
    say dash s。 maybe we'll do wy for yoming dash c is covid sv and dash output yo。png。
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，对不起，嗯，是的，你只需说 python covid.py，好的。好的，那我就从 Windows 运行这个，python covid 和 covid.py，然后我这里做
    dash h，你看到它给我们提供了帮助，我将说 dash s。也许我们会做 wy 代表怀俄明，dash c 是 covid sv，dash output yo.png。
- en: okay looks like that worked here um look like we worked over here uh just open
    utad。png here。 there's our utad plot let's open our wyoming plot， there's our
    wyoming plot as well okay uh。 so now would be a great time to pause it and make
    sure that you've got the command line。 working on your machine again you need
    to add argparce and cis up here to the imports。
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，看起来这在这里工作了，嗯，看起来我们在这里也工作了，呃，打开 utad.png。这里是我们的 utad 图，打开我们的怀俄明图，那里也是我们的怀俄明图，好的，呃。现在是暂停的好时机，确保你已经在你的机器上成功运行命令行，再次需要在导入中添加
    argparse 和 cis。
- en: and down here to the bottom uh this main function and this little snippet down
    here。 so pause that and make sure that that's working okay so at this point we've
    come to the end of。 our tutorial hopefully you've had a good time you've been
    able to find out a little bit about python。 you've got a muscle memory about trinings
    out again we used idles today and i like idle because i can。
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 这里在底部，呃，这个主函数和下面这个小代码片段。所以暂停一下，确保它正常工作，因此到目前为止，我们已经来到了教程的结尾，希望你玩得愉快，能够了解一点关于
    Python 的知识。你对训练的肌肉记忆又回来了，今天我们使用了 IDLE，我喜欢 IDLE，因为我可以。
- en: take code i can run it in the REPL and i can sort of go back and forth now again
    i said do i。 recommend everyone use idle day today no i don't um idle has some
    problems but i do recommend that。 you learn how to take your code and run it and
    you have access to the REPL in whatever environment。 you're doing if you're not
    doing that you're probably not leveraging python to the full extent。
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以在REPL中运行代码，并进行反复测试。再说一次，我建议每个人每天都使用IDLE吗？不，我不这样认为。IDLE存在一些问题，但我确实建议你学会如何运行代码，并在你使用的任何环境中访问REPL。如果你不这样做，你可能没有充分利用Python的功能。
- en: that you could also we showed how to put some tests around our code and some
    coverage to。 understand how we're testing it and what not um a lot of people ask
    what what should i do now what's。 what's a good next step after you sort of try
    it out using python um i think a good thing is to find。 a project that you want
    to work on something that inspires you and something that you'll work on。
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还展示了如何为我们的代码添加一些测试和覆盖率，以便了解我们是如何进行测试的。嗯，很多人问接下来应该做什么，尝试使用Python之后，好的下一步是什么。我认为一个好的做法是找一个你想要做的项目，找到一些能激励你的东西，并投入其中。
- en: and and do that maybe it's something for work maybe it's a hobby you have or
    whatnot um。 anyway it's been a pleasure teaching you and hopefully this was useful
    following along。 best of luck with your python endeavors if you want to contact
    me uh best way to do that is probably。 through twitter um you can reach out on
    twitter my handle is under m herison i'll just pull that up。
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 也许这与工作有关，也许是你的一个爱好，或者其他什么。嗯，反正教你们我很高兴，希望这对你们有所帮助。祝你们在学习Python的过程中好运，如果你想联系我，最好的方式可能是通过推特。嗯，你可以在推特上找到我，我的用户名是m
    herison，我会把它拉出来。
- en: here also i do tend to connect with people on linkedin so if you were in this
    course and you want to。 connect on linkedin uh feel free to send me a note that
    said you follow this on and i'll i tend to。 connect there so uh dunder m herison
    if you want to connect on twitter again have a great picon or。 virtual picon best
    of luck to you and hope to see you in real life sometime bye everyone thank you。
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我也倾向于在LinkedIn上与人联系，所以如果你参加了这个课程，想在LinkedIn上联系我，随时可以给我发个消息，告诉我你在关注这个课程，我会倾向于在那边连接。所以，如果你想在推特上联系我，记得再次加上dunder
    m herison。祝你们有一个愉快的Picon或虚拟Picon，祝你们好运，希望不久能在现实中见到你们，大家再见，谢谢。
- en: '[BLANK_AUDIO]。'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '[空白音频]。'
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_46.png)'
  id: totrans-338
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_46.png)'
