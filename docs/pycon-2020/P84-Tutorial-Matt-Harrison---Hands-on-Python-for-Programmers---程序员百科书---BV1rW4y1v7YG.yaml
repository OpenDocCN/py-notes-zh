- en: P84：Tutorial Matt Harrison - Hands-on Python for Programmers - 程序员百科书 - BV1rW4y1v7YG
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Okay， welcome to Hands-on Beginning Python。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_1.png)'
  prefs: []
  type: TYPE_IMG
- en: We're going to talk about making a COVID-19 plot。 So this is probably a little
    bit different than other tutorials that you've been in。 There aren't any slides
    for this。 So this is a highly interactive Hands-on tutorial。 The idea here is
    that we'll talk about code and I'll demo it and you follow along on your。 own
    machine。 So this should work on a Windows machine， on a Mac machine or on a Linux
    machine。
  prefs: []
  type: TYPE_NORMAL
- en: You just need to get your environment ready。 And the main thing to get your
    environment ready is to have a window or to have Python。 installed and to have
    some understanding of how to move around from the command line using。 the command
    prompt or from the terminal in Linux or Mac。 Little bit about me。 My name is Matt
    Harrison。 I run a company called Metasnake， also an author。
  prefs: []
  type: TYPE_NORMAL
- en: So I've written a couple books on Python and data science and I teach people
    how to leverage。 Python and in corporate training environments。 Also teach them
    how to leverage data and data science。 make models， clean data， understand， what
    their data is telling them。 And up until recently I've been doing a lot of live
    training and now that's sort of shifted。
  prefs: []
  type: TYPE_NORMAL
- en: to virtual training and whatnot。 But this class that we're going to do is similar
    to a lot of stuff that I do in my corporate。 training where we have a portion
    where it's very hands-on and the idea here is that I。 can tell you something all
    day or you could look at slides all day and it might be interesting。 right？ But
    most of it's going to go in one ear and out the other。 But if you can try it。
  prefs: []
  type: TYPE_NORMAL
- en: I'm a firm believer that if you actually do the muscle memory。 then it's going
    to help you master it better。 So I've got a directory here and I'm just making
    sure that Python is installed to type Python。 3 on Mac or on Linux and you should
    see that Python is installed。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_3.png)'
  prefs: []
  type: TYPE_IMG
- en: So you should have a directory somewhere where you want to follow along and
    type Python 3。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_5.png)'
  prefs: []
  type: TYPE_IMG
- en: I'll show it on Windows as well。 On Windows you don't have to type Python 3
    just Python and you'll note that this has Python。 3。6 installed on my Windows。
    I'm going to quit out of here。 Now some of you might have installed on Windows
    and it might not work。 So one common thing I see when I'm teaching people， so
    they installed on Windows but there's。
  prefs: []
  type: TYPE_NORMAL
- en: an option on Windows to add Python to your path that hasn't been checked normally
    by。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_7.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_8.png)'
  prefs: []
  type: TYPE_IMG
- en: default。 And so I'm going to demo what happens if you didn't add to your path
    by typing "Bython"。 and it says "Bython is not recognized as internal command。"。
    This is typically a problem if you "installed Python but did not add it to your
    path。"。 So the easiest way to add it to your path is to actually reinstall if
    you have the same。
  prefs: []
  type: TYPE_NORMAL
- en: installer that you use to install Python。 You can just do， you can click that，
    double click it。 it'll say "Do you want to fix your， install？"， That's a little
    bit quicker than just doing a full on reinstall but you want to make sure。 on
    the first page of the Wizard of Installation for Windows there's a little checkbox
    that。 says "Add Python to your capital P-A-T-H。"， And if you do that you should
    be able to run Python from the command line。
  prefs: []
  type: TYPE_NORMAL
- en: Why is it important to run Python from the command line？
  prefs: []
  type: TYPE_NORMAL
- en: I'm a firm believer that if you want to be proficient in Python you should know
    how to。 use the command line because a lot of tools are run from the command line。
    We'll be demoing a lot of them today in our course。 We'll be demoing creating
    virtual environments。 We'll be demoing running code coverage and running tests
    and all those are done from。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_10.png)'
  prefs: []
  type: TYPE_IMG
- en: the command line。 If you're not comfortable from the command line I highly encourage
    you to try it out and。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_12.png)'
  prefs: []
  type: TYPE_IMG
- en: get comfortable from it。 Also believe that if you understand how things are
    going underneath the covers and abstractions。 such as IDs and what not are going
    to be easier to use because you're going to know what they're。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_14.png)'
  prefs: []
  type: TYPE_IMG
- en: doing behind the scenes。 So if Windows is not working for you and you're following
    along on Windows now it'd。 be a great time to pause the video， go and install
    Windows， reinstall Python on it and。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_16.png)'
  prefs: []
  type: TYPE_IMG
- en: make sure it's working。 I'll be demoing today on Windows and on Mac。 If you're
    on Linux。 Linux is very similar to what I'm doing with Mac。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_18.png)'
  prefs: []
  type: TYPE_IMG
- en: Again， we're using Python 3 there instead of Python because a lot of Mac or
    Linux distributions。 include Python 2 as well。 So Python 3 is just a little bit
    more specific there。 So make sure that you can run that if you can't do it on
    Linux， should be able to run。 Python 3 on Linux if you can't use the correct command
    to install it on Mac。
  prefs: []
  type: TYPE_NORMAL
- en: You'll need to install Python 3。 You can use homebrew or you can go to Python。org
    and install Python。 Make sure that that is working before continuing with the
    tutorial。 Okay。 I'm going to pretend I'm a motivational speaker and do my little
    Dr。 Mom should be。 able to do this when I'm teaching people and training them。
    So the D in Dr。 Mom。
  prefs: []
  type: TYPE_NORMAL
- en: this little acronym about learning is to decide。 Decide you want to learn。 For
    the next little bit。 if you're following along you're going to be here and this
    is。 an intensive environment so decide you want to do it。 Next part is our relax。
    Pylons can be frustrating programming， can be frustrating and you can have errors
    and。
  prefs: []
  type: TYPE_NORMAL
- en: so you need to relax。 Also a lot of people come to Python from other languages
    that might be a little bit。 different。 And so if Python is a little bit different
    don't try and force your other language into。 Python but take a deep breath and
    realize that Python is what it is。 We'll try and show some of the functionality
    of Python in some ways for interacting with。
  prefs: []
  type: TYPE_NORMAL
- en: Python that might be a little bit different than what you're used to in some
    of your。 other environments。 Okay， the M， the first M in Dr。 Mom is for what's
    your motivation。 If you can visualize what your motivation is that's going to
    make it better for you to。 have a better learning experience。 So right now， Python
    is a popular language。
  prefs: []
  type: TYPE_NORMAL
- en: There's a lot of demand for Python and we'll see that once you learn Python
    you can leverage。 a lot of tools you can stand on the scrollers of giants。 So
    if you can just take a minute and think about why you want to do this that can
    help。 you follow along and learn better。 The O is for observe。 Contrary to popular
    belief。
  prefs: []
  type: TYPE_NORMAL
- en: humans are not good at multitasking。 So if you've got other things that are
    distracting you， again。 there's no slides in this。 So I'm going to be typing a
    bunch of code expecting you to follow along and learn by。 following along。 And
    if you're distracted that's going to make learning a little bit harder。 So my
    ask would be to remove those distractions at this point。 And finally。
  prefs: []
  type: TYPE_NORMAL
- en: the last M is for the mechanics。 I can talk to you all day long but it's probably
    going to go one in one ear and out the other。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_20.png)'
  prefs: []
  type: TYPE_IMG
- en: So I'm a huge proponent of trying things out and I want to give you the muscle
    memory and。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_22.png)'
  prefs: []
  type: TYPE_IMG
- en: let you type out a bunch of Python code。 So we're going to work on that today。
    Write a bit of Python code and explain what's going on and some of the errors
    and some of。 the issues that you might run into。 I want to empower you to leverage
    the tools and understand what's going on as well。 One other thing to be aware
    of is we're going to talk about Python today。
  prefs: []
  type: TYPE_NORMAL
- en: The purpose is to talk about Python。 You'll probably see some things that will
    be easier done in pandas or other tools or。 other libraries。 So obviously we could
    do a lot of what we're doing in pandas with a few lines of code。 But the purpose
    here is not to talk about pandas。 My pandas tutorial wasn't accepted by Python
    committee but my Python one was。 So I want to talk about some of the basic data
    structures and other features in Python。
  prefs: []
  type: TYPE_NORMAL
- en: that you can leverage and that mastery of these will allow you to be a better
    programmer。 Not saying that the code that we're creating here is necessarily going
    to be production。 or what I would do if I was doing a consulting gig or what not。
    But I think there is a lot that we can learn from writing this code about how
    Python works。
  prefs: []
  type: TYPE_NORMAL
- en: under the covers。 Some of the basic data structures， how to interact with Python，
    how to debug。 how to， write tests， how to understand how your code is working，
    etc。 So let's get started。 I want to share a little reference that might help
    you along the way。 This is the tiny Python notebook。 This is a reference that
    when I'm doing live training。
  prefs: []
  type: TYPE_NORMAL
- en: I typically give people a physical， copy of it。 But the source here is that
    this GitHub link。 And so I'll paste that into this read me here and you'll have
    access to that。 This is a nice little reference。 It talks about all the syntax
    in Python three eight and will refer to it a bit during this。 course。 And then
    go back and it will show you how a bunch of this standard data structures work。
  prefs: []
  type: TYPE_NORMAL
- en: as well。 I'm also putting in a link here to this bitly link。 This is a drop
    box share。 So everything that I create today will be available in this drop box
    share。 You can go to that drop box share。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_24.png)'
  prefs: []
  type: TYPE_IMG
- en: You can download this read me that I'm typing in right now that has these URLs
    inside the。 share will also have the files that we create。 It will have the test
    files that we create。 And it will have coverage results and whatnot。 Okay。 so
    if you click on this Python three eight here， I'm going to show you one section。
  prefs: []
  type: TYPE_NORMAL
- en: that's very useful。 We're going to make virtual environments。 Environments are
    a way to isolate or sandbox project requirements from one another。 So here's the
    section on environments in here。 And we're going to make a virtual environment
    here。 The reason we're doing this is because we're going to be using some third
    party libraries， today。
  prefs: []
  type: TYPE_NORMAL
- en: And if you've got multiple projects， depending on those third party libraries，
    you don't want。 them to come flick with one another。 So I'll show how to do it
    on my Mac here。 And the way to do on the Mac is very similar to how you do on
    Linux。 And then we'll show how to do on windows as well。 So I'm in my terminal。
  prefs: []
  type: TYPE_NORMAL
- en: And I'm just going to type Python three dash m Vm and the dash m there says
    run this module。 the VM module that's found somewhere in the past that Python
    looks for for libraries。 So rather than loading as a library， it's going to execute
    it。 We'll see how there's a slight distinction between executing and loading as
    a library。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_26.png)'
  prefs: []
  type: TYPE_IMG
- en: later。 We do the dash H command here。 This tells us all the options we can do。
    But basically we're just going to put it in a we're just going to specify a directory。
    Now normally I would put it in the current directory of my project and I just
    make a directory。 called env like this。 And this would be the command。 So this
    is the command I recommend you run。
  prefs: []
  type: TYPE_NORMAL
- en: I'm not going to do this though because again， this directory is being synced
    to Dropbox。 And I don't want to share my virtual environment。 Virtual environments
    aren't meant to be shared。 They're meant to be easily created。 So I'm actually
    going to put this in the temp directory and I would recommend you not do。 this。
    I'm putting it there again because I don't want to sync to Dropbox。
  prefs: []
  type: TYPE_NORMAL
- en: But also I create these all the time and so they're easy for me。 However。 if
    you put yours here in the temp directory when you reboot your machine it， will
    disappear。 So you probably don't want to do this。 I'm just putting it here again
    to not sync it。 Okay。 so after I've done run the command it's going to make a
    little install of Python。
  prefs: []
  type: TYPE_NORMAL
- en: in that directory and it will copy over some binaries in there as well。 I'm
    going to use the source command to activate the binaries。 But before I do that
    I'm going to run this which Python 3 command。 This tells me which Python I'm currently
    using when I invoke Python 3。
  prefs: []
  type: TYPE_NORMAL
- en: You can see I'm using a Python from Anaconda。 Now if I source this virtual environment
    and there's a bin directory inside of that there's。 an activate file you can see
    that my prompt is changed and now it says emv or the name。 of the virtual environment。
    And when I say which Python now I'm using the Python in my virtual environment。
    So if I were to install packages or what not at this point when I'm activated
    I'm going。
  prefs: []
  type: TYPE_NORMAL
- en: to put them in this environment。 Let's look at how to do this on Windows。 It's
    very similar on Windows however sources a Unix command it doesn't exist on Windows。
    So on Windows instead of saying Python 3 I just say Python dash mv and then again
    I。 would say env if I was in the directory again this directory is the same directory
    it's the。
  prefs: []
  type: TYPE_NORMAL
- en: drop box share that's synced there。 I'm not going to use this directory here。
    I actually already have one so a virtual environment in my see users mat I have
    a directory。 called env and inside that I have a three six virtual environment
    so this would be the。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_28.png)'
  prefs: []
  type: TYPE_IMG
- en: one that I would call env but it's called three six on my Windows machine and
    if I run。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_30.png)'
  prefs: []
  type: TYPE_IMG
- en: that will create it and then I can activate it on Windows node I can say there's
    no which。 command on Windows to say which Python I'm using however there is a
    where command and。 so if I type out the where command you can see that it's going
    to show which Python I'm， using。 So here I'm typing out how to activate it you
    can say it says inside of the virtual environment。
  prefs: []
  type: TYPE_NORMAL
- en: there instead of bin directory there's a scripts directory and inside that there's
    an activate。 problem just going to run that you can see if I run where Python
    now says I'm running the。 Python from my virtual environment rather than the Python
    that I've installed in program。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_32.png)'
  prefs: []
  type: TYPE_IMG
- en: files so that's how we activate our virtual environment you can also see that
    my prompt。 has changed on Windows as well so make sure that you have a virtual
    environment created。 and activated to follow along you might want to stop the
    video at this point make sure that。 you have that working again there's the GitHub
    link there if you use that GitHub link to the。
  prefs: []
  type: TYPE_NORMAL
- en: book that will show how to do it as well there's the instructions on the GitHub
    you create your。 virtual environment on Windows there's the instructions for creating
    it there's the activation。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_34.png)'
  prefs: []
  type: TYPE_IMG
- en: for both Unix and Windows so the activation is slightly different because source
    is a bash。 command that doesn't exist on Windows。 Okay at this point I'm going
    to start idle idle as an editor that comes with Python and。 this is the command
    to launch it I say Python 3-m idlelib。idl and this is going to launch。 idle again
    the -m command says look in the places where Python looks for loading files。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_36.png)'
  prefs: []
  type: TYPE_IMG
- en: and there should be an idle lib directory in there and inside of that there's
    an idle。py。 launch that some of you might think well I'll just go to Python and
    click on idle and。 launch it that way and that's not what you want to do why don't
    you want to just click。 on the gooies because the gooies are going to use the
    system Python and we're going to。
  prefs: []
  type: TYPE_NORMAL
- en: be installing third-party libraries we won't have access to them from idle if
    we're using。 our system Python so we want to be sandboxed and that's why we do
    it from the command line。 So you see I've just run this command and I've launched
    idle and here is idle pulls。 up a little window you can see that there's a prompt
    there and there's a cursor that's。
  prefs: []
  type: TYPE_NORMAL
- en: blinking this is often called the REPL。 It will short for read evaluate print
    and loop when we type in code into here Python。 will read it it will evaluate
    it it will print and it will loop it will give us back another。 prompt so you
    can see that typed in my name made a variable I can type in some math operations。
    and it will evaluate that and give us the result of that。
  prefs: []
  type: TYPE_NORMAL
- en: We're going to be using the REPL a bit throughout today and I want you to get
    used to it that's。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_38.png)'
  prefs: []
  type: TYPE_IMG
- en: one of the main things I want you to see when we do this class。 Let's launch
    idle on Windows similar command again we say Python instead of Python 3 dash。
    m idle lib。idle same command just for saying Python instead of Python 3 there。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_40.png)'
  prefs: []
  type: TYPE_IMG
- en: Okay when you launch that you're going to get a prompt very similar to what
    we see and。 I can type in name is equal to mat this is the REPL I can do the same
    things on Windows。 or on Mac or on Linux that's one of the nice things about idols
    it comes with you with。 the environment。 Now some of you might be like oh no I
    don't want to use idle I have my editor。
  prefs: []
  type: TYPE_NORMAL
- en: Yeah editors are somewhat of a religious choice what I would ask is that I don't
    I'm not saying。 that you always use idle what I would say this for this class
    try and follow along using。 idle there's some nice benefits of it because I'm
    going to talk about a couple features of。 idle but then when you get done with
    this class figure out how to do the things that。
  prefs: []
  type: TYPE_NORMAL
- en: we did with idle with your favorite environment and one of those main things
    is the ability。 to take code and run it in the REPL I'll be demoing that a lot
    today hopefully you'll。 be able to do that in your other environments as well。
    What are some other environments you might want to use I mean let emax is a great
    one but。
  prefs: []
  type: TYPE_NORMAL
- en: a lot of people don't like that there's a steep overhead pie charm is good vs
    code there。 are a lot of tools that you can use for writing Python most modern
    editors have some support。 for Python but again what I recommend is that you learn
    how to take your code and run it。 in the REPL from your environment if you can
    do that you're going to be a lot more productive。
  prefs: []
  type: TYPE_NORMAL
- en: and will be demoing a lot of that functionality today so again recommend trying
    idle following。 along with idle and then taking what you learn here and applying
    it to your favorite environment。 Okay so what we're going to do is we're going
    to go to this covid tracking github this is。 a github project that tracks the
    states of the United States and every day they do an。
  prefs: []
  type: TYPE_NORMAL
- en: update to their data in a csv file that has the number of positives the number
    of tests。 the number of hospitalized people etc so I've been using this data on
    my end to track the。 local Utah growth of covid just because I have I've been
    creating some plots and I haven't。 seen other plots that really do what I want
    and and so there's this 4pm dataset that's。
  prefs: []
  type: TYPE_NORMAL
- en: supposed to be updated every at 4pm Eastern time every day that's a little generous
    it's。 not typically updated at 4pm but it is updated typically daily so it's in
    this data directory。 here so we'll open that and you can see that there are various
    csv or comma separated value。 files in there I'm going to click on this one so
    you can see what it looks like this is。
  prefs: []
  type: TYPE_NORMAL
- en: the one that I like to use it has daily information but it also has historical
    information for。 every state and it's got a dozen or so columns of various pieces
    of information so the ones。 I find interesting the number of tests the number
    of positive results of the test the。 number of hospitalized people the number
    of deaths and so you can sort of track those growth。
  prefs: []
  type: TYPE_NORMAL
- en: rates of those one thing that's interesting to me and I'm not an epidemiologist
    but you。 know positive testing tracking positive is sort of an apples to oranges
    comparison across。 state boundaries or whatnot because different states are testing
    in different ways and what。 not so one thing that might be better is is looking
    at hospitalized right that might be。
  prefs: []
  type: TYPE_NORMAL
- en: a more apples to apples comparison in there but you can see here's an example
    of the data。 you've got a date you've got state for every state and you've got
    all these columns there。 are some missing values in there but this is updated
    every day and has the latest stats。 from official sources supposedly so I'm going
    to click on this raw link here this lets us。
  prefs: []
  type: TYPE_NORMAL
- en: look at the raw CSV file and I'm going to take that URL and that URL is what
    we're going。 to download our data from so we're going to download this raw data
    here just make a variable。 called URL and paste that value in it now I'm going
    to use Python to download the contents。 of this CSV file I want to be able to
    read the contents and slice and dice it filter it。
  prefs: []
  type: TYPE_NORMAL
- en: and make a plot from this so in order to do this we're going to use a library
    in the standard。 library called URL lib this is a package in the standard library
    there's a module inside。 of that package called request and we're just going to
    alias that as req now I know some。 of you might be thinking why aren't we using
    a third party library to do this we certainly。
  prefs: []
  type: TYPE_NORMAL
- en: could use a third party library like request to do this I'm just going to use
    something。 that's in the standard library because it's a little bit easier to
    use than going off。 and installing another third party tool so we're just aliasing
    it as req this is going。 to make a variable in my namespace called req that's
    pointing to the request module not。
  prefs: []
  type: TYPE_NORMAL
- en: that I'm doing this from the REPL and there's nothing wrong with writing code
    from the REPL。 we'll see that after I have written this and tried it out I'll
    probably push it into a。 file so I can reuse it now not that one of the nice things
    about idle is the idle gives。 a syntax highlighting you see the import and as
    or orange so anything that's orange and。
  prefs: []
  type: TYPE_NORMAL
- en: idle is a keyword or syntax and you can't for example I can't make a variable
    called。 imports going to give me an error if I do that you see that I can inspect
    req at this。 point and it says req is a module I'm going to make a variable called
    f in that's just。 going to be pointing to this req I'm going to say open the endpoint
    there this URL this。
  prefs: []
  type: TYPE_NORMAL
- en: is going to give us a file handle like object that we can read from we're going
    to read。 from that and make a variable called data that has the results of reading
    from that so if。 I do that I now have a variable called data now be careful I
    don't want to print out。 data in the REPL at least not in idle idle has problems
    printing out big things you can。
  prefs: []
  type: TYPE_NORMAL
- en: see that this is almost a quarter of a million characters long and idle will
    just not be。 happy if you print it out so we're not going to print it out but
    you can see that we've。 got like I said a quarter of a million characters I'm
    just going to write some notes here in。 the REPL here so again orange anything
    that's orange in idle that's keyword or syntax。
  prefs: []
  type: TYPE_NORMAL
- en: will be seeing a lot of that today I'll later show how you can get documentation
    about that。 anything that's purple is in the built-in namespace so we'll see a
    bunch of things that are in。 built-in namespace those are typically functions
    classes and exceptions that Python just has。 those for you and that you can access
    we'll talk about the mechanism for Python to look。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_42.png)'
  prefs: []
  type: TYPE_IMG
- en: things up later in our course if you look at the type of data the type of it
    is bytes so。 when we downloaded this it's downloading binary data typically a
    lot of things these days。 when you download them or they're stored in the file
    they're stored as UTF-8 bytes I'm。 going to use a special tool or feature of Python
    called slicing and I'm going to take。
  prefs: []
  type: TYPE_NORMAL
- en: that data and I'm going to do the square bracket notation with a zero colon
    100 this。 is called a slice it says start at index position zero go up to but
    not include index。 position 100 and you can see that this returns a byte string
    or binary data you can see。 the B on the left hand side there that indicates that
    this is not a normal string but it is。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_44.png)'
  prefs: []
  type: TYPE_IMG
- en: a byte string now we probably want to deal with this as a normal string so we'll
    talk。 about dealing with it as a normal string or how to get a normal string out
    of it this。 is probably UTF-8 encoded data about I don't know what the numbers
    are probably 80% of what's。 available on the internet these days is UTF-8 encoded
    so when we will save this to a file。
  prefs: []
  type: TYPE_NORMAL
- en: as a binary we'll write it out as binary but then we'll read it in as a string
    data so。 this is how we write it we're gonna say f out is equal to open you can
    see the open is。 purple so this is a built-in function I'm going to write a file
    called covid。csv and you can。 see that idle pulls up a little tooltip it says
    we can specify the mode the buffering etc so。
  prefs: []
  type: TYPE_NORMAL
- en: our mode we're going to change the mode here and the default mode is for to
    read we don't。 want to read we want to write and we're going to say wb to write
    a binary file we already。 have binary data so it will be easy for us to write
    it we just say f out dot write we're。 going to pass in data into that we enter
    there it's going to spit out a number that's how。
  prefs: []
  type: TYPE_NORMAL
- en: many bytes it wrote out now one thing you want to be sure to do is after you've
    written。 out data you want to make sure you close the file so we can say f out
    dot close there and。 at this point on our disk there should be a file called covid。csv
    that has been written。 out with the bytes that we just got I'm going to use my
    REPL here or my terminal and I'm。
  prefs: []
  type: TYPE_NORMAL
- en: going to inspect what's in my directory and make sure just check to make sure
    that we。 have this covid。csv file in there。 Okay so it looked like that worked
    let's what I want to do now is make a file I'm going。 to make it I went up to
    new file and I'm going to take my code from the REPL and I'm going。 to kind of
    refactor it pull it from the REPL and put it into a new file you can do this。
  prefs: []
  type: TYPE_NORMAL
- en: on windows or on Mac or on Linux you just go up to file and you say new file
    now this。 looks somewhat similar to the REPL but it's not a REPL note that if
    I say names equal。 to mat and then hit name or type 2 plus 5 it doesn't print
    the result right so it's not。 a pure REPL like this REPL is over here this is
    actually an editor and this is where we。
  prefs: []
  type: TYPE_NORMAL
- en: type Python code we write Python code and then we execute this file this file
    that we。 edit a little bit different than the REPL but one of the things I want
    you to be aware。 of is the relationship between editor and REPL I'll show that
    you can actually take。 code that's in your editor and run it in the REPL that's
    very useful so now what I'm doing。
  prefs: []
  type: TYPE_NORMAL
- en: is I'm doing my refactoring I'm just copying the code and I'm going to paste
    it over into。 my editor window so I'm going to copy our import we're going to
    copy this little line。 here to open the URL we're going to copy the line to read
    our data and we'll also copy。 the code to write out our file as well so note that
    I've got some hard coded values in there。
  prefs: []
  type: TYPE_NORMAL
- en: I've got a URL variable in there I've got a covid。csv file name string that's
    what you。 can consider a magic number a number or a value that's hard coded in
    there that has。 meaning to the person who wrote the code but not necessarily to
    someone else so we'll have。 to fix that also this is all happening at the global
    level I'd probably prefer it to。
  prefs: []
  type: TYPE_NORMAL
- en: happen at the non-global level so we'll make a little function to deal with
    that and the。 function will have to be parameterized here and we'll pass in the
    URL and that we want。 to fetch the data from and we'll pass in the name of the
    CSV file that we want to save。 it to as well。 Okay so what I'm going to do is
    make a function here and my function is I'll just show you。
  prefs: []
  type: TYPE_NORMAL
- en: how a function works you can see I type def I'm going to make a very basic function。
    I'm going to type def add like this。 Okay so over here this is all here so this
    is a special sensor keyword here I'm making。 a function called add and it has
    X and Y these things following the print or inside the。 parentheses are called
    parameters these are what we're passing into the function function。
  prefs: []
  type: TYPE_NORMAL
- en: you're going to give us a black box or box you pass things into it and it passes
    things， out of it。 Now this function isn't very useful it does XY but it doesn't
    return anything so if I。 said like add 10 and 20 down here it doesn't return anything
    because I didn't use the return。 statement so what I'm going to do is I'm going
    to edit this and fix it so I'm going。
  prefs: []
  type: TYPE_NORMAL
- en: to put my cursor here's a feature of I like to put my cursor back up here to
    this code。 and I can hit enter and then when I do that it allows me to edit this
    and now I can change。 it I'll hit enter twice here and now I'm going to hit command
    key on on Mac or you can hit。 alt key or alt alt key on Linux or Windows to get
    the previous command there。
  prefs: []
  type: TYPE_NORMAL
- en: Okay so now this is taking in two variables or parameters and it's returning
    to some of。 those so this is a function you can see that def is orange and return
    is orange so these。 are special keywords that allow us to define functions and
    return data from them so I'm。 going to make a function up here and define a function
    called fetch URL it's going to。
  prefs: []
  type: TYPE_NORMAL
- en: have we're going to say you have to pass a URL and you're going to pass in a
    file name。 here into this line I'm going to put a colon。 Now one thing you need
    to be aware of in Python is when you have a colon at the end of that。 line you
    want to indent everything that's inside of this function here so I can highlight。
    all this I can go up here to format and I can say indent region that will shift
    this over。
  prefs: []
  type: TYPE_NORMAL
- en: in Python we typically end up with four spaces you can see that there's a nice
    clean indentation。 right there so this is the fetch URL function here and now
    what I want to do is I want to。 try this and make sure that it works now right
    here I've got COVID CSV I don't want to do。 that I want to change that to maybe
    F name right there so I'm going to pass in a URL。
  prefs: []
  type: TYPE_NORMAL
- en: and I'm going to pass in a file name of where I want to save it as so what's
    what I can do。 in idle to run this I'm going to come up here to run and I'm going
    to say run module。 okay it's going to say that I do want to save it and yeah I'll
    say I want to save it。 okay it's going to ask me where I want to save it I'm going
    to save it in the directory。
  prefs: []
  type: TYPE_NORMAL
- en: I'm working in and then I'm just going to save this as COVID。py okay and over
    here in。 the REPL when I do that you'll see that says restart and at this point
    if I look what's。 available here there's a function in the built-in namespace
    called drr if I look at that I can。 see that there is now my fetch URL tells me
    that fetch URL is now in my namespace so。
  prefs: []
  type: TYPE_NORMAL
- en: drr function it's purple it's in the built-in namespace and if you run it by
    itself it。 will tell you what you have access to so there's a bunch of things
    with underscores here but。 there's this function that URL that we have access
    to right here so let's try and run it。 let me just go so I'll just copy I'll just
    try and copy the same URL here let's just say。
  prefs: []
  type: TYPE_NORMAL
- en: URL is equal to this and I'm gonna say F name is equal to test。csv and I say
    fetch URL and。 I'm gonna say URL and F name okay I think that worked let me just
    validate that and I。 can see that here we have test。csv here so I believe that
    that did work it looks like。 it worked awesome so what we've done here hopefully
    this makes sense I've demoed trying。
  prefs: []
  type: TYPE_NORMAL
- en: stuff out over here in the REPL and then pushing it over here into code that
    is parameterized。 it's a function and now we can reuse this so now anytime you
    want one to fetch a URL they。 could do this let me just briefly clean this code
    up a teeny bit here if you wanted to。 you could come right here and you could
    put a string immediately following the declaration。
  prefs: []
  type: TYPE_NORMAL
- en: here I'm gonna put a triple quoted string triple quoted string and Python allows
    me to。 spend multiple lines and this string right here is called a doc string
    and this just。 says you know I can put save a URL to a local file and I could
    put in more documentation。 if I wanted to I'm just gonna sort of leave that as
    that here one of the nice things about。
  prefs: []
  type: TYPE_NORMAL
- en: that is if I run this again so I'm gonna have come up here and hit 5 to run
    it again at this。 point the fetch URL now is what's called a doc string and I
    can call this help function。 which is included with Python I can say help I know
    what fetch URL does and it says it says。 it says a URL to a file name and gives
    me the parameters there so this is a nice little。
  prefs: []
  type: TYPE_NORMAL
- en: way to add documentation to your code and be able to inspect it so one thing
    I would hope。 that you come out of this cloud knowing about is the DIR function
    that allows you to inspect。 objects and to help function which allows you to understand
    the documentation for objects。 here so one last thing most most modern Python
    people would not write these three lines of。
  prefs: []
  type: TYPE_NORMAL
- en: code like this so you always want to make sure you close your files certain
    operating。 systems or all operating systems have a limit on how many files a process
    can have open。 it once and so you might run into that it's pretty high but it's
    possible to run into。 it and so also on some operating systems if you have a file
    open and you don't close it。
  prefs: []
  type: TYPE_NORMAL
- en: other process can use it as well now when you go out of the scope of a function
    a file。 will be closed automatically for you but Python has a nice way of just
    ensuring that when。 you're done with a file it will close it for you instead so
    instead of writing this this。 way how we write it is say when you use this thing
    called a context manager you can see。
  prefs: []
  type: TYPE_NORMAL
- en: it's orange here this is special syntax in Python where I'd say with and I would
    say。 instead of making a variable f out I'd say with open as f out okay and then
    at the end。 of here I put a colon now again anytime where you have a colon at
    the end of a line in Python。 you're going to indent the following line so I like
    to do my indentation dance it's like。
  prefs: []
  type: TYPE_NORMAL
- en: a fortnight dance here where I pretend like I'm pushing the code over here but
    you can。 see that when you do that idle will indent for you automatically so just
    going to take。 this next line here f out dot write data and we'll write that and
    then while this is indented。 the file will be open right here when we come out
    so I can say like a pawn un indent file。
  prefs: []
  type: TYPE_NORMAL
- en: is closed automatically so these three lines of code can be replaced with these
    two lines。 of code so this makes what's called context this is the with statement
    create the context。 manager creates a context when you go into this indented block
    you're inside the context。 when you un indent your outside the context the side
    effect of using open inside of a context。
  prefs: []
  type: TYPE_NORMAL
- en: manager is that when you come out of the block it closes the file for you automatically
    okay。 I could run that if I wanted to and you could validate that that works as
    well but we're。 going to move on from here okay so now we have our data let's
    mess around with our data here。 so I'm going to come over here and I'm going to
    say f in is equal to open and I'm going。
  prefs: []
  type: TYPE_NORMAL
- en: to open my file and I believe it's called covid csv and I can pass in a mode
    the default mode。 is read and I can pass in and then coding as well and so I believe
    that this is probably。 encoded as UTF-8 so I'm not going to read it binary bytes
    I'm going to read it as data。 in order to get it string data I can pass in by
    default python will read it as string。
  prefs: []
  type: TYPE_NORMAL
- en: data unless I say read it as binary but I want to pass in the encoding just
    to be safe here。 and I believe the encoding is UTF-8 I'm going to say encoding
    is UTF-8 one of the nice features。 about Python 3 is it Python 3 has support for
    Unicode streams natively so we should have。 that here and let's start playing
    around with this so I'm going to say I'm just going to。
  prefs: []
  type: TYPE_NORMAL
- en: make a variable called line there must be line is equal to this thing right
    here so。 then this right here what I did square brackets by itself this is called
    an empty list literal。 and so what is a list literal what do I mean by literal
    well it's literal literally a list。 but when we say literals and program language
    it means some little bit more specific it means。
  prefs: []
  type: TYPE_NORMAL
- en: that this is special syntax for creating a list and so we can use this special
    syntax。 with the square brackets there to create a list and Python will do that
    for us automatically。 so a list is a sequence of objects we can append things
    into it and so what I'll do here。 is I'll just loop over my lines I'll say for
    line in a fan turns out in Python when you。
  prefs: []
  type: TYPE_NORMAL
- en: open a file in text mode you can loop over it and when you loop over it you
    loop over。 the lines and that's kind of nice so I'm gonna say for line in look
    at that for is orange。 in is orange so these are all keywords in the language
    and what I'm gonna do here is。 I'm gonna call it the end when I got a call it
    and I need to indent the next line here。
  prefs: []
  type: TYPE_NORMAL
- en: and I'm just gonna say lines the append my line and I enter a couple times and
    at this。 point if I look at the length of lines here there's 2，000 entries and
    I can look at the。 first line here say lines zero there's the first line I can
    look at the last line I can。 say lines my one to look at the last line so there
    there's our data in there now in this。
  prefs: []
  type: TYPE_NORMAL
- en: list it's a list of strings I can look at the type of lines of zero and it's
    a list of。 strings in here so we're gonna manipulate these strings to be able
    to pull data out for us。 Okay so let's talk about list for a little bit and if
    I have a list let me just remember。 one of the things I want you to understand
    how to use is the dir function and the help。
  prefs: []
  type: TYPE_NORMAL
- en: function so let me show you how to use dir on a list I have a list I can say
    dir of lines。 and this tells me that there are a bunch of things on the lines
    there are a bunch of。 these things with underscores on them and there are some
    things like a pen clear copy。 etc so these things that have underscores in them
    these we call dunder methods that's。
  prefs: []
  type: TYPE_NORMAL
- en: not for dunder method and the dunder there is short for saying double underscore。
    And so these are the protocols that Python responds to。 Okay so this dunder add
    means that you can take a list and you can call dunder add in。 it this dunder
    contains means that I can say it is something in a list I can do something。
  prefs: []
  type: TYPE_NORMAL
- en: this like is name in lines is there a string called name in lines there isn't
    but there。 is a string there's this one right here and if I copy this and say
    is the string found。 lines will say true so because this list implements this
    dunder contains method that allows us。 to use this in statement here。 If I want
    to get the documentation for these if I want to know like what does a pen do。
  prefs: []
  type: TYPE_NORMAL
- en: you can see that I used a pen right up here as a method what a pen does I can
    do this I。 can say help lines。append。 I mean another time I'm just saying lines。append
    I'm not calling append I'm not putting， parentheses after append I have a frenzy
    here for help because I'm calling help but I'm。 not calling append I'm just passing
    append in there and this gives me the documentation。
  prefs: []
  type: TYPE_NORMAL
- en: and it says you can pass in an object here and is a method of the built in list
    instance。 and it pens object to the end of the list。 Okay let me just give you
    another nice feature of the Python REPL if if you're in the Python。 REPL you can
    say help by itself and this puts you into a help。 Okay and this allows you to
    do various things it says you can say modules keywords symbols。
  prefs: []
  type: TYPE_NORMAL
- en: or topics look at this you can say keywords here this is kind of cool so I can
    come over。 here and say keywords and when I do this it gives me the list of all
    the Python keywords。 and so we can see that here's deaf we just saw deaf here
    we saw four anything that's。 orange here these are the things that are orange
    and Python so if I want to know what。
  prefs: []
  type: TYPE_NORMAL
- en: four does I can just type four right here and help it says it squeeze 59 lines
    of text。 just double click that to expand it here and this tell gives us documentation
    here in。 the help about how to use a four statement see the prompt here is also
    a help prompt。 well if I want to exit out of this help prompt I can just hit enter
    by itself and it will。
  prefs: []
  type: TYPE_NORMAL
- en: put me back into the Python prompt so again how I did that is I typed in help
    and just。 called help and then I said like keywords or you can do symbols or topics
    so if you know。 come over here you can say topics I'll give you a bunch of things
    that you can look for。 information on and so one of those is lists and one is
    list literals so if I wanted to。
  prefs: []
  type: TYPE_NORMAL
- en: have some information about lists I can come over here and it says here is immutable
    list。 type and these are the things that you can do with that。 Okay so that's
    kind of nice that's in the Python then it's part of Python I'll also you。 know
    I linked to my book here if you want this instead of maybe more digestible form。
  prefs: []
  type: TYPE_NORMAL
- en: you can come up here in my book and there's a section on lists here right here
    so here's。 some examples of using lists there's some tables down here that says
    here are the list。 operations and here are the dender methods that provide those
    operations here and then。 these are the these are the methods on lists as well。
  prefs: []
  type: TYPE_NORMAL
- en: Okay so so at this point I have this list of if I want to see what's in my name
    so I。 can say DIR and I have this list called lines here this is all my lines
    so what I want to。 do is I want to make a list I have a list of strings here these
    strings aren't particularly。 useful you can look at like lines one you can see
    that like I guess this is I'm not sure。
  prefs: []
  type: TYPE_NORMAL
- en: AK is that Arkansas or Alaska I'm not sure but this is an entry for the 12th
    for a single。 state right it comes separated this is not useful by itself so we're
    going to parse this。 apart a little bit and this is a string so let's talk about
    how we can manipulate strings。 so again same thing we can come over here we can
    say I'm gonna say control P to get the。
  prefs: []
  type: TYPE_NORMAL
- en: previous line here on Mac if I was on Windows or Linux I would hit P there gonna
    put my。 cursor front of this I'm gonna say let's do the DIR of the string and
    let's see what attributes。 the string has and you can see how much of DUNDER attributes
    here and it has a bunch。 of other methods as well again you can go to the book
    and you can just scroll up a little。
  prefs: []
  type: TYPE_NORMAL
- en: bit talks about strings these are all things you can do with strings or you
    can you can。 find that from the help as well so what I want to do is I'm gonna
    split this string here。 on Thomas so let's just try that you can see that there's
    actually a split method right。 here so what I'm gonna do is I'm gonna say line
    lines one dot split and may go to the。
  prefs: []
  type: TYPE_NORMAL
- en: front of my line here and say help one note split does and this says you can
    pass in。 a separator and we'll return a list of words in the string using step
    as the delimiter。 okay so let's try that out here I'm gonna say alt P here delete
    that go to the front of。 my line delete delete these guys at the end and just
    call split I'm gonna split on the。
  prefs: []
  type: TYPE_NORMAL
- en: comma here that looks like he's doing a pretty good job so you can see that
    there's some empty。 strings here because we just had commas next to each other
    so these were presumably columns。 with missing data here another thing to note
    this is the last line here has a new line at。 the end of it so 306 new line is
    probably not a valid integer so we might want to trim that。
  prefs: []
  type: TYPE_NORMAL
- en: out here you can see that there's a method here called strip and strip is gonna
    do what。 we want it to do and that is trim white space if I if I want to find
    out what strip does。 again I can say help and say help and I don't even have to
    say lines one I can actually put。 an empty string here and I say I say what does
    if you have an empty string and you try。
  prefs: []
  type: TYPE_NORMAL
- en: and do strip on it what does that do and it says you're passing characters that
    characters。 is default to none it says it returns a copy of the string with the
    leading and trailing。 white space removed awesome it says that the characters
    is given and not none remove the。 characters instead so I if I had something like
    this I could say like strip key that would。
  prefs: []
  type: TYPE_NORMAL
- en: get rid of the keys here but what I have is something like this where I have
    like a you。 know a new line or tab here and I just want to say like strip those
    off and you see that。 this gets rid of white space so what I can do from this
    other one here is before I call。 split on it I can call strip is gonna return
    a new string and I can split off of that you。
  prefs: []
  type: TYPE_NORMAL
- en: can see that the new line is no longer there okay so this is looking pretty
    good now and。 so now I should be able to get each this is if you're thinking this
    like maybe a spreadsheet。 this is you know every value for every cell in there
    so what we could do is we could make。 a list of lists and we could have you know
    we could pull out those entries that way but。
  prefs: []
  type: TYPE_NORMAL
- en: I'm not going to use a list of lists rather I'm going to use a different data
    structure。 that's commonly used in Python I'm going to use a dictionary instead
    so a dictionary is。 something like this let me just show you an example of a dictionary
    let me say that B。 is equal to curly braces and this right here is the empty dictionary
    literal again what。
  prefs: []
  type: TYPE_NORMAL
- en: do I mean by literal I mean that that is syntax is built into the language when
    you use curly。 braces by themselves like that it makes a dictionary for you what
    does a dictionary do。 it maps keys to values if you're not familiar with the dictionary
    let me just briefly go。 over a dictionary say I have a English to Spanish dictionary
    or something or I just have。
  prefs: []
  type: TYPE_NORMAL
- en: an English dictionary unless they have English dictionary and I want to insert
    cat and I。 want to say cat is equal to a furry feline and I want to insert into
    it a dog is equal。 to a cozy canine or something like that okay at this point
    if I look at deed you can。 see that we have cat here and we have furry feline
    so cat is what in Python parlance。
  prefs: []
  type: TYPE_NORMAL
- en: we call cat is a key and furry feline is a value if you're thinking of this
    is like an。 English dictionary cat is the word for a feline is the definition
    similar to an English dictionary。 you don't use an English dictionary to look
    up a word you already have the word right。 if I want to know what the definition
    of cat is I have cat I don't need to look up cat。
  prefs: []
  type: TYPE_NORMAL
- en: I need to look at the definition for it so you have a key or a word and use
    that to look。 up a definition or a value so how we do that in Python we just say
    d cat this is called。 an index operation here and you can say that here is the
    value for that it's for a feline。 so this up here where we have an equals here
    is called index assignment this down here。
  prefs: []
  type: TYPE_NORMAL
- en: is called index access here and again if you look in the book here you can see
    that there's。 an example of lists and after that there's an example of dictionaries
    here and here's。 all the dunder methods for dictionaries and all the other operations
    for dictionaries。 as well okay and so we're going to use this syntax right here
    this little snippet that。
  prefs: []
  type: TYPE_NORMAL
- en: we can create a dictionary mapping column names to the values so that this we're
    going to。 leverage this so watch what we can do here we're going to use the zip
    built-in function。 and pass that into the dictionary constructor so this here
    dict and zip these are both in。 the built-in namespace and dict this will create
    an instance of a class much like that。
  prefs: []
  type: TYPE_NORMAL
- en: literal will but we're calling the class constructor rather than using the literal
    there and so。 that's what we're going to do here we'll do something like this
    where we're going to。 say well if we have lines zero and we split it strip it
    and then we split it on comma these。 are all the headers okay so this is all the
    headers in my csv file and so what I'm going。
  prefs: []
  type: TYPE_NORMAL
- en: to do here is I'm going to say I want to zip line zero and I'm going to do that
    with。 line one here is going to give me this zip object and Python three is lazy
    so it doesn't。 actually it returns me this instance the zip object here if I were
    to loop over this what。 it does is it takes each value from each of these parallel
    arrays and sort of zippers。
  prefs: []
  type: TYPE_NORMAL
- en: them together so you get what it gives you is tuples of sequences here so let
    me just。 show you how we can look at that we can take this same thing here and
    we can put it into。 a list constructor or this list and zip those are all purple
    those are in the built-in namespace。 here and you can see that here is a list
    and these things in here are called tuples so。
  prefs: []
  type: TYPE_NORMAL
- en: this is just taking each subsequent value from these two parallel arrays and
    putting。 them each into their own tuple so here's the date here's the state here's
    the positive。 etc okay so if instead of calling list here we take this and we
    call dict this is going。 to give this is a dictionary with each of those keys
    mapping to each of those values。
  prefs: []
  type: TYPE_NORMAL
- en: okay so having said that let's try this out with our code here what I'm going
    to do here。 is I'm going to say maybe I'll make a little function here called
    like read a CSV file。 it's going to have a file name maybe I'll just try this
    out here I'm going to say with open。 fname I'm going to say encoding is utf8 now
    again some of you might say why am I implementing。
  prefs: []
  type: TYPE_NORMAL
- en: CSV there's actually a module in Python for doing CSV or why aren't I using
    pandas I'm。 doing this because I'm showing you how Python works and I want you
    to be familiar with some。 of the common data structures in Python namely a list
    and a dictionary use those all over。 the place yeah so if this reproduction code
    I wouldn't use read CSV right I would be using。
  prefs: []
  type: TYPE_NORMAL
- en: probably the CSV module which is included in standard library or I personally
    would probably。 using pandas instead like I said everything we're doing here we
    could probably do in two。 or three lines of pandas but the purpose of this isn't
    to explore pandas the purpose of。 this is to give you a chance to understand the
    tooling in Python and some of the basic。
  prefs: []
  type: TYPE_NORMAL
- en: data structures in Python and some best practices in Python okay so I'm going
    to say with open。 fname I'm going to say as f in here you're calling the entry
    need to indent that and。 then maybe I'll say like rose and rose is going to be
    a list here and then I'm going。 to say or line in f in this is going to loop over
    each line okay so what I want to do is。
  prefs: []
  type: TYPE_NORMAL
- en: I want to pull off the first line the first line is going to be the headers
    and I don't。 want to stick the headers in the rows so I'm just going to pop the
    first line and I'll。 say if and how do I determine whether I'm at the first line
    one way to do that is to。 look at the length of my rose so I can say if the length
    of rose is equal to zero then。
  prefs: []
  type: TYPE_NORMAL
- en: I'm just going to say headers is equal to line dot strip and then I'm going
    to split。 that on the comma and I can actually maybe I'll do this instead I know
    I'm going to do。 this for everything so maybe I'll do this instead I'm going to
    put this right above here I'm。 going to say headers say this is the values then
    down here I'll just say headers is equal。
  prefs: []
  type: TYPE_NORMAL
- en: to the values of them on the first one otherwise look at that if and else those
    are both orange。 so these are syntax that's built into the language so I can have
    an if statement I can。 put this conditional here and then I can have an else statement
    after it and otherwise I'm。 going to say a rose dot append and I'm going to say
    let's append and I'm going to say bit。
  prefs: []
  type: TYPE_NORMAL
- en: of the zip of the headers with my values make sure that your parentheses match
    up that's。 one of the things a lot of people run into problems with when they're
    writing programs。 here is you know we've got some nested calls to some functions
    here and methods you need。 to make sure that these parentheses match up at the
    end here if they don't you're going。
  prefs: []
  type: TYPE_NORMAL
- en: to syntax or idle nicely highlights them for you so you can see those match
    up and then。 I'm going to bump out of here and I'm just going to say return rose
    at the end of this。 now one more thing to note this lane of rose is equal to zero
    turns out the Python if you。 have an empty list let me just show you here if I
    convert it into a boolean so there's a。
  prefs: []
  type: TYPE_NORMAL
- en: boolean type of Python if I have an empty list and I put it in there it's fault
    if I have。 a list that has something in it like maybe one and two or three it
    is true so it turns。 out that saying bool of just a list is the same it's saying
    bool of the length of the。 list is equal to zero sorry it's not the same it's
    the opposite of that so I can come up。
  prefs: []
  type: TYPE_NORMAL
- en: here and I can say instead of doing this I'd say if not rose if I don't have
    rose stick。 the headers and the values otherwise I do have rose and appendent
    okay so let's try this。 now and let's see if this works so if I were to just come
    down here and try this we called。 this thing reads yes be I'm just going to zoom
    this back or squeeze this back so we。
  prefs: []
  type: TYPE_NORMAL
- en: can see both of them here okay so so if I come down here and I in my REPL I
    want to。 try my code out here so hopefully you're seeing how I like to work I
    like to try a right code。 and then try it out but if I were to try read CSV and
    then they'll say that result is equal。 if you read CSV and this is called covid。csv
    I get this name error read CSV is not defined。
  prefs: []
  type: TYPE_NORMAL
- en: so name error you can see see red in idle here this is an exception or trace
    back and。 this is the error right here name error name error means that Python
    is looking for a name。 or a variable and it can't find it Python looks for a variable
    in three places looks for in。 the local namespace the global namespace and the
    built-in namespace now in this case when。
  prefs: []
  type: TYPE_NORMAL
- en: we're in the REPL over here we're at the global level and you can type in DIR
    and you。 can see what are the variables defined at the global level here and you
    can see that read。 CSV is not in it that's because you see there's a little asterisk
    up here I didn't save this。 and reload this so even though I've typed in code
    over here I mean even if I do save this。
  prefs: []
  type: TYPE_NORMAL
- en: no I just say that the asterisk went away if I typed DIR over here it's still
    not in there。 we don't get access to this until we come up here and say format
    not format run module。 and run it okay so after this it's going to run and we
    should have access to it right。 here so let's try it now now I do have it let's
    look at the length of res let's look at。
  prefs: []
  type: TYPE_NORMAL
- en: the length of res is zero that's not very good okay so I've got a bug in here
    we'll have。 to debug what's going on so let me show you how to debug that we got
    a couple ways to。 debug that one one way to debug is what's called rubber duct
    debugging so rubber duct。 debugging is sort of what it sounds like a lot of people
    have a rubber duct and they。
  prefs: []
  type: TYPE_NORMAL
- en: stick it on their computer and they talk to their rubber duct and it helps them
    out so。 I don't have a rubber duct here but maybe I have the beetles over here
    so I'm going to。 take my little beetles guys from my yellow submarine Lego set
    I'll talk to maybe Ringo。 and I'll say hey Ringo this is what I'm doing here I'm
    opening up my file name I'm making。
  prefs: []
  type: TYPE_NORMAL
- en: a variable called rows to hold each row I'm looping over the lines in my file
    and then。 I'm getting the values for every line and if I don't have rows then
    I'm making headers。 equal to that values otherwise I'm appending into my rows
    those values there and then at。 the end I'm returning those rows okay Ringo you
    didn't help me this case Ringo didn't really。
  prefs: []
  type: TYPE_NORMAL
- en: help me but a lot of times the act of explaining something to someone else even
    if it's a rubber。 duct will put your brain in a different state such that you
    can understand it another option。 is to use what's called print debugging so you
    might want to do that where you could come。 here you can say like print that or
    we can print maybe over here I'll come over here and I'll。
  prefs: []
  type: TYPE_NORMAL
- en: say print values and I'll and I'll just say print rows as well。 and let's just
    run this and see if this gives me some insight here。 okay so so this this looks
    like it's giving me some insight here it looks like it's going。 to print out all
    about two thousand rows of that so maybe I come over here and stop that。
  prefs: []
  type: TYPE_NORMAL
- en: but it looks like that's problematic in that we're looping over our lines if
    we don't have rows。 we're doing that otherwise we're saying rows。append。 so it
    looks like rows isn't getting appended to which is kind of weird。 okay yeah so
    so we're saying if not rows and and so we're making those headers there and then。
  prefs: []
  type: TYPE_NORMAL
- en: we're never appending anything in there so in this case our logic is bad because
    we're never。 appending into the rows there so that so that's our problem we're
    never appending into the rows so。 our logic is depending on this appending into
    it and we're not and so maybe we want to do something。 else here hopefully this
    will stop here but let me let me just show you another thing you can do。
  prefs: []
  type: TYPE_NORMAL
- en: if you want to keep track of the index in Python what I can do is I can instead
    of looping over just。 this at at thin right here I can loop over enumerate calling
    f in and enumerate is a built-in function。 in Python and what it will return is
    when you loop over it is the index position so let's say i comma。 line and and
    the item of iteration here so here I'll say if i equals zero then we'll do that。
  prefs: []
  type: TYPE_NORMAL
- en: otherwise we'll append here okay so so this should work。 note that I said that
    idle doesn't really like printing out lots of stuff here you can see the。 idle
    is just like being annoying over here so let's run that and see if we can get
    it to work here。 okay so restart gonna go read that let's look at the length of
    reds here okay so now we do have。
  prefs: []
  type: TYPE_NORMAL
- en: those items and let me just show you one more way to debug this the print debugging
    in my case。 help me figure it out but another way to debug it is you can use the
    built-in debugger in Python you。 can say import pdb and then put a semicolon there
    and say pdb。set trace and as of recent versions of， Python you can just say breakpoint
    instead here but this will work in all versions of Python 3 here。
  prefs: []
  type: TYPE_NORMAL
- en: so let me just run this and show you that very quickly here。 okay so so now
    let's run this line right here again to run that line i just put my cursor at
    the end。 and hit enter twice you can see that my prompt change here it says pdb
    instead so this is the。 Python debugger it's included in the Python standard library
    i can hit h here and it will tell me what。
  prefs: []
  type: TYPE_NORMAL
- en: all the commands i can do so that's sort of your uh wife jackie here so here's
    the commands i like to。 do i like to say l which is shorthand for list and that
    lists where you are you can see there's this。 little arrow it says that we're
    in open so i can actually inspect f name because i'm inside of this。 function
    here um so i can go to the next line by saying n i want to know what n does i
    can say h。
  prefs: []
  type: TYPE_NORMAL
- en: n help on n says this is what n does so you can see if i do l again because
    i'm now at this rose line。 i can go to the next line here and i can look at uh
    rose if i wanted to i can go to the next line and。 look at line there's my line
    i can go to next line look at values。 some other commands that you might want
    or like s this will step into a function or a method i'm not。
  prefs: []
  type: TYPE_NORMAL
- en: i don't have any really to step into here um you can go up and down so i can
    go up from my stack。 whoops not s i can go up from here and in this case it's
    not really useful or i can go down back。 into it so if i've got multiple levels
    i can do that i can say q to continue running or not qc to。 continue running or
    i can say q to quit so that's another way that you can debug this as well so i'll。
  prefs: []
  type: TYPE_NORMAL
- en: just comment this out here i'll leave that code in there if you if you want
    to see that okay at this。 point we've got a bunch we've got a bunch of data here
    let's try and do some filtering of it so let me。 look at my namespace here um
    i've got res here uh so so what i want to do i'm going to um look at。 the results
    for utah here so let's look at just res zero what a single row looks like and
    you can。
  prefs: []
  type: TYPE_NORMAL
- en: see that there's a state there and so what i'm going to do is i'm going to filter
    all the ones where。 it's utah so i'm going to say ut res is equal to a list we'll
    say four row in res。 i'm going to say if row and then i'm going to pull out the
    state so this is a dictionary right so。 i can pull out that state and say yes
    the state is equal to ut and then i'm going to put a colon there。
  prefs: []
  type: TYPE_NORMAL
- en: i need to indent note the idles indenting for me just kind of say ut res that
    append i'm going to。 append my row into utres okay at this point if i look at
    length of ut res i should have。 about 37 entries there okay so let me just look
    at utres zero or something and see what the first one。 is okay so this is for
    the 12th this is yesterday and in covid cases there are 2，303 positive cases。
  prefs: []
  type: TYPE_NORMAL
- en: 41，000 negative cases and you just go through these you can see all of those
    here so maybe we。 want to make a plot of like the number of positives the number
    of deaths and maybe the hospitalization。 numbers there and see what that looks
    like over time so that's what we're going to try and do。 now another thing to
    note if you look at this you can see that like the positive here is actually。
  prefs: []
  type: TYPE_NORMAL
- en: string this is a string literal right to 23。03 it's hard to do math on a string
    so you might want。 to convert that into an integer so what we could do is we could
    say like utres and then like pull。 off positive now time just chain chaining these
    index operations together here so if we pull off。 the positive we get that string
    here we get look at a type of this if we wanted to verify it's a。
  prefs: []
  type: TYPE_NORMAL
- en: string bag i mean from inspection i can tell that it's a string if i wanted
    to make this an integer。 what i could do is i could say int and then if you look
    at that you can see that there are no quotes。 around it so with this i can do
    something i guess where i can say you know add a hundred to it that's。 what it
    might look like tomorrow if i had the previous case where it was uh where was
    just this。
  prefs: []
  type: TYPE_NORMAL
- en: where's a string if i try to add a hundred to it we get an error here where
    it says python can't give。 you type or can't really handle that for you so i want
    to make sure that we have the right types。 here um one thing that we might want
    to do is we might want to just loop over our values and try。 and convert them
    into integers so i'm going to do that here i'm just going to sort of brute force
    it。
  prefs: []
  type: TYPE_NORMAL
- en: um i'm going to say for uh val in values， now i'm going to try and convert it
    into an integer here okay so remember values is a list of what's in。 a single
    row i can do something like this where i can say val is equal to int val。 now
    this this will not stick it back into the list so i want to try and convert it
    and then i'm going to。 try and stick it back into the list so i do that uh it's
    a little bit hard to stick it back into the。
  prefs: []
  type: TYPE_NORMAL
- en: list uh with this but i can use my little secret here i can come up here and
    say well i can use my。 enumerate to pull out the position of it in that list。
    and then i can do something like this where i can say values j is equal to val。
    okay let's just run this and see if this works i'm going to come up here to run
    and say run module。
  prefs: []
  type: TYPE_NORMAL
- en: so this is like a very poor man's csv file now having said this like if you
    were to use the csv。 file package in the python standard library you would have
    to do some conversion in there it doesn't。 do conversion for you automatically
    pan does on the other hand we'll try and do some conversion。 for you but it might
    fail okay so i'm i'm going to come over here and i'm just going to hit uh。
  prefs: []
  type: TYPE_NORMAL
- en: go P or alt P depending on your platform a couple times。 to get my data here
    there you go okay and when i did this i got another error。 so uh you know this
    red splotch here you got an error value error this time so this invalid literal。
    for int so try to convert ak to an integer and pythons as i don't know what ak
    is so what i'm going to do。
  prefs: []
  type: TYPE_NORMAL
- en: here is i'm going to show you some code how to respond to exceptions here you
    see over here that。 this says it's in line 25 we called the red csv function here
    and then in line 25 that's this line。 right here you can look in the lower right
    hand corner and see line 25 here this line is causing。 the problem so what i'm
    going to do is right before this line i'm going to hit enter i'm going to。
  prefs: []
  type: TYPE_NORMAL
- en: take type try with a colon at the end see that try is orange it's a syntax in
    python for handling。 the exception now in this case if i hit enter it's going
    to indent me but i don't want to do that。 what i want to do is i want to go to
    the next line and hit tab and then this next line i want to try。 and run this
    line okay i'm going to go to the end of this line and unen unen indent and say
    accept。
  prefs: []
  type: TYPE_NORMAL
- en: accept i got a value error if i got a value error i'm going to put a colon in
    this line and then i'm。 just going to say if i got that just pass so try and convert
    it into an integer if you can if you。 can't that's okay we'll just use the original
    value there and we'll stick that in okay now this。 part right here we're saying
    values j is equal to val we can do that again it's going to either stick。
  prefs: []
  type: TYPE_NORMAL
- en: in the converted value or stick in the original value if we didn't want to stick
    in the original。 value it turns out that python has another thing that we can
    do is we can put an else。 clause with a tri statement now this is a little bit
    different than what you might be used to。 but python allows you to do this you
    can put the else clause right here and this says try and run。
  prefs: []
  type: TYPE_NORMAL
- en: this if it has an exception do this if it doesn't have an exception do this
    okay so let's run this now。 okay and we'll try and run run that and that looks
    like it does work awesome okay so i'm going to。 this would be a great time if
    you're doing this at home to make sure that yours can read this。 function and
    that works also if you look at res zero here you can see that like these are numbers。
  prefs: []
  type: TYPE_NORMAL
- en: here so that's cool so yeah if great time here if you're falling along at home
    or you're trying to。 do this as a tutorial pause the video and make sure that
    that is working okay so we're gonna。 cruise along now so maybe we want to make
    a little filter function here let's let's let's make a。 filter function i like
    trying things out in the REPL but then after i've done them in the REPL a。
  prefs: []
  type: TYPE_NORMAL
- en: little bit i get i'm a programmer programmers are lazy and so instead of doing
    that all the time i。 will take what i do multiple times and make a function to
    help me out so i'm gonna come over。 here and maybe i'll make a filter function
    and it's going to take rows and maybe it's going to take a。 state to allow me
    to filter by state here and we'll just come down here and we're gonna say res。
  prefs: []
  type: TYPE_NORMAL
- en: is equal to an empty list here i'm gonna say for row in res。 and i can say if
    row and has a state if the state is equal to the state that we pass in。 then we
    can say res。append row and then we'll un indent here and say return res now。 the
    one thing to be aware of is just the indentation we have a bunch of indentation
    up here uh note that。
  prefs: []
  type: TYPE_NORMAL
- en: my return here is indented at the same level as the four statement here and
    so if you're you could。 put this return you know here if you put it here it's
    not it's not gonna do the right thing so make。 sure that is in the right place
    now note sometimes if you if i do this i'll actually get an error let。 me just
    show you the error this is something that might get you if you're new to python
    here。
  prefs: []
  type: TYPE_NORMAL
- en: gonna run this and it says expected an indented block now watch what happens
    when i hit okay。 says it's expecting us to indent and it puts this little salmon
    colored splotch of death right here。 and so basically when you see something like
    this in idle it's telling you that it expected this。 to be indented and then it
    expected that because you ended in a colon right there so remember my little。
  prefs: []
  type: TYPE_NORMAL
- en: indentation dance there anytime you're in the line in a colon you got to indent
    that next line。 there so we'll just indent that and that should work fine now
    let me just show you another example。 here i'm on this res here after res is equal
    to an empty list i'll maybe just indent this line here。 now this is like i didn't
    expect it to be indented but you did indent it so this is sort of the opposite。
  prefs: []
  type: TYPE_NORMAL
- en: situation here it's going to ask me to save it and it says unexpected indent
    okay so and then there's。 the pink right here it says this was an unexpected indent
    so complains about that let me show you。 another error that's common i see among
    people who are new to python or who were trying to fall。 this at home maybe they
    didn't put these closing parentheses here just run this without these closing。
  prefs: []
  type: TYPE_NORMAL
- en: parentheses and they get invalid syntax now the invalid syntax is on this line
    right here which。 is a little bit weird let me maybe justify why python is giving
    you this line is invalid syntax。 the issue is is that you have open parentheses
    here and so python saying you have open parentheses i'm。 going to keep parsing
    this until i get the corresponding closing parentheses but you've got an open。
  prefs: []
  type: TYPE_NORMAL
- en: parentheses here which is actually for this dict call you've got a return inside
    of the dict call。 you can't have a return inside of a dict call it has to be on
    its own line not inside of。 prints a parenthetical like that and so that's why
    it's giving you the syntax error here on this but。 typically in general if you're
    in idle and you see you know the red splotch of death here it。
  prefs: []
  type: TYPE_NORMAL
- en: typically means somewhere to the left of this either you did not indent this
    or you need to go up to。 the lines above it and fix the lines above it and so
    this i can tell pretty easily by just looking at。 these previous line ended in
    parentheses that my syntax errors that i have my parentheses are。 not sufficient
    here let me just maybe stick an extra princey at the end there and let's see what
    that does。
  prefs: []
  type: TYPE_NORMAL
- en: involves syntax as well at this point i get the invalid syntax right there saying
    hey you've got。 an extra right princey i don't know what to do with it so just
    get rid of that and you should be good here。 okay so at this point you should
    be able to let's run this here we're gonna read our csv file。 and then we're going
    to say res and i'm going to Utah here if you want to do a different state you。
  prefs: []
  type: TYPE_NORMAL
- en: can but i'm going to say filter in the filter roads with my state let's look
    at the length of。 res Utah okay and so that didn't work what's going on there。
    yeah so so maybe i'll use my debugging techniques to figure out what went wrong。
    so i've got my beetles here i mean let's talk to maybe Paul maybe Paul can help
    me this time so。
  prefs: []
  type: TYPE_NORMAL
- en: Paul i am calling the filter function here i've got a bunch of rows and i've
    got a state and i want to。 filter those rows which are rows is a list of dictionaries
    and i want to see if there's a state。 key pull that out to make sure that's equal
    to whatever the state value is i'm going to make a。 variable called res which
    is the results i'm going to return and then i'm going to loop over every row。
  prefs: []
  type: TYPE_NORMAL
- en: in res hmm Paul why would i loop over every row in res i'm going to loop over
    the row in rows。 and so there i think there is my problem you can see i actually
    have another problem here i'm going。 to actually not show it to you right now
    let's run this while i'm doing that i found another problem。 see like i said when
    you're programming you're going to run into errors all the time it's like。
  prefs: []
  type: TYPE_NORMAL
- en: frustration app or frustration so you just need to get used to that and sometimes
    you might need to。 go take a walk take a deep breath um your brain can get into
    a place where it's so frustrated or you're。 you know i've been staring at this
    for an hour and i can't figure out what's going on。 take a break and step back
    typically helps okay so now let's let's just make sure that res has a。
  prefs: []
  type: TYPE_NORMAL
- en: length here didn't break that okay that does have a length now let's try and
    do this one here。 oh now i got a name error name error name rue is not defined
    okay so this is one of those things。 that might get you if you need a python is
    that like turns out that this is perfectly valid syntax。 but this is actually
    there's actually an error here um now idl doesn't capture this but some of the。
  prefs: []
  type: TYPE_NORMAL
- en: more advanced editors would um you know my emax configuration would capture
    this or if i'm using。 pie charm it would figure this it would like put a red squiggly
    line under this and tell you that。 you're you're you're trying to access a variable
    that's not defined here the problem is i have a。 typo this should be res not rue
    and so what we might want to do is have a test here to test this。
  prefs: []
  type: TYPE_NORMAL
- en: code to make sure that it works rather than you know just running it and making
    sure it works at。 runtime so that's what a lot of people do is they will put tests
    around their code to tighten that。 down here just going to fix that and let's
    try it again okay we'll just push this car back up the。 hill see if it comes crashing
    down see if it goes off the jump and lands and let's see if it does land。
  prefs: []
  type: TYPE_NORMAL
- en: here resute okay so and so now this is look like it looks like it's working
    awesome so if i wanted。 just to get like the deaths in you in you tie could do
    something similar here so。 looks like a resute zero here um so here are um let's
    see the deaths there's deaths right there。 so maybe that's a little bit more but
    you know just look at the positives right i'm gonna get all。
  prefs: []
  type: TYPE_NORMAL
- en: the positives in you tie can do something this i can say pause it's equal to
    an empty list i can say。 four row in ut。re or resute and i can say pause。append
    and say row and pull off positive。 okay and let's look at pause here and now it's
    just that sequence okay so that looks like we did a。 pretty good job we might
    want to reverse this turn if we look at the door of pause。
  prefs: []
  type: TYPE_NORMAL
- en: we have a reverse method here so it turns out that we can say what does this
    reverse method do we。 can say pause。reverse help pause。reverse and it says it
    reverse method of built-in's list reverse in place。 so what that in place means
    is that this is not going to return a new list it's just going to。 reverse it
    in place but note that this did not return anything but if i look at pause now。
  prefs: []
  type: TYPE_NORMAL
- en: it reverses it in place it takes the list and mutates it in place okay so that
    looks like。 it's doing a pretty good job there at this point we could probably
    plot this um so so maybe we'll。 make in little another function here um maybe
    rather than doing that i've got this utah res here。 or resutah and i don't want
    to look at all those lines let me just look at the first one here。
  prefs: []
  type: TYPE_NORMAL
- en: okay so here's the first one it's got a date here maybe maybe what we should
    do is we should sort。 them by date so let me just show you a cool way that we
    can sort with python here python has a。 built-in function of sort head the sort
    head will take anything that's iterable here and it has a。 thing called a key
    that you can pass in so a key is a custom function that can be customized the
    sort。
  prefs: []
  type: TYPE_NORMAL
- en: order so so watch what i can do here i can make this key i can say death i'm
    gonna find。 it the key as get the date and it's going to take a single row here
    it's going to return a row date。 and then i can say sort head and i can do utah
    and maybe i'm going to call this mute_sort it just to。 not print it out i can
    say sort head i'm going to sort my iterable which is utah_res。
  prefs: []
  type: TYPE_NORMAL
- en: and i'm going to say key is equal to get date， oh and i have it it's res_ute
    not utah_res。 okay and if i look at the lenn of utah。sorted just validate okay
    that looks like it's good we can。 say utah sorted zero what does the first one
    look like the first one looks like this is march seventh。 awesome and let's look
    at the last one here， minus one is the last one and that looks like it's good
    if it's so it says minus one here is sort。
  prefs: []
  type: TYPE_NORMAL
- en: of weird to you living index operation on minus one let me show you what that
    means in the python。 world it means that we're instead of doing minus one you
    can think of that it's saying the length of。 utah sorted and then subtract one
    from that which is the same as that so the length of utah sorted。 is that 37 and
    if you look at utah sorted try to pull off 37 that's out the end of the range。
  prefs: []
  type: TYPE_NORMAL
- en: because python is zero base so you've got to actually go one before that to
    get the second。 last one which is going to be 36 here okay so we can make a little
    sort by if we want to so。 let's do that we're going to say def sort by and this
    is just going to be a wrapper around。 sorted so i'm going to take rows and then
    i'm going to take a column and this is just going to be。
  prefs: []
  type: TYPE_NORMAL
- en: the column name so this will allow me to just pass in a column name to sort
    it by here and then。 what i'm going to do here is i'm going to define a function
    inside of this say get called name。 and it's going to take a single row single
    row item it's going to say return。 row and do an index and say call name so this
    is kind of interesting python will light a nest。
  prefs: []
  type: TYPE_NORMAL
- en: function in here so i can define a function here this is the local function
    that will be used。 when sort by is called and then when sort by goes away this
    function will go away as well so you don't。 have access to it at the global level
    you only have access to it inside of sort by and then i'm just。 just going to
    say return sorted rows key equal call name okay so let's run this what i'm going
    to do。
  prefs: []
  type: TYPE_NORMAL
- en: at the bottom here is i'm just going to i'm typed in a bunch of stuff and i'm
    a lazy program i don't。 like to keep typing that so i'm going to say res is equal
    to read csv i'm going to read covid。 csv and then i'm going to say utres is equal
    to filter rows and then the state will be ut and then。 i'm going to say utres
    is equal to sort by just going to and then sort utres by the date。
  prefs: []
  type: TYPE_NORMAL
- en: in there okay so let's just run that and see if this works。 okay and i got i
    got an error here name error on 148 says rows is not defined and that's because。
    i have res instead of that okay okay let's just push it back up the hill fix that
    come up here。 push it back up the hill see if it explodes again。
  prefs: []
  type: TYPE_NORMAL
- en: okay now it says stir is not callable here okay and so you got an error here
    on line 45。 so this is line 45 right here and i can do various debugging techniques
    again i can do my uh you know。 my rubber duct debugging so this time maybe i'll
    ask ringo what's going on here so i'm passing in。 rows and a column name and i
    what i want to do ringo is i'm going to take my rows and i want to pull。
  prefs: []
  type: TYPE_NORMAL
- en: off the value for each column name there and sort by the value for each column
    name so i'm going to。 do that ringo is i'm going to make a function that pulls
    off the value for the column name and sort。 by that function as the key function
    so i'm going to pass in into the sorted my rows and as key i'm。 going to pass
    in the key function oh look at that i passed in call name i did not pass in this。
  prefs: []
  type: TYPE_NORMAL
- en: function that i'm getting that i'm creating here so here's put in that right
    there okay so。 hopefully this helps you see like this helps me be a little bit
    more lazy i would have had to type。 that out a couple times and just by putting
    in there i don't have to type it out as much so。 hopefully it works now push it
    back up the hill， okay cool so i think i think we're good on that so link the
    utah res 37 mute res zero。
  prefs: []
  type: TYPE_NORMAL
- en: okay so there's the first one looks like we have sorted data now okay so now
    would be a great time to。 pause your code and make sure that you can get sorted
    data here and and if you have errors or。 whatnot fix those errors hopefully i've
    showed you some of the techniques that you can use to debug。 those errors and
    solve those okay at this point what we're going to do is we're going to step onto。
  prefs: []
  type: TYPE_NORMAL
- en: our next point and that is we're going to plot these so let's do some plotting
    here in order to。 plot these i want to use a library called mapplotlib python
    doesn't have a plotting library。 built into the standard library so we're going
    to use mapplotlib to do this there is a library。 called mapplotlib。org and this
    is a nice little library it's been around for a long time but。
  prefs: []
  type: TYPE_NORMAL
- en: allows you to do two-dimensional plots you can do some three-dimensional plots
    you can also animate。 some plots as well let me just show you maybe what i think
    is the most best feature of this。 website here is this examples page， so if you
    if you go to the examples page here you can see just a bunch of different plots。
    and if you click on one of them， it will load the code for that。
  prefs: []
  type: TYPE_NORMAL
- en: and so what you should be able to do is you should be able to download those
    and put it in its own file。 and it should make a plot here now generally when
    i'm using mapplotlib i'm using it from jupiter。 notebooks instead of idle here
    but you can take this and put it in idle as well so this is really。 cool what
    it allows you to do is basically you know you download a python file here you
    can run。
  prefs: []
  type: TYPE_NORMAL
- en: this if you want to and make sure that it works now in our case is not going
    to work right now。 because we don't have mapplotlib installed so let's let's work
    on getting mapplotlib installed so。 that's what we're going to do right now um
    i'm going to go back to my terminal here now you probably。 only have one terminal
    open because um because you started idle with that and so this is the one。
  prefs: []
  type: TYPE_NORMAL
- en: where i started idle it's got all this noise in it right now don't necessarily
    want you to kill。 idle what i want you to do is make a new terminal and with your
    new terminal you can activate your。 virtual environment here so we're going to
    say source temp mind in the temp directory your。 yours should probably be in the
    same directory so you can just cv to that directory and on unit。
  prefs: []
  type: TYPE_NORMAL
- en: systems you say source temp emv bin activate and there we go we are activated
    and all we have to do。 now is say pip install mapplotlib and this is going to
    go out and install mapplotlib for us。 let me show you how to do that on windows
    here same thing i mean i need to come over here and start a new。 command prompt
    here so i'm going to change i'm going to say cd to the directory where i am。
  prefs: []
  type: TYPE_NORMAL
- en: okay and then inside of this i'm going to activate my virtual environment here
    and so。 remember uh source does not exist on windows my virtual environment in
    this case is in my users。 mat in v's three six and then in there there's a script
    file not a bin file but a script。 file in there there's an activate and here i
    can just say pip install appplotlib。
  prefs: []
  type: TYPE_NORMAL
- en: okay um you can see that's thinking over here， so。 trying to record the screencast
    and broadcast it simultaneously to link in and。 twitter is bringing my computer
    down to its knees but it should respond here pretty quickly。 so so the idea of
    what we want to do is we want to take our data here uh our death data or our。
  prefs: []
  type: TYPE_NORMAL
- en: positive data and we want to make a little plot from that so we'll we'll do
    that as soon as we get。 mapplotlib loaded here let me talk about pip pips is short
    for pip installs python and it's a tool。 that's included in python three again
    if you go to my book tiny python notebook at the bottom of。 that there's that
    section on environments and right here there's a small section on installing。
  prefs: []
  type: TYPE_NORMAL
- en: you just say pip install your package and it will install those package you
    can also uninstall。 packages if you want to okay so it looks like our windows
    version worked。 um our our mac version okay did work now okay so now what we're
    going to do is we're going to make。 our little plot so i'm going to go back up
    to the top here and i'm going to say import matplotlib。
  prefs: []
  type: TYPE_NORMAL
- en: py， plot as pl looks space as plt so inside of places where python looks to
    load libraries there's a。 directory called matplotlib so i have that there's a
    file called pyplot。py and i'm aliasing that as。 plt that's a common alias that
    people who use matplotlib use so i'm just following suit and using。 that alias
    here allows me to get access to various matplotlib functionality here okay so
    what i'm。
  prefs: []
  type: TYPE_NORMAL
- en: going to do here is i'm going to just run this code again and i should have
    the matplotlib in there。 and i'm going to try and see if i can make a little plot
    maybe before i i do this this might crash my。 machine hopefully it doesn't but
    just for funsies i know when i do trainings like this a lot of people。 really
    like to have this terminal output here so i'm going to save this before i do anything
    too。
  prefs: []
  type: TYPE_NORMAL
- en: bad here to make sure you have it so this is just i'm going to call this rub
    bold。txt i'm just going to， save this so this will be in the dropbox as well if
    you want to access that okay so this point if。 we look we say dur looking what's
    in our namespace we have uh plt and we have utah res here so so this。 is awesome
    what i can do is i can say on plt you can say dur on plt you can see what's in
    there。
  prefs: []
  type: TYPE_NORMAL
- en: 67 lines so there's a bunch of stuff in here uh don't really have time to go
    over much of any of。 matplotlib would advise you you know if you want to understand
    it better check out the documentation。 or various courses or whatnot in there
    um there there's a lot of good material for matplotlib。 but what i'm going to
    do is i'm going to i'm going to make a figure what's called a figure and an。
  prefs: []
  type: TYPE_NORMAL
- en: axis here i'm going to say plt。subplots， and then i am going to say ax so figures
    like paper axis is where the plot is i'm going to say。 x。plot and let's try mplot
    and we've got this res uh utah res here okay so what i want to plot。 maybe is
    the positive values here so just to get the positive um maybe i'm gonna jump in
    the。 gun a little bit maybe i want to do a another function here that says death
    get value so it's。
  prefs: []
  type: TYPE_NORMAL
- en: going to take rows and it's going to have a key name or call a name。 and it's
    going to uh say the results is equal to this and then it's going to say four row
    in rows。 we're just going to pull out and say res。append into our res we're going
    to pull out from our row the。 column name this will pull it left plot like positive
    and have it just be a list of just the。
  prefs: []
  type: TYPE_NORMAL
- en: positive values here okay let's let's push this back up the hill so come up
    here to run and say run。 module okay so this looks like it's working okay um。
    we'll come up here we'll make our plot we'll say ax。plot and we're gonna say utah
    res and we don't。 want plot utah res we're on to get value on utah res and we're
    going to get the positives。
  prefs: []
  type: TYPE_NORMAL
- en: okay so this gave us this map plotlib result if we want to look at that we're
    going to say klp。show。 and there we go there is our little plot this is the plot
    for utah of the positive values in。 coronavirus so this is interesting i can i
    i've been tracking this locally just because i couldn't。 find anything that this
    and i wanted to see like you know does social distancing work or what not it。
  prefs: []
  type: TYPE_NORMAL
- en: looks like at least from the point of view of utah it sort of has um after you
    know the 15th or so people。 start staying home it looks like we've had like linear
    growth since then so the scale here there's。 not a logarithmic scale and so if
    this was you know exponential you would see the curve sort of go。 up but it's
    just you know the past two weeks has basically been flat growth so it's not stopping。
  prefs: []
  type: TYPE_NORMAL
- en: growing but it's not doesn't seem to be increasing growing as well okay so that's
    kind of cool um。 let's do something else here let's plot in addition we'll plot
    death let's see if we're gonna do death。 okay and let's also plot i think there's
    a hospitalized in there let's just look at eukres and see。 i'm gonna say eukres
    zero and pull off the keys here so look at the keys in there and there is。
  prefs: []
  type: TYPE_NORMAL
- en: hospitalized there let's let's try and do that as well， okay and then we'll
    do klk。show again。 and hopefully this pulls it up okay we might need to。 the interaction
    here with uh with idle is probably not ideal um and map plotlib so。 okay and so
    here's our plots here you can see these sort of get blown out the deaths and the。
  prefs: []
  type: TYPE_NORMAL
- en: hospitalized relative to these other ones here i think is that we are plotting
    all of those on。 the same plot here okay um is this the best plot ever no it's
    not the best plot um can we clean up。 yeah we could clean it up um rather rather
    than spend a lot of time cleaning it up and sort of you。 know this is not a case
    course on map plotlib it's more just on how to use python but i'd like to do。
  prefs: []
  type: TYPE_NORMAL
- en: rather instead is now jump ship a little bit and put some tests around our code
    show how to do some。 testing with our code and then show how to make a command
    line interface for our code so now would。 be a great time to pause this and make
    sure that you have this code working and make sure that you're。 able to make a
    little plot of of the values there okay so what we're going to do now is we're
    going。
  prefs: []
  type: TYPE_NORMAL
- en: to do some tests around this so what i want to do is i'm going to come up here
    to file and say new。 file let's make a test we're gonna we got a couple options
    for writing tests i'm just going to leverage。 the built-in testing framework in
    python this is called a unit test framework here and so。 we'll use that we're
    gonna so make a new file here and at the top of your new file you're gonna say。
  prefs: []
  type: TYPE_NORMAL
- en: import unit test and unit test is a library it's in the standard library of
    python it came out。 around the year 2000 and python 2。0 and this library was ported
    from java so there's a。 library in java called j unit java's object oriented programming
    language python supports。 object oriented programming but you can see we haven't
    defined any classes over here we've just。
  prefs: []
  type: TYPE_NORMAL
- en: done everything at the function level so python is actually what i would call
    a multi-paradomatic。 programming language it supports object oriented programming
    supports procedural programming so。 what we've been doing is more procedural also
    supports functional constructs which is you would。 find in a list or closure or
    scheme but because this unit test library was ported from java it。
  prefs: []
  type: TYPE_NORMAL
- en: requires you to use classes so let's let's use some classes here so i'm going
    to say class and i'm。 i'm going to make a class called test uh covid and you'll
    not be class is orange because that's。 the keyword that's part of the language
    when you're defining a class you have to say class this test。 covid is the name
    of the class in this case we're going to subclass unit test here so i'm going
    to。
  prefs: []
  type: TYPE_NORMAL
- en: say unit test。test。capital case here and put that in parentheses here if we're
    defining our own。 class we don't need to subclass it we would just put the class
    name and then put a uh。 parentheses or a colon at the end now remember whenever
    we have a colon at the end of the line we。 need to indent that next line here
    so you're going to indent the next line and maybe i'll。
  prefs: []
  type: TYPE_NORMAL
- en: all write a little test to test read csv i'm not going to do one to fetch url
    just because i don't。 want to do the network uh traffic here but um i'll all right
    one to test read csv and so unit test。 module follows the x unit paradigm the
    x unit paradigm came out with small talk the x unit。 paradigm says if you're going
    to test something you do some setup you call you call your unit you。
  prefs: []
  type: TYPE_NORMAL
- en: make some assertion about the call to your unit and then you do some tear down
    the setup and tear。 down in order to get your test in a state where they will
    run consistently in our case um our setup。 would be making sure that we have some
    csv file on the disk in this case i do have a csv file on。 the lid on the disk
    so i'm not really going to go through setup here but if this were production i。
  prefs: []
  type: TYPE_NORMAL
- en: would want to make sure that i have this csv file on there so you might want
    to do that if you're。 doing production i'm not really going to go over that just
    i'll just sort of say be aware of that if。 i move the csv file since this test
    is not dependent on it it would fail so we're going to say uh the。 result is equal
    to read csv and we're going to say covid。
  prefs: []
  type: TYPE_NORMAL
- en: dot csv and then just give us a result and i'm also going to say self dot assert
    equals and i'm going。 to assert that the the length of res whatever it is i think
    it's 2014 or something let's do that and。 we'll see what happens here okay so
    there there is our test so so here is calling our unit our quote。 unit and here
    is making insertion about it now you'll note that the assert equals here this
    looks like。
  prefs: []
  type: TYPE_NORMAL
- en: what's called camel casing and over here i'm using underscores between words
    uh so again this is due。 to the fact that this unit test library came from java
    this is the naming images that java uses。 python there's a document called pepe
    which recommends not using this naming convention however。 there are contradictions
    inside the standard library python itself where some naming conventions。
  prefs: []
  type: TYPE_NORMAL
- en: are violated so just just be aware of that fyi okay at the bottom of this i'm
    going to put a little。 snippet here i'm going to say if under name equals equals
    the stringed under main so this little snippet。 right here if this is true this
    means that we're executing this file let's put a little else here。 otherwise we
    are loading this file， as a library， i'm about to print loading down here and
    if i'm executing it what i want to do is i want to say unit test。
  prefs: []
  type: TYPE_NORMAL
- en: not main so in a unit test module there's a main function if i run that what
    it will do is it will。 look for any classes at subclass unit test look for any
    methods that are test that start with test。 in there and it will run those and
    it will report on those okay so at this point we have our basic unit。 test ready
    we're going to come up here to run and say run it i'm going to put it in the same
    directory。
  prefs: []
  type: TYPE_NORMAL
- en: as our covet here it's going to ask us to save it and i'm going to say that
    as test underscore covet。 i don't need to save it as this but it's good naming
    convention to use start naming it with test。 because there are multiple test run
    well there are test runners in python and one that's very popular。 pie test adopts
    this convention so if you use that convention it will be able to discover these
    tests。
  prefs: []
  type: TYPE_NORMAL
- en: here okay so this should save this it should run over here it should say restart
    you see that i'm。 restarting it and i've got some output here and i got namair
    we got the dreaded namair okay so namair。 online six here it's complaining about
    this online six so namair again what does namair mean namair means。 that python's
    looking for a variable and can't find it it's looking for reach csv and can't
    find it。
  prefs: []
  type: TYPE_NORMAL
- en: so python looks basically in three places it looks in the local namespace the
    global namespace and。 the built-in namespace and in this case is read csv in the
    local namespace no what's in the local。 namespace we are in a method here and
    the method has self and res in the local namespace but there's。 no reads csv in
    there so doesn't find it there so it looks in the built-in or the global namespace。
  prefs: []
  type: TYPE_NORMAL
- en: what's in the global namespace well we define this class at the global level
    so that's global。 and the unit test import there is global but read csv is not
    so can't find it there finally it looks。 in the built-in built-in is anything
    that's purple like print read csv is not purple so it fails so。 we get hence we
    get this name error over here so in order to give this to work we need to leverage。
  prefs: []
  type: TYPE_NORMAL
- en: this module over here so remember i saved in the same directory as that so i
    can come over here and。 i can say import covid and because there's a file called
    covid。py in the same directory python。 we'll be able to load it now i could run
    this again and i'll do that just for funsies you know see that。 it will still
    fail here because now covid is in our namespace but reads csv is still not but
    if we。
  prefs: []
  type: TYPE_NORMAL
- en: came over here after this runs it's thinking okay it failed if we if we do a
    dura on this we'll see。 that covid is in our namespace we do a dura on covid covid
    or if we just look at covid。 covid is a module and you can see that it's a python
    file that's what a module is and we can say。 dura on the file you can see that
    inside of that we do have read csv so in order to access this over。
  prefs: []
  type: TYPE_NORMAL
- en: here what we say is covid period so python when period follows a name it's going
    to search in。 that object for that name here at this point it should work keep
    my fingers crossed push this。 back up the hill see if it runs or explodes okay
    it's thinking。 okay and yeah it looked like it ran now we have an assertion error
    uh 2112。
  prefs: []
  type: TYPE_NORMAL
- en: and i equal to 2215 so if i changed this here 2212 just going to assume that
    that's a correct one。 by inspection uh and we'll change that there when we rerun
    this it should say that we ran one test。 and it did not fail okay it says please
    use assert equal instead of this so there's a。 application error so we can fix
    that and run it again it should just say ran one test。
  prefs: []
  type: TYPE_NORMAL
- en: okay cool so there is a little test to test that out um let's write another
    test here maybe we'll。 test like get value here so i can come over here to def
    test get value and this is a method so it。 needs to have self as the parameter
    as a parameter to the method there uh so this takes rows and a。 column name and
    it returns just the value from that so i can i can stub out some data if i want
    to i。
  prefs: []
  type: TYPE_NORMAL
- en: can say data is equal to a dictionary it has name mat and then another dictionary
    that has name。 to z okay and if i were to call this now the result is equal to
    covid get value and i want to get。 from data uh the column name name and then
    i should be able to say self assert equal and res。 should be a list with mat and
    suzi in it and so i have access to the assert equal method because i。
  prefs: []
  type: TYPE_NORMAL
- en: subclass this test up here so let's run that and see if this works。 okay cool
    so we have two tests that work that looks like it's working awesome。 okay so now
    would be a great time to pause this and make sure that your tests run and。 if
    you have issues getting them running common issues that i see getting them running
    you're not。
  prefs: []
  type: TYPE_NORMAL
- en: importing or you didn't save this file in the same directory as the other one
    or you didn't。 save this file as lowercase covid dot 19 or lowercase covid dot
    py this is looking for the same。 file name without the py on it in in the same
    directory okay so what i'm going to do now is i'm。 going to demo installing another
    library and we'll look at code coverage for this so maybe i'll。
  prefs: []
  type: TYPE_NORMAL
- en: jump over to my windows machine it might be a little bit snappier for me since
    it's not doing all this。 other stuff so i'm going to say pip install coverage
    we're going to install a code coverage tool now if。 let me just show you what's
    going on behind the scenes when you say pip install coverage。 um there there's
    a website called pypi this is a python package index and this is a website that。
  prefs: []
  type: TYPE_NORMAL
- en: basically is a repo for all the python packages that people want to release
    and make available to。 others this is the cool thing down here if you look at
    this there are almost a quarter of a million。 projects that you can leverage with
    python so this is really cool um basically allows you to stand。 on the shoulders
    of giants so if i wanted to find out about code coverage i can type in coverage。
  prefs: []
  type: TYPE_NORMAL
- en: into here and i can see that there are various tools for code coverage and click
    on this right。 here and this says coverage dot 5。1 i know that this is the code
    coverage tool that i want to use。 all you have to do is say pip install coverage
    remember because we made a virtual environment this。 will be isolated to our sandboxed
    install and so if some other project used a different version of。
  prefs: []
  type: TYPE_NORMAL
- en: coverage we want to have a conflict with that okay and then all we have to do
    is it's it's pretty。 straightforward to use i'll just show you how to use it right
    here um so i have an installed here i。 should be able to take coverage dot h or
    dash h this says you can measure collect and report on。 code coverage in python
    program so this is one of the reasons why i recommend that you use the。
  prefs: []
  type: TYPE_NORMAL
- en: command line because you're going to get access to these tools a lot of them
    run from the command line。 if you're not familiar with them that can be or if
    you're not familiar with the command line。 that can hamper you doing a lot of
    things so if that's sort of like a hurdle that you you know。 haven't really you
    know you've always just clicked on things you never use the command line。
  prefs: []
  type: TYPE_NORMAL
- en: something that you need to get over if you if you really want to leverage the
    power python。 like i said i always think it's great to uh understand what's going
    on underneath。 again there are wrappers around coverage and and you can leverage
    those by um i'm。 for and believer that you should at least do it once or twice
    the hard way not that this is the。
  prefs: []
  type: TYPE_NORMAL
- en: hard way at all it's actually pretty straightforward so i'm gonna say coverage
    and then instead of。 saying python uh test that i'm just gonna say coverage test
    covid dot p y and and that didn't work。 i need to say coverage run yeah you see
    the the commands are i can say coverage run coverage。 whatever so i'm going to
    do coverage run okay and it looked like you gave me the same results here。
  prefs: []
  type: TYPE_NORMAL
- en: said ran to test blah blah blah um but if we look at in here um not i'll ask
    but dare you can see that。 it now drop this little coverage blob in here dot coverage
    and so what i can do now is this this is。 where coverage recorded what it instrumented
    so i can do coverage i want to generate a report i'm。 going to say coverage html
    okay so this is thinking。
  prefs: []
  type: TYPE_NORMAL
- en: okay and after we run that there is a directory called html cub and if you look
    inside of html。 cub there are a bunch of files in there so it did some some reporting
    in that let me just。 i'll open this from over here i'm gonna say open html cub
    and and that's a。 should be an index in here um html cub， let's open this one
    okay um。
  prefs: []
  type: TYPE_NORMAL
- en: okay so here here is uh yeah there should there should be an index i think it's
    just copying it。 it hasn't copied it over yet， yeah so there there's an index
    following here let's see if it's see if it's still there。 okay so here here's
    our index you can see these are all the files that we did coverage on you can。
    see there are a bunch of uh map plotlib files that did but the ones we care about
    for example are。
  prefs: []
  type: TYPE_NORMAL
- en: test covid so these are test cases you can see that we did not cover this line
    of code down here。 and if we look at our actual code here our covid。py you can
    see that even this red was not covered。 so we did filter we did sort by we did
    get values here but we did not。 execute this fetch URL so that's one way to instrument
    your code understand what's going on there。
  prefs: []
  type: TYPE_NORMAL
- en: so this would be a great time to pause and make sure that you can run coverage
    on your code。 again how we did that was we said pip install coverage um， oops。
    okay we did pip install coverage then that installed coverage and then after that。
    we had a coverage binary here then we said coverage and then we did the run command。
  prefs: []
  type: TYPE_NORMAL
- en: and we said coverage run test our test file there and then after that we did
    coverage html to。 generate our html report that made this a file that had the
    html in there that we can inspect。 so make sure you can get that working on your
    machine should be straightforward if you have。 created a virtual environment okay
    at this point what i want to do is what i consider the last part。
  prefs: []
  type: TYPE_NORMAL
- en: of our little assignment here i want to make a command line application for
    this so we got our。 covid code right here i've hard coded doing utah right here
    but what i want to do instead。 so i'm going to make a little function here called
    plot state it's going to have a state。 it's going to have a file name and what
    i want to do basically i want to do this here。
  prefs: []
  type: TYPE_NORMAL
- en: so i'll just indent this code here and um so maybe this is going to be the csv
    name and we'll make。 another one that's going to be the plot name okay so we're
    going to pass in the csv name here。 and we're going to filter by our state and
    then we are going to。 we're going to say fig comma ax is equal to plt dot subplots
    we make our subplots and then we'll say。
  prefs: []
  type: TYPE_NORMAL
- en: ax dot plot and we're going to say i think utres it's probably not a very good
    variable name because。 it's not ut anymore um maybe i'll just call this state
    res so this is the state。 res and then i'm going to plot get value from state
    res。 and we're going to plot death and positive and hospital hospitalized here。
  prefs: []
  type: TYPE_NORMAL
- en: whoops didn't want to do that， okay so okay so positive。 and hospitalized okay
    and then at the end after we've done this i believe there is a thing called。 save
    fig on our map plotlib so it's a fig which is the page and i think it's save fig。
    and we're going to save this as plot name， okay so let's just test this out make
    sure that this works。
  prefs: []
  type: TYPE_NORMAL
- en: so again i'll just come up here to run and say run module。 okay and this is
    we're going to call the plot state function here， okay so let's do that plot state。
    and maybe we'll do ny and this csv name is covid dot csv and the plot name is
    going to be ny dot tng。 okay and we have utres here this needs to be state res
    they will push it back up the hill。
  prefs: []
  type: TYPE_NORMAL
- en: those name errors can get you again idl doesn't really do much to help you with
    that but there。 some other editors that are a little bit more powerful that will
    put little squiggles under that。 so i'm just going to put my cursor at the end
    of this line to copy it and i'll hit enter twice。 it's thinking okay it looks
    like it it might have generated a plot here let me just open this。
  prefs: []
  type: TYPE_NORMAL
- en: open and write up png， okay so there there is our new york city plot。 so again
    the map plotlib here is is a little a little buggy i'm going to i'm going to leave。
    that as an exercise to the reader to actually clean that up。 again this isn't
    a map plotlib class per se i want to show working with python more than than doing。
  prefs: []
  type: TYPE_NORMAL
- en: that okay so so this looks like it's working what i'm going to do now is i'm
    going to add。 uh command line argument to this so we can run this from the command
    line and not have to use the。 rebel to do this let me just talk about various
    options for doing that if you are new to python。 you search for command line arguments
    you'd find that there's probably about 40 or 50 or 500 different。
  prefs: []
  type: TYPE_NORMAL
- en: options for doing that seems that basically a lot of people when they come to
    python they。 their first bike shedding experiences writing their own way to do
    command lines。 i'm going to use one that's in the python standard library called
    arg parcel let me just show you。 what's in there so i'm going to open this up，
    now this is the documentation on the python standard library the python standard
    library。
  prefs: []
  type: TYPE_NORMAL
- en: tends to be more descriptive documentation describing all the options and what
    not。 rather than tutorial like this one's sort of an exception in fact at the
    very first here it has。 an example of how to use the code it actually links to
    a tutorial inside the python standard。 library this is in an exception most libraries
    in the python standard library documentation。
  prefs: []
  type: TYPE_NORMAL
- en: aren't like this or more if you scroll down here like。 here's the class and
    here are all the parameters to it and and that sort of thing so useful if you。
    want to sort of have a deep understanding not very useful or not maybe as useful
    if you just。 want to get something going quick but this right here is the basic
    just about to use it you import。
  prefs: []
  type: TYPE_NORMAL
- en: the library and you make this argument parser object here you add arguments
    to it to parse off。 what's passed in on the command line and then you call this
    parse args method here that dynamically。 creates an object that has whatever you
    passed in has attributes for that so that's what we're。 going to use i'm going
    to show you another website that i like as well this is this pie motw this is。
  prefs: []
  type: TYPE_NORMAL
- en: the python module of the week by Doug Hellman it's a great website or i mean
    it was his blog i believe。 or a website he created as sort of a pseudo blog and
    eventually it became into a book and so this is。 a nice documentation you have
    there's a book here but it's also available online and this is more。 of tutorial
    type documentation and rather reference type documentation so check that out if
    you're。
  prefs: []
  type: TYPE_NORMAL
- en: interested but again we are importing the library we make an instance of this
    argument parser we add。 arguments and then we parse the arguments here okay so
    let's do this on ours we're going to import。 the library up here so i'm going
    to come up to the top here i'm going to put my import after。 map potlib i like
    to separate my imports and pep8 uh recommends that as well map potlib is a third-party。
  prefs: []
  type: TYPE_NORMAL
- en: library so i'm just going to leave that sort of as its own grouping here arg
    parse and you are a。 libr in the standard library we also need another library
    from the standard library which is the。 syst library syst library is going to
    allow us to read uh files off of the command line。 okay so you'll need to add
    those two imports arg parse and syst then let's go back to the bottom。
  prefs: []
  type: TYPE_NORMAL
- en: here and we're going to put a little snippet of code down here i'm going to
    say if under name。 equals equals the string under main okay if this is the case
    then we're going to call the。 a main function with syst。argv argv of the command
    line arguments we're going to slice those。 let's say slice them off from one to
    the end so why are we slicing these we're slicing these because。
  prefs: []
  type: TYPE_NORMAL
- en: syst。argv which is what python gives us as a list of the command line arguments
    includes the name of。 the python file that we're running by default we actually
    don't care about that python files we're。 pulling it off okay let's make a function
    called main there's no hard requirement that the function。 be named main but a
    lot of people do name functions main at the bottom let's just say we have a main。
  prefs: []
  type: TYPE_NORMAL
- en: function here that takes some command line arguments and we're going to make
    an argument parse i'm going。 to say ap is equal to arg parse argument parser okay
    on that i'm going to add some options here maybe。 i want to specify a state so
    i'm going to say add argument and the argument is state um。 we'll add and maybe
    we can say add argument dash dash state and i'll make a short option。
  prefs: []
  type: TYPE_NORMAL
- en: dash s so we can do it like that okay and do the same thing add argument and
    we'll say。 c and dash just csv this is a csv file and we'll say ap to add argument。
    and we'll say dash o we'll say output and we can come over here and you can say
    help is equal to we。 can we can put a little help you can say that help is equal
    to。
  prefs: []
  type: TYPE_NORMAL
- en: kng file name show you what this does when we do it okay okay at this point
    we have made our。 arguments we're going to find what i'm going to say is i'm going
    to say opt is equal to， ap。parse args and we're going to parse the args that were
    passed in we're going to say if， opt。state if we got state then what we're going
    to do is we're going to call plot state。
  prefs: []
  type: TYPE_NORMAL
- en: and we're going to pass in opt。state opt。state opt。csv and opt。output okay i'm
    going to say this。 now i'm going to go to the command line i'm going to run this
    from the command line let me show you。 the code there again we added this little
    if under name equals the stream under main again this is。 saying this is saying
    are we executing this file are we running this file from the command line。
  prefs: []
  type: TYPE_NORMAL
- en: note that over here in our test in our test file here we are loading covid but
    we're not executing。 the command line so this this wouldn't this line would not
    execute when we imported it it only。 executes when you run it from the command
    line or alternatively if we come up here and say run module。 okay and then we
    add to this little main function that's just going to check what's on the command。
  prefs: []
  type: TYPE_NORMAL
- en: line arguments so i'm going to go to command line let's see if we can run this
    from the command line。 here so here's my command line， okay so here's my command
    line and i'm going to say python three covid dy-h。 and it's running it's thinking
    now again my my computer is pretty lagged down with a lot of things。 but there
    you go um note that it gave us this little nice documentation here。
  prefs: []
  type: TYPE_NORMAL
- en: it even spit out this png file name for us here so let's try and run it。 let's
    say python three and we're going to say state is ut-c that's covid。csv and dash
    oh i'm going。 to say utad。png here okay and it says can't open file ut so i got
    an error here let's let's see if。 i can fix that plot state should give us the
    state。
  prefs: []
  type: TYPE_NORMAL
- en: oh yeah my bad um yeah you just say python covid。py there you go okay。 okay
    well that's something i'll just run this from windows as well python covid， and
    covid。py and i'll do dash h here you see that it gives us the help i'm going to
    say dash s。 maybe we'll do wy for yoming dash c is covid sv and dash output yo。png。
  prefs: []
  type: TYPE_NORMAL
- en: okay looks like that worked here um look like we worked over here uh just open
    utad。png here。 there's our utad plot let's open our wyoming plot， there's our
    wyoming plot as well okay uh。 so now would be a great time to pause it and make
    sure that you've got the command line。 working on your machine again you need
    to add argparce and cis up here to the imports。
  prefs: []
  type: TYPE_NORMAL
- en: and down here to the bottom uh this main function and this little snippet down
    here。 so pause that and make sure that that's working okay so at this point we've
    come to the end of。 our tutorial hopefully you've had a good time you've been
    able to find out a little bit about python。 you've got a muscle memory about trinings
    out again we used idles today and i like idle because i can。
  prefs: []
  type: TYPE_NORMAL
- en: take code i can run it in the REPL and i can sort of go back and forth now again
    i said do i。 recommend everyone use idle day today no i don't um idle has some
    problems but i do recommend that。 you learn how to take your code and run it and
    you have access to the REPL in whatever environment。 you're doing if you're not
    doing that you're probably not leveraging python to the full extent。
  prefs: []
  type: TYPE_NORMAL
- en: that you could also we showed how to put some tests around our code and some
    coverage to。 understand how we're testing it and what not um a lot of people ask
    what what should i do now what's。 what's a good next step after you sort of try
    it out using python um i think a good thing is to find。 a project that you want
    to work on something that inspires you and something that you'll work on。
  prefs: []
  type: TYPE_NORMAL
- en: and and do that maybe it's something for work maybe it's a hobby you have or
    whatnot um。 anyway it's been a pleasure teaching you and hopefully this was useful
    following along。 best of luck with your python endeavors if you want to contact
    me uh best way to do that is probably。 through twitter um you can reach out on
    twitter my handle is under m herison i'll just pull that up。
  prefs: []
  type: TYPE_NORMAL
- en: here also i do tend to connect with people on linkedin so if you were in this
    course and you want to。 connect on linkedin uh feel free to send me a note that
    said you follow this on and i'll i tend to。 connect there so uh dunder m herison
    if you want to connect on twitter again have a great picon or。 virtual picon best
    of luck to you and hope to see you in real life sometime bye everyone thank you。
  prefs: []
  type: TYPE_NORMAL
- en: '[BLANK_AUDIO]。'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b46b41e9915a07d27bee0f1ba1884fb_46.png)'
  prefs: []
  type: TYPE_IMG
