- en: P60：Talk Neeraj Pandey - The joy of creating art with code - 程序员百科书 - BV1rW4y1v7YG
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P60：谈话者 Neeraj Pandey - 用代码创造艺术的乐趣 - 程序员百科书 - BV1rW4y1v7YG
- en: Hi， I'm Niedhaj and this is the Joy of Creating Art with Code。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 嗨，我是Niedhaj，这里是用代码创造艺术的乐趣。
- en: '![](img/52a2487830e8dc13348b25b8c0d4a613_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52a2487830e8dc13348b25b8c0d4a613_1.png)'
- en: '![](img/52a2487830e8dc13348b25b8c0d4a613_2.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52a2487830e8dc13348b25b8c0d4a613_2.png)'
- en: '![](img/52a2487830e8dc13348b25b8c0d4a613_3.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52a2487830e8dc13348b25b8c0d4a613_3.png)'
- en: A little bit about myself， I'm currently a sophomore student at Ashoka University。
    with a pursuing Commutative Science。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 关于我一点：我目前是阿肖卡大学的大二学生，正在学习计算机科学。
- en: '![](img/52a2487830e8dc13348b25b8c0d4a613_5.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52a2487830e8dc13348b25b8c0d4a613_5.png)'
- en: Moving forward， these are the points for discussion， the generative art， its
    principle in elements。 the history behind generative art， the geometry algorithms
    and randomness that frames a generative。 art。 We'll be seeing a lot of examples
    using processing and pie chiral and we'll be ending the talk。 using genetic algorithm
    and GANS。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将讨论的要点包括生成艺术、其元素的原则、生成艺术的历史、几何算法以及框架生成艺术的随机性。我们将看到很多使用处理和“派手性”示例，并且最后将使用遗传算法和生成对抗网络结束本次讲座。
- en: '![](img/52a2487830e8dc13348b25b8c0d4a613_7.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52a2487830e8dc13348b25b8c0d4a613_7.png)'
- en: So what exactly is generative art？ An art created through the use of an autonomous
    system is simply generative art。 Predictive art uses iterative commands to draw
    vector based shapes to the screen。 Most of the art created draws inspiration from
    the modern art， especially pop art that。 makes heavy use of geometric patterns。
    An autonomous system is always required。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 那么生成艺术到底是什么呢？通过使用自主系统创造的艺术就是生成艺术。预测艺术使用迭代命令在屏幕上绘制基于矢量的形状。大多数创造的艺术作品都受到现代艺术的启发，尤其是大量使用几何图案的波普艺术。始终需要一个自主系统。
- en: otherwise it's more of a digital art and the， randomness is one type of autonomous
    system。 So the design created is unique each time。 Here the role of an artist
    is to design the process that includes some sort of autonomy。 like the artist
    controls the randomness and the order in the art。 So we can see that the elements
    of the art are provided by the system and the principles。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，它就更多地属于数字艺术，而随机性是一种自主系统。因此，每次创建的设计都是独特的。在这里，艺术家的角色是设计一个包含某种自主性的过程，艺术家控制艺术中的随机性和顺序。因此，我们可以看到，艺术的元素是由系统提供的，而原则也是如此。
- en: '![](img/52a2487830e8dc13348b25b8c0d4a613_9.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52a2487830e8dc13348b25b8c0d4a613_9.png)'
- en: on which the art will be created is provided by the artist。 While creating an
    art piece。 one must understand and apply the building blocks of art and these，
    are the elements and principles。 When we talk about elements of an art， these
    are the things that are used to create an art。 piece and these can be used either
    individually or in combination for any art making endeavor。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 艺术作品的创作由艺术家提供基础。在创作艺术作品时，必须理解并应用艺术的基础构件，这些就是元素和原则。当我们谈论艺术元素时，它们是用来创作艺术作品的东西，可以单独使用，也可以组合使用于任何艺术创作活动。
- en: In an art piece， visual elements would be color， form， line， shape， space， the
    randomness and。 the texture。 Color is basically the hue， the value which is the
    lightness or the darkness。 the intensity， of the color used。 Form is the element
    of art that renders a 3D art form into 2D and as some volume and could。 be geometric
    or organic。 The textures can be perceived as surface quality of a work of art
    and it defines the way an。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在一件艺术作品中，视觉元素包括颜色、形状、线条、空间、随机性和质感。颜色基本上是色调、明度（即亮度或暗度）和颜色的强度。形状是将三维艺术形式转换为二维的一种艺术元素，可以是几何形状或有机形状。质感可以被视为艺术作品的表面质量，它定义了艺术作品的呈现方式。
- en: art object feels。 The principle is the rhythm， the contrast， movement， proportion
    and harmony。 So the rhythm is the movement of an artwork。 Contrast means the difference
    between the elements like color。 value， texture， size。 Movement is all about how
    our eyes move through the art piece and proportion means that some。 objects can
    be smaller and some objects can be bigger in an art piece。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 艺术对象的感觉。原则包括节奏、对比、运动、比例和和谐。节奏是艺术作品的运动，对比意味着元素之间的差异，如颜色、明度、质感和大小。运动涉及我们的眼睛如何在艺术作品中移动，而比例则意味着在艺术作品中某些对象可以较小，某些对象可以较大。
- en: Then all of these together creates an art piece。 So in the previous slide we
    saw an art piece。 you substrate by Jelle Tardville and if we， use all the principles
    that we discussed in the previous slide and put together we can。 also create something
    like this art piece that you can see here。 The idea behind this is pretty simple。
    We will start with some random points on the canvas then we start drawing lines
    to some。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，所有这些结合在一起形成了一件艺术作品。因此在上一张幻灯片中，我们看到了一件由耶勒·塔德维尔创作的艺术作品，如果我们使用之前讨论的所有原则并将其结合，我们也可以创造出类似的艺术作品。这个想法相当简单。我们将从画布上的一些随机点开始，然后开始画线。
- en: random directions but as soon as we， as soon as these lines collide with each
    other it starts。 creating new lines at an angle of 90 degree。 So the exciting
    thing about this is the emergence of art comes to be really different each time。
    The program is fun and this piece that you can see is created using Python and
    processing。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 随机方向，但一旦这些线条相互碰撞，它们就会开始以90度的角度创建新线条。这一点令人兴奋，因为艺术的出现每次都真的非常不同。这个程序很有趣，你可以看到这个作品是使用Python和Processing创建的。
- en: '![](img/52a2487830e8dc13348b25b8c0d4a613_11.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52a2487830e8dc13348b25b8c0d4a613_11.png)'
- en: So let's talk about the history of generative art。 In analog art which is the
    art manipulated by hand， complexity and scale requires exponentially。 more effort
    in time， computer excels at repeating processes near endlessly without exhaustion。
    As you will see the ease at which computers can generate complex images contributes
    greatly。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们谈谈生成艺术的历史。在模拟艺术中，即手工操作的艺术，复杂性和规模需要成倍增加的时间和精力，而计算机擅长于几乎无止境地重复过程而不感到疲惫。正如你将看到的，计算机生成复杂图像的便利性极大地推动了这一进程。
- en: to the aesthetic of generative art。 One major challenge faced by the early generative
    artists was the limitation of output devices。 So the primary source at those time
    was a plotter， a mechanical device holding a pen whose movement。 or controlled
    by the instructions that were programmed in the computer。 Plotter drawings were
    typically black and white on paper and as such most of the early works。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这与生成艺术的美学有关。早期生成艺术家面临的一大挑战是输出设备的限制。因此，当时主要的输出来源是绘图仪，一种用来握笔的机械设备，其运动由计算机编程的指令控制。绘图作品通常是黑白的，因此大多数早期作品也都是如此。
- en: produced was black and white even after the printers became to be used。 One
    of the first artists to produce plotter drawings in color was Frid and Neke and
    whose。 art piece can be seen here which is known as Homage a plot Paul Cly in
    1965。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 产生的作品是黑白的，即使在打印机开始使用之后。最早制作彩色绘图的艺术家之一是弗里德和内克，他们的艺术作品可以在这里看到，名为《致敬》，是对保罗·克莱的致敬，创作于1965年。
- en: '![](img/52a2487830e8dc13348b25b8c0d4a613_13.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52a2487830e8dc13348b25b8c0d4a613_13.png)'
- en: So this piece of art named Homage is typically based on our painting by Paul
    Cly entitled。 High Roads and By Roads。 Frid and Neke took Cly exploration to proportion
    and relationship between horizontal and vertical。 lines and ellipses as the backbone
    of the piece。 He has a lot of randomness on the size。 scale and the portion of
    lines and ellipses on a， pen plotter and if he makes a similar decision and puts
    the commands into the system where。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这件名为《致敬》的艺术作品通常基于保罗·克莱的画作《高路与小路》。弗里德和内克将克莱对水平与垂直线条及椭圆之间比例和关系的探索作为作品的基础。他在大小、比例以及线条和椭圆的部分上有很多随机性，这在一个笔绘图仪上表现得尤为明显，如果他做出类似的决定并将指令输入系统中。
- en: they get something similar outputs that you can see on the screen。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 他们得到了类似的输出，可以在屏幕上看到。
- en: '![](img/52a2487830e8dc13348b25b8c0d4a613_15.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52a2487830e8dc13348b25b8c0d4a613_15.png)'
- en: These are the replicas of Homage created in processing in Python。 One of the
    earliest and best known pieces of generative art is Shkotter by George Knees，
    in 1968。 Shkotter starts with a standard row of 12 square and gradually increases
    the magnitude。 of randomness in both rotation and location of the sequence as
    we move down to those。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是使用Python处理创建的《致敬》复制品。最早且最著名的生成艺术作品之一是乔治·尼斯于1968年创作的《Shkotter》。Shkotter从一排12个正方形开始，随着向下移动，旋转和位置的随机性逐渐增加。
- en: Magnesium art is one of the best option to create such art pieces because imagine
    for。 the second that you draw the image above yourself using a pen and a piece
    of paper。 it might take you an hour。 On the other hand providing some simple commands
    to the computer we can create thousands of。 such pieces in a couple of minutes
    and with a unique touch each time。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 镁艺术是创造这种艺术作品的最佳选择之一，因为想象一下，当你自己用一支笔和一张纸绘制上述图像时，可能需要一个小时。另一方面，通过向计算机提供一些简单的命令，我们可以在几分钟内创建数千件这样的作品，而且每次都有独特的风格。
- en: These two art pieces are created by Velma Olna who is a French media artist。
    She is one of the women pioneers in the field of generative art。 The majority
    of people in those early decades of computing had little to no contact with。 computers
    or frame of reference outside of science fiction。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这两件艺术作品是由**维尔玛·奥尔纳**创作的，她是一位法国媒体艺术家。她是生成艺术领域的女性先锋之一。在计算机发展的早期几十年里，大多数人几乎没有接触过计算机，或者对科幻小说之外的框架缺乏了解。
- en: Against this backdrop a large number of female generative artists emerged in
    making key contributions。 to the craft and the community。 This art piece is called
    Florida and it's created by John Meida in 1990s。 John Meida is another famous
    personality in the field of generative art。 He was the president of the Rhode
    Island School of Design and Professor at MIT Media Labs。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这样的背景下，许多女性生成艺术家应运而生，为这一工艺和社区做出了重要贡献。这件艺术作品名为**佛罗里达**，由**约翰·梅达**在1990年代创作。约翰·梅达是生成艺术领域的另一位知名人物，他曾是罗德岛设计学院的院长和麻省理工学院媒体实验室的教授。
- en: He has created a lot of awesome art works and has worked with people like Ben
    Frey and， Casey Rees。 And Frey and Rees took Meida's design by number and eventually
    built their own free platform。 that could be shared outside of universities and
    used by anyone with an interest of learning。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 他创作了很多出色的艺术作品，并与像**本·弗雷**和**凯西·里斯**这样的人合作。而弗雷和里斯以梅达的数字设计为基础，最终建立了自己的免费平台，可以在大学外共享，并供任何有学习兴趣的人使用。
- en: '![](img/52a2487830e8dc13348b25b8c0d4a613_17.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52a2487830e8dc13348b25b8c0d4a613_17.png)'
- en: to sketch with code。 And this turned out to be the birth of processing language。
    Ben Frey and Casey Rees are the founder and have been working on processing over
    the last。 19 years and has been the preferred platform for the best known generative
    artist。 Processing is basically a programming language and environment built for
    the media arts communities。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 用代码进行素描。这成为了处理语言的诞生。本·弗雷和凯西·里斯是该语言的创始人，并在过去的19年中一直致力于处理，成为了最知名的生成艺术家的首选平台。处理基本上是为媒体艺术社区构建的编程语言和环境。
- en: It is created to teach fundamentals of computer programming within the media
    arts context and。 to serve as a software sketchbook。 It's been used by majority
    of students， artists， designers。 programmers， architects and a lot， of professionals
    for production。 Currently processing is available in Java mode， JavaScript， Python，
    Raspberry Pi and Android， mode。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 它的目的是在媒体艺术背景下教授计算机编程的基础知识，并作为软件草图本。大多数学生、艺术家、设计师、程序员、建筑师和许多专业人士都在生产中使用它。目前，处理支持Java模式、JavaScript、Python、树莓派和Android模式。
- en: And in this tutorial we'll be seeing a lot of examples using processing and
    PyCider。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将看到许多使用处理和PyCider的示例。
- en: '![](img/52a2487830e8dc13348b25b8c0d4a613_19.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52a2487830e8dc13348b25b8c0d4a613_19.png)'
- en: So let's start by checking out examples that are using mathematics and algorithms。
    We'll see how we can create art pieces using simple mathematical functions like
    lies， trigonometry。 we can use randomness， then we'll be using a lot of colors，
    filter methods and shadows。 So for any art piece in generative art randomness
    is a major factor and we need some method。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们开始看看使用数学和算法的示例。我们将看到如何使用简单的数学函数，如直线和三角函数来创作艺术作品。我们可以使用随机性，然后我们将使用大量的颜色、过滤方法和阴影。因此，在生成艺术中的任何艺术作品中，随机性是一个主要因素，我们需要一些方法。
- en: that provides us with a floating point number， floating random point number。
    So the random method differs in different programming languages but the main objective。
    is to provide us a random floating point number between zero and one。 And if we
    plot various random numbers generated over a period of time and plotted a graph。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 它为我们提供了一个浮点数，浮动的随机浮点数。因此，随机方法在不同的编程语言中有所不同，但主要目标是提供一个介于零和一之间的随机浮点数。如果我们在一段时间内绘制生成的各种随机数并绘制图表。
- en: we'll see something similar like this with each random number has no relationship
    with。 the previously random regenerated number。 So if you want to generate random
    numbers in processing。 we can simply call the function， random and which will
    be returning the value。 the floating value between the floating random， value
    between zero and one which excludes one。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到类似的情况，每个随机数与之前生成的随机数没有关系。因此，如果你想在 Processing 中生成随机数，我们可以简单调用函数 random，它将返回一个浮动值，介于零和一之间，排除一。
- en: And we can also provide a minimum and maximum。 So by providing a minimum maximum
    as a parameter will be getting a value between the minimum。 and the maximum which
    excludes a maximum value and simply providing a single value in the。 random function
    will be returning a value， random value between zero and one。 And if you're not
    using processing， we can simply use a random for module and Python。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以提供最小值和最大值。因此，通过提供最小值和最大值作为参数，我们将得到一个排除最大值的值，简单地在随机函数中提供一个单一值将返回一个随机值，介于零和一之间。如果你不使用
    Processing，我们可以简单地在 Python 中使用 random 模块。
- en: '![](img/52a2487830e8dc13348b25b8c0d4a613_21.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52a2487830e8dc13348b25b8c0d4a613_21.png)'
- en: Before we move forward and start exploring art pieces that uses vector operations，
    shapes。 and other examples， we need to understand how exactly a canvas looks like
    when we are。 working on a generative art piece。 So the canvas it's like a 2D Cartesian
    plane but each point can be considered as a vector。 If you're talking about a
    vector in a 2D Cartesian plane which is the distance between two points。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续探索使用向量运算、形状和其他示例的艺术作品之前，我们需要了解当我们在创作生成艺术作品时画布的样子。因此，画布就像一个 2D 笛卡尔平面，但每个点可以被视为一个向量。如果你谈论的是
    2D 笛卡尔平面中的一个向量，那么就是两个点之间的距离。
- en: as you see on the right hand side we have a Cartesian plane and the point is
    denoted。 by x comma y where x comma y stores instructions basically on how to
    get there from the origin。 to that point。 We can further use linear algebra operations
    to perform actions like scaling linear transformations。 rotations。 Similarly，
    we can create a line from a point to the other on our canvas。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在右侧看到的，我们有一个笛卡尔平面，点由 x，y 表示，其中 x，y 基本上存储了如何从原点到达该点的指令。我们可以进一步使用线性代数运算执行诸如缩放、线性变换、旋转等操作。同样，我们可以在画布上从一个点创建到另一个点的线。
- en: '![](img/52a2487830e8dc13348b25b8c0d4a613_23.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52a2487830e8dc13348b25b8c0d4a613_23.png)'
- en: And if you want to create a point and line in processing it's pretty simple
    and straightforward。 We just use the function in build function point providing
    two parameters x and y which。 are the x and y coordinates from the origin。 And
    if you're using a 3D canvas we can provide x， y。 z coordinates。 And if you want
    to find a distance between two points we'll be simply using this and providing。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在 Processing 中创建一个点和线，这非常简单明了。我们只需使用内置的点函数，提供两个参数 x 和 y，它们是原点的 x 和 y 坐标。如果你在使用
    3D 画布，我们可以提供 x、y、z 坐标。如果你想找到两个点之间的距离，我们只需使用这个并提供。
- en: four parameters x one comma y one which is the coordinates of the first point
    and x two。 comma y two which is the coordinates for the second point。 Similarly
    we can create a line between those two points by using line and providing the。
    two points coordinates x one comma y one and x two comma y two。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 四个参数 x1，y1 是第一个点的坐标，x2，y2 是第二个点的坐标。同样，我们可以通过使用 line 并提供两个点坐标 x1，y1 和 x2，y2 来创建这两点之间的线。
- en: This will create a line but to show the line on those canvas we need to have
    a stroke and， a color。 So we'll be using the stroke function which takes a color
    parameter and the color can。 be a hex value or a RGB value and we can also manipulate
    the width of the thickness of the。 stroke or the line by using stroke weight and
    providing a parameter。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一条线，但要在画布上显示这条线，我们需要有一个描边和颜色。因此，我们将使用 stroke 函数，该函数接受颜色参数，颜色可以是十六进制值或 RGB
    值，我们还可以通过使用 stroke weight 和提供一个参数来操控描边或线的厚度。
- en: Similarly we can use pie kyrel to draw lines by using context which is basically
    canvas。 So context that set_line_width and providing the width of a line which
    is a thickness and。 then in pie kyrel it works in this way like we just first
    tell the canvas to move to this。 point and from that point we can create a line
    to the other point。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以使用pie kyrel通过上下文绘制线条，基本上就是画布。所以上下文设置线宽并提供线条的厚度，然后在pie kyrel中，它的工作方式是，我们首先告诉画布移动到这个点，从那个点我们可以创建一条线到另一个点。
- en: So we can simply use move_to to the first point coordinates and from there we
    can use。 line and the second point and create a line between them and even in
    the last we can just。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以简单地使用move_to到第一个点的坐标，从那里我们可以使用线条和第二个点，在它们之间创建一条线，最后我们也可以简单地。
- en: '![](img/52a2487830e8dc13348b25b8c0d4a613_25.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52a2487830e8dc13348b25b8c0d4a613_25.png)'
- en: use context at stroke to create a line in between those two points。 So these
    art pieces have been using by simple lines and dots of different thickness and
    intensity。 On the left hand side I have placed vertical lines of different lengths
    and different opacity。 along with dots at random positions to give it a nice nice
    background。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上下文在这两点之间创建一条线。这些艺术作品通过不同厚度和强度的简单线条和点来呈现。在左侧，我放置了不同长度和不同不透明度的竖线，以及随机位置的点，以营造一个美丽的背景。
- en: On the right hand side in a single vertical column there are number of small
    lines which。 uses a large set of color palettes and have randomly used the colors
    to fill the stroke。 Instead of using simple straight lines we can also use vector
    operations。 On the left hand side it consists of dots on the horizontal line and
    the dots move to。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在右侧的单个垂直列中，有许多小线段，使用了大量的调色板，并随机使用颜色填充线条。我们也可以使用向量运算，而不是简单的直线。在左侧，它由水平线上的点组成，点像风吹动一样来回移动。
- en: and fro as if the wind is blowing。 We continue this from top to bottom for the
    number of times。 Then instead of adding the points as the variable position we
    can create a p vector which is。 an inbuilt function and processing which is a
    collection of values that describe the relative。 position in space so we can change
    its position at any moment of time。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从上到下重复这个过程多次。然后，我们可以创建一个p向量，作为变量位置，而不是添加点，这是一个内置函数，处理一组描述相对空间位置的值，这样我们可以随时改变它的位置。
- en: So we can have other vectors like velocity and acceleration vector as we know
    velocity。 depends on acceleration and position depends on velocity。 A change in
    these vectors would eventually bring a change in the position vector。 So by doing
    these vector operations by changing the value of changing the small value in acceleration。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以有其他向量，比如速度和加速度向量，正如我们所知，速度依赖于加速度，而位置依赖于速度。这些向量的变化最终会导致位置向量的变化。因此，通过改变加速度中的小值来进行这些向量运算。
- en: and velocity we can create a virtual wind effect and the points move in the
    direction， of the wind。 On the right hand side instead of using the above mentioned
    operations on the which we。 are using on the left hand side image we can simply
    use the curve vertex which is an inbuilt。 function processing that creates a curve
    between two lines and we can use two points。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 通过速度，我们可以创建一个虚拟风效应，点在风的方向上移动。在右侧，我们可以简单地使用curve vertex，这是一个内置函数，处理在两条线之间创建曲线，我们可以使用两个点。
- en: '![](img/52a2487830e8dc13348b25b8c0d4a613_27.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52a2487830e8dc13348b25b8c0d4a613_27.png)'
- en: and create a curve。 So curve vertex is an implementation of a catmulls spline
    algorithm which is a type of。 interpolating spline that is a curve that basically
    goes through its point in processing。 its specifies the vertex coordinates for
    curves。 So this function can only be used in between big in shape with no more
    parameters in the。 end shape。 So these function the big in shape in the end shape
    basically allows creating complex form。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 并创建一条曲线。因此，curve vertex是catmull样条算法的实现，这是一种插值样条，基本上是通过处理的点的曲线。它指定了曲线的顶点坐标。因此，此函数只能在大形状与结束形状之间使用，没有更多的参数。这个函数允许创建复杂的形式。
- en: on a Cartesian plane。 The second we have busier curves which is a versatile
    mathematical curve in our vector。 graphics。 This is similar to what we use in
    our vector graphics tool like illustrator which are defined。 by a series of anchor
    and control points。 If we use the curve vertex and busier curves at a single point
    or two points over the period。 of time we can get a similar scribble like effect
    on the canvas that we can see in the。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在笛卡尔平面上。第二个是贝塞尔曲线，这是一种在我们的矢量图形中非常多功能的数学曲线。这类似于我们在矢量图形工具（如Illustrator）中使用的，由一系列锚点和控制点定义。如果我们在一定时间内在单个或两个点上使用曲线顶点和贝塞尔曲线，我们可以在画布上得到类似涂鸦的效果。
- en: '![](img/52a2487830e8dc13348b25b8c0d4a613_29.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52a2487830e8dc13348b25b8c0d4a613_29.png)'
- en: art piece。 So let's see how we can create some basic shapes and we'll see how
    we can use this basic shapes。 to create generative art。 So if you want to create
    an ellipse we can simply use the ellipse function by providing。 four parameters
    A， B， C and D with A and B are the point coordinates on the canvas and C。 and
    D are the width and the height and if you want to create a rectangle we can provide。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 艺术作品。那么，让我们看看如何创建一些基本形状，以及如何使用这些基本形状来创建生成艺术。如果你想创建一个椭圆，可以通过提供四个参数A、B、C和D来简单实现，其中A和B是画布上的坐标，C和D分别是宽度和高度。如果你想创建一个矩形，我们可以提供。
- en: eight values on which four are the composite value which are like A and B are
    the coordinates。 of the points A， B and C and D are the width and the height and
    if you want to add radii。 to the radius for the corners we can either if you want
    the same radii on all four corners。 we can simply provide a value say radius radii
    and if you want different values at different。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 有八个值，其中四个是复合值，例如A和B是点A和B的坐标，C和D是宽度和高度。如果你想为角落添加半径，如果想要四个角相同的半径，只需提供一个值，比如radius。如果你想在不同角落使用不同的值。
- en: of different radius and each corner we can either provide the value of TL TR
    BR and BL。 which is the top left top right bottom right and bottom left and if
    we want to create a。 square we can simply use X and Y like we can provide three
    parameters X， Y are the coordinates。 of X， Y from where we will start the square
    and C is the length of the side of a square。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在不同的半径上，每个角我们可以提供TL、TR、BR和BL的值。这分别是左上角、右上角、右下角和左下角。如果我们想创建一个正方形，只需使用X和Y，提供三个参数X和Y是正方形起始点的坐标，C是正方形边长。
- en: similarly we can use PyChiral to create shapes that we can see on the bottom。
    Linear interpolation is a very important function when we are working with creative
    coding or。 generative art it calculates a distance between two numbers at a specific
    increment and the。 amount is the amount to interpolate between the two points
    say if we want to interpolate。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以使用PyChiral创建底部可见的形状。线性插值在进行创意编码或生成艺术时是一个非常重要的函数，它在特定增量下计算两个数字之间的距离，而amount是两个点之间插值的量，比如如果我们想要插值。
- en: between 0 and 1 0 is equal to the first point 0。1 is very near to the first
    point 0。5 is。 the half in between it moves on so the LUB function is a inbuilt
    function processing which。 is convenient for creating motion along a straight
    path and for drawing dotted lines and if you。 don't want to use processing and
    you don't want to use a inbuilt function you can also。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在0到1之间，0等于第一个点，0.1非常接近第一个点，0.5是中间的值，LUB函数是一个内置函数，用于沿直线路径创建运动和绘制虚线。如果你不想使用Processing或内置函数，你也可以。
- en: create your own function as LUB which will take three parameters start stopping
    the amount。 and will return something like start multiplied by 1 minus amount
    plus n into amount so we。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 创建你自己的函数LUB，它将接受三个参数：start、stopping和amount，并返回类似于start乘以1减去amount加上n乘以amount的值。
- en: '![](img/52a2487830e8dc13348b25b8c0d4a613_31.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52a2487830e8dc13348b25b8c0d4a613_31.png)'
- en: can use those simple shapes that we discussed in the previous slides here in
    these art pieces。 I'm using simple rectangles with various random width and using
    a large color palette and。 randomly using those colors and filling those tangles
    and eventually we get something like。 this and as these pieces are using randomly
    random width so each time you run the program。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在这些艺术作品中使用我们在之前幻灯片中讨论的简单形状。我使用各种随机宽度的简单矩形，搭配丰富的调色板，随机使用这些颜色填充这些矩形，最终得到类似这样的效果。由于这些作品使用了随机宽度，因此每次运行程序时结果都会不同。
- en: '![](img/52a2487830e8dc13348b25b8c0d4a613_33.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52a2487830e8dc13348b25b8c0d4a613_33.png)'
- en: you'll get completely different art pieces you can also get inspiration from
    the another。 artist paintings like this on the left hand side as an art piece
    by b8 Mondrian it's named。 composition 2 in red blue and yellow and it's just
    using random shapes like the triangles。 and squares and lines and on the right
    hand side I'm use a similar procedure of using。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你将获得完全不同的艺术作品，你还可以从另一位艺术家的画作中获取灵感，左侧是一幅由**毕加索**创作的艺术作品，名为《红蓝黄的构图2》，它只是使用了像三角形、正方形和线条这样的随机形状，而右侧我使用了类似的程序。
- en: shapes like rectangles and squares and created a similar art piece which uses
    randomly aligned。 lines rectangles and using a large color palette and filling
    the rectangles and squares and。 also using a noisy background using the pulley
    noise function which we'll see in the next。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 像矩形和正方形这样的形状，并创建了一个类似的艺术作品，使用随机排列的线条、矩形，以及使用丰富的调色板填充矩形和正方形，同时使用滑轮噪声函数作为背景噪声，我们将在接下来看到。
- en: '![](img/52a2487830e8dc13348b25b8c0d4a613_35.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52a2487830e8dc13348b25b8c0d4a613_35.png)'
- en: slide so can Paulin develop the noise function while working on the original
    drawn movie in。 the 1980s he used to create procedural text of a computer generated
    effects unlike a random。 number generator that generates a random number between
    two numbers and there's no relationship。 between the last number produced and
    show no discernible pattern on the other hand Paulin。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 保林在1980年代为原始动画电影工作时开发了噪声函数，他用它来创建计算机生成效果的程序化文本，这与生成两个数字之间随机数的随机数生成器不同，后者生成的最后一个数字与之前的数字没有关系，并且没有可辨识的模式，另一方面保林。
- en: noise the number generated has a relationship between the last number generated
    and a small。 organic in appearance because the numbers which are generated using
    pulley noise are naturally。 ordered sequences of pseudo random numbers and if
    you generate a lot of pulley noise numbers。 in plot a graph you will see that
    the graph is more smooth and organic in processing using。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 噪声生成的数字之间存在关系，最后生成的数字看起来有些有机，因为使用滑轮噪声生成的数字是自然排序的伪随机数字序列，如果你生成大量滑轮噪声数字并绘制图表，你会发现图表更平滑，处理起来更有机。
- en: '![](img/52a2487830e8dc13348b25b8c0d4a613_37.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52a2487830e8dc13348b25b8c0d4a613_37.png)'
- en: generating pulley noise are pretty simple you can simply call the noise function
    which returns。 the pulley noise value at specified coordinates it can compute
    1d 2d and 3d noise depending。 on the number of coordinates given the resulting
    value will always be between 0 and 1 and xyz。 are the number in those coordinates
    in nice space another function another important function。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 生成滑轮噪声非常简单，你可以直接调用噪声函数，它会在指定坐标返回滑轮噪声值。根据给定坐标的数量，它可以计算一维、二维和三维噪声，结果值始终在0和1之间，xyz是那些坐标在噪声空间中的数字，另一个重要的函数。
- en: while working with pulley noise is the nice seed so it sets the seed value for
    the nice。 function because by default noise function produces different results
    from each time the。 program is searched so it sets it to a constant single value
    and the third important function。 in processing is the noise detail which takes
    two parameters the first being the number of。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用滑轮噪声时是噪声种子，它为噪声函数设置种子值，因为默认情况下噪声函数每次程序运行时产生不同的结果，所以它将其设置为一个常数单一值，第三个重要函数是噪声细节，它接受两个参数，第一个是数量。
- en: octaves to be used by the noise and the second follow factor for each octave
    basically it。 adjusts the level of details produced by the pulley noise function
    like the intensity the。 fineness or maybe if you want to add a granular effect
    using those pulley noise we can create。
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 噪声使用的八度音阶和每个八度音阶的第二个跟随因子基本上是在调整由滑轮噪声函数产生的细节水平，比如强度、细腻程度，或者如果你想添加粒状效果的话，利用这些滑轮噪声我们可以创造出来。
- en: '![](img/52a2487830e8dc13348b25b8c0d4a613_39.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52a2487830e8dc13348b25b8c0d4a613_39.png)'
- en: 2d field of vectors with each pointing in a similar but different direction
    as it is。 neighboring vectors and have the velocities affected by the vectors
    that we discussed。 previously depending on how we draw the particles using animation
    we can generate some 3d cool。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 是一个二维向量场，每个向量都指向相似但不同的方向，与其邻近向量的速度受之前讨论的向量影响。根据我们如何使用动画绘制粒子，我们可以生成一些三维的酷炫效果。
- en: '![](img/52a2487830e8dc13348b25b8c0d4a613_41.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52a2487830e8dc13348b25b8c0d4a613_41.png)'
- en: stuff that we can see here instead of just using pulley noise we can also use
    pulley。 instead of just cleaning pulley noise wave we can also create some noisy
    background or。 the granular effect using pulley noise as we can see here so in
    this RPS I have created。 a noise field and on the front we have a grid with a
    background and a noise a noisy background。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: basically which is using the pulley noise generated random noise and which is
    eventually giving。 a granular effect。 Let's see how geometry factors and chaos
    and how we can use the geometrical patterns the。 factors in simple chaos theory
    to generate aesthetic art pieces on the right hand side。 it's a geometric pattern
    which looks pretty complex at first but if you look closely it's。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: just using circles of random radius and with no fail and just stroke over a
    period of time。 and up to a length of diameter。 So the very basic and famous example
    of geometric pattern could be the C L pencil gasket where。 we are recursively
    dividing the triangle and creating smaller triangles inside it so which。 this
    is basically an equilateral triangle subdivided recursively into smaller equilateral。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: triangle with one because they call it each time。 This example is pretty simple
    which is not using any kind of fill and just we are just。 filling the stroke with
    a black color and we can like do small transformation in the。
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/52a2487830e8dc13348b25b8c0d4a613_43.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
- en: initial state and we can modify it into something like this where we are not
    just filling the。 stroke we are filling the triangle and we are also using random
    values and the rotating。 it the location we are rotating the triangles we are
    changing its location and instead of。 just using triangle we are using the curl
    vertex to add some sketchy effect on the outer。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/52a2487830e8dc13348b25b8c0d4a613_45.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
- en: surface。 This is a example of a fractal which looks like a flower so it's using
    four different。 types of fractal and put together at a 360 degree and together
    it's giving something。 like this effect which looks like a fractal basically a
    flower。
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/52a2487830e8dc13348b25b8c0d4a613_47.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
- en: When we talk about fractal mandibot set is one of the most famous one in mandibot
    fractal。 or the mandibot set the more you zoom the more similar patterns you see
    and then that。 makes fractal so fascinating。 So it is represented on a complex
    plane where there is a coordinate system and as complex。 number you can see the
    equation here like z equals to x plus yi where i is the complex。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: number the xy axis represents the real and the z axis represents the imaginary
    part so。 we pick a point in the coordinate plane and pass it to the equation and
    iterate it to some。 n number of times and eventually we get the mandibot set we
    can use different parameters。 like if we touch infinity we can change the color
    of the set otherwise it should be black。
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: and most of the fractals are similar in nature we can also create a julia set
    which in some。
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/52a2487830e8dc13348b25b8c0d4a613_49.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52a2487830e8dc13348b25b8c0d4a613_49.png)'
- en: manner is pretty similar to the mandibot set in using the almost similar mathematical。
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方式与曼德博集合相似，使用几乎相似的数学。
- en: '![](img/52a2487830e8dc13348b25b8c0d4a613_51.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52a2487830e8dc13348b25b8c0d4a613_51.png)'
- en: equation。 If we go deeper into the mandibot set we will see the mandibot set
    is extending outwards。 and is creating this bifurcation diagram this logistic
    map or the bifurcation diagram is。 basically a part of the mandibot set and this
    diagram only exists on the real line because。 we put only real numbers into our
    equation this method was the first method to generate。
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 方程。如果我们深入研究曼德博集合，我们会看到曼德博集合向外延伸，并且正在创建这个分叉图，逻辑图或分叉图基本上是曼德博集合的一部分，而这个图仅存在于实数线上，因为我们仅将实数代入我们的方程，这种方法是生成的第一个方法。
- en: random numbers or computers and give rise to a very famous topic called chaotic
    behavior。
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 随机数或计算机，引发了一个非常著名的话题，称为混沌行为。
- en: '![](img/52a2487830e8dc13348b25b8c0d4a613_53.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52a2487830e8dc13348b25b8c0d4a613_53.png)'
- en: and to understand this chaotic behavior is pretty simple the chaos theory means
    like a。 simple change a very small change in the initial state will result in
    very large reference in。 the final outcome see on the right hand side we are creating
    a fractal on the bottom left。 we initially created this fractal with some simple
    parameters and changing the initial。
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 理解这种混沌行为相当简单，混沌理论意味着初始状态的一个简单变化，甚至非常小的变化，都会导致最终结果的大幅变化。在右侧，我们正在创建一个分形，在左下角，我们最初使用一些简单参数创建了这个分形，并改变了初始。
- en: parameters has given the outputs which are totally different in shapes and sizes
    when you。
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 参数产生的输出在形状和大小上完全不同，当你。
- en: '![](img/52a2487830e8dc13348b25b8c0d4a613_55.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52a2487830e8dc13348b25b8c0d4a613_55.png)'
- en: are talking about chaos theory attractors are the perfect example these attractors
    are。 basically mathematical function that tend to evolve over time and are represented
    by。 coordinates in space each coordinate dependent upon the previous coordinate
    the change between。 the two coordinates are based upon mathematical equations
    per dimension on the left hand sides。
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们谈论混沌理论，吸引子是完美的例子，这些吸引子基本上是数学函数，随着时间的推移而演变，并由空间中的坐标表示，每个坐标依赖于前一个坐标，两个坐标之间的变化基于每个维度左侧的数学方程。
- en: we have a long and attractive in the right hand side we have a d-young attractor
    again。 a small change in the initial state will bring a large change in the final
    outcome so if we。 change the abcd parameters in the initial state of the d-young
    attractor the outward will。 be really different from what we see here let's see
    how we can simulate paint and how we can。
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在右侧，我们有一个长而迷人的d-young吸引子，再次，初始状态的小变化会带来最终结果的大变化，因此如果我们改变d-young吸引子的初始状态中的abcd参数，结果将与我们在这里看到的截然不同，让我们看看如何模拟绘画，以及如何。
- en: '![](img/52a2487830e8dc13348b25b8c0d4a613_57.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52a2487830e8dc13348b25b8c0d4a613_57.png)'
- en: add some oil paint or the water paint effect on our canvas so to add such effects
    I've。
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的画布上添加一些油漆或水彩效果，因此我添加了这样的效果。
- en: '![](img/52a2487830e8dc13348b25b8c0d4a613_59.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52a2487830e8dc13348b25b8c0d4a613_59.png)'
- en: created three different paintings and to do this I got the inspiration from
    an artist。 named Tyler Hock he has a blog post where he has explained in detail
    how we can use a。 deformation technique to add such effects I've given the link
    on the below and to give。 you an overview of basically created shapes first like
    a polygon then started extingated。
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了三幅不同的画作，为此我得到了来自一位名叫泰勒·霍克的艺术家的灵感，他在一篇博客中详细解释了我们如何使用变形技术来添加这样的效果，我在下面给出了链接，并基本上先创建了像多边形这样的形状，然后开始扩展。
- en: edges outwards to do this irclusively by passing it to a deformation function
    and eventually。 we get a very fine detail on the outer part which can be seen
    on the third image you can。 also add blur effects work with the pixels add overlay
    effects maybe use pixel sorting。 that I'm using on the first image and you will
    get something similar let's talk how pixel。
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 向外扩展，要做到这一点可以通过传递到变形函数，最终我们会在外部得到非常细致的细节，这可以在第三张图像中看到，你还可以添加模糊效果，处理像素，添加叠加效果，也许使用我在第一张图像中使用的像素排序，你会得到类似的东西，让我们谈谈像素。
- en: '![](img/52a2487830e8dc13348b25b8c0d4a613_61.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52a2487830e8dc13348b25b8c0d4a613_61.png)'
- en: sorting works so pixel sorting is a famous process of isolating a horizontal
    or the vertical。 pixel in any image and sorting the position based on any number
    of criteria so we take。 an image we take its pixel we load the pixels within the
    original pixel position with the。 excessive function that we create then we pick
    the next pixel position change the number。
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: of signs and you will see a change in the direction then we compare it and swap
    the pixels according。 to the brightness so eventually by sorting the pixels we
    get something similar to these。 and these are created using in the artworks are
    created in the past and these are another。
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/52a2487830e8dc13348b25b8c0d4a613_63.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
- en: set of examples just using pixel sorting so now we can talk about genetic algorithms。
    which is a part of evolutionary algorithms so all the specs of a life are driven
    by computation。 and algorithms how we learn play work etc given the situation
    we can see the generative。 art best reflects our time to reflect this artists
    have been using a technique cause genetic。
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: algorithm to replicate images this is basically an optimization technique that
    mimics the。 Darwinian law of natural selection and the survival of the fittest
    so depending on what。 type of problem we are working with we can we have to tailor
    the algorithm accordingly。 here it's a given example we are initially uh sitting
    a population with randomly。
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: random ellipsis with random colors and over generation and generation it's learning
    to。 replicate the original image those are steps includes are they making the
    initial population。 then finding the fitness function or by assigning a fitness
    value for selection doing a crossover。 between the parents and mutating the genes
    even unless we just iteratively do this process unless。
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: we get the optimized solution here we are finding the optimized pixel value
    so to know genetic。
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/52a2487830e8dc13348b25b8c0d4a613_65.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
- en: algorithms in depth we basically start with the initial population so that we
    can have an initial。 generation and then we can generate a further generations
    after that we have a termination condition。 with checks if the individual is the
    best optimal solution or not if it is not the best optimal。 solution for then
    we proceed it to the mating process as there's a large initial population。
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: we can't select all the individuals so we assign them with a fitness value such
    that the individuals。 below a specific level would be rejected here we are working
    with the images so we have to calculate。 the fitness we have different each pixel
    color is its pixel value is basically we can use。 tournament selection method
    for this once we have outfit parents we do a crossover and once we have。
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: a new generation we can also check for some mutation by altering the genes of
    the newly created off。 springs this way we get the best optimal solution over
    some Xn number of generations and in our case。 the initial set of shapes say polygon
    can replicate the original image here is an example that I've。
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过改变新创建的后代的基因来检查一些突变，这样我们可以在某些Xn代中获得最佳的最优解。在我们的案例中，初始形状集，比如多边形，可以复制原始图像，这里有一个我创建的示例。
- en: '![](img/52a2487830e8dc13348b25b8c0d4a613_67.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52a2487830e8dc13348b25b8c0d4a613_67.png)'
- en: created using pi game processing and python which is replicating the image on
    the left hand side。 and it's using genetic algorithms and the program was done
    for 500 generations and if you have done。 the program for more than that you will
    get a more concise and proper image which looks exactly like。
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是使用pi游戏处理和python创建的，它们在左侧复制了图像。程序使用了遗传算法，运行了500代，如果你将程序运行更长时间，你将获得一个更加简洁且准确的图像，看起来就像。
- en: '![](img/52a2487830e8dc13348b25b8c0d4a613_69.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52a2487830e8dc13348b25b8c0d4a613_69.png)'
- en: the left one so these days artists are also using GANS which is generative adversarial
    networks。 to create new forms of art to mix different arts and create new one
    artists like Anna Riddle。 Helena Serene， Robbie Bellert whose art piece can be
    seen on the slide which is called AI fashion。 and they're using GANS to create
    new art forms these days it uses two neural networks which are。
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这些天，艺术家们也在使用GANs，即生成对抗网络，创造新的艺术形式，混合不同的艺术并创造新的艺术作品，像Anna Riddle、Helena Serene和Robbie
    Bellert这样的艺术家的作品可以在幻灯片上看到，称为AI时尚。他们正在使用GANs创造新的艺术形式，使用了两个神经网络。
- en: designed to think like a human being the first being generator generator that
    generate pictures。 of abstract paintings it looks at a large number of datasets
    of training data and tries to produce。 something that resembles a data but taking
    into account that the discriminator cannot tell it。 if it was produced by another
    network and second is the discriminator and discriminator is something。
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 设计成像人类一样思考的第一个生成器生成器，它生成抽象画的图像。它查看大量的训练数据集，尝试生成某些类似于数据的东西，但考虑到判别器无法判断它是否是由另一个网络生成的。第二个是判别器，判别器是不能分辨真实与虚假的抽象画。
- en: that cannot tell the difference between the real and the fake abstract paintings。
    of very simple and very concise example can be we take two pieces of art say one
    is a painting of。 horse and the second is the painting of zebra and we try to
    swap the faces and of each。 of the animal in the painting and create a new piece
    with a swab faces。
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非常简单明了的例子是，我们取两幅艺术作品，一幅是马的画，另一幅是斑马的画，我们尝试交换这两幅画中动物的面孔，创造一幅面孔互换的新作品。
- en: '![](img/52a2487830e8dc13348b25b8c0d4a613_71.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52a2487830e8dc13348b25b8c0d4a613_71.png)'
- en: and yeah this is it thank you so much for watching the talk yeah。
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，就是这样，非常感谢你观看这次演讲。
- en: '![](img/52a2487830e8dc13348b25b8c0d4a613_73.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52a2487830e8dc13348b25b8c0d4a613_73.png)'
- en: you， [ Silence ]。
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 你，[沉默]。
- en: '![](img/52a2487830e8dc13348b25b8c0d4a613_75.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52a2487830e8dc13348b25b8c0d4a613_75.png)'
