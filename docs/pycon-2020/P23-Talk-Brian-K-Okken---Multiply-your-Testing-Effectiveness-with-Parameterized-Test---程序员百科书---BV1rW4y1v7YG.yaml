- en: P23：Talk Brian K Okken - Multiply your Testing Effectiveness with Parameterized
    Test - 程序员百科书 - BV1rW4y1v7YG
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](img/62a4a398174f137d23e45a990ef2b4e5_0.png)'
  prefs: []
  type: TYPE_IMG
- en: 谢谢你把这个视频的播放，至少开始听我谈论参数化，我希望我能留住你 直到最后，我觉得呃，参数化测试是圆周率检验的超能力之一，我觉得这真的能帮你节省很多时间，但首先谁是，我是布莱恩·阿金。我写了一本书叫《用pytest测试蟒蛇》，因为
    pytest是一个非常强大的测试框架，我希望其他人能马上开始使用它，我还主持了几个播客，我主持测试代码，这是因为软件工程师没有谈论足够的测试。我不认为蟒蛇字节，我也呃，和我的一个朋友一起主持，迈克尔肯尼迪，我们有时也会在最后讲一些糟糕的笑话，有时它们是很好的笑话，所以请听那些在白天，我是罗登·施瓦茨一个温文尔雅的领队，一般都尽量避免见面。尽我所能，自动化测试很有价值，因为通过测试套件会让你对你正在构建的东西有信心，让你对你的工作有自豪感，让你玩代码，我喜欢玩代码，这样你就可以少担心地更改代码
    并帮助建立团队，信任。
  prefs: []
  type: TYPE_NORMAL
- en: 我想这是一个额外的奖励，如果您的测试可以快速编写和易于维护，这就是我们今天要关注的部分，我们将介绍如何以三种不同的方式对代码进行参数化，使用固定的参数化函数，参数化和一个叫做圆周率测试的东西，生成测试。它是一个钩子函数，我将向您展示如何运行所有这些
    以及如何运行参数化的子集，这是你能做的有趣的事情之一，最后我想向你们介绍两个概念 叫做 pytest，记录和间接，不是因为你马上就需要。但因为我想让你知道他们在那里，这样你就可以伸手去拿他们，当你需要他们的时候，好吧，在我们深入讨论之前，我们得澄清一些事情，参数化
    t和 r之间没有 e，两种拼法都有效，英文，他们是允许的。一种在英国更常见，另一种在美国圆周率测试中更常见，只允许其中一种拼写，是英国版的，所以 t和 r之间没有
    e，我提交了一张机票，两者，罚单被拒收，我已经克服了，我们要写一些测试，我要测试的东西。
  prefs: []
  type: TYPE_NORMAL
- en: 这是一个叫做三角形类型的小函数吗，给它三个角 度，如果其中一个角度是，知道了，九十度，是个直角三角形，如果至少有一个角度大于90，很迟钝，嗯，其实，他们中只有一个可以，如果所有的角度都低于90度，好吧。然后是一个锐角，如果你还记得，所有这些，如果锐利而迟钝的三角形，你，岩石，我得查一下，代码中至少还有一个错误，我故意在代码里放了那个漏洞，所以我们可以看到一些测试失败，我也想向肯特·贝克大喊。我从
    td得到了测试三角形的想法，测试驱动开发，以身作则，我想他用了一个三角形的例子，所以这就是我得到的，但他用他的侧面 而我用角度，你真的不需要这个来跟踪剩下的对话，但对于那些在家里跟随的人来说。我做了一些准备工作，例如，我想破折号为博斯，所以我可以看到测试名称，我想加上tb=no，关闭追踪，因为在这个演示中追溯对我们没有什么帮助，我把它们放在圆周率测试里，这样我就不用一直打字了，你也不会。
  prefs: []
  type: TYPE_NORMAL
- en: 如果你想跟着一起跳回来，这是我们的职责，呃，如果我想测试它们，所以有四种结果可能会导致急性和无效，所以我至少需要四个测试案例，所以这是最小的，通常我们会有比这更多的，我觉得我们以后应该，尽管如此。我认为这是合理的
    第一套测试案例，这是什么东西，这是一个办法，你可以把这些都写下来，这些都是简单的测试 只是一条线，每个嗯，没什么大不了的，有什么大不了的，嗯在，这里有冗余，但很难看到冗余。因为这些测试太小了，但是随着测试越来越复杂，冗余变得更加痛苦，但即使有这些简单的测试案例，我们可以做得更好，所以如果我想把所有这些结合到一个测试中呢，所以如果我想做一件我能做的事。我可以把所有的测试用例放在列表中，然后遍历列表并测试每种类型的测试用例，这个管用，为什么不呢，请不要这样做，嗯，现在很容易延伸，当一切都过去了，一切似乎都很好，但也有问题，实际上这里有四个测试案例。
  prefs: []
  type: TYPE_NORMAL
- en: 但我只是圆周率测试，只是告诉你 我有一个测试，其中一个测试用例失败了，但它失败了 整件事，我不知道什么失败了，在没有回头看痕迹的情况下，所以我藏了起来，如果我把追踪器留在上面，我们可以看到它。我不知道哪一个失败了，真可惜，我们如何才能做得更好，参数化，当然我喜欢参数化，我想这值得一顶帽子，这是函数参数化的基本语法，嗯，让我们运行它，看看当我们运行它时它是什么样子，它会列出所有。列出的测试名称，数量而不是点，因为我们，因为我们加入了破折号，那部分就像，你知道吗，从下面的测试，我指着屏幕，你看不出来，嗯，从测试下划线一直到括号，这是一个测试节点，我们把它们称为节点
    id。你通常不需要在意这些，但是圆周率测试文件提到了这一点，有时候，我要稍微改变一下 这个让其他的例子更容易处理，我会把所有的测试用例移到指定的列表中，这只是一个小清洁。
  prefs: []
  type: TYPE_NORMAL
- en: 我的 pytest标记参数化装饰器现在可以全部在一条线上了，嗯，可能有两行，如果我有很多参数，但是嗯，但这很好，让它更干净，所以我们会回来，所以这是第一个，全都在装潢室里，现在他们在这个额外的名单上。但是，不一定是名单，它甚至可能是一个功能，这很有趣，好好玩，我们需要一顶新帽子，而不是一个固定的名单，我们可以返回一个函数，函数可以返回一个列表，为什么这很酷，太酷了，因为在测试时你可以生成，不是很好。还没到考试时间，在，在测试收集时间，当这个函数被调用的时候，你可以的，因为它是一个函数，您可以修改列表，筛选列表，你可以做很多事情，好的，所以它可以是一个列表，我们可以从一个函数返回一个列表。这个函数也可以是一个生成器，这个小三角形的函数现在是一个生成器，因为它有一个产量
    在它的权利，所以它每次返回一个，记住，在收集的时候会把发电机抽干，不在运行时，好的，这里有一个类似于生成器的例子。
  prefs: []
  type: TYPE_NORMAL
- en: 但不是呃，而不是返回列表的一部分，我们甚至可以读它，从档案里读点东西，很好，为什么这口井井井有条，也许您的过程的一部分是从其他测试用例中生成测试用例，一些其他的过程。并且能够在测试收集时抽出东西来生成我们的参数化测试用例，它真的很强大，我在用一份简历，但你真的可以用任何你想要的东西，在这种情况下，这是一个非常强大的技术，虽然，例如，我们使用文件生成器的原因之一是。我们每次读取一行文件，当我们在努力的时候，它发生在测试收集时，所以它会在我们的测试开始前阅读整个过程，只要记住这一点，好的，所以回到列表，我我回去了，从功能中取出，我可以用函数完成剩下的例子，还有。但我们又回到了名单上，只是为了好玩，所以我们这里有一个失败，所以我们看到了，因为这是最后一个无效的案子，它失败了什么，如果我只是想运行，我们可以用破折号，所以如果意味着最后的失败，它只是运行最后一个。
  prefs: []
  type: TYPE_NORMAL
- en: 以前失败的测试，如果我有不止一个，它会运行不止一个，但现在我只有一个，因为我关掉了追踪器，这实际上是一个我经常使用的模式，我大部分时间都关掉追踪器，否则我就长话短说，当我失败的时候。我可以打开追踪系统重新运行，带着痕迹的失败，我也经常把它和破折号结合起来，所以我只使用，它停在第一个，所以一个拐弯抹角的痕迹，过客过客，最后的第一次最后一次失败的测试，很方便的，嗯。这不仅仅是最后一个测试，只是这样而已，失败的测试用例，这就是我真正想指出的，我可以用破折号找出测试案例，嗯
    60度，只为了挑60个，但它可能是任何东西，我也可以用这个挑出直角三角形。我甚至可以使用整个节点 id full节点与参数化，只是为了重新运行一个参数化，这个超级方便，pie魅力和
    vs代码都支持运行单个个体，很好的夹具参数化，这是呃，现在的另一个技巧是。
  prefs: []
  type: TYPE_NORMAL
- en: 我在上面显示了测试参数化，并将您的参数化固定在底部，这样你就可以看到不同风格的参数化，基本语法很简单，为了固定你的参数化，参数被传递给夹具装饰器，所以这个要求是一个固定装置，算是吧。这是一种神奇的固定装置
    我们用在其他固定装置上，但是对于每个测试用例，fixture将被多次调用，呃，所以请求程序会有这个值，这是传统的。建议您的参数fixtures在测试fixtures中返回请求paraso，唯一的变化就是，但是我们取三角形的参数，会有整个元组在里面，所以我们得把它拆开，所以我们换了零钱，测试，所以我们有测试恐惧。现在，这是测试修复，这个参数化，当我们运行它的时候，嗯，不好看，所以我们有三个，我有，三角形零，三角形的，三角形变成三角形
    三，这真的不能告诉他们 告诉我们很多，是啊，问题是蟒蛇甚至不会想出好名字。
  prefs: []
  type: TYPE_NORMAL
- en: 它只是增加了这个计数器的东西，所以让我们解决这个问题，所以我们用身份证把它修好，我们可以有一个身份证名单，所以我可以我可以知道我的参数是什么，我可以给你一张单子，所以我就进来了，钝性急性无效。但我更喜欢用其他方法，一个
    s函数很有趣，如果我不是一个列表，我传递了一个函数，每个测试用例都会调用该函数，所以我需要能够接受，所以要传递一个元组，我要把它变成绳子，好吧。我们已经在蟒蛇身上内置了很多功能，把东西变成绳子，我们也可以做一个定制的羔羊
    像这样，在这种情况下，我表明，如果我用，搅拌功能，它只需要把元组变成一个字符串，然后通过它，这样就可以工作了，嗯。如果我想要的只是正确的迟钝 可爱的废人回来，我可以用羊排把第三个位置元素拉出来，在零一二三，我也可以，如果我想喜欢，好好想想吧，或者做些特别的事，我可以做一个自定义的
    id函数，这是一回事。
  prefs: []
  type: TYPE_NORMAL
- en: 它通过一个三角形，把它变成一根绳子，通常情况下 如果我有很多参数，其中一些参数很有代表性，但他们不区分测试用例，它们不是为了身份而必需的，所以我试着把身份限制在很小的范围内，小到足以识别一个测试用例。没有更多的好吧，最后一个应得最后一顶帽子，这是一个整洁的小功能，所以
    pi测试生成测试是一个钩子函数，什么是钩子函数，PI检验，如果你在你的测试代码中 或者在你的竞赛中，圆周率测试就叫它。它在正确的时间调用它，它产生了它产生了，呃，参数化是你可以用它做的事情之一，有点奇怪，嗯，如果我们想使用来自隐喻的信息，这一点尤其有用，元放克的一个特点是，当然是赛程名称，但里面还有别的东西。所以如果我们把它，我建议在圆周率测试文档中查找所有你可以从
    Metafunk中获得的东西，因为它很方便，但有一件事你可以拿出来，是嗯是命令行信息。
  prefs: []
  type: TYPE_NORMAL
- en: 所以我可以创建一个新的命令行标志来帮助控制我所做的测试类型，在生成测试中，我可以使用类似于标志的命令来修改哪些参数，所以我的意思是，一个例子是我可以有一个标志，比如密集测试和烟雾测试或灯光测试之类的。而不是用所有其他的，您还可以使用其他机制来选择测试，我可以做大量的参数化和小的参数化，这只是改变如何使用生成测试的一种用途，这是对它的一种巧妙的使用，现在我要稍微转换一下话题。谈谈一些你可能不需要马上听到的事情，或者马上使用，但它们很方便，Pytest婴儿车和间接，现在是
    Pytest ram，它真的做了一件事，然后它是一样的，但我可以添加额外的东西。特别是我可以添加标记和标识符，在我展示的这个例子中，我每人只用一个，但是你可以在同一个测试用例上同时使用标记和90，如果你想，嗯，所以在这种情况下
    我把几个测试案例标记为冒烟，所以当我以后运行它们时。
  prefs: []
  type: TYPE_NORMAL
- en: 我可以说 dash m冒烟 然后运行那些特定的测试用例，那很方便，嗯和啊，或者如果嗯，这是如果我想做一个自定义标识符，我你知道，我经常做一个自定义标识符的东西，尤其是在错误的情况下，无效案件。所以它可以帮助识别，真的，为什么有测试，这是个很好的理由，所以这是一个方便的测试烫发，接下来的事情是间接的，间接肯定是一个奇怪的特征，也，但这也很酷，它是做什么的，可以将"间接"设置为参数名称列表。您列出的这些参数的值将在进行测试之前
    通过一个同名的 fixture传递，这就是间接的用武之地，一次又一次地回到测试中，这一个做得不多，但打印了一些额外的东西。但是如果你碰巧有一些额外的工作 你必须在某些参数上做，嗯，这是一种方法，做它是间接的，如果你设置了，您还可以将间接设置为
    true，如此真实，意味着所有的参数都得到了间接的处理，嗯，否则。
  prefs: []
  type: TYPE_NORMAL
- en: 默认情况下可以传入列表，是假的，很奇怪，名单中的真假，那是三个州，随便啦，但它起作用了，这是一个方便的东西，当你需要的时候，作为一个例子，当我从 csv文件中提取数据时，我得从电脑密码里找到它。把东西变成弦，我需要它的整数形式，在最初的情况下，我只是在把它们从CSVS中拉出来的时候做的，我是在收益表中做的，我们本可以在，像这样用间接的方式，我本可以说间接的，并通过比赛来调整他们。这是一个用例的例子，这不是一个很好的例子，因为这会让测试变得更糟，测试代码更糟，我认为它增加了更多的代码，但你知道它就在那里，美丽的，参数化就是当您想要扩展您的测试用例时，只是另一行代码。我们从四个测试案例开始，这里有十一个，而且和以前一样容易阅读，我可以添加评论
    并把它们组合在一起，很不错，这就是为什么参数化这么好的原因之一，所以呃，带参数化，我们有，呃，更容易拥有更完整的测试用例集。
  prefs: []
  type: TYPE_NORMAL
- en: 在不增加额外费用的情况下，额外工作太多，在不增加维护费用的情况下，如果你想不出什么测试案例，你应该，我谈论它，第三集的几个技巧，八三九份验证码，审查的权利，以下是列出的三种类型。这样你就可以看到语法
    看到它们的不同之处和相似之处，同时也看到没有太多的语法，这些真的没那么难对付，也提醒你 你可以结合技术，你可以做多个标记，pytest标记参数化 你，两个参数，多个。您可以混合固定参数化和测试参数化，你也可以，混合圆周率试验，生成测试，如果你想，你可以使用多种技术组合，但是，您应该注意到，当您将许多参数混合在一起时，它成倍增长，你可以很快得到一大堆测试用例。所以如果这就是你想要的，如果你想保留它们，这是一种技术，相当小的测试用例集，这可能不适合你，如果你想了解更多关于圆周率测试的知识，有本叫圆周率测试的书。
  prefs: []
  type: TYPE_NORMAL
- en: Python testing with pi testing that，我强烈推荐，有一个就在那里，我还列出了其他伟大的资源，嗯，我没有链接，这些都是可链接的，所以如果你，如果你去，呃滑梯甲板，嗯。还有一些播客，我觉得你可能会喜欢，你继续问我问题，太，我也可以参加公司培训，我去年才开始。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/62a4a398174f137d23e45a990ef2b4e5_2.png)'
  prefs: []
  type: TYPE_IMG
