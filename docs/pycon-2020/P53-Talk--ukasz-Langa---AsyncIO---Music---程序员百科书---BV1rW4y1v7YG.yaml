- en: P53：Talk Łukasz Langa - AsyncIO + Music - 程序员百科书 - BV1rW4y1v7YG
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P53：Talk Łukasz Langa - AsyncIO + Music - 程序员百科书 - BV1rW4y1v7YG
- en: '![](img/8694070045052bfc4f228cfd82a70248_0.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8694070045052bfc4f228cfd82a70248_0.png)'
- en: '![](img/8694070045052bfc4f228cfd82a70248_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8694070045052bfc4f228cfd82a70248_1.png)'
- en: '![](img/8694070045052bfc4f228cfd82a70248_2.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8694070045052bfc4f228cfd82a70248_2.png)'
- en: 嗨，我叫乌克希兰加，你刚才听到的是两个硬件合成器由async i o i播放，我只是在摆弄一些旋钮，为了让这个更有趣一点，我来自波兰波宁岛，中欧友好城市，等这一切都结束了
    再来看我，呃。它的位置离柏林很近，也是华沙，就像连接很好，与此同时，请随时在网上联系我，谈蟒蛇音乐制作，角色，打游戏或肌肉车，这张照片是从后面拍的，当我们还有她的造型师，疯狂时代，今天的疯狂时代。尽管我们会发现异步
    i o是如何被用来处理 midi的，驱动硬件合成器，为了让事情变得更有趣，我们要现场直播，或者我们应该现场直播，所以为了让事情变得有趣，我们要从头开始，所以我们要讨论合成器。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 嗨，我叫乌克希兰加，你刚才听到的是两个硬件合成器由async i o i播放，我只是在摆弄一些旋钮，为了让这个更有趣一点，我来自波兰波宁岛，中欧友好城市，等这一切都结束了再来看我，呃。它的位置离柏林很近，也是华沙，就像连接很好，与此同时，请随时在网上联系我，谈蟒蛇音乐制作，角色，打游戏或肌肉车，这张照片是从后面拍的，当我们还有她的造型师，疯狂时代，今天的疯狂时代。尽管我们会发现异步
    i o是如何被用来处理 midi的，驱动硬件合成器，为了让事情变得更有趣，我们要现场直播，或者我们应该现场直播，所以为了让事情变得有趣，我们要从头开始，所以我们要讨论合成器。
- en: '![](img/8694070045052bfc4f228cfd82a70248_4.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8694070045052bfc4f228cfd82a70248_4.png)'
- en: 有很多种，这个是模块化合成器，每一个模块都有一个非常具体的角色，将所有模块连接在一起就创造了独特的工具，很可能没有，嗯，模块合成器完全一样，你可以在底部看到的两个模块是由穆格制作的，呃。顶部的一些模块要么是我买的，要么是我组装的，尤其是装饰和犯罪，所以对于程序员来说
    这是一个非常有趣的爱好，因为你的水平很低，非常首尾相接，对音乐声音的影响，在我们讨论这种先进的东西之前，虽然。让我们关注一种不同的乐器，我们今天要用到的是一个创新电路，是个梳妆台，这意味着它是一个完整的小音乐工作室，全靠自己，呃，你可以创作完整的音乐
    两首曲子，只是用这个特殊的硬件，嗯，但这是生产，很好。真正的音乐家做这个，用它，呃，现场表演，事实上，约克硬件正在被斧头双胞胎使用，所以这是合法的，但同时它也是一种非常有趣的乐器，你可以做的是
    你可以把它带到任何你喜欢的地方，它实际上是靠电池运行的。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多种，这个是模块化合成器，每一个模块都有一个非常具体的角色，将所有模块连接在一起就创造了独特的工具，很可能没有，嗯，模块合成器完全一样，你可以在底部看到的两个模块是由穆格制作的，呃。顶部的一些模块要么是我买的，要么是我组装的，尤其是装饰和犯罪，所以对于程序员来说这是一个非常有趣的爱好，因为你的水平很低，非常首尾相接，对音乐声音的影响，在我们讨论这种先进的东西之前，虽然。让我们关注一种不同的乐器，我们今天要用到的是一个创新电路，是个梳妆台，这意味着它是一个完整的小音乐工作室，全靠自己，呃，你可以创作完整的音乐两首曲子，只是用这个特殊的硬件，嗯，但这是生产，很好。真正的音乐家做这个，用它，呃，现场表演，事实上，约克硬件正在被斧头双胞胎使用，所以这是合法的，但同时它也是一种非常有趣的乐器，你可以做的是你可以把它带到任何你喜欢的地方，它实际上是靠电池运行的。
- en: 还有自己的小扬声器，所以你真的不需要任何东西，除了一个电路来制作今天的音乐，我们要用这个，呃，作为鼓机的 Groovbox，但在我们的演示中 只有鼓声会有点无聊，所以我们还要用，嗯，更新电路，单声道站。这是一个单声道模拟合成器，意思是它演奏贝斯，低频声音，呃，它是单声道的，意思是，它一次播放一个声音，它是模拟的意思。实际上有一个电子振荡器可以产生声音
    通过一些我们可以用旋钮控制的路径 最终到达你的扬声器，所以有一个模拟电子合成器使它不完美，它很容易受到温度和湿度变化的影响。在像这样的合成器中的不同电路之间
    总是会有一些电磁辐射，所以它是不完美的，但这其实是件好事，很多时候人们喜欢模拟合成器，特别是它们的温暖和丰富的声音，这是用这个创造的，你知道你所处环境的内在随机性。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 还有自己的小扬声器，所以你真的不需要任何东西，除了一个电路来制作今天的音乐，我们要用这个，呃，作为鼓机的 Groovbox，但在我们的演示中只有鼓声会有点无聊，所以我们还要用，嗯，更新电路，单声道站。这是一个单声道模拟合成器，意思是它演奏贝斯，低频声音，呃，它是单声道的，意思是，它一次播放一个声音，它是模拟的意思。实际上有一个电子振荡器可以产生声音通过一些我们可以用旋钮控制的路径最终到达你的扬声器，所以有一个模拟电子合成器使它不完美，它很容易受到温度和湿度变化的影响。在像这样的合成器中的不同电路之间总是会有一些电磁辐射，所以它是不完美的，但这其实是件好事，很多时候人们喜欢模拟合成器，特别是它们的温暖和丰富的声音，这是用这个创造的，你知道你所处环境的内在随机性。
- en: 所以我们也要用这些，他们已经为我们提供了大量的音乐机会，会有一个鼓机和一个合成器，鼓和贝斯，即使我们不会对那种特定的音乐类型特别感兴趣，所以我准备在现场向你展示这一切，但事实证明这是不可能的。我现在需要录制视频，这就是我现在看到的，所以制作视频的整个设置与仅仅做演讲是完全不同的，我惊讶地发现，要有效地做到这一点实际上需要做更多的工作，你对自己的交付也有更高的期望，我在演讲中计划的一件事。但我决定不做过头的
    是做一个关于异步的小介绍，我喜欢在做这些的时候，然而，事实证明，这将是匆忙通过事情，我不会很满意的，你也不会，如果您是新的异步，我知道你会觉得，进展得太快了，我解释不了什么。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们也要用这些，他们已经为我们提供了大量的音乐机会，会有一个鼓机和一个合成器，鼓和贝斯，即使我们不会对那种特定的音乐类型特别感兴趣，所以我准备在现场向你展示这一切，但事实证明这是不可能的。我现在需要录制视频，这就是我现在看到的，所以制作视频的整个设置与仅仅做演讲是完全不同的，我惊讶地发现，要有效地做到这一点实际上需要做更多的工作，你对自己的交付也有更高的期望，我在演讲中计划的一件事。但我决定不做过头的是做一个关于异步的小介绍，我喜欢在做这些的时候，然而，事实证明，这将是匆忙通过事情，我不会很满意的，你也不会，如果您是新的异步，我知道你会觉得，进展得太快了，我解释不了什么。
- en: '![](img/8694070045052bfc4f228cfd82a70248_6.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8694070045052bfc4f228cfd82a70248_6.png)'
- en: 所以取而代之的是，我建议你做的是，你可以直接联系 hdps，我们制作了一系列介绍异步的视频，以我们的方式，这是为那些对异步和异步编程都是新手的人准备的，所以它需要时间，有多集经历了各种各样的部分。它所支持的框架和编程风格，所以订阅，你已经可以在那里看一些视频了，我高度鼓励你
    现在就这么做，如果你没看过异步，你只要暂停这个视频，对，就像你知道的，这样做的好处之一就是，同时。如果你已经用了 asnko，呃，让我简单回顾一下。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 所以取而代之的是，我建议你做的是，你可以直接联系 hdps，我们制作了一系列介绍异步的视频，以我们的方式，这是为那些对异步和异步编程都是新手的人准备的，所以它需要时间，有多集经历了各种各样的部分。它所支持的框架和编程风格，所以订阅，你已经可以在那里看一些视频了，我高度鼓励你现在就这么做，如果你没看过异步，你只要暂停这个视频，对，就像你知道的，这样做的好处之一就是，同时。如果你已经用了
    asnko，呃，让我简单回顾一下。
- en: '![](img/8694070045052bfc4f228cfd82a70248_8.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8694070045052bfc4f228cfd82a70248_8.png)'
- en: 所以我们用的是阿超的核心程序，它的行为很像常规函数，你可以从上到下读取它们 它们执行一个非常特殊的指令 我们看到的是等待指令，这意味着我们在等待外部的东西，在这段时间里
    蟒蛇可以利用这段时间做其他事情。你要知道现在我们还在等待 所以例行公事，在所谓的合作多任务中一起工作，多亏了这个，感谢这张特殊的幻灯片，你看呃，我们可以等你睡个好觉，然而，主要的核心程序仍然说，哦等等，倒回去一个，哦等等，倒回去二。哦，它，倒回去三，所以它会从上到下执行，一声令下，但是用异步，伊奥，我们有超能力，我们可以让这些事情同时发生
    来做到这一点，你用收集函数告诉一个女孩。请现在就开始执行这三个核心程序 尽快收集结果 然后呈现给我，一旦你有了它们，这就是我们今天要用到的异步的范围，现在我们还需要一点音乐理论，不多，只够过日子，所以音乐是关于音高和节奏的。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们用的是阿超的核心程序，它的行为很像常规函数，你可以从上到下读取它们它们执行一个非常特殊的指令我们看到的是等待指令，这意味着我们在等待外部的东西，在这段时间里蟒蛇可以利用这段时间做其他事情。你要知道现在我们还在等待所以例行公事，在所谓的合作多任务中一起工作，多亏了这个，感谢这张特殊的幻灯片，你看呃，我们可以等你睡个好觉，然而，主要的核心程序仍然说，哦等等，倒回去一个，哦等等，倒回去二。哦，它，倒回去三，所以它会从上到下执行，一声令下，但是用异步，伊奥，我们有超能力，我们可以让这些事情同时发生来做到这一点，你用收集函数告诉一个女孩。请现在就开始执行这三个核心程序尽快收集结果然后呈现给我，一旦你有了它们，这就是我们今天要用到的异步的范围，现在我们还需要一点音乐理论，不多，只够过日子，所以音乐是关于音高和节奏的。
- en: 音高意味着你知道我们听到的声音有多高，像声音或合成器听起来不错，所以典型的，嗯，女性的声音会更高，它们的声音会更高，对，呃，典型的男性声音或合成器的音调会更低，他们会听起来更低，嗯。在这张特殊的幻灯片中，乐谱记谱法相当于，别担心乐谱记谱法，我们不会用它，我只是想告诉你，这只是一个字母表，用来描述你指的是什么特定的音符，所以如果我真的演奏
    你可以在这里看到的音符，C D D，E，F。G，在合成器上听起来像这样的声音，我带来了，你可以看到这并不完全是一个三角钢琴键盘，但这一切看起来有些相似之处，对，就像那一排是白色的钥匙，这个形状让我们想起了三角钢琴键盘上的黑键。所以我们唯一需要补充的是这里的每个福特笔记，在乐谱上记谱，你可以看到一个竖条，百合表示一个音乐条的结尾，整个音符都被演奏了，我们每个音符的形状，嗯，你知道吗，我们在这段音乐中使用的时间，嗯。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 音高意味着你知道我们听到的声音有多高，像声音或合成器听起来不错，所以典型的，嗯，女性的声音会更高，它们的声音会更高，对，呃，典型的男性声音或合成器的音调会更低，他们会听起来更低，嗯。在这张特殊的幻灯片中，乐谱记谱法相当于，别担心乐谱记谱法，我们不会用它，我只是想告诉你，这只是一个字母表，用来描述你指的是什么特定的音符，所以如果我真的演奏你可以在这里看到的音符，C
    D D，E，F。G，在合成器上听起来像这样的声音，我带来了，你可以看到这并不完全是一个三角钢琴键盘，但这一切看起来有些相似之处，对，就像那一排是白色的钥匙，这个形状让我们想起了三角钢琴键盘上的黑键。所以我们唯一需要补充的是这里的每个福特笔记，在乐谱上记谱，你可以看到一个竖条，百合表示一个音乐条的结尾，整个音符都被演奏了，我们每个音符的形状，嗯，你知道吗，我们在这段音乐中使用的时间，嗯。
- en: 所以这很有用，但是八到十六岁，哪个跑得更快，你可以在同一个酒吧里容纳更多的人，什么的，从本质上讲，这就是音乐理论，现在最有趣的部分是这一切是如何与我联系在一起的。米迪是我所知道的历史上为数不多的例子之一，有一个协议是由一群音乐硬件供应商在80年代早期发明的，这个标准实际上非常好，在整个行业都得到了很好的支持，所以今天你可以买到不同种类的音乐硬件。如果它们在某种程度上是电子支持的，它们几乎都是，当然，实现之间会有差异，一些供应商会使用一些更高级的功能，因为我的功能可能会在不同厂商的两种设备之间有所不同，甚至在同一个供应商内部。不同的模型可能会有一点不同的行为，但最基本的是保持相同的节奏，比如演奏音符或停下来演奏音符等等
    这样的事情得到了每个制作人的大力支持，但是每个供应商。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这很有用，但是八到十六岁，哪个跑得更快，你可以在同一个酒吧里容纳更多的人，什么的，从本质上讲，这就是音乐理论，现在最有趣的部分是这一切是如何与我联系在一起的。米迪是我所知道的历史上为数不多的例子之一，有一个协议是由一群音乐硬件供应商在80年代早期发明的，这个标准实际上非常好，在整个行业都得到了很好的支持，所以今天你可以买到不同种类的音乐硬件。如果它们在某种程度上是电子支持的，它们几乎都是，当然，实现之间会有差异，一些供应商会使用一些更高级的功能，因为我的功能可能会在不同厂商的两种设备之间有所不同，甚至在同一个供应商内部。不同的模型可能会有一点不同的行为，但最基本的是保持相同的节奏，比如演奏音符或停下来演奏音符等等这样的事情得到了每个制作人的大力支持，但是每个供应商。
- en: 它的伟大之处在于 你可以想象 如果你有一个数字音频工作站，像逻辑或铜碱基或亚伯顿现场，你将能够使用任何硬件 你买与音频工作站，这是很甜蜜的，呃，从历史上看，我们用了五条电缆，你可以在我下面看到，呃照片。但问题是那些容易受到伤害的人，就像电缆的长度，你知道造成正在发送的数据的损坏，每条电缆都是单向的，或者换句话说，单向，你只能把数据从
    a点发送到 b点，不是相反，所以要在两个方向上连接设备。你需要两根电缆，你知道连接两个以上的设备，把人弄得一团糟，所以我们不会再这样了，我们现在用的是 usb电缆，和，实际上我们这里的合成器也有这个。你可以看到黄色的电缆
    这里是单声道站的 usb midi电缆，这里的蓝色电缆是用于电路的 usb midi电缆，事实上现在我跟你说话，我是录音，麦克风里发生了什么。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 它的伟大之处在于你可以想象如果你有一个数字音频工作站，像逻辑或铜碱基或亚伯顿现场，你将能够使用任何硬件你买与音频工作站，这是很甜蜜的，呃，从历史上看，我们用了五条电缆，你可以在我下面看到，呃照片。但问题是那些容易受到伤害的人，就像电缆的长度，你知道造成正在发送的数据的损坏，每条电缆都是单向的，或者换句话说，单向，你只能把数据从
    a点发送到 b点，不是相反，所以要在两个方向上连接设备。你需要两根电缆，你知道连接两个以上的设备，把人弄得一团糟，所以我们不会再这样了，我们现在用的是 usb电缆，和，实际上我们这里的合成器也有这个。你可以看到黄色的电缆这里是单声道站的
    usb midi电缆，这里的蓝色电缆是用于电路的 usb midi电缆，事实上现在我跟你说话，我是录音，麦克风里发生了什么。
- en: 收集我的声音和乐器 我们将在亚伯顿现场演奏三首曲目，所以如果我在蓝色赛道上演奏一个音符，你马上就会看到它实际上出现在波浪中，单声道电台也一样，你会看到鼻子实际上在这里，嗯，艾伯顿现场是用来混合这个。所以我可以收集所有正在发生的事件，然后把它们叠加在视频上，但我不会再耍花招了，对，就像没有来自亚伯顿现场的音序器
    我们将使用，没有音乐后期处理，或者像你知道任何其他过度配音。你将要听到的一切都直接来自乐器本身，并由蟒蛇测序，回到我们的展示，就在这里，太棒了，我们可以用它，但它看起来怎么样，幸运的是，协议简单得惊人，它是一个同步协议，意思是如果你把
    a点和 b点连接起来。一旦你发送信息，关于，当仪器接收到该信息时，它应该发挥节点，没有日程安排，没有什么好说的，请在下一个酒吧或周二或其他任何类似同步的地方做，你应该在收到消息后立即做出反应，它仍然是一个单向协议，意思是呃。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 收集我的声音和乐器我们将在亚伯顿现场演奏三首曲目，所以如果我在蓝色赛道上演奏一个音符，你马上就会看到它实际上出现在波浪中，单声道电台也一样，你会看到鼻子实际上在这里，嗯，艾伯顿现场是用来混合这个。所以我可以收集所有正在发生的事件，然后把它们叠加在视频上，但我不会再耍花招了，对，就像没有来自亚伯顿现场的音序器我们将使用，没有音乐后期处理，或者像你知道任何其他过度配音。你将要听到的一切都直接来自乐器本身，并由蟒蛇测序，回到我们的展示，就在这里，太棒了，我们可以用它，但它看起来怎么样，幸运的是，协议简单得惊人，它是一个同步协议，意思是如果你把
    a点和 b点连接起来。一旦你发送信息，关于，当仪器接收到该信息时，它应该发挥节点，没有日程安排，没有什么好说的，请在下一个酒吧或周二或其他任何类似同步的地方做，你应该在收到消息后立即做出反应，它仍然是一个单向协议，意思是呃。
- en: usb midi电缆在 midi out端口中有虚拟 midi，所以任何一条你可以依靠的电缆，事实上，没有什么，嗯，必须发生在两个方向，所有发生的事情都要尽快发生，所以如果你以后想找点事做，你就等着。晚点再把东西寄来，有不同种类的信息，你可以发送，所以注意，意味着呃，如果我们，如果我们有一个键盘，按键盘右键，结点关闭，意味着举起你的手指，呃，键盘右边，所以嗯，通常你记笔记的时间越长。你得到的支持就越多，如果你把手拿开，钥匙，那个，你知道吗，音符就要消失了，你也可以用不同的音符，所以，1，2，1什么的，他们是编号的，因为有不同的八度，所以不仅仅是12个节点，2是向上的12个节点。3是向上的12个节点，以此类推，速度就是你击键的力度，所以通常这意味着速度越快，特定合成器产生的特定声音的更大音量，你能在图片上看到的最后一点是频道，这么多乐器一次可以支持不止一个声音。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: usb midi电缆在 midi out端口中有虚拟 midi，所以任何一条你可以依靠的电缆，事实上，没有什么，嗯，必须发生在两个方向，所有发生的事情都要尽快发生，所以如果你以后想找点事做，你就等着。晚点再把东西寄来，有不同种类的信息，你可以发送，所以注意，意味着呃，如果我们，如果我们有一个键盘，按键盘右键，结点关闭，意味着举起你的手指，呃，键盘右边，所以嗯，通常你记笔记的时间越长。你得到的支持就越多，如果你把手拿开，钥匙，那个，你知道吗，音符就要消失了，你也可以用不同的音符，所以，1，2，1什么的，他们是编号的，因为有不同的八度，所以不仅仅是12个节点，2是向上的12个节点。3是向上的12个节点，以此类推，速度就是你击键的力度，所以通常这意味着速度越快，特定合成器产生的特定声音的更大音量，你能在图片上看到的最后一点是频道，这么多乐器一次可以支持不止一个声音。
- en: 这很好 因为这意味着你可以有多种仪器，你知道吗，在模拟意义上，一起玩，或者你可以说我只是想在这里打鼓，就像一架三角钢琴，所以鼓通常在第十频道和其他频道，视文书而定，那么。我们如何就我们应该以多快的速度一起打球达成一致呢？好吧，我们通过时钟信号来完成，时钟信号每四分之一音符发出24个脉冲，意思是你在音乐理论幻灯片上的乐谱符号中看到的四分之一音符，嗯，它有两个四个信号表示。你知道它的速度有多快，这是一个很大的决心，以确保整个喜欢，你知道吗，你的合成器合奏，软硬件兼具，以同样的速度同步，对，所以有一个很好的乐队，他们会是，呃，同步和一起玩，事实上。我给你看的前奏音乐是由我们的中音程序播放的，我们现在要写的程序，程序还在这里运行，你可以看到2
    4 8是时钟信号的特定字节数，所以有两个四个像，你知道吗，他们很快就来了，我们实际上不会再使用介绍程序了。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这很好因为这意味着你可以有多种仪器，你知道吗，在模拟意义上，一起玩，或者你可以说我只是想在这里打鼓，就像一架三角钢琴，所以鼓通常在第十频道和其他频道，视文书而定，那么。我们如何就我们应该以多快的速度一起打球达成一致呢？好吧，我们通过时钟信号来完成，时钟信号每四分之一音符发出24个脉冲，意思是你在音乐理论幻灯片上的乐谱符号中看到的四分之一音符，嗯，它有两个四个信号表示。你知道它的速度有多快，这是一个很大的决心，以确保整个喜欢，你知道吗，你的合成器合奏，软硬件兼具，以同样的速度同步，对，所以有一个很好的乐队，他们会是，呃，同步和一起玩，事实上。我给你看的前奏音乐是由我们的中音程序播放的，我们现在要写的程序，程序还在这里运行，你可以看到2
    4 8是时钟信号的特定字节数，所以有两个四个像，你知道吗，他们很快就来了，我们实际上不会再使用介绍程序了。
- en: 所以让我利用这个机会结束它，好吧，流产了，在这一点上它是关闭的，嗯，你已经看过控制台了，所以你可能对，其实，你知道，我停止说话，介绍一些代码，接下来我们要做的是，我们要做蟒蛇，呃告诉呃。这两种乐器我都有什么声音可以演奏，什么时候这样做才能实现这一点，呃，我们将使用一些时钟，对，我们需要达成共识，我们可以做异步，我是时钟的计数，你知道我们的速度有多快。但实际上更有趣的是向你解释并展示我们如何使用这些仪器作为时钟源，意思是，我们不会，呃，我们程序内部的时钟源，但我们会对外部节奏做出反应
    并适应它，这一点非常重要，因为这使得我们将要编写的程序，不是玩具。你可以在实际的音乐制作中使用它，因为你肯定会想要别的东西，不是你的小蟒蛇计划，做钟源，通常是一种数字音频工作站，就像
    ebitton live，但如果你喜欢硬件合成器，你知道。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我利用这个机会结束它，好吧，流产了，在这一点上它是关闭的，嗯，你已经看过控制台了，所以你可能对，其实，你知道，我停止说话，介绍一些代码，接下来我们要做的是，我们要做蟒蛇，呃告诉呃。这两种乐器我都有什么声音可以演奏，什么时候这样做才能实现这一点，呃，我们将使用一些时钟，对，我们需要达成共识，我们可以做异步，我是时钟的计数，你知道我们的速度有多快。但实际上更有趣的是向你解释并展示我们如何使用这些仪器作为时钟源，意思是，我们不会，呃，我们程序内部的时钟源，但我们会对外部节奏做出反应并适应它，这一点非常重要，因为这使得我们将要编写的程序，不是玩具。你可以在实际的音乐制作中使用它，因为你肯定会想要别的东西，不是你的小蟒蛇计划，做钟源，通常是一种数字音频工作站，就像
    ebitton live，但如果你喜欢硬件合成器，你知道。
- en: 就像我正在建造的模块合成器，你可以做一些模块，你和 python程序的时钟源只能遵循这个时钟，所以在我们的例子中 创新电路，如我所说，一个成熟的梳妆台将成为我们的时钟源，我们要把它喂给蟒蛇。所以蟒蛇知道它应该跑多快，多亏了这个，我们将能够在两个仪器上按给定的顺序生成音符，好吧，幻灯片部分就到这里，就像，让我们进入更有趣的事情，呃要做的事，所以呃，实际的视觉工作室和我们的代码。这个特别的屏幕不是很有趣，因为这是我从介绍音乐开始的例子，我们换吧，从某个起点
    我们将用来重建一个程序，像这样 我们要从头开始，好让你明白发生了什么，以及我们是如何实现我们正在完成的设计的，就这样。我们先从0开始，是蟒蛇的第0个起点，对，好的，呃，对了，如果你想跟我一起在家里用你自己的程序和你自己的硬件合成器，你绝对被邀请这样做，呃，整个代码存在于github上的git
    repo中，在我的帐户下。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我正在建造的模块合成器，你可以做一些模块，你和 python程序的时钟源只能遵循这个时钟，所以在我们的例子中创新电路，如我所说，一个成熟的梳妆台将成为我们的时钟源，我们要把它喂给蟒蛇。所以蟒蛇知道它应该跑多快，多亏了这个，我们将能够在两个仪器上按给定的顺序生成音符，好吧，幻灯片部分就到这里，就像，让我们进入更有趣的事情，呃要做的事，所以呃，实际的视觉工作室和我们的代码。这个特别的屏幕不是很有趣，因为这是我从介绍音乐开始的例子，我们换吧，从某个起点我们将用来重建一个程序，像这样我们要从头开始，好让你明白发生了什么，以及我们是如何实现我们正在完成的设计的，就这样。我们先从0开始，是蟒蛇的第0个起点，对，好的，呃，对了，如果你想跟我一起在家里用你自己的程序和你自己的硬件合成器，你绝对被邀请这样做，呃，整个代码存在于github上的git
    repo中，在我的帐户下。
- en: AMB v，这个项目的名字叫奥通，呃，所以所有这些都是为你准备的，如果你准备好自己涉猎这个，但现在我们从 p开始，我们实际上是从一个文件开始的，这个文件只是一些，不是这个，呃，一些非常简单的，嗯。锅炉板，如你所见，只是一堆台词，它还没有做任何事情，我唯一不想开始的事情，就像，完全从头开始是一个midi
    py文件，它几乎由字节名称和字节值之间的一些映射组成，对，所以很明显电线上可能只是一堆数字。就像计算机科学中的其他东西一样，但人类给它们起名字更自然，所以我已经为我们做了，我们不需要，你知道吗，找到他们的名字号码和名字，后来，你已经拥有了这一切，然后是一些锅炉板来为我们的蟒蛇提供中口。我们要用中速引擎，去承担发送东西和接收东西的重任，呃，MIDI五金工具，所以就像，你知道吗，从侧面可以看到，这其实不像是，你知道吗，世界上最复杂的代码，但你知道它必须写下来，这将为我们做这件事。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: AMB v，这个项目的名字叫奥通，呃，所以所有这些都是为你准备的，如果你准备好自己涉猎这个，但现在我们从 p开始，我们实际上是从一个文件开始的，这个文件只是一些，不是这个，呃，一些非常简单的，嗯。锅炉板，如你所见，只是一堆台词，它还没有做任何事情，我唯一不想开始的事情，就像，完全从头开始是一个midi
    py文件，它几乎由字节名称和字节值之间的一些映射组成，对，所以很明显电线上可能只是一堆数字。就像计算机科学中的其他东西一样，但人类给它们起名字更自然，所以我已经为我们做了，我们不需要，你知道吗，找到他们的名字号码和名字，后来，你已经拥有了这一切，然后是一些锅炉板来为我们的蟒蛇提供中口。我们要用中速引擎，去承担发送东西和接收东西的重任，呃，MIDI五金工具，所以就像，你知道吗，从侧面可以看到，这其实不像是，你知道吗，世界上最复杂的代码，但你知道它必须写下来，这将为我们做这件事。
- en: 所以这不是很有趣，你很清楚，所以在这个特殊的阶段 没有什么有趣的事情发生，但对，我们有我们的主要功能，我们调用，如果这是，被称为剧本，嗯，但是这个 mean函数已经是一个单击命令了，我为什么要这么做。如果我没有任何论点要分析，好吧，单击是我每次在做一些脚本时使用的东西，这些脚本将从命令行中调用，因为它不仅仅是命令行参数的解析，它也在做什么
    它为你提供了一个明智的方式来呼应控制台上的东西。在这个特殊的例子中，这里已经有了风格回声，所以它使我们能够做的也是给像这样的东西着色，你知道吗，说这个前景应该是红色的，呃，这应该是标准误差
    而不是标准差，所以我喜欢经常点击和使用它有更多的原因。而不仅仅是呃，命令行参数解析，我们也可以像养流产一样，这将产生更好的退出消息，不仅仅是对可能发生的事情的完整追溯，所以这是给点击的，现在我们唯一需要做的就是使用
    asynchro框架来运行函数。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这不是很有趣，你很清楚，所以在这个特殊的阶段没有什么有趣的事情发生，但对，我们有我们的主要功能，我们调用，如果这是，被称为剧本，嗯，但是这个 mean
    函数已经是一个单击命令了，我为什么要这么做。如果我没有任何论点要分析，好吧，单击是我每次在做一些脚本时使用的东西，这些脚本将从命令行中调用，因为它不仅仅是命令行参数的解析，它也在做什么，它为你提供了一个明智的方式来呼应控制台上的东西。在这个特殊的例子中，这里已经有了风格回声，所以它使我们能够做的也是给像这样的东西着色，你知道吗，说这个前景应该是红色的，呃，这应该是标准误差而不是标准差，所以我喜欢经常点击和使用它有更多的原因。而不仅仅是呃，命令行参数解析，我们也可以像养流产一样，这将产生更好的退出消息，不仅仅是对可能发生的事情的完整追溯，所以这是给点击的，现在我们唯一需要做的就是使用
    asynchro 框架来运行函数。
- en: 使用我们的异步主，异步主异步函数，呃，到目前为止没有做什么，它只是得到了电路和单声道站的端口，所以我可能会更好，就像，它真的做了一些有趣的事情吗，所以我录制这个视频的第一次尝试是我把所有的东西都打出来。并在我看的时候解释，但我发现这既太慢又太尴尬，每当我做了一个类型或什么的，所以这次我们还是要打字，但大多数的呃，不那么渐进的变化就会发生在我查看回购协议的另一个标签时，这样我就有更多的东西可以谈论。更少的机会可以谈论，你知道吗，让你看看我打字有多差，首先我想向你展示的是
    你应该使用一个更有趣的事件循环，对，您已经可以看到可视化的演播室代码，它以绿色的形式突出显示了刚刚发生的变化。所以你可以看到这两条线，所以紫外线循环我正在导入一些东西并安装它，但这还不能解释那是什么啊，所以让我来帮你，asyni
    o使用的事件循环是一个引用循环，是用蟒蛇写的，它是为正确和容易解释而设计的，对。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们的异步主，异步主异步函数，呃，到目前为止没有做什么，它只是得到了电路和单声道站的端口，所以我可能会更好，就像，它真的做了一些有趣的事情吗，所以我录制这个视频的第一次尝试是我把所有的东西都打出来，并在我看的时候解释，但我发现这既太慢又太尴尬，每当我做了一个类型或什么的，所以这次我们还是要打字，但大多数的呃，不那么渐进的变化就会发生在我查看回购协议的另一个标签时，这样我就有更多的东西可以谈论。更少的机会可以谈论，你知道吗，让你看看我打字有多差，首先我想向你展示的是你应该使用一个更有趣的事件循环，对，您已经可以看到可视化的演播室代码，它以绿色的形式突出显示了刚刚发生的变化。所以你可以看到这两条线，所以紫外线循环我正在导入一些东西并安装它，但这还不能解释那是什么啊，所以让我来帮你，asyni
    o 使用的事件循环是一个引用循环，是用蟒蛇写的，它是为正确和容易解释而设计的，对。
- en: 因此，您可以真正进入事件循环代码并了解asyncaa内部是如何工作的，这对于调试也很有用，当 seno内部的东西不能正常工作时，当事情发生时，更容易通过它们来了解哪里出了问题，然
    而。当你在生产中运行东西的时候，你想要的是最高速度，你想要最大的性能，呃，所以为了这个，我们会用呃，尤里沙利文 vuv循环库，把自由紫外线，节点js使用的相同的事件循环库，并允许它被使用，呃被一个妮，哦呃。你其实不需要，为了实现这一点，一个艰难的设置，唯一需要做的就是调用
    uv循环安装，你就这么做了，把这件事解决掉，让我们继续前进，看看下一件事，接下来就是，嗯，我们有一个回调，我们需要设置。每当我们想从 midi导入获得 midi信息时，你可以在第14和15行中看到我们为电路和单声道站都有对端口，对，所以来自电路的信息实际上是来自仪器的信息。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您可以真正进入事件循环代码并了解 asyncaa 内部是如何工作的，这对于调试也很有用，当 seno 内部的东西不能正常工作时，当事情发生时，更容易通过它们来了解哪里出了问题，然而。当你在生产中运行东西的时候，你想要的是最高速度，你想要最大的性能，呃，所以为了这个，我们会用呃，尤里沙利文
    vuv 循环库，把自由紫外线，节点 js 使用的相同的事件循环库，并允许它被使用，呃被一个妮，哦呃。你其实不需要，为了实现这一点，一个艰难的设置，唯一需要做的就是调用
    uv 循环安装，你就这么做了，把这件事解决掉，让我们继续前进，看看下一件事，接下来就是，嗯，我们有一个回调，我们需要设置。每当我们想从 midi 导入获得
    midi 信息时，你可以在第14和15行中看到我们为电路和单声道站都有对端口，对，所以来自电路的信息实际上是来自仪器的信息。
- en: 对两个电路是一个机会 让我们自己把它发送到笔记和其他活动中，与普罗莫诺电台一样 我们从单声道电台和单声道电台得到的信息是我们可以发送给它的笔记，在我们的特殊情况下，我们要做的是接收来自电路的时钟信号。因此，我们需要注册一个回调，以确保来自仪器的每一个事件都在蟒蛇一侧接收到，从单声道站，我们实际上正在关闭，我们对这个乐器的任何东西都不感兴趣，这一点很重要，因为rt
    midi有自己的内部缓冲区。如果我们不关闭港口，很快就会填满，阿奇梅会对我们不满意 因为缓冲器满了 而我们从来没有开始从中获取信息，呃，这里我们设置回调 然后关闭另一个端口，一切都很好，除了实际上没有中音回调，但我们没有。呃实施了吗，所以我们需要解决这个问题，我们可能还应该修复中值回调的名称，因为它是超级非描述性的，上面不是说，呃，它会做什么，它只是说它扮演了什么角色，这是一个相当可怜的名字，但让我们坚持下去。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对两个电路是一个机会让我们自己把它发送到笔记和其他活动中，与普罗莫诺电台一样我们从单声道电台和单声道电台得到的信息是我们可以发送给它的笔记，在我们的特殊情况下，我们要做的是接收来自电路的时钟信号。因此，我们需要注册一个回调，以确保来自仪器的每一个事件都在蟒蛇一侧接收到，从单声道站，我们实际上正在关闭，我们对这个乐器的任何东西都不感兴趣，这一点很重要，因为
    rt midi 有自己的内部缓冲区。如果我们不关闭港口，很快就会填满，阿奇梅会对我们不满意因为缓冲器满了而我们从来没有开始从中获取信息，呃，这里我们设置回调然后关闭另一个端口，一切都很好，除了实际上没有中音回调，但我们没有。呃实施了吗，所以我们需要解决这个问题，我们可能还应该修复中值回调的名称，因为它是超级非描述性的，上面不是说，呃，它会做什么，它只是说它扮演了什么角色，这是一个相当可怜的名字，但让我们坚持下去。
- en: 我们只需要一个特殊的演示，所以在我们的情况下 这不是一个大问题，所以我们的中音回调，呃这里用的是，呃，事实上，呃，服用迷迭香，呃，其他一些我们不感兴趣的可选数据，在这个例子中没有返回任何东西。但在这种情况下
    你可以做任何你想做的事，就像你有一个迷你裙，已经告诉我们，不管是钟表还是笔记，或者是一张纸条，德尔塔说 从上一条中长信息到现在的中长信息之间经过了多少时间，对，所以嗯。我们在这里看到的漂亮的描述性名字
    实际上是我写的，我决定将一些人类的描述性名称应用于原始类型，这些类型实际上是在电线上使用的，因为打字是为人们准备的 对吧，你在用它，并作为一种文件形式。只是为了让你明白发生了什么，当你六个月后回到你自己的项目时，或者如果你在一个更大的团队工作，大家都同意，就像，哦好吧，即使这是一个浮子，这是一个浮子，这是一个事件增量，这个是当前时间的时间戳。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要一个特殊的演示，所以在我们的情况下这不是一个大问题，所以我们的中音回调，呃这里用的是，呃，实际上，呃，服用迷迭香，呃，其他一些我们不感兴趣的可选数据，在这个例子中没有返回任何东西。但在这种情况下你可以做任何你想做的事，就像你有一个迷你裙，已经告诉我们，不管是钟表还是笔记，或者是一张纸条，德尔塔说从上一条中长信息到现在的中长信息之间经过了多少时间，对，所以嗯。我们在这里看到的漂亮的描述性名字实际上是我写的，我决定将一些人类的描述性名称应用于原始类型，这些类型实际上是在电线上使用的，因为打字是为人们准备的，对吧，你在用它，并作为一种文件形式。只是为了让你明白发生了什么，当你六个月后回到你自己的项目时，或者如果你在一个更大的团队工作，大家都同意，就像，哦好吧，即使这是一个浮子，这是一个浮子，这是一个事件增量，这个是当前时间的时间戳。
- en: 所以这就是我们要做的，从补救中得到的，从伦敦交通局，对，回调总是会得到这些参数，所以我们可以对他们做点什么，在这个特殊的例子中，就像我们边走边建一样，所以现在什么都没有发生，呃。我将发送时间设置为当前时间，在接下来的节目中
    我们会用到这个，嗯，就像现在，弗雷克·盖特实际上对我不满意，不利用气味时间，然而，不用担心，片状吃了，我们很快就到了，所以切换到 p4。你可以看到已经有一些事情正在发生
    比如正在发生的事情，现在我们引入了一个提示，为什么我们要引入，让我们暂时离开代码，讨论rtmidi如何进行回调，为什么我们需要像队列这样的东西来处理这些东西。所以像这样的乐器，电路向我们发送信息到一个端口，实际发生的事情，是那个，然而，我们是那个港口的司机，获取它的数据
    并将其发布到操作系统上 供任何订阅者连接，所以如果你在任何时候订阅了这些消息。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这就是我们要做的，从补救中得到的，从伦敦交通局，对，回调总是会得到这些参数，所以我们可以对它们做点什么，在这个特殊的例子中，就像我们边走边建一样，所以现在什么都没有发生，呃。我将发送时间设置为当前时间，在接下来的节目中我们会用到这个，嗯，就像现在，弗雷克·盖特实际上对我不满意，不利用气味时间，然而，不用担心，片状吃了，我们很快就到了，所以切换到
    p4。你可以看到已经有一些事情正在发生，比如正在发生的事情，现在我们引入了一个提示，为什么我们要引入，让我们暂时离开代码，讨论 rtmidi 如何进行回调，为什么我们需要像队列这样的东西来处理这些东西。所以像这样的乐器，电路向我们发送信息到一个端口，实际发生的事情，是那个，然而，我们是那个港口的司机，获取它的数据并将其发布到操作系统上供任何订阅者连接，所以如果你在任何时候订阅了这些消息。
- en: 你会得到他们，所以我们的中队，呃，通过我们的港口开放，当我们说要电路板订阅这个信息流时，好的，嗯，还有用c++写的rti的线，呃是对新信息的反应，必须允许蟒蛇用蟒蛇代码获取这些信息。这就是为什么我们设置了回调，对，回调本质上是我们给出的一个函数，只是说嘿，每当有事件发生，运行这个
    python代码，但是回调使用起来相当笨拙，呃，与嗯，你知道吗，更复杂的程序 比如，因此。在回调中设计更复杂的程序是一个相当困难的问题，更重要的是，所以我们实际上并不想在那里做任何繁重的计算，我们更喜欢用一条单独的蟒蛇线做这件事，就像我们在这里看到的那样。这个特定的
    python线程很好地运行了我们的 asynchro事件循环，在那一端的环路上，事件循环，我们就跑，Q将在队列运行时从队列中获取信息，如果我们在排队等候，获取队列是否为空。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你会得到它们，所以我们的中队，呃，通过我们的港口开放，当我们说要电路板订阅这个信息流时，好的，嗯，还有用 C++ 写的 rti 的线，呃是对新信息的反应，必须允许蟒蛇用蟒蛇代码获取这些信息。这就是为什么我们设置了回调，对，回调本质上是我们给出的一个函数，只是说嘿，每当有事件发生，运行这个
    python 代码，但是回调使用起来相当笨拙，呃，与嗯，你知道吗，更复杂的程序，比如，因此。在回调中设计更复杂的程序是一个相当困难的问题，更重要的是，所以我们实际上并不想在那里做任何繁重的计算，我们更喜欢用一条单独的蟒蛇线做这件事，就像我们在这里看到的那样。这个特定的
    python 线程很好地运行了我们的 asynchro 事件循环，在那一端的环路上，事件循环，我们就跑，Q将在队列运行时从队列中获取信息，如果我们在排队等候，获取队列是否为空。
- en: 在有新的可用的东西之前，这将会被阻止，所以每当c++为我们提供信息时，呃，队列将获得更多的元素，蟒蛇会把这些元素取出来处理它们，所以这本质上是流的设计，对，你知道在一张漂亮的幻灯片上。但它也不是超级冗长的编码，你可以看到这里，本质上我们所做的是我们得到的信息，我们格式化为一个
    midi消息，那就是，他同意我们在这里定义的这种特殊的 midi消息类型。我们唯一需要做的就是把消息放到队列上，那么我们如何让任何事情发生，任何音乐播放，我们还需要等待一些新的消费者，中位数的消费者也会使用我们在这里定义的相同的提示，这是一个midi消息队列，对吧。它会消耗队列中的任何东西，midi消费者是如何工作的？它看起来像是永远循环而真实的东西，在绕圈的时候，它将会，呃，呃，就像我答应的那样
    等待，一旦队列上出现新消息，它可以在这段代码中做一些事情。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在有新的可用的东西之前，这将会被阻止，所以每当c++为我们提供信息时，呃，队列将获得更多的元素，蟒蛇会把这些元素取出来处理它们，所以这本质上是流的设计，对，你知道在一张漂亮的幻灯片上。但它也不是超级冗长的编码，你可以看到这里，本质上我们所做的是我们得到的信息，我们格式化为一个
    midi消息，那就是，他同意我们在这里定义的这种特殊的 midi消息类型。我们唯一需要做的就是把消息放到队列上，那么我们如何让任何事情发生，任何音乐播放，我们还需要等待一些新的消费者，中位数的消费者也会使用我们在这里定义的相同的提示，这是一个midi消息队列，对吧。它会消耗队列中的任何东西，midi消费者是如何工作的？它看起来像是永远循环而真实的东西，在绕圈的时候，它将会，呃，呃，就像我答应的那样等待，一旦队列上出现新消息，它可以在这段代码中做一些事情。
- en: 我们唯一要做的就是打印出，作为一种调试的形式，我们打印出事件增量，是个彩车，所以我们稍微格式化一下，所以它不是超级笨重，一样，在我们的例子中，用当前时间和元素被放入队列的时间之间的差异来衡量延迟和延迟。呃，对于我们的目的来说，延迟是很好的，我明确地表明了这一点，这样你就能放松下来看到我认为我对
    midi应用来说已经足够快了，这是我们将从电路中看到的主要信息流，嗯，但现在有点天真，如果我现在要执行。就像奇怪的事情会发生，所以为了让事情变得不那么天真，我要做的是跑第五圈，现在你可以看到实际上这里有一点变化，对，我们收到了异步事件循环，我们这样做是为了什么，而不是说你不重视我们的中长信息。我们正在说一个循环电话
    很快，所以你一准备好就打电话给我，线程安全 q放不重量，为什么这里的线也是安全的，是变种，当然很快，可以从其他线程调用，如果你没记错的话。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们唯一要做的就是打印出，作为一种调试的形式，我们打印出事件增量，是个彩车，所以我们稍微格式化一下，所以它不是超级笨重，一样，在我们的例子中，用当前时间和元素被放入队列的时间之间的差异来衡量延迟和延迟。呃，对于我们的目的来说，延迟是很好的，我明确地表明了这一点，这样你就能放松下来看到我认为我对
    midi应用来说已经足够快了，这是我们将从电路中看到的主要信息流，嗯，但现在有点天真，如果我现在要执行。就像奇怪的事情会发生，所以为了让事情变得不那么天真，我要做的是跑第五圈，现在你可以看到实际上这里有一点变化，对，我们收到了异步事件循环，我们这样做是为了什么，而不是说你不重视我们的中长信息。我们正在说一个循环电话很快，所以你一准备好就打电话给我，线程安全
    q放不重量，为什么这里的线也是安全的，是变种，当然很快，可以从其他线程调用，如果你没记错的话。
- en: rt midi监听来自电路的消息的c++线程与主python线程是分开的，在其中运行我们的异步应用程序，所以我们需要使用线程调用，保存一切以保持理智，为了让我们的消费者保持稳定，呃一边，什么都没变。所以我们现在可以尝试运行这个，让我们看看我们如何做到这一点，它叫邓德曼，所以我们可以做的就是说
    python m ao tone 然后运行应用程序。你已经可以在 asni中看到由我们的 midi消费者处理的一系列事件，即使它们是在一个单独的c++线程中接收的，嗯，由rtmidi，所以我们的回调每次都负责接收这些信息
    并且完全分开。此信息从队列中收集，并逐个事件进行处理，看起来不错，我试试关闭这个应用程序，关闭一切都很好，但如果我们尝试这样做几次，我们有时会发现，在这个特殊的例子中
    可能会有例外或其他奇怪的事情发生，当然。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: rt midi监听来自电路的消息的c++线程与主python线程是分开的，在其中运行我们的异步应用程序，所以我们需要使用线程调用，保存一切以保持理智，为了让我们的消费者保持稳定，呃一边，什么都没变。所以我们现在可以尝试运行这个，让我们看看我们如何做到这一点，它叫邓德曼，所以我们可以做的就是说
    python m ao tone 然后运行应用程序。你已经可以在 asni中看到由我们的 midi消费者处理的一系列事件，即使它们是在一个单独的c++线程中接收的，嗯，由rtmidi，所以我们的回调每次都负责接收这些信息并且完全分开。此信息从队列中收集，并逐个事件进行处理，看起来不错，我试试关闭这个应用程序，关闭一切都很好，但如果我们尝试这样做几次，我们有时会发现，在这个特殊的例子中可能会有例外或其他奇怪的事情发生，当然。
- en: 因为我试图证明这永远不会发生，但是相信我，这还不是生产应用程序应该呈现的样子，所以让我们介绍一些错误处理的形式，只需要一点点，所以让我们再看看我们改变了什么，有益的，嗯。一个可视化的演播室代码会告诉我们什么线改变了，所以在这里，呃，接受一个街区，我们实际上是在寻找基本的例外，因为其中一个非常典型的会是一个取消错误。以及当我们的
    python线程已经关闭异步时 可能发生的其他事情，我 o事件循环什么的啊，而从c++线程运行的midi回调还不知道这一点，尝试执行我们的 python代码，只是说嘿，回调失败。就像我们不能把它叫做，很快我们就可以安排回电话了，嗯，在消费端，我们想做的是当事情被取消的时候，我们将确保c++线程和寄存器，或者中音回调，如果我们不这样做，呃，它只会不停地向我们发送信息。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我试图证明这永远不会发生，但是相信我，这还不是生产应用程序应该呈现的样子，所以让我们介绍一些错误处理的形式，只需要一点点，所以让我们再看看我们改变了什么，有益的，嗯。一个可视化的演播室代码会告诉我们什么线改变了，所以在这里，呃，接受一个街区，我们实际上是在寻找基本的例外，因为其中一个非常典型的会是一个取消错误。以及当我们的
    python线程已经关闭异步时可能发生的其他事情，我 o事件循环什么的啊，而从c++线程运行的midi回调还不知道这一点，尝试执行我们的 python代码，只是说嘿，回调失败。就像我们不能把它叫做，很快我们就可以安排回电话了，嗯，在消费端，我们想做的是当事情被取消的时候，我们将确保c++线程和寄存器，或者中音回调，如果我们不这样做，呃，它只会不停地向我们发送信息。
- en: 这有时被称为例外，我试过但没给你看，我们还在两个端口上使用了一些神奇的静默函数，它们已经在那里供我们未来使用，但为了解释他们为什么会在那里，如你所见，有单独的说明和信息的说明。所以如果我们在最糟糕的时候停止了我们的申请，只是说了一个纸条，现在我们停止，那个音符将永远播放，这对任何人来说都是超级烦人的，让这个停止播放实际上是相当棘手的，所以我们希望。每当我们的异步命令被取消
    并且它将被取消时，例如，当我们控制 c 我们的应用程序，我们要确保在取消回调的同时，我们把两个乐器都静音了，对吧，所以如果有任何关于事件的记录，我们会的，嗯，通过说，别玩了。所有频道上的所有音符，请右边，所以这对我们来说，所以这实际上已经足够了，就在这里，再一次，如果我现在执行，它看起来几乎是一样的，即使我们从电路得到信息，还没有什么有趣的事情发生。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这有时被称为例外，我试过但没给你看，我们还在两个端口上使用了一些神奇的静默函数，它们已经在那里供我们未来使用，但为了解释他们为什么会在那里，如你所见，有单独的说明和信息的说明。所以如果我们在最糟糕的时候停止了我们的申请，只是说了一个纸条，现在我们停止，那个音符将永远播放，这对任何人来说都是超级烦人的，让这个停止播放实际上是相当棘手的，所以我们希望。每当我们的异步命令被取消并且它将被取消时，例如，当我们控制
    c 我们的应用程序，我们要确保在取消回调的同时，我们把两个乐器都静音了，对吧，所以如果有任何关于事件的记录，我们会的，嗯，通过说，别玩了。所有频道上的所有音符，请右边，所以这对我们来说，所以这实际上已经足够了，就在这里，再一次，如果我现在执行，它看起来几乎是一样的，即使我们从电路得到信息，还没有什么有趣的事情发生。
- en: 所以让我们最终让一些声音发生，我们已经录了3-5分钟了，让我们做一些声音，呃，从我们现在的节目中，所以嗯，如果我们从中得到消息，呃，电路的 MIDI端口，会有很多种，我们可以按类型处理。我们可以检查我们会遇到什么样的中微子信息，在这个特殊的例子中，时钟消息，每个季度音符的两个四个脉冲是一个特殊的例子，我们需要保持事情的同步，所以我们要保持什么同步。首先我们需要这个钟用于我们的蟒蛇测序仪，但我们还有两个硬件合成器，电路已经知道自己的内部时钟是什么，它不知道它应该遵循什么节奏，所以每当我们收到时钟信息，我们还想把它送到单声道电台，到基地合成器。开始播放和停止播放消息也是如此，我们也希望这些信息被转发到单声道电台，但是等一下，如果我们现在保存文件，呃，你会看到片八对我们不满意，这个基本变量并不存在，没有基本的论点，但如果你已经想好了。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们最终让一些声音发生，我们已经录了3-5分钟了，让我们做一些声音，呃，从我们现在的节目中，所以嗯，如果我们从中得到消息，呃，电路的 MIDI端口，会有很多种，我们可以按类型处理。我们可以检查我们会遇到什么样的中微子信息，在这个特殊的例子中，时钟消息，每个季度音符的两个四个脉冲是一个特殊的例子，我们需要保持事情的同步，所以我们要保持什么同步。首先我们需要这个钟用于我们的蟒蛇测序仪，但我们还有两个硬件合成器，电路已经知道自己的内部时钟是什么，它不知道它应该遵循什么节奏，所以每当我们收到时钟信息，我们还想把它送到单声道电台，到基地合成器。开始播放和停止播放消息也是如此，我们也希望这些信息被转发到单声道电台，但是等一下，如果我们现在保存文件，呃，你会看到片八对我们不满意，这个基本变量并不存在，没有基本的论点，但如果你已经想好了。
- en: 你会看到不仅会有一个基础合成器，会有单声道，呃，电路和可能会有更多的信息 我们需要更多的信息来让我们的程序运转起来，我们可以继续在函数中添加更多参数，但很快就会变得笨重和巨大，所以我们现在要做的是。我们将引入一个班来保持我们的状态，既然这种状态描述的是现场表演，我们要在课堂上使用一个名字，所以这个类现在只有两个属性，所以我们使用了数据转换。这样我们就不需要编写
    dunder init方法和 dundrappers，你知道平等比较和其他任何东西，但事实上，我们使用的是数据类的专业版，哪些是加法器，你只要，你知道吗。PIP安装加法器以获得这些，所以表现得几乎一样，但有很多其他功能，其中一些我们甚至需要，太酷了，我们有一个性能对象，例如，我们的中队暂时离开了，所以我们唯一需要用到的，即在这里实例化性能对象。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到不仅会有一个基础合成器，会有单声道，呃，电路和可能会有更多的信息，我们需要更多的信息来让我们的程序运转起来，我们可以继续在函数中添加更多参数，但很快就会变得笨重和巨大，所以我们现在要做的是。我们将引入一个班来保持我们的状态，既然这种状态描述的是现场表演，我们要在课堂上使用一个名字，所以这个类现在只有两个属性，所以我们使用了数据转换。这样我们就不需要编写
    dunder init方法和 dundrappers，你知道平等比较和其他任何东西，但事实上，我们使用的是数据类的专业版，哪些是加法器，你只要，你知道吗。PIP安装加法器以获得这些，所以表现得几乎一样，但有很多其他功能，其中一些我们甚至需要，太酷了，我们有一个性能对象，例如，我们的中队暂时离开了，所以我们唯一需要用到的，即在这里实例化性能对象。
- en: 所以我们的鼓会是我们的中音，向巡回法院报告，那将是我们的绘图机，基地将会是，呃，单声道站外的地方，原来如此，我们只需要把它传给这里的消费者，现在安抚是快乐的，这里再也没有什么疯狂的事情发生了。我们可以根据性能发送消息，开始玩嗯，所以事实上我们已经可以证明，我给你看，所以在这里你可以看到，你知道乐器的两个八度，我们可以稍微改变一下视野，所以我们每次只能看到一个八度，当我们这样做的时候。你可以看到这些仪器也有自己的内部测序器，所以它有16级台阶，你也可以看到他们，嗯，如果我们现在运行我们的应用程序，呃再来一次，破折号音调，时间在流逝，就是这个钟，如果我们开始在这里玩，对，呃。你会注意到这两种乐器一开始都演奏得很好，我们做到了
    我们的代码做到了，我们现在是一个转发时钟消息和两个合成器之间的开始和停止消息，所以如果我们停下来，你会看到他们两个都停了下来，如果他们要去。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们的鼓会是我们的中音，向巡回法院报告，那将是我们的绘图机，基地将会是，呃，单声道站外的地方，原来如此，我们只需要把它传给这里的消费者，现在安抚是快乐的，这里再也没有什么疯狂的事情发生了。我们可以根据性能发送消息，开始玩嗯，所以事实上我们已经可以证明，我给你看，所以在这里你可以看到，你知道乐器的两个八度，我们可以稍微改变一下视野，所以我们每次只能看到一个八度，当我们这样做的时候。你可以看到这些仪器也有自己的内部测序器，所以它有16级台阶，你也可以看到他们，嗯，如果我们现在运行我们的应用程序，呃再来一次，破折号音调，时间在流逝，就是这个钟，如果我们开始在这里玩，对，呃。你会注意到这两种乐器一开始都演奏得很好，我们做到了，我们的代码做到了，我们现在是一个转发时钟消息和两个合成器之间的开始和停止消息，所以如果我们停下来，你会看到他们两个都停了下来，如果他们要去。
- en: 它们同时开始也会同时停止，你可以看到播放时这里的播放按钮会变成亮绿色，这个也是，即使我没有按对，它们实际上是完全同步的，很好，事实上你可以在这里改变节奏，就像一点半在这种罗菲嗯，在这里展示。由这些按钮组成的按钮可以改变为不仅仅是130，我们可以让它成为一个，你知道吗，或者两百四十，你可以看到这个音序器现在在这里，呃跑得更快，如果我们回去，只是做一个非常慢的节奏，你将会看到序列前进的速度。所以这很好，我们是，事实上，已经在做有效的网络编程了，它是一个非常简单的网络协议，嗯用蟒蛇，但与实际的音乐硬件交互，但我向你保证，一点声音都没有，让我们解决这个问题。所以现在我们终于要介绍一个很低级别时间的东西，戏剧机器，它还没有任何节奏同步，因为在合适的时间来解释这个有点太多了，呃，我们将在我们现在所拥有的基础上再接再厉，那么什么是鼓机呢，如果我们按播放键。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 它们同时开始也会同时停止，你可以看到播放时这里的播放按钮会变成亮绿色，这个也是，即使我没有按对，它们实际上是完全同步的，很好，事实上你可以在这里改变节奏，就像一点半在这种罗菲嗯，在这里展示。由这些按钮组成的按钮可以改变为不仅仅是130，我们可以让它成为一个，你知道吗，或者两百四十，你可以看到这个音序器现在在这里，呃跑得更快，如果我们回去，只是做一个非常慢的节奏，你将会看到序列前进的速度。所以这很好，我们是，事实上，已经在做有效的网络编程了，它是一个非常简单的网络协议，嗯用蟒蛇，但与实际的音乐硬件交互，但我向你保证，一点声音都没有，让我们解决这个问题。所以现在我们终于要介绍一个很低级别时间的东西，戏剧机器，它还没有任何节奏同步，因为在合适的时间来解释这个有点太多了，呃，我们将在我们现在所拥有的基础上再接再厉，那么什么是鼓机呢，如果我们按播放键。
- en: 开始消息正在向右发送，所以我们已经有了这个代码，这个代码，这个代码已经在那里，以同步我们的时钟与其他合成器，但我们现在所做的，作为一个新的铁是，呃，为鼓机创建一个任务，如果还没有创建任务。如果我们按下停止键，我们想取消这个任务，鼓声一次又一次地响起，就好像我们取消了整个计划，我们要让鼓机安静下来，所以这就是你安排任务的方式，在
    iskyo上运行的后台任务，无论适用，所以如果你有网络应用。你也会这么做的，如果你想在后台做一些处理，你也会这么做的，所以这是一个可重用的，呃，技术现在创造一个任务，这项任务只是一个核心例行公事，如果你用完了，它实际上永远在运行，你可以取消。但有些任务会有一个自然的结局，你会期望它们返回一些价值，什么的，在这种情况下，您只需加入这些任务，用其他
    asni o函数等待他们收集他们收到的结果，所以创建任务。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 开始消息正在向右发送，所以我们已经有了这个代码，这个代码，这个代码已经在那里，以同步我们的时钟与其他合成器，但我们现在所做的，作为一个新的铁是，呃，为鼓机创建一个任务，如果还没有创建任务。如果我们按下停止键，我们想取消这个任务，鼓声一次又一次地响起，就好像我们取消了整个计划，我们要让鼓机安静下来，所以这就是你安排任务的方式，在
    iskyo上运行的后台任务，无论适用，所以如果你有网络应用。你也会这么做的，如果你想在后台做一些处理，你也会这么做的，所以这是一个可重用的，呃，技术现在创造一个任务，这项任务只是一个核心例行公事，如果你用完了，它实际上永远在运行，你可以取消。但有些任务会有一个自然的结局，你会期望它们返回一些价值，什么的，在这种情况下，您只需加入这些任务，用其他
    asni o函数等待他们收集他们收到的结果，所以创建任务。
- en: 它实际上创建了一些我们在这里使用的背景循环，背景循环很简单，尽管这里只有几行字，线路是必须的，因为有关于事件的记录和关于事件的记录，我们总是想把手指从我们使用的键盘上举起来，所以在这个例子中。我们正在播放一个关于事件的音符，在给定的声道上，在给定的音量下，在给定的音符的给定的声道上，那我们要等一段时间，我们将再次用同样的配置举起我们的手指，再次等待某个时候，这样事件。我们正在播放的频道是中音10频道，它是9，因为它是从零开始的数字，那通常是鼓，就像现在所有的
    midi实现一样，附注60，所以这些数字只是，你知道从零到127，这些数字在不同的鼓机之间实际上是不同的。你得自己试试 或者看看说明书，在这种情况下，投票一二七，很大声，好的，兴奋地听到它的声音，我是，动手吧，好的，什么都没发生，为什么
    因为这东西控制着我们的表现，我们需要按下播放键，所以部分成功。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 它实际上创建了一些我们在这里使用的背景循环，背景循环很简单，尽管这里只有几行字，线路是必须的，因为有关于事件的记录和关于事件的记录，我们总是想把手指从我们使用的键盘上举起来，所以在这个例子中。我们正在播放一个关于事件的音符，在给定的声道上，在给定的音量下，在给定的音符的给定的声道上，那我们要等一段时间，我们将再次用同样的配置举起我们的手指，再次等待某个时候，这样事件。我们正在播放的频道是中音10频道，它是9，因为它是从零开始的数字，那通常是鼓，就像现在所有的
    midi实现一样，附注60，所以这些数字只是，你知道从零到127，这些数字在不同的鼓机之间实际上是不同的。你得自己试试或者看看说明书，在这种情况下，投票一二七，很大声，好的，兴奋地听到它的声音，我是，动手吧，好的，什么都没发生，为什么因为这东西控制着我们的表现，我们需要按下播放键，所以部分成功。
- en: 但是这个速度和序列的速度是不一样的，如果我们改变节奏，那没用，其 实，你可以看到节奏应该在改变，但到目前为止，我们的核心程序是忽略我们正在做的改变，让我在这里数到一点半，为什么节奏变化不好。因为我们只在这里睡半秒钟，为了我们的目的
    忽略了时钟信号，我们要做的唯一一件事就是，不管什么时候，只要把它转发到另一个合成器，我们想做的是在我们的代码中实际使用它，所以最简单的方法就是记录，发生在。两点，这样做，呃，一种记录的三角洲，这将帮助我们，呃，在我们到达之前
    计算温度，尽管我在这里做的一件事，我明白了，呃，我提取了这个相当麻烦的，U，你知道吗，处理单个音符的四行方法。在表演课上记下一个方法，因为我们很快就会演奏很多音符，所以如果要把它设置成，你知道吗，每次用四句台词，相反，它只会看起来很忙，通过提取这两种方法，我们能做的就是用一条线对节点进行排序，每一个都更好。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 但是这个速度和序列的速度是不一样的，如果我们改变节奏，那没用，其 实，你可以看到节奏应该在改变，但到目前为止，我们的核心程序是忽略我们正在做的改变，让我在这里数到一点半，为什么节奏变化不好。因为我们只在这里睡半秒钟，为了我们的目的
    忽略了时钟信号，我们要做的唯一一件事就是，不管什么时候，只要把它转发到另一个合成器，我们想做的是在我们的代码中实际使用它，所以最简单的方法就是记录，发生在。两点，这样做，呃，一种记录的三角洲，这将帮助我们，呃，在我们到达之前
    计算温度，尽管我在这里做的一件事，我明白了，呃，我提取了这个相当麻烦的，U，你知道吗，处理单个音符的四行方法。在表演课上记下一个方法，因为我们很快就会演奏很多音符，所以如果要把它设置成，你知道吗，每次用四句台词，相反，它只会看起来很忙，通过提取这两种方法，我们能做的就是用一条线对节点进行排序，每一个都更好。
- en: 好的，但让我们继续讨论事件发生的时间，所以为了利用我们已经接收到的时钟信号，呃，电路我们要做的就是听时钟的信息，如果有两个连续的时钟信息，当时 rtd已经计算出了它们之间的时间。这是在
    python中没有任何潜伏期的时间，所以这是一个很好的时机，我们可以，把这个当作泳池的三角洲，这是两个时钟信号之间的差值，太酷了，我们已经知道每个季度有两四次脉冲。所以我们现在可以开始用音乐的术语来思考了，嗯，我们将使用这个脉冲增量来确保我们每次都在等待给定的时间，所以让我们看看这个脉冲增量是否在我们的特定程序中做了什么有趣的事情，所以澳音，听起来已经快了。所以这可能是件好事，我们就在这里改变节奏，我们可以，实际上你应该也能看到这个，我们要换庙，我们的核心程序加快了音符或放慢了音符，很好，这正是我们所需要的。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，但让我们继续讨论事件发生的时间，所以为了利用我们已经接收到的时钟信号，呃，电路我们要做的就是听时钟的信息，如果有两个连续的时钟信息，当时 rtd已经计算出了它们之间的时间。这是在
    python中没有任何潜伏期的时间，所以这是一个很好的时机，我们可以把这个当作泳池的三角洲，这是两个时钟信号之间的差值，太酷了，我们已经知道每个季度有两四次脉冲。所以我们现在可以开始用音乐的术语来思考了，嗯，我们将使用这个脉冲增量来确保我们每次都在等待给定的时间，所以让我们看看这个脉冲增量是否在我们的特定程序中做了什么有趣的事情，所以澳音，听起来已经快了。所以这可能是件好事，我们就在这里改变节奏，我们可以，实际上你应该也能看到这个，我们要换庙，我们的核心程序加快了音符或放慢了音符，很好，这正是我们所需要的。
- en: 所以现在我们准备好开始在我们的测序器中输入一些更有趣的东西了，使用它真的很有趣吗，用它写任何音乐代码都很麻烦吗，好吧，依我看，其实很简单，那么你实际上是如何向它添加更多的节点的呢？好吧。不如我们在这里再加一个，因为我们已经有帮手了，呃变量就在那里，比如说小军鼓或闭式高帽或开放式高帽，我们已经可以做一些，说小军鼓，再打两个四脉冲，对嗯，你知道吗，希望我把这个帖子命名为。所以也许我们可以重做，所以我们仍然知道发生了什么，所以这听起来应该比上次更有趣一点，事实上，这正是正在发生的事情，小军鼓，小军鼓，所以我们能把这变得更复杂吗，是的，但没有多少，嗯，额外的工作。在那个特定的时刻，我们需要解决这个问题，小军鼓总是打得很好，只要敲出每一秒的音符，所以我们只需要两个循环，就在这里
    还有一个会等我们很久，稍后演奏小军鼓，为了实现这个目标。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在我们准备好开始在我们的测序器中输入一些更有趣的东西了，使用它真的很有趣吗，用它写任何音乐代码都很麻烦吗，好吧，依我看，其实很简单，那么你实际上是如何向它添加更多的节点的呢？好吧。不如我们在这里再加一个，因为我们已经有帮手了，呃变量就在那里，比如说小军鼓或闭式高帽或开放式高帽，我们已经可以做一些，说小军鼓，再打两个四脉冲，对嗯，你知道吗，希望我把这个帖子命名为。所以也许我们可以重做，所以我们仍然知道发生了什么，所以这听起来应该比上次更有趣一点，事实上，这正是正在发生的事情，小军鼓，小军鼓，所以我们能把这变得更复杂吗，是的，但没有多少，嗯，额外的工作。在那个特定的时刻，我们需要解决这个问题，小军鼓总是打得很好，只要敲出每一秒的音符，所以我们只需要两个循环，就在这里
    还有一个会等我们很久，稍后演奏小军鼓，为了实现这个目标。
- en: 我们实际上不能只写两个像这样的循环，因为第一个会一直播放下去，我们不打算去另一个，但是我们可以做的只是创建另一个异步开发程序，创造出另一个异步小军鼓，而这一个将两者，但也有性能权重。所以只要等我们24个脉冲，使它到达每一个节点，现在代码会不高兴的一件事，性能没有属性，重量，我们得把它取出来，现在我们用的是睡眠的异步，但我们也希望能够休息
    并等待给定数量的脉冲，所以把这个提取出来。所以让我们暂时把我们的更改存储在定序器中，然后切换到另一个类，然后把这些东西弹到更改中，所以现在我们所拥有的，在我们的代码里有两种重量法，我的派很开心，但我们唯一忘了做的事，如果我们不解决这个问题。什么也不会发生，那就是现在我们必须等待异步，我们看看，做任何事，好的，但他们在一起玩，但并不完全同步，这听起来不像是一个好的鼓手，听起来像是个糟糕的鼓手，实际上它们有时是同步的，有时他们只是不同步。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实际上不能只写两个像这样的循环，因为第一个会一直播放下去，我们不打算去另一个，但是我们可以做的只是创建另一个异步开发程序，创造出另一个异步小军鼓，而这一个将两者，但也有性能权重。所以只要等我们24个脉冲，使它到达每一个节点，现在代码会不高兴的一件事，性能没有属性，重量，我们得把它取出来，现在我们用的是睡眠的异步，但我们也希望能够休息并等待给定数量的脉冲，所以把这个提取出来。所以让我们暂时把我们的更改存储在定序器中，然后切换到另一个类，然后把这些东西弹到更改中，所以现在我们所拥有的，在我们的代码里有两种重量法，我的派很开心，但我们唯一忘了做的事，如果我们不解决这个问题。什么也不会发生，那就是现在我们必须等待异步，我们看看，做任何事，好的，但他们在一起玩，但并不完全同步，这听起来不像是一个好的鼓手，听起来像是个糟糕的鼓手，实际上它们有时是同步的，有时他们只是不同步。
- en: 你不知道为什么，所以让我们考虑一下，为什么那样好呢？为了回答这个问题，我们需要谈谈时钟队列，所以在硬件设备中经常发生的事情，有时甚至是在生产中，呃，你要买的专业自动售货机，如果有一个商定的节奏权。或者每分钟125次，如果大家都同意这个节奏，但我们从未达成一致，当第一拍应该打的时候，那些东西可能会失去相位，最重要的是，在一个硬件仪器和另一个硬件仪器中
    125个每分钟是什么意思，所以在相移的基础上。和不同步，对音乐剧来说是随机的，你知道吗，我们的耳朵，所以，这不是很好，我们现在需要的是一种同步第一拍的方法，以确保我们能，嗯，你知道吗，与我们完美同步，我们能做到这一点，是的，这其实也不难。我们将使用一个非常基本的异步，我把它叫做未来，所以看期货，或者是一种向某人保证我们在未来会有结果的方式，对还没有，例如，如果两个核心程序像图片中的左行和右行，嗯，彼此互动和第一个没有结果，然而。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你不知道为什么，所以让我们考虑一下，为什么那样好呢？为了回答这个问题，我们需要谈谈时钟队列，所以在硬件设备中经常发生的事情，有时甚至是在生产中，呃，你要买的专业自动售货机，如果有一个商定的节奏权。或者每分钟125次，如果大家都同意这个节奏，但我们从未达成一致，当第一拍应该打的时候，那些东西可能会失去相位，最重要的是，在一个硬件仪器和另一个硬件仪器中
    125个每分钟是什么意思，所以在相移的基础上。和不同步，对音乐剧来说是随机的，你知道吗，我们的耳朵，所以，这不是很好，我们现在需要的是一种同步第一拍的方法，以确保我们能，嗯，你知道吗，与我们完美同步，我们能做到这一点，是的，这其实也不难。我们将使用一个非常基本的异步，我把它叫做未来，所以看期货，或者是一种向某人保证我们在未来会有结果的方式，对还没有，例如，如果两个核心程序像图片中的左行和右行，嗯，彼此互动和第一个没有结果，然而。
- en: 它可以给某人一个未来，另一个核心程序可以在未来等待，所以只要还没有结果，但我们仍在等待，时光飞逝，我们在等待，如果第一个核心程序最终有结果，它调用集合结果，然后一个女孩停止等待，如果它已经知道，哦。有结果了，所以它把结果分配给这里的结果变量，我们可以好好利用它，所以在这个例子中，我们可以看到未来的设计，为了我们的目的，我们实际上想从未来得到的是这样的东西，而不仅仅是有一个重量，呃。只是在没有咨询任何人的情况下
    随机，就像睡着了一样，我们的要求是，是嗯，请帮我数数四个脉冲，好的 我们的节拍器功能会说，好的，好吧，我给你数四个脉冲，回归未来，现在我们的合成器，我们的音序器会等着。它只会收到，我们在这里忽略了，呃，当呃，右前四次计数，所以现在的计数是零，所以我们的计数器将设定未来的结果，未來已經決定了，所以这就是我们要做的设计，使用
    future进行同步，这是一个相当好的技术。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以给某人一个未来，另一个核心程序可以在未来等待，所以只要还没有结果，但我们仍在等待，时光飞逝，我们在等待，如果第一个核心程序最终有结果，它调用集合结果，然后一个女孩停止等待，如果它已经知道，哦。有结果了，所以它把结果分配给这里的结果变量，我们可以好好利用它，所以在这个例子中，我们可以看到未来的设计，为了我们的目的，我们实际上想从未来得到的是这样的东西，而不仅仅是有一个重量，呃。只是在没有咨询任何人的情况下
    随机，就像睡着了一样，我们的要求是，是嗯，请帮我数数四个脉冲，好的 我们的节拍器功能会说，好的，好吧，我给你数四个脉冲，回归未来，现在我们的合成器，我们的音序器会等着。它只会收到，我们在这里忽略了，呃，当呃，右前四次计数，所以现在的计数是零，所以我们的计数器将设定未来的结果，未來已經決定了，所以这就是我们要做的设计，使用
    future进行同步，这是一个相当好的技术。
- en: 可以确保事情一致发生，他们显然，不会同时发生，但是有了asni o事件循环解决方案，这就足够满足我们的目的了，呃，有编码权，呃，所以让我把你转到屏幕上，在那里你可以看到代码，酷，你知道吗。脉冲三角洲与节拍器
    我描述给你 所以再次，让我们把美好的东西藏起来，呃，非常复杂，一系列的鼓和切换到另一个步骤，已经在使用节拍器了，所以节拍器是一个会从我们身上滴答下来的东西，每当时钟发生的时候。我们唯一需要做的就是重新设置它，每当我们按下启动键，所以大家都知道我们现在就开始，所以现在是第一个音符，我们应该从这一刻开始，所以它是节拍器类的对吧，让我们看看这是如何实现的，只是个节拍器。我们创造的每个性能对象都会自动得到一个，由于工厂的使用，头的功能，这就是我们需要做的一切，但现在的重量法，而不是运行异步或天真地睡觉，它用这个重量来计算
    x脉冲，你已经看到的驱逐重量的结构。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 可以确保事情一致发生，他们显然，不会同时发生，但是有了asni o事件循环解决方案，这就足够满足我们的目的了，呃，有编码权，呃，所以让我把你转到屏幕上，在那里你可以看到代码，酷，你知道吗。脉冲三角洲与节拍器
    我描述给你 所以再次，让我们把美好的东西藏起来，呃，非常复杂，一系列的鼓和切换到另一个步骤，已经在使用节拍器了，所以节拍器是一个会从我们身上滴答下来的东西，每当时钟发生的时候。我们唯一需要做的就是重新设置它，每当我们按下启动键，所以大家都知道我们现在就开始，所以现在是第一个音符，我们应该从这一刻开始，所以它是节拍器类的对吧，让我们看看这是如何实现的，只是个节拍器。我们创造的每个性能对象都会自动得到一个，由于工厂的使用，头的功能，这就是我们需要做的一切，但现在的重量法，而不是运行异步或天真地睡觉，它用这个重量来计算
    x脉冲，你已经看到的驱逐重量的结构。
- en: 这正是我在幻灯片上给你看的，你知道吗，这种设计是用来计算，如果那是四个脉冲，并为未来设定一个结果，实际上我们可以看到，呃，点击这里，所以等待 x脉冲，我们正在做很多倒计时，对吧，就等着吧。所以当这些脉冲，脉冲的数量，嗯，你知道过去我们会回来，反过来，它将如何返回，所以一切都很好地结合在一起，现在一切都很好，所以倒计时是未来的一个子类，它的功能就是，你知道吗，呃，每滴答一次倒计时。最后当值为零时，让我们设定结果，我们做对了，节拍器有点像多重倒计时，通过它，我的意思是它有所有的计数在我们的申请，所以我们可以复制这个，所以会有来自电路的时钟信号，呃，我们只收到了一次。我们敲了一下节拍器，但没关系，有多少个倒计时
    当前与滴答活跃，我们在倒数，如果一个给定的倒计时完成了，我们只是把它从当前发生的事情中移除一次，就好像，你知道吗，它能让我们在一个地方打勾。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是我在幻灯片上给你看的，你知道吗，这种设计是用来计算，如果那是四个脉冲，并为未来设定一个结果，实际上我们可以看到，呃，点击这里，所以等待 x脉冲，我们正在做很多倒计时，对吧，就等着吧。所以当这些脉冲，脉冲的数量，嗯，你知道过去我们会回来，反过来，它将如何返回，所以一切都很好地结合在一起，现在一切都很好，所以倒计时是未来的一个子类，它的功能就是，你知道吗，呃，每滴答一次倒计时。最后当值为零时，让我们设定结果，我们做对了，节拍器有点像多重倒计时，通过它，我的意思是它有所有的计数在我们的申请，所以我们可以复制这个，所以会有来自电路的时钟信号，呃，我们只收到了一次。我们敲了一下节拍器，但没关系，有多少个倒计时
    当前与滴答活跃，我们在倒数，如果一个给定的倒计时完成了，我们只是把它从当前发生的事情中移除一次，就好像，你知道吗，它能让我们在一个地方打勾。
- en: 但在很多地方等待，所以这堂课很短，你可以在 Github上看到，如果你想知道更多细节，但这就是我们需要的魔法来确保我们的，程序员现在完全同步了，这已经是一个，你所知道的，有生产级别同步。所以让我们看看这是否真的有效，好的，现在只有一个地方，陷阱不玩了，因为我们忘了带零钱，通过我们，当然，我指的是我自己，但我喜欢和别人分担我失败的责任，所以现在也是你的责任了，好的，现在我们也有小军鼓了。所以这就是我的成功，因为我那样做了，走吧，好的，他们在玩，我们能不能加快速度
    看看是否还有同步的，完美同步，即使是每分钟240下，他们在完美的东西好吧，所以这就是生产水平，解决时钟提示的时钟同步。但我们还有片状 8号，不喜欢我们那又开又闭的高帽，所以让我们最终让它快乐，为它设计一些高帽子，让我们去片状8，我们会让你停止抱怨，所以让我们等待表演，打鼓，合上帽子，就六个脉冲，所以这将是相当快的。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 但在很多地方等待，所以这堂课很短，你可以在 Github上看到，如果你想知道更多细节，但这就是我们需要的魔法来确保我们的，程序员现在完全同步了，这已经是一个，你所知道的，有生产级别同步。所以让我们看看这是否真的有效，好的，现在只有一个地方，陷阱不玩了，因为我们忘了带零钱，通过我们，当然，我指的是我自己，但我喜欢和别人分担我失败的责任，所以现在也是你的责任了，好的，现在我们也有小军鼓了。所以这就是我的成功，因为我那样做了，走吧，好的，他们在玩，我们能不能加快速度
    看看是否还有同步的，完美同步，即使是每分钟240下，他们在完美的东西好吧，所以这就是生产水平，解决时钟提示的时钟同步。但我们还有片状 8号，不喜欢我们那又开又闭的高帽，所以让我们最终让它快乐，为它设计一些高帽子，让我们去片状8，我们会让你停止抱怨，所以让我们等待表演，打鼓，合上帽子，就六个脉冲，所以这将是相当快的。
- en: 这样做两次，再过一会儿我们要戴上一顶敞着的帽子，如果我们不把那东西也收集起来，什么都不会发生，所以让我们得到这个，我们这里有什么，好的，一种非常非常典型的与领带帽互动的舞蹈方式，但你知道我在烦什么吗。像这样，事件节点流，其中大部分只是时钟信号，让我们忽略任何其他正在发生的有趣事件的信息，所以我不想那样，嗯，让我们做一点改变，让这一点更多一点，让人赏心悦目
    同时也向我们展示了更多好的信息。所以我们只是，你知道吗，很容易天真地，呃，无论现在发生什么事，我们可以做的是认识到 如果我们有两个连续的时钟信号，我们以前天真地用这个来计算后德尔塔，但我们可以用同样的话说，哦。如果我们在一个时钟三角洲，另一个是三角洲，我们不要前进到一条新的线，但只要在同一条线上覆盖，我们，如果我们现在就开始计划，我们会得到什么，现在好多了，你不会轻易失去我们的位置。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做两次，再过一会儿我们要戴上一顶敞着的帽子，如果我们不把那东西也收集起来，什么都不会发生，所以让我们得到这个，我们这里有什么，好的，一种非常非常典型的与领带帽互动的舞蹈方式，但你知道我在烦什么吗。像这样，事件节点流，其中大部分只是时钟信号，让我们忽略任何其他正在发生的有趣事件的信息，所以我不想那样，嗯，让我们做一点改变，让这一点更多一点，让人赏心悦目
    同时也向我们展示了更多好的信息。所以我们只是，你知道吗，很容易天真地，呃，无论现在发生什么事，我们可以做的是认识到 如果我们有两个连续的时钟信号，我们以前天真地用这个来计算后德尔塔，但我们可以用同样的话说，哦。如果我们在一个时钟三角洲，另一个是三角洲，我们不要前进到一条新的线，但只要在同一条线上覆盖，我们，如果我们现在就开始计划，我们会得到什么，现在好多了，你不会轻易失去我们的位置。
- en: 我们总是会看到时钟信号就在那里 作为一个事件，除非有其他事件，所以如果我真的弹了几个音符给你听，就像这些音符出现在美好的事件中，现在你可以在它们流动之前破译它们，很快就飘走了，所以现在如果我们开始。你还会看到一条250和225的信息，所以是的，二百五十，让我们开始五二，让我们停止，好多了，这将使我们以后的实验变得容易得多，让我们在这里停止这个过程，只是玩一下这个，所以每当我玩的时候。高级蟒蛇程序经常，我最终，而且是随机的，所以我们两个都马上做，呃，以某种方式使用它们，所以有一件事我们还没做，但我们现在可以
    而且我们会随着打鼓的音量演奏，所以这里的音量总是一二七，如果我们不指明。但如果我们真的有某种，在这里指定的卷数，所以我们可以，例如一二七，呃，九十五和六十三，所以这只是三个，为了让它真正发挥作用，我们现在可以做一卷，所以只要让他们骑自行车，已经让我们产生了一些问题。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们总是会看到时钟信号就在那里 作为一个事件，除非有其他事件，所以如果我真的弹了几个音符给你听，就像这些音符出现在美好的事件中，现在你可以在它们流动之前破译它们，很快就飘走了，所以现在如果我们开始。你还会看到一条250和225的信息，所以是的，二百五十，让我们开始五二，让我们停止，好多了，这将使我们以后的实验变得容易得多，让我们在这里停止这个过程，只是玩一下这个，所以每当我玩的时候。高级蟒蛇程序经常，我最终，而且是随机的，所以我们两个都马上做，呃，以某种方式使用它们，所以有一件事我们还没做，但我们现在可以
    而且我们会随着打鼓的音量演奏，所以这里的音量总是一二七，如果我们不指明。但如果我们真的有某种，在这里指定的卷数，所以我们可以，例如一二七，呃，九十五和六十三，所以这只是三个，为了让它真正发挥作用，我们现在可以做一卷，所以只要让他们骑自行车，已经让我们产生了一些问题。
- en: 因为我需要把它作为一个迭代器，是迭代工具，所以我们需要一个音量，这就是同时叙述编码的危险，就像你在蹦蹦跳跳，这就是为什么我不想这样做整个展示，那对你来说会很烦人的，作为失败的见证人，总之。已经在不断循环，让我们看看这听起来怎么样，所以它已经产生了这种回声效应，我们每三个音符，但如果它与军鼓的音符不同步，可能会更容易听到，这通常被称为多节律，不同的曲目不同的是，你知道吗。乐器现在要在不同的米里演奏，但他们会同意的是
    时钟，所以这听起来已经相当丰富了，变化极小，这已经很有趣了，我们做的事情很丰富，如果我们放慢军鼓的速度两次，我们可以增加更多，所以不要着急。因为它现在创造了这种陷阱，你知道吗，嗯，某种音乐曲调的鼓声，现在它的速度已经慢了一点，只有很少的代码，我们显然可以进一步调整，我们可以，例如，我们随机决定
    要么继续这样做，就像你知道的，或者跳过它。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我需要把它作为一个迭代器，是迭代工具，所以我们需要一个音量，这就是同时叙述编码的危险，就像你在蹦蹦跳跳，这就是为什么我不想这样做整个展示，那对你来说会很烦人的，作为失败的见证人，总之。已经在不断循环，让我们看看这听起来怎么样，所以它已经产生了这种回声效应，我们每三个音符，但如果它与军鼓的音符不同步，可能会更容易听到，这通常被称为多节律，不同的曲目不同的是，你知道吗。乐器现在要在不同的米里演奏，但他们会同意的是时钟，所以这听起来已经相当丰富了，变化极小，这已经很有趣了，我们做的事情很丰富，如果我们放慢军鼓的速度两次，我们可以增加更多，所以不要着急。因为它现在创造了这种陷阱，你知道吗，嗯，某种音乐曲调的鼓声，现在它的速度已经慢了一点，只有很少的代码，我们显然可以进一步调整，我们可以，例如，我们随机决定要么继续这样做，就像你知道的，或者跳过它。
- en: 或者只是你知道休息一会儿，例如我们可以选择随机大于一半，所以有一半的时间我们会这样做，一半的时候我们不会，我们要等多久，例如，因为这是二四，十二和十二，我们可以等着说，一半。所以只有12个重新安排高帽子，不知何故，让我们看看这是如何工作的，是啊，所以这已经给了我们一些丰富的鼓声，用非常小的编码，但这只是鼓声，单声道电台呆在这里就像一个相当无聊的，做得不多，我是的，我同意。这并不完美，我们需要利用它，所以要利用它，让我们进入下一步，现在就把我们精彩的序列藏起来，藏匿和下一步的移动，这将是第十五步，可能是我们和吉特的最后一场比赛，现在我们只需要在视觉演播室里做更多的编码。所以我们已经有了一个基线，我来恢复我们的鼓声，所以我不会忘记，有了这些改变，首先我们有一场戏，具有高级功能的鼓，我创建了一个地方基地，我们也可以使用的功能，所以它只是一条线
    我们可以用它来发出声音。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 或者只是你知道休息一会儿，例如我们可以选择随机大于一半，所以有一半的时间我们会这样做，一半的时候我们不会，我们要等多久，例如，因为这是二四，十二和十二，我们可以等着说，一半。所以只有12个重新安排高帽子，不知何故，让我们看看这是如何工作的，是啊，所以这已经给了我们一些丰富的鼓声，用非常小的编码，但这只是鼓声，单声道电台呆在这里就像一个相当无聊的，做得不多，我是的，我同意。这并不完美，我们需要利用它，所以要利用它，让我们进入下一步，现在就把我们精彩的序列藏起来，藏匿和下一步的移动，这将是第十五步，可能是我们和吉特的最后一场比赛，现在我们只需要在视觉演播室里做更多的编码。所以我们已经有了一个基线，我来恢复我们的鼓声，所以我不会忘记，有了这些改变，首先我们有一场戏，具有高级功能的鼓，我创建了一个地方基地，我们也可以使用的功能，所以它只是一条线我们可以用它来发出声音。
- en: 所以这已经起作用了，现在每当我们开始和停止信号之前 我们只是在为鼓创造一个任务，现在我们也在为基线创建一个任务，同样地，当我们停下来的时候，我们将启动鼓机，取消鼓机和取消基线
    现在以及，呃也让它静音。原来如此，它本质上是现在的任务被称为模拟合成，因为它是模拟合成器，到目前为止，它没有做太多的事情，就像我们的鼓机，一开始是一二音，每两个季度，所以每半个音符加上半个音符的
    k，哪一个是默认的。但我们可以用它来看看它是如何改变的，所以这里会有一些音乐间隔，我现在要用，但是不用担心，如果你不是，你很熟悉这背后的音乐理论，呃，这是我们以后可以讨论的事情，如果你有兴趣，我可以在另一个沟通渠道解释。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这已经起作用了，现在每当我们开始和停止信号之前我们只是在为鼓创造一个任务，现在我们也在为基线创建一个任务，同样地，当我们停下来的时候，我们将启动鼓机，取消鼓机和取消基线现在以及，呃也让它静音。原来如此，它本质上是现在的任务被称为模拟合成，因为它是模拟合成器，到目前为止，它没有做太多的事情，就像我们的鼓机，一开始是一二音，每两个季度，所以每半个音符加上半个音符的
    k，哪一个是默认的。但我们可以用它来看看它是如何改变的，所以这里会有一些音乐间隔，我现在要用，但是不用担心，如果你不是，你很熟悉这背后的音乐理论，呃，这是我们以后可以讨论的事情，如果你有兴趣，我可以在另一个沟通渠道解释。
- en: '![](img/8694070045052bfc4f228cfd82a70248_10.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8694070045052bfc4f228cfd82a70248_10.png)'
- en: 所以现在让我们看看这个是做什么的，好地方，发生的事情不多，但因为我可以玩的过滤器，已经很有钱了，好的，但我们是来给蟒蛇编码的，所以让我们把基线变得更有趣一点，所以我们的基线就在这里，就像太阳一样。因为它是单音合成器，你可能在那里想得很好，我们可能对此无能为力，呃，但事实上，这并不完全正确，U，我们能做的是，我们可以把这里的衰变改为一点零，这是真正的音乐家
    在真正的乐器上做不到的，你不能就这么。你知道吗，按下一个音符，保持它百分之百的四分之一音符，然后立即切换到另一个四分之一音符，这对我们来说是行不通的，这些是计算机，我们实际上可以做到这一点，所以我们能做的是，在一堆笔记中循环。通过这样做实现呃，一些
    rpg权利，就像那些东西通常被称为吃 rpg的人，所以我们感兴趣的笔记，一开始会说是 c，但之后我们可以说，我们加一些间隔，所以如果我，在这里切换一下，如果你看看这些笔记。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在让我们看看这个是做什么的，好地方，发生的事情不多，但因为我可以玩的过滤器，已经很有钱了，好的，但我们是来给蟒蛇编码的，所以让我们把基线变得更有趣一点，所以我们的基线就在这里，就像太阳一样。因为它是单音合成器，你可能在那里想得很好，我们可能对此无能为力，呃，但事实上，这并不完全正确，U，我们能做的是，我们可以把这里的衰变改为一点零，这是真正的音乐家在真正的乐器上做不到的，你不能就这么。你知道吗，按下一个音符，保持它百分之百的四分之一音符，然后立即切换到另一个四分之一音符，这对我们来说是行不通的，这些是计算机，我们实际上可以做到这一点，所以我们能做的是，在一堆笔记中循环。通过这样做实现呃，一些
    rpg权利，就像那些东西通常被称为吃 rpg的人，所以我们感兴趣的笔记，一开始会说是 c，但之后我们可以说，我们加一些间隔，所以如果我，在这里切换一下，如果你看看这些笔记。
- en: 这将是一个 c的音符，如果我们加上一个完美的5，我们会得到这样一张纸条，一切都会好起来的，如果我们加上12，相反，我们要从这里到这里，是一个八度，一样的，如果我们加上一个八度和一个完美的五度。我们要到这里，所以我们可以做这样的序列，合成器就是以，它们经常与
    rpg发生器结合使用，所以让我们尝试这样的事情，我们可以在这里再加一个八度，我们可以加一个八度，这里有四个，非常适合。我们可以加上一个八度和一个完美的，这里有五个，然后我们可以把完美的五个加起来，所以这将是一个完美的八度，比上次低一个八度，这也很令人兴奋
    因为那是五个音符，又来了，这将是一个多节奏，如果我们穿越它。同时注意到一张纸条，值得注意的是，我们要演奏的音符就是音符，但让我们让他们很快，相反，让我们看看会发生什么，我们需要再次开始，很酷
    同时发生了一件事，但即使是单音合成器实际上也可以让你演奏一个音符。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是一个 c的音符，如果我们加上一个完美的5，我们会得到这样一张纸条，一切都会好起来的，如果我们加上12，相反，我们要从这里到这里，是一个八度，一样的，如果我们加上一个八度和一个完美的五度。我们要到这里，所以我们可以做这样的序列，合成器就是以，它们经常与
    rpg发生器结合使用，所以让我们尝试这样的事情，我们可以在这里再加一个八度，我们可以加一个八度，这里有四个，非常适合。我们可以加上一个八度和一个完美的，这里有五个，然后我们可以把完美的五个加起来，所以这将是一个完美的八度，比上次低一个八度，这也很令人兴奋因为那是五个音符，又来了，这将是一个多节奏，如果我们穿越它。同时注意到一张纸条，值得注意的是，我们要演奏的音符就是音符，但让我们让他们很快，相反，让我们看看会发生什么，我们需要再次开始，很酷同时发生了一件事，但即使是单音合成器实际上也可以让你演奏一个音符。
- en: 然后在上面演奏东西，现在不起作用了，因为我无法维持，但如果我坚持，它一直在播放，我可以在上面播放其他音符，然后停止播放，在这种情况下，它将回到戏剧中，演奏的第一个音符，所以我们现在就可以开始了。我们工作过的那个吃
    rpg的家伙，又来了，所以这将是基地，有点，听起来是一样的，但我的意思是不同的词，每一个，说，96个脉冲，每96个脉冲就有一个，例如：让我们只留下一点，哦，所以我们坚持了很久。好久不见，现在我们这里的
    rpg，async def rpgator，这将是一个单独的核心例行公事，但既然我们已经在这里玩了，我们能做的就是确保少一点，实际上我们可能想在这里加两个八度。在这里我们想再加两个八度，为了保持这个不同步，所以更有趣的事情正在发生，我可以在这里加上一个八度，所以是五，嗯，现在这个要播放，但如果我玩得烂醉如泥，嗯，这实际上不会做任何有趣的事情。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在上面演奏东西，现在不起作用了，因为我无法维持，但如果我坚持，它一直在播放，我可以在上面播放其他音符，然后停止播放，在这种情况下，它将回到戏剧中，演奏的第一个音符，所以我们现在就可以开始了。我们工作过的那个吃
    rpg的家伙，又来了，所以这将是基地，有点，听起来是一样的，但我的意思是不同的词，每一个，说，96个脉冲，每96个脉冲就有一个，例如：让我们只留下一点，哦，所以我们坚持了很久。好久不见，现在我们这里的
    rpg，async def rpgator，这将是一个单独的核心例行公事，但既然我们已经在这里玩了，我们能做的就是确保少一点，实际上我们可能想在这里加两个八度。在这里我们想再加两个八度，为了保持这个不同步，所以更有趣的事情正在发生，我可以在这里加上一个八度，所以是五，嗯，现在这个要播放，但如果我玩得烂醉如泥，嗯，这实际上不会做任何有趣的事情。
- en: 所以让我和一半腐烂的东西一起玩，所以我们会每半个小时回到基地节点，有趣的是 如果我们有另一张纸条，也就是说，呃，没有权利，所以休息吧，我们不会玩任何东西，所以玩，谢谢，呃，谢谢，如果没有纸条，所以。如果没有注意，我们不想玩，我们要等，所以我们要等6个，但除此之外，我们将能够演奏一个音符，所以现在看，我很高兴，我们成功地，嗯，使用了非价值，在有条件的，所以我们永远不会在这里得到一个没有，干得好。又这么酷，如果我们就这样离开，什么都玩不转，所以让我开始我们的事，看看这听起来会怎么样，哈哈哈哈，如果没有支持，现在，有趣的是，我们还可以做一些事情，比如在节点之间添加一些滑翔，它不合成
    也不支持。很甜蜜，但是好吧，我仍然想向你们展示的是，这可以是互动的，不仅仅是一个意义上的，我可以在这里转动旋钮，我其实可以，就像从代码中影响我们的测序器一样，通过玩一些其他的键盘，就像。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我和一半腐烂的东西一起玩，所以我们会每半个小时回到基地节点，有趣的是如果我们有另一张纸条，也就是说，呃，没有权利，所以休息吧，我们不会玩任何东西，所以玩，谢谢，呃，谢谢，如果没有纸条，所以。如果没有注意，我们不想玩，我们要等，所以我们要等6个，但除此之外，我们将能够演奏一个音符，所以现在看，我很高兴，我们成功地，嗯，使用了非价值，在有条件的，所以我们永远不会在这里得到一个没有，干得好。又这么酷，如果我们就这样离开，什么都玩不转，所以让我开始我们的事，看看这听起来会怎么样，哈哈哈哈，如果没有支持，现在，有趣的是，我们还可以做一些事情，比如在节点之间添加一些滑翔，它不合成也不支持。很甜蜜，但是好吧，我仍然想向你们展示的是，这可以是互动的，不仅仅是一个意义上的，我可以在这里转动旋钮，我其实可以，就像从代码中影响我们的测序器一样，通过玩一些其他的键盘，就像。
- en: 你知道这个特殊的乐器 还有另一个合成器 现在被消音了，好吧，因为一个是粉红色的，所以我可以把它当键盘用，呃，那就太好了，如果这个键盘影响了我们的音序器，所以让我们尝试这个权利，我们做点什么吧。我先去掉这个八度音阶，就像完美的，但不是只在这里放一个音符，喜欢就好了，如果我们收到任何纸条，我在这里玩键盘，为了达到这个目的，我们唯一需要做的就是，幸运的是对另一种信息做出反应对吧，所以要做到这一点。让我在这里快速输入，所以我们需要的是做出反应，关于事件权利的笔记，就像呃，你可能会觉得，可能注意到了，我们要怎么处理这个接收器里的纸条，好吧，我们实际上无法接触到音序器，但我们可以看到表演，呃。足够好的对象，就像，我们把最后一个音符储存在里面，呃
    物体，所以表现，最后一个音符将是第一个信息，那个 midi消息的另一个字节，对，太酷了，但现在，呃，我对我不满意，因为表演没有，干得好，那么。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道这个特殊的乐器还有另一个合成器现在被消音了，好吧，因为一个是粉红色的，所以我可以把它当键盘用，呃，那就太好了，如果这个键盘影响了我们的音序器，所以让我们尝试这个权利，我们做点什么吧。我先去掉这个八度音阶，就像完美的，但不是只在这里放一个音符，喜欢就好了，如果我们收到任何纸条，我在这里玩键盘，为了达到这个目的，我们唯一需要做的就是，幸运的是对另一种信息做出反应对吧，所以要做到这一点。让我在这里快速输入，所以我们需要的是做出反应，关于事件权利的笔记，就像呃，你可能会觉得，可能注意到了，我们要怎么处理这个接收器里的纸条，好吧，我们实际上无法接触到音序器，但我们可以看到表演，呃。足够好的对象，就像，我们把最后一个音符储存在里面，呃
    物体，所以表现，最后一个音符将是第一个信息，那个 midi消息的另一个字节，对，太酷了，但现在，呃，我对我不满意，因为表演没有，干得好，那么。
- en: 就这么办吧，呃，让我们用最后一个音符作为一个整数，为了避免不得不，你知道吗，要么让它成为可选的，要么处理这个，当我们创建性能对象时，假设最后一个节点最初是零，对吧，呃，或者事实上。也许我们可以说这和我们在基地的纸条是一样的，又是什么，C
    1是36，所以，让我们把它设置为三六，就像最初一样，只是为了有一些明智的关于，所以现在，嗯，我们没有使用完美的力量，这是千真万确的，呃我们可以。而不是玩 c
    one，我们可以玩，呃，演奏的最后一个音符，所以我们可以，例如，做呃，性能最后注，但是为了能够比每96次更快地影响它，嗯脉冲，我们就做24个，所以我们可以更经常地做出改变，好的。所以现在我们在这里演奏最后一个音符，也许在这里我们也可以设置一个音符，不是两者都喜欢，我们设置一个节点，所以不是
    c one，我们要说的是表演，所以现在让我们看看当我们玩的时候会发生什么，好的。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 就这么办吧，呃，让我们用最后一个音符作为一个整数，为了避免不得不，你知道吗，要么让它成为可选的，要么处理这个，当我们创建性能对象时，假设最后一个节点最初是零，对吧，呃，或者事实上。也许我们可以说这和我们在基地的纸条是一样的，又是什么，C
    1是36，所以，让我们把它设置为三六，就像最初一样，只是为了有一些明智的关于，所以现在，嗯，我们没有使用完美的力量，这是千真万确的，呃我们可以。而不是玩 c
    one，我们可以玩，呃，演奏的最后一个音符，所以我们可以，例如，做呃，性能最后注，但是为了能够比每96次更快地影响它，嗯脉冲，我们就做24个，所以我们可以更经常地做出改变，好的。所以现在我们在这里演奏最后一个音符，也许在这里我们也可以设置一个音符，不是两者都喜欢，我们设置一个节点，所以不是
    c one，我们要说的是表演，所以现在让我们看看当我们玩的时候会发生什么，好的。
- en: 你可以从防守中听到，我们正在影响这一点，有件事很烦人，不过，在序列的第一个开始，也不是什么随机的 RPG，所以我想做的是确保当我们在迭代时，就像每四个节点，对，所以在呃，按照音乐播放的顺序。我们希望能一直等下去，所以这是，呃，有趣的是，用
    python实现相当简单，因为你只需要列举出这里发生的一切，你就会看到，就在这里，现在我们唯一需要做的就是确保 如果我和我们要每六分钟拿到这些笔记。所以每个季度会有四个，如果我们要做的是第一节是96除以6，所以如果我们有，呃电流，如果，如果纸条上没有，或者我把我们的96乘以6，九十六乘六，那我们就等着，否则我们就会，呃，RPG，其实我们可以。我们可以把它从这里移走，所以总会有一些
    rpg，不是在我们玩的时候，好的，我看看，挺酷的，对，所以事情是这样的，这件事我们花了一个小时才写好，就像一个解释，所以可能呃，你知道你可以，你可以同时得到它。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从防守中听到，我们正在影响这一点，有件事很烦人，不过，在序列的第一个开始，也不是什么随机的 RPG，所以我想做的是确保当我们在迭代时，就像每四个节点，对，所以在呃，按照音乐播放的顺序。我们希望能一直等下去，所以这是，呃，有趣的是，用
    python实现相当简单，因为你只需要列举出这里发生的一切，你就会看到，就在这里，现在我们唯一需要做的就是确保如果我和我们要每六分钟拿到这些笔记。所以每个季度会有四个，如果我们要做的是第一节是96除以6，所以如果我们有，呃电流，如果，如果纸条上没有，或者我把我们的96乘以6，九十六乘六，那我们就等着，否则我们就会，呃，RPG，其实我们可以。我们可以把它从这里移走，所以总会有一些
    rpg，不是在我们玩的时候，好的，我看看，挺酷的，对，所以事情是这样的，这件事我们花了一个小时才写好，就像一个解释，所以可能呃，你知道你可以，你可以同时得到它。
- en: 当它们不起作用的时候，试图弄清楚事情，现在这里的音序器是，你知道吗，无论是用于模拟合成器 还是用于鼓机 安装一个单一的代码屏幕，它们很容易理解，就像从一个异步程序员的角度来看，非常容易被黑客攻击。所以你可以做一系列的音符，这将在间隔和节奏之间做一些有趣的关系，作为一个蟒蛇程序员，麻烦最小，所以有了这个你就可以制作自我生成的音乐
    连续几个小时都是不同的，您可以创建不会无聊的会话。但仍然会连续几个小时保持音乐，所以这是一个非常强大的技术来做这样的编程，所以为了不让我失去我刚刚写的东西，所以你可以用这个，像你一样，让我看看，改变了什么，是的，伊奥托内·梅因，我先评论一下，这个给你。所以，有这样的评论，酷，呃，那是在，呃，那是在，就像我们实际上可以移动到我这里的主要分支，只是想告诉你一件事，现在删除了，很烦人的是
    它可能会变成黑色，因为我通常都是这么写的，当我不在的时候，呃。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当它们不起作用的时候，试图弄清楚事情，现在这里的音序器是，你知道吗，无论是用于模拟合成器还是用于鼓机安装一个单一的代码屏幕，它们很容易理解，就像从一个异步程序员的角度来看，非常容易被黑客攻击。所以你可以做一系列的音符，这将在间隔和节奏之间做一些有趣的关系，作为一个蟒蛇程序员，麻烦最小，所以有了这个你就可以制作自我生成的音乐连续几个小时都是不同的，您可以创建不会无聊的会话。但仍然会连续几个小时保持音乐，所以这是一个非常强大的技术来做这样的编程，所以为了不让我失去我刚刚写的东西，所以你可以用这个，像你一样，让我看看，改变了什么，是的，伊奥托内·梅因，我先评论一下，这个给你。所以，有这样的评论，酷，呃，那是在，呃，那是在，就像我们实际上可以移动到我这里的主要分支，只是想告诉你一件事，现在删除了，很烦人的是它可能会变成黑色，因为我通常都是这么写的，当我不在的时候，呃。
- en: 录制视频，我想告诉你的是，这里有两件事，就像有一个电路模块，这就是我们在这个视频中讨论的，但还有一个红蓝模块，这个模块使我能够与我的穆格合成器进行交互，我之前给你看的幻灯片，以其他方式很难做到的方式。我已经告诉过你
    单音合成器一次只能演奏一个音符，如果你有不止一个，你可以让它们在彼此之间切换 完成复调。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 录制视频，我想告诉你的是，这里有两件事，就像有一个电路模块，这就是我们在这个视频中讨论的，但还有一个红蓝模块，这个模块使我能够与我的穆格合成器进行交互，我之前给你看的幻灯片，以其他方式很难做到的方式。我已经告诉过你单音合成器一次只能演奏一个音符，如果你有不止一个，你可以让它们在彼此之间切换完成复调。
- en: '![](img/8694070045052bfc4f228cfd82a70248_12.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8694070045052bfc4f228cfd82a70248_12.png)'
- en: 这正是我所做的，穆格母合成器，我有图片中黑色的模块，所以只是为了到达那里，嗯，你知道吗，我刚刚把其中一个命名为红色，另一个命名为蓝色，因为那是中长线的颜色，我为他们准备的，你现在可以把它作为工具。你知道，它只是将来自中音键盘的中音信息倍增，并作为一种单一的乐器做出非常有趣的音乐效果，即使你同时与多个硬件合成器交互。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是我所做的，穆格母合成器，我有图片中黑色的模块，所以只是为了到达那里，嗯，你知道吗，我刚刚把其中一个命名为红色，另一个命名为蓝色，因为那是中长线的颜色，我为他们准备的，你现在可以把它作为工具。你知道，它只是将来自中音键盘的中音信息倍增，并作为一种单一的乐器做出非常有趣的音乐效果，即使你同时与多个硬件合成器交互。
- en: '![](img/8694070045052bfc4f228cfd82a70248_14.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8694070045052bfc4f228cfd82a70248_14.png)'
- en: 我一直在用这个，呃，在我的音乐里好吧，所以在这一点上，我们是在。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我一直在用这个，呃，在我的音乐里好吧，所以在这一点上，我们是在。
- en: '![](img/8694070045052bfc4f228cfd82a70248_16.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8694070045052bfc4f228cfd82a70248_16.png)'
- en: 我们这次谈话的结论，我希望这个有用，随着时间的推移 我在匹兹堡的四五分钟时间，即使在那里 我也想同时教你 asyni o，但我希望通过慢慢地从零开始创造这一切的过程，对你来说变得更自然了。所以里面没有神奇的时刻，你知道这些碎片是如何连接在一起的，即使你自己安装的合成器是不同的，可能没有更新电路和单声道站，你仍然可以把我们刚刚写的代码同时用于你自己的音乐目的。我真的希望这是一个很好的方式来解释
    asyni o是如何工作的，我总是觉得它很巧妙，也许有点烦人，如果你你只是有干巴巴的例子，就像时间睡眠变得不同步，我睡觉是因为他们一点也不理智，将来可能有的合理用例。如果你用
    Asko开发网页，你知道吗，用于 graphql或其他任何东西的逮捕框架，你就可以，想象一下，哦是的，这将同时处理一万个客户，但很难真正听到正确的事情或看到事情同时发生。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这次谈话的结论，我希望这个有用，随着时间的推移我在匹兹堡的四五分钟时间，即使在那里我也想同时教你 asyni o，但我希望通过慢慢地从零开始创造这一切的过程，对你来说变得更自然了。所以里面没有神奇的时刻，你知道这些碎片是如何连接在一起的，即使你自己安装的合成器是不同的，可能没有更新电路和单声道站，你仍然可以把我们刚刚写的代码同时用于你自己的音乐目的。我真的希望这是一个很好的方式来解释
    asyni o是如何工作的，我总是觉得它很巧妙，也许有点烦人，如果你你只是有干巴巴的例子，就像时间睡眠变得不同步，我睡觉是因为他们一点也不理智，将来可能有的合理用例。如果你用
    Asko开发网页，你知道吗，用于 graphql或其他任何东西的逮捕框架，你就可以，想象一下，哦是的，这将同时处理一万个客户，但很难真正听到正确的事情或看到事情同时发生。
- en: 并理解这对我们这里意味着什么，您可以看到有多个非常简单的核心例程，它们使用async并发执行，我和他们为我们做了很多事情，只有鼓声，那是三条轨道对吧，军鼓和高帽，只是自由地不同步，你，知道使用多节奏。他们用了什么东西，呃就像一个相当高级的，手动输入，这是自我生成的，基线也是如此，我们有一个相当先进的
    RPG阅读器，对我们的呃，比如我们实时播放的音符和序列，所以这是个很好的展示，呃，触觉反馈对吧。你可以看到这些事情真的发生了，就像我给你看的那样，合成器，按下节点，玩滤镜，什么什么什么，所以谢谢你，感谢你在这段很长的视频中，嗯，我希望你下次谈话不会迟到，嗯，现在就到这里，在网上找我。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 并理解这对我们这里意味着什么，您可以看到有多个非常简单的核心例程，它们使用async并发执行，我和他们为我们做了很多事情，只有鼓声，那是三条轨道对吧，军鼓和高帽，只是自由地不同步，你，知道使用多节奏。他们用了什么东西，呃就像一个相当高级的，手动输入，这是自我生成的，基线也是如此，我们有一个相当先进的
    RPG阅读器，对我们的呃，比如我们实时播放的音符和序列，所以这是个很好的展示，呃，触觉反馈对吧。你可以看到这些事情真的发生了，就像我给你看的那样，合成器，按下节点，玩滤镜，什么什么什么，所以谢谢你，感谢你在这段很长的视频中，嗯，我希望你下次谈话不会迟到，嗯，现在就到这里，在网上找我。
- en: '![](img/8694070045052bfc4f228cfd82a70248_18.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8694070045052bfc4f228cfd82a70248_18.png)'
