- en: P42：Talk Igor T. Ghisi - Write Less and Test More with Data Regression Testing
    - 程序员百科书 - BV1rW4y1v7YG
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](img/c04482204df1c4db426f7d03f382decf_0.png)'
  prefs: []
  type: TYPE_IMG
- en: 你好，各位，我叫伊戈尔•吉兹，这是蟒蛇二十，我将发表演讲，用数据回归 少写多测试，测试，但首先简单介绍一下我自己，我住在弗洛依德阿波利斯，就像毛岛一样，在巴西南部，我在大学获得了计算力学硕士学位。里约热内卢联邦大学，我从2004年开始研究蟒蛇，从那以后，这是我喜欢的语言，我是里约的技术负责人，这些项目涉及某种流体动力学，但我们也有微孔的解决方案，定性，粒子相互作用，以及其他涉及数值模拟的学科。通常我们使用c++和python混合来构建数值求解器，从2003年开始
    我们使用 python来构建应用程序接口，所以我想我可以说我们在这个意义上是非常早期的采用者，在二千一八。我们将代码库从 python 2迁移到了 python
    3，感谢广泛的测试覆盖，没有与迁移相关的错误 进入生产，我们花了大约十个月的时间 完成了两到三次的迁移，最后，我们非常高兴，松了一口气。
  prefs: []
  type: TYPE_NORMAL
- en: 我们做了一件特别的衬衫来庆祝。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c04482204df1c4db426f7d03f382decf_2.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/c04482204df1c4db426f7d03f382decf_3.png)'
  prefs: []
  type: TYPE_IMG
- en: 因为我们讨论了，我想快速浏览一下这两个，我今天会在这里展示，假设我有一个类，在这里存储汽车规格，我把它变成了一个数据类，但它可能是一个标准的蟒蛇类，我有办法，根据收到车名的名称创建车名。它返回一个汽车规格的对象，此方法的标准单元测试如下所示，我调用这个方法并检查每个对象属性是否具有期望的值，嗯，这没有问题，但首先还有改进的空间，这是一个非常人工的过程，我在逐一检查属性，这里更锋利。我会注意到我忘了测试位移属性，在现实生活中
    这种情况经常发生，还有，如果我有一个有很多很多属性的对象或迷你嵌套对象，测试越来越大，越来越难维持，所以溶液的规模很小。所以我将向你们展示的是如何用这一行替换所有这些断言，这将使测试更加完整，更容易维护，更容易辩论，故障情况下的调试，在我们深入到更多的例子之前，我想正确地定义数据回归，测试，一开始。
  prefs: []
  type: TYPE_NORMAL
- en: 我想在这次演讲中使用回归测试，我发现大多数回归测试的定义都和这个相似，进行回归测试 以确保代码中的更改没有引入任何新的缺陷，但是这个定义适用于我的测试套件的百分之九十九。我几乎所有的测试都是为了预防某种疾病，我就是他，我可能会有一些其他类型的测试，比如阻止软件的性能，不降解到一定程度，或者用这个工具做一些探索性的测试，像假设一样，我可能在做，所以我不仅要防止东西坏了。同时也推动了我代码的发展，但最终，我的测试套件的主要目的是防止软件回归，所以在寻找一个更具体的定义的过程中，我最后得到了一个术语数据回归测试。我在任何经典的软件质量和软件测试书籍中都找不到数据回归测试的定义，所以我想出了这个定义，数据回归测试
    通过比较我更改的代码的输出数据来防止软件回归，使用此代码的前一版本生成的数据，如我所说。
  prefs: []
  type: TYPE_NORMAL
- en: 我在软件测试书上什么也没找到，如果有人知道有什么书提到，请给我发一条推特，但我发现一些线索表明这个想法已经被许多团队使用了，我发现不止一篇博客文章描述了数据库回归测试，在那里。他们比较由代码的不同分支填充的数据库，以检测软件中的回归，众所周知的
    plot库 matplotlib定义了一种叫做图像比较测试的东西。他们有测试从代码的代码反转生成图像 并将它们与一组参考图像进行比较，如果发现图像之间有任何差异，测试套件失败，所以我不会在这里介绍任何新的东西。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c04482204df1c4db426f7d03f382decf_5.png)'
  prefs: []
  type: TYPE_IMG
- en: 它是我们为数据回归测试创建的第一个帮助工具，旨在改进类似于 matplotlib的三种 d渲染算法的测试，两者产生一个图像，并将其与参考图像进行比较，保存在寄存处。当时我们还在使用
    python标准单元测试框架，大约二十三，我们迁移到圆周率测试，这两个人把它发展成一个圆周率测试插件，我们增加了一些比较函数，最终我们在一个单独的库中对它进行了开源。这个库叫做测试回归。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c04482204df1c4db426f7d03f382decf_7.png)'
  prefs: []
  type: TYPE_IMG
- en: 所以我将展示我们如何创建数据回归单元测试，利用圆周率检验和圆周率检验 回归，如果您正在使用其他测试框架，你会发现这些概念并没有那么复杂，您可以创建自己的数据回归工具，我们使用了一些我将在这里展示的想法。这将是很好的，但不需要，如果您了解圆周率测试的基础知识
    以及如何使用 pytest夹具来更好地理解示例，下一个我给你看，所以pytest攻击性可以在pi上使用，也可以用conda对通道进行编码。和文件可在阅读文件，在拖延最激烈的攻击后，这四个固定装置可以使用，对基因文本进行攻击，基本
    python类型的数据攻击，和图像的图像回归，我将用例子向他们展示，所以让我们用新的回归，第一。我将在这里展示的例子 试图模拟一个在科学发展中经常发生的情况，而且先测试是不可能的，有一个先测试的概念，从测试衍生产品的开发，您必须在编写任何真正的代码之前编写测试，测试应该是失败的，然后你写代码使它。
  prefs: []
  type: TYPE_NORMAL
- en: 为了让它过去，作为鲍勃叔叔，把它写进著名的 td定律，您不允许编写任何生产代码，除非它的目的是让一个失败的测试通过，但要做到这一点，您必须从您事先编写的代码中知道您期望的结果。在很多情况下
    这是不可能的，或者很难做到这一点 在数值模拟中一直都在发生，我们不能事先知道，复杂微分方程组的结果，开发人员检查他们的实现是否正确，通常通过在图表中绘制结果或其他类型的可视化。并将其与真实世界的实验或其他研究人员发表的基准进行比较，例如，所以在这种情况下，测试不重新开发，它们主要用于在执行完成后避免侵略，数据回归工具，呃，数据攻击变得相当方便。所以我会使用贝齐尔曲线算法作为一个小时的例子
    我可以提前知道结果，使用许多绘图结构的基本曲线算法 从三个或更多点定义一条曲线，称为反向点，第一个和最后一个点总是曲线的终点，中间等高点定义曲线倾角。
  prefs: []
  type: TYPE_NORMAL
- en: 在这个例子中，我将实现二次贝齐尔从三个等高线点生成一条100点曲线，如果我遵循测试第一的方法，这是我能得到的唯一信息 是第一个和最后一个控制点总是曲线的终点，但画一条直线就能通过测试。我不解出二次贝齐尔方程
    就不知道中间点，尽管方程式没那么复杂，我不认为任何一个通情达理的人会为了一百分而手工做这件事，当然，我可以使用另一个我可以信任的二次贝齐尔实现，但是为了这个例子。假设我唯一的参考资料是我从维基百科得到的这幅画，这就是我的二次贝塞尔实现，让我们看看我是不是做对了，我在这里运行我的代码
    并绘制我的结果，好的，好像是对的，好的，曲线的形状是，2。这几乎和我所得到的作为参考的图像是一样的，但我的测试不够有力，好的，我只是在测试，nio和端点，我能做好什么，我可以选择一些曲线的中间点，我不主张，一点都不优雅，但它起作用了。
  prefs: []
  type: TYPE_NORMAL
- en: 为了避免大多数可能发生的倒退，数据回归方法如何，正如我在第一个例子中展示的，我将把所有的命令替换为一个命令，测试将变得更加完整，更容易维护，所以我声明这个最大的夹具没有回归，并用方法检查路过的烟鬼。我想测试一下，让我们看看会发生什么，所以这里我有我的，我的测试，我的测试失败了，因为消息火没有创建创建数据目录，我们可以看到
    fixture创建了一个与我的测试模型的名称相同的目录，在这个目录中。我们有一个与test函数同名的文件，一份 csv文件，如果我再做一次测试，考试过关 两人过关，除非我有很高的回归率，我在这份简历里有什么，好的，我有两个嘿嘿的内容，我在测试第一行是标题。使用
    dict键，然后我得到了每一个的所有值，哎，我甚至可以把这个绘制到窃听器上，如果我的测试是正确的，所以，非常容易在测试生成的数据上调试我的数据，让我们试着做一个回归，看看会发生什么。
  prefs: []
  type: TYPE_NORMAL
- en: 所以我要在代码中添加一个 bug，我会再做一次测试，所以测试失败了，它显示了获取和预期文件的差异，期望值是 ccv的内容，得到的结果来自我的 Quadri
    Bezier bugage实现。这里是值之间的绝对值差的列，需要注意的是，这个文件应该添加到存储库中，所以你的同事，您的测试将运行持续集成，或在其他显影机，我也可以定义新的回归
    比较的容忍度，所以我们假设，出于某种原因。我的贝兹尔代码会在一些低内存设备中运行，所以为了节省一些运行 我会使用，两个字节漂浮在干草上，而不是浮动六字节或代替八字节，好的，我的曲线是两个右边仍然有相同的形状，但我们跑吧，呃。测试失败了
    因为现在我的程序，我的精确度改变了，为了解决这个问题，我可以设定一个容忍度，好的，我们使用默认容差选项，我们将设定负3的功率公差，因此，如果获得预期有效值之间的差异小于定义公差，测试将。
  prefs: []
  type: TYPE_NORMAL
- en: 还可以使用公差选项为每个阵列单独设置公差，我需要一本关键词是"嘿"的字典，我想设定容忍度，使用 Numpy标准来比较值的公差 定义了一个参数，我们都支持绝对容忍，都支持相对容忍，大多数时候你可以用一个。但是当价值有不同的大小，相对公差可以用来确保你正确地比较了非常小的值，接下来我要展示的是文件回归，做一般文本内容的数据回归，在这个例子中。我将使用一个函数
    将每个 html代码的一部分转换为 markdown，要测试此功能，我们将使用文件回归夹具，我调用检查传递生成的字符串，并使用额外的参数扩展，因此生成的文件具有适当的扩展名。默认是点文本，让我们做测试
    看看会发生什么，所以第一轮测试失败，创建目录，我们有，呃，我们生成的降价，2。他们进行了笔试，以确定笔试是否会通过，让我们强制回归 看看会发生什么，所以在回归的情况下，是啊。
  prefs: []
  type: TYPE_NORMAL
- en: 她的网格信息在线条上打印了一个很好的差异点，呃，已经改变了，所以调试起来很简单，错误消息还打印，呃，a link for the，fixture 生成一个
    html dif，链接被打印在错误消息上。因此，如果您的ci控制台自动解析到文件的链接，它成为在 ci上调试失败测试的一个很好的工具，这就是 html diff的样子，文件攻击
    fixture也非常适合测试基于 Web框架模板的视图。就像我们在烧瓶或丛林里看到的，如果您不熟悉 Web框架，基于模板的视图基本上是一个响应 html文件呈现的
    Web根，它在运行时受阻，可以通过模板文件上的预定义变量对 hyization进行参数化。这里我们有一个模板hello dot html，由root dash
    hello处理，使用线蟒蛇20 20，这里有一个天真的方法来测试它，我希望这并不可耻，因为它有效，但还远未完成。
  prefs: []
  type: TYPE_NORMAL
- en: 以确保在整个 html文件上没有任何更改，在前面的例子中，我用了一个很短的html，所以它适合这个光线，你知道 hml火灾更多的是这样的，有很多元数据，元数据，JavaScript，进口，瓷砖，定义。如果你把视图和内容很好地分开，你不想改变，您不希望这种风格的改变破坏您的测试，所以使用一些
    html解析器来做回归是个好主意，只有在这里重要的 html部分。我使用 beautiful soup 只选择 html文件的 body元素进行回归，它还将减少生成回归文件的大小，让调试变得更容易，我给你看一个，这里的一个例子是我的
    html模板，这是，呃。这是一个大的，在我的测试中，我用漂亮的汤只选一个元素，所以我的回归文件代替了旧的 html，有很多，Includes，样式定义只有我测试的元素，为了证明这一点，让我们回到第一个例子。
  prefs: []
  type: TYPE_NORMAL
- en: 汽车回类和创建汽车名称方法，以下是我们的测试数据回归检查方法 接收任何基于 python的类型，迪克和元组，所以当我们在测试一个物体时，一定是，必须有可能将其序列化为一组基本类型。因为我们使用的是一个数据类，使用
    dict方法很容易序列化 它，任何，任何嵌套的字典，就像在任何其他比赛中一样，任何攻击都会使测试失败，在错误消息中会显示一个很好的差异。数据回归非常适合测试
    web apis，假设这个英雄列表是一个集合，应该通过这里的rest api公开，我将使用烧瓶通过 http方法公开这个集合，这里的第一个根暴露了集合的单个照明。第二条路线返回全部英雄集合，两者都使用
    json作为协议，我可以用这样的数据回归来测试两个端点，客户夹具，模拟浏览器 http get请求 并返回一个烧瓶响应对象，对象有一个方法get json。
  prefs: []
  type: TYPE_NORMAL
- en: 该方法返回相邻的可序列化的dicts，第一次测试，响应内容是表示集合中一个项的单个字典，像这样，在第二种测试方法中，最后但并非最不重要的，我们有图像回归，为图像创建数据回归。假设我们要测试这个用
    matplotlib生成三维图的示例代码，这里我们使用一个字节，我，O，对象欺骗函数，将图像内容写入内存，然后我们在第一次运行时将缓冲区内容传递给图像回归检查方法。图像文件将由测试文件夹中的夹具创建，在回归的情况下，测试消息显示，呃，是的，她的信息显示了一个百分比，这个百分比是通过检查每个像素的rgb值的差异来计算的，您可以使用深阈值选项设置一个阈值。以忽略图像比较中的微小差异，在使用图像回归测试时，一个非常常见的问题是，在不同的平台（如windows和linux）中，一些字体会因微小的变化而受到阻碍，提高这一门槛可能会有所帮助。
  prefs: []
  type: TYPE_NORMAL
- en: 以下是四个最激烈的攻击，完整的 api可以在 docs中找到，阅读文件，我想最后补充一些关于插件使用的注意事项，您可以使用第四代选项生成测试套件的所有回归数据，这将运行所有的测试套件。强制重新生成回归文件，因此考虑我们的web框架视图示例，我们使用文件攻击来比较html文件，假设我们改变了一个
    css类，所有的应用程序页面都使用这个类名。让我使用强制区域更新所有的 html回归文件 没有麻烦，关于插件的依赖性，呃，图像比较，我的测试攻击性不测试，不要自动安装这些依赖项，以避免在不需要的情况下增加环境的大小。你可能有一个项目只使用这种攻击性，例如，你可能不想因此阻止安德烈斯，所以指针和枕头必须手动安装，在结束之前，我想强调另外两个我们在进行数据回归测试时使用的库，第一个是一年一次的圆周率测试。
  prefs: []
  type: TYPE_NORMAL
- en: 这是一个圆周率测试插件，使存储更容易，测试支持文件，假设您想测试一个使用 pi测试数据计算文件行的函数，您可以使用测试模型的相同名称创建一个文件夹，向其添加任何支持文件。通过数据夹具可以很容易地访问这些文件，它是一个路径翻转对象，在示例中，我把支持文件的点文本传给了计数行，数据文件夹的功能内容将被复制到一个临时目录中，因此更改支持文件内容
    不会更改原始文件，你可以用。您还可以在这里使用数据来编写测试生成的文件，不用担心，事后除掉他们，这里我们正在测试一个标签，双空变流器，并使用数据 g编写生成的文件，然后检查它没有任何类型字符，由幕后测试数据使用的测试攻击。它们可以一起使用
    没有问题，因此，考虑预览示例，而不是测试spfile点文本是否没有制表符，我们可以使用文件攻击 使测试方式在防止攻击方面更加有效，所以我在测试整个文件。
  prefs: []
  type: TYPE_NORMAL
- en: 另一个我们经常使用的工具是连环炼金术，See alchemy is a serialization library for sequel，我的模型 SQL炼金术是最常用的
    蟒蛇。我们最初创建这个库是为了为数据库模型构建 web apis，但是，它可以与数据攻击相结合，极大地改进SQL模型的测试，这里我们有两个非常简单的模型，用户和地址，用户有一个一对一的引用地址。用数据回归测试这些模型，我把外键设置为真，所以我对其他人的引用会被序列化为嵌套的迪克特，而不是呃，具有外键值，这是夹具产生的
    l，我的回溯文件，所以收尾，我们定义了数据回归测试的概念。我们通过test插件讨论了pytest回归，它有助于创建数据回归测试，我们没有显示它与一个麻木的海耶斯词典一起工作的回归，文件回归以创建，通用文本的数据回归。
  prefs: []
  type: TYPE_NORMAL
- en: 基本 python类型的数据回归和图像 二进制的图像回归，我们通过测试数据g来展示它，这有助于使用支持文件进行测试，并查看帮助使用数据回归夹具测试 sql炼金术模型的炼金术，如果你还不喜欢圆周率测试。想开始正式的文档是一个很好的起点，不仅仅是初学者，但如果有人想从我的测试中得到更多，我将通过测试来推荐这本书，奥利维亚快速启动指南，在亚马逊上可以买到，布鲁诺是
    pytest的核心开发者之一。阿福的结案陈词是我的私人朋友，但这是一本很棒的书，快速开始标题可能会给人错误的印象，认为它只涵盖了基础，但这本书非常详细地解释了圆周率测试的主要特征，原来如此，我希望这对你们大家都有用，我想感谢大家。以及我们的同事和以前在里约的同事，以某种方式合作
    构建了我在这里展示的工具，特别感谢蟒蛇组织，他们为这次伟大的会议付出了如此多的努力，不幸的是 今年，它帮不上忙，不可能发生的，挡道，我们都希望。
  prefs: []
  type: TYPE_NORMAL
- en: 你可以通过推特联系我，或者你可以离开我离开，视频评论区有任何问题，你可以在我的 Github上找到幻灯片和源代码，我会把它钉在我资料的最上面。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c04482204df1c4db426f7d03f382decf_9.png)'
  prefs: []
  type: TYPE_IMG
