- en: P10：Sponsor Workshop Capital One Steven Lott - Type Hints Putting more Buzz
    in your - 程序员百科书 - BV1rW4y1v7YG
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](img/f76102f3eab92c899a200eb17bfabe57_0.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/f76102f3eab92c899a200eb17bfabe57_1.png)'
  prefs: []
  type: TYPE_IMG
- en: 大家好 欢迎来到虚拟蟒蛇二十，我叫斯蒂芬•洛特，包装出版的作者和第一资本的首席软件工程师，我想感谢你们来参加这个研讨会，我将简单介绍一下类型提示是如何特别有用的，以及它们如何给你的汽水带来更多的嗡嗡声。我会试着让这个适合新的开发人员，但我也会尝试接触一些更高级的话题，如果你想跟进，你需要3号蟒蛇，七个或更新的安装和运行在您的计算机上，是的，我真的要谈谈那个令人耳目一新的面试问题，实际上。我认为对于相对简单的int类型示例来说，它是一个方便的框架，可以变得相当复杂。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f76102f3eab92c899a200eb17bfabe57_3.png)'
  prefs: []
  type: TYPE_IMG
- en: 让我们在整个演讲中开始一个重要的信息，类型提示只是给人们信心的众多工具之一，你的应用程序或者你的框架或者你的包真的很有效，类型提示并不能减少单元测试的需求，它可能会稍微减少您需要编写的文档。但我只说了几句
    我喜欢更多工具的想法，每个工具都能很好地完成特定的工作，所以我们要讲什么，我来看看这五个主题，我要讲一点关于安装我的圆周率，所以你有你需要的工具。我将会讲到
    你可能也想用毒理检验来自动化你的测试，我们将看一些简单的类型暗示案例，第一，这是给那些对整个想法陌生的人的，一旦我们了解了基本情况，我们可以看看 python内置的数据结构。看看我们如何使用类型提示来确保数据结构被正确地使用，Python给了我们很多灵活性，我们需要明智地使用它，我将展示一个处理正向引用和循环引用的重要技巧，最后我想谈谈调试，这一点很重要。
  prefs: []
  type: TYPE_NORMAL
- en: 因为我们经常想象我们知道数据结构是什么样子的，但我们并不总是同意我的圆周率在我们的代码中发现的东西，所以通过调试，我是说，揭示了我的圆周率所发现的，这样我们就可以在修复代码和修复提示之间做出选择。我最初的计划是开一个工作室，但没有成功，当您在您最喜欢的工具中尝试一些示例时，让我等待是没有意义的，相反，我建议你暂停一下，自己尝试，然后点击播放进入下一个话题，我不介意在你玩密码的时候
    等你。所以这里的第一部分是一些基本的工具，建立你的工作环境，您可以开始向代码中添加类型注释，而无需使用当前版本的python，如果您想检查类型提示，但是你需要我的圆周率工具。那么我的圆周率做什么
    我的圆周率读取你的代码 并检查类型注释，什么是重要的，这里的类型提示检查不是 python运行时的一部分，只有暗示，一个常见的做法是检查提示，在运行单元测试的同时，就个人而言。
  prefs: []
  type: TYPE_NORMAL
- en: 我喜欢在做完单元测试后检查提示，我想知道代码基本上是工作的，然后才试图找出我在哪里得到了令人困惑或误导性的类型提示，那么我们先如何使用圆周率工具呢，你得安装它。它的安装方式就像许多蟒蛇工具的安装方式一样，我使用了
    python减去 m pip命令，因为这似乎是确保，虚拟环境设置都被正确地尊重，一旦你有了我的圆周率，然后你可以运行我的圆周率命令，给它一个模块。或者给它整个项目的
    python代码树，我试着把我的代码保存在一个 src文件夹源代码中，所以我可以一次检查所有的东西，如果你是蟒蛇的新手，让我告诉你什么，我假设你的项目组织看起来。如果你比你以前见过的更有经验，如果你做事正确，然后你就可以从我的馅饼里得到一个快乐而成功的信息，我喜欢有一个src文件夹源文件夹，里面有所有的python模块，在这个例子中。
  prefs: []
  type: TYPE_NORMAL
- en: 我只有一个模块fizzbuzz pi，那个模块只有一行代码，甚至没有模块文档字符串，哪一个，如果我在代码审查时看到这个代码，我会向自己抱怨，希望你能放我一马，这里没有模块级的文档字符串。我在这个仓库里连一个自述文件都没有，有点问题，我有一个测试目录，我通常会把单元测试放在这里，我没有写任何单元测试，因为我真的想把注意力集中在输入类型上，不是整个软件的全部质量。我在这里建议你考虑做一个毒理二级档案，这是个好主意，所以你可以通过毒理测试测试我的圆周率，通过谈话凳测试你的单元测试，如果你是新来的，你可能想暂停一下，确保你有一个这样的项目，你可以和他一起工作。但你可以手动运行我的圆周率，你以后可以添加谈话内容，我会在下一张幻灯片上向你展示
    toi文件的样子，好吧，文件里有什么，Toi文件有一组最少的命令来检查类型提示，然后运行单元测试。
  prefs: []
  type: TYPE_NORMAL
- en: 因为我没有任何单元测试，但这不会有太大的进展，如果你像这样用这个，当你推进你自己的项目时，但是，您将开始在您的测试目录a中包含更多的单元测试。您可能还想开始使用
    por pi薄片来检查其他代码问题。您可能使用黑色格式化您的代码，文件里有很多东西，但首先，我们要运行我的圆周率，到目前为止，为了增加我们的代码真的能按预期的方式工作的信心，基本的类型注释是非常有帮助的，为了检查那些类型注释。像我的圆周率这样的工具是必不可少的，您运行工具的方式与您早期运行单元测试的方式相同，当你做开发的时候，所以让我们进入有趣的部分，我们如何编写类型注释，我想从一个小问题开始，以展示类型提示的外观。以及工具是如何工作的，从整个演讲的标题来看，你可以猜到，这个小问题将会变成，是的，嘶嘶作响的派对游戏，你不经常认为它是一口井，不是每个人都认为这是一些人的派对游戏，只是一个奇怪的编程练习。
  prefs: []
  type: TYPE_NORMAL
- en: 但最初它实际上是一个派对游戏，每个人轮流大声数数，有两个额外的规则，没有人说一个可以被三整除的数字，而是说一个可以被三整除的数字，他们说菲兹，没有人说一个数字可以被5整除，他们说嗡嗡声代替。所以最初的打印声明，这是唯一的台词，代码的，在我的例子中，项目打印了一个两个嘶嘶作响的嗡嗡声，嘶嘶七八九，不是九，我是说汽水，你看，我连汽水的事都做不好，试着解释它，读剧本，偶尔会很有挑战性。因为你得记住下一个数字是什么，它是否能被3或5整除，那么为什么这种愚蠢的行为会流行呢？在我看来，它之所以受欢迎，是因为任何值得解决的问题都值得过度解决，这张照片是我的船的一部分，我问自己。为什么我有五个独立的排水沟，而我可以把五个软管塞进一个排水沟，这是惊人的过度解决问题，所以让我们过度解决汽水问题，我们去面试吧，他们经常想看你写的声明和一些，如果白板上的语句或类似的东西。
  prefs: []
  type: TYPE_NORMAL
- en: 你现在可能想试试这个尺寸，这样在你看我的之前 你就有了自己的解决方案，考虑命名您的文件，用一个点圆周率把它和我要展示的例子分开，超工程无纺布解决方案，我叫它嘶嘶声
    2，为了将它与种子文件分开。种子文件中只有一个文字打印语句，我在这里定义了一个名为 phibuzz的函数，它将计算给定值n的模糊性或嗡嗡性，并返回嘶嘶声或嗡嗡声或数字。然后我使用打印那个
    fizz buzz函数 在一个 force语句中打印 fizz或者 buzz或者数字，在下一张幻灯片中，我要做的是向函数定义中添加类型注释，在函数中添加类型提示非常容易。在类方法定义中添加它们是非常容易的，它们可以添加到赋值语句中，但那对他们来说可能不是最好的地方，如果你以前研究过这个问题，您可能会注意到这个版本中有一个微妙的逻辑错误，作为更大故事的一部分。
  prefs: []
  type: TYPE_NORMAL
- en: 我把窃听器留在了里面，那种类型只暗示，不会发现所有的问题，还需要单元测试，所以请随意输入这个或者这个的一个版本，好让你说服自己，它至少看起来起作用了，然后我们继续在下一张幻灯片上添加类型针。这里我在函数定义中添加了一些额外的类型提示语法，在每个参数之后，有结肠，然后类型名称，在冒号前面的所有参数之后，作为一个整体的功能，有一个破折号，更伟大的一种由两个字符组成的箭头，函数的返回类型。其他什么都没变，它与没有类型提示的版本运行相同，因为它们并不真正用于
    python运行时，它们被外面的工具使用，就像我的圆周率，类型提示和扰流器警报没有运行时成本，我的私家侦探对此并不满意，别担心。您可能已经发现了问题，没关系，我做这个已经有几年了，但我还是会盯着它看，代码完全不明白为什么我的馅饼要那样，有些人可以发现问题，有些人不能不担心，我们会经营我的馅饼，它会告诉我们问题出在哪里。
  prefs: []
  type: TYPE_NORMAL
- en: 当我在源目录上运行我的圆周率时，我的圆周率被第四行弄糊涂了，整数与字符串，那里有冲突，让我回到源头，向你展示这场冲突到底是什么，这是我的嘶嘶声功能，我在这里放了几个盒子
    向你展示我的圆周率 在抱怨什么。我将返回类型注释为字符串，但实际的返回语句混合了字符串和整数，其中三分之二是弦乐，第三个是整数，实际代码与类型提示不太一致，我们在这里花了很多时间，当我们注释代码的时候，我们在想该怎么办。当类型提示和代码不一致时，以及重大的决定，当我们的代码和类型提示出现问题时，我们总是有两个选择，我们可以修复代码，使其与int类型匹配，或者我们可以修复
    int类型，所以它符合，这是一个永恒的问题。是正确的，我在右边放了吓人的引语，因为你的选择取决于，你的初衷是"嘶嘶作响"功能应该返回一个字符串，如果是这样的话，修复代码，最初设计的
    fibuzz函数是返回整数还是字符串，如果是这样。
  prefs: []
  type: TYPE_NORMAL
- en: 那么我们必须将int类型描述为整数和字符串的并集，这个决定，在代码和提示之间的工程决策，是一种永恒的平衡行为 基本上是永远的，所以我们必须在好的代码和好的提示之间取得平衡，大多数时候。好的代码有好的提示，我们可以设计代码，它会有优雅，可理解的暗示，不会有神秘，报价是这样的，如果它像鸭子一样走路，像鸭子一样嘎嘎叫，然后我说它是一只鸭子，这是描述管道打字规则的引语，如果对象有合适的方法。然后它遵循一个定义好的协议，它可以在任何需要协议的地方使用，添加操作符，在python中，加号用于添加各种类型的数字，它连接字符串，它扩展了列表，因为蟒蛇的管道打字是非常随意的。我们可以用简单的类型提示编写可能难以描述的函数，那么我们要问的问题是
    我们应该这样做吗，或者我们应该重新考虑我们在做什么，我认为这是我在开始向所有代码中添加类型提示后学到的最重要的一课。
  prefs: []
  type: TYPE_NORMAL
- en: 当我的字体有问题时，提示，这通常是代码中的设计问题，如果有一个超级复杂的 int类型，这表明有一个更简单的解决方案难以摆脱，所以让我们来谈谈这个复杂性，Python内置数据结构列表，集合，DICT。元组或元组，我是一个双人，覆盖大量编程需求，我们通常需要提供注释来缩小对象应该包含的内容，蟒蛇列表可以包含任何东西，但大多数情况下，在应用程序中，我们讨论的是一个非常特定类型的对象列表。不是任何东西的广义列表，因为我们看到的是商业上的嗡嗡声，让我们看看布景，我们将专门研究一组字符串，这是另一个过度设计的汽水解决方案，而不是简单地打印一个数字的模糊或嗡嗡声，让我们创建一个从数字到。注意它引入的新语法，大写字母
    S是一种类型，设置提示，提示是用集合中的项类型参数化的，在字典的情况下，大写字母有两个参数，键的类型和值的类型，我发现这对于增加重要的清晰度和描述代码非常有帮助，太重要了。
  prefs: []
  type: TYPE_NORMAL
- en: 我决定给它一个三个字母的缩写，我喜欢叫它 hd d，所以你可以看到，我们要生成的是这个目标映射一个字典，这个字典将整数映射到字符串集，这就是目标，驱动其余设计的暗示，所以现在我想重写我的嘶嘶声函数。所以它接受一个整数
    然后给出一组字符串，我可以用它来建立字典，也许是对字典的理解，想了一会儿，也许甚至想暂停一下，输入一些代码准备好了，好的，让我们看看我们怎么能在这个。这里有一个过度工程的解决方案来创建必要的映射，我把它分解成一堆函数，这些函数可以创建不同的字符串集，有一个顶级的fizzbuzz函数，它使用set
    union来结合fizzy函数和buzzy函数的结果。我检查了一下，以确保这三个函数中的每一个都返回了真正匹配类型提示的集合，我敢肯定它们都是一串弦，我的派没有欢乐，仍有问题剧透提醒，正是对词典的理解
    构建了汽水嗡嗡声地图。
  prefs: []
  type: TYPE_NORMAL
- en: 所以我不会给你看 FIZ Buz的输出，我来告诉你，真正的问题原来是，我的圆周率需要一点说服原始代码，创建了一个从整数到字符串集的映射，但我不太清楚，因此考虑到字典理解中相当复杂的语法。我的线人说我需要一个提示，因此，我们在赋值语句中添加了一个类型注释，以阐明我们的意图，因为这是暗示驱动的设计，我们的状态很好，至于知道什么类型的提示
    应该在那里，这里面有很多代码。那个 dict括号之类的东西，如果我们能浓缩一点来澄清我们的意图就好了，再来一点，当我看到笨重的类型提示，我喜欢把它们分成独立的提示赋值语句，所以在这里我创建了一个新的
    int fb映射。我用 int类型向我的圆周率解释 fb映射是由字典或映射理解构建的，我更喜欢这个，但我还没有完成工程，从整数到字符串集的映射，我真正想做的是把既定的定义拿出来，我把这个给了。
  prefs: []
  type: TYPE_NORMAL
- en: 这个额外的类型名称帮助我理解映射是什么，它是从整数到 fibuz状态的映射，Fisbuzz状态在这个版本中被实现为一组字符串，脸书地图的提示变得更简单了，fb映射变量分配变得更简单。但这会在整个应用程序中产生其他连锁反应，等你看到这个，我将把这些简化推广到我的
    fizzy buzzy函数和 fizzzy buzzy函数，每个函数都有一个常见的返回类型。那个类型的名字帮助我理解了它的意图 不是为了创建一个集合，关键是要创建一些东西来显示这个数字的状态或这个数字的属性，这个
    fibuzz状态类型定义给了我一个关于一组字符串是什么意思的小提示，我很喜欢。因此，当您面对繁琐的类型语法时，这种情况经常发生，我认为这真的很有帮助，打破复杂的类型暗示下来，并澄清每个部分的目的，给它一个独特的，有意义的名字，蟒蛇是有类型的。
  prefs: []
  type: TYPE_NORMAL
- en: 使拥有包含包含字符串和数字的元组集合的映射列表变得容易，但是所有这些数据结构意味着什么呢？一些精心选择的类型注释名称可以澄清一个复杂的数据结构，我认为它是非常有益的，几乎所有我们用类型提示做的事情。所以让我们进入一些更高级的话题，类型注释是聋人语句和类语句的一部分，从技术上讲，它们是按照从模块开始到结束的顺序执行的，因为输入的模块，一旦所有的定义都到位了，任何函数都可以指任何其他函数。但在评估定义时，他们必须井井有条，如果我们有相互依赖的定义，我给你们举一个例子，我有一个
    f b状态类和一个 f b映射类，现在，这是相当令人震惊的工程 汽水 嗡嗡声。phibuz状态类定义了一个特定数字的状态，它包括一组字符串值，fb map类是从数字到
    fb状态对象的映射，我在这里放了一些箭头来显示两个类之间的关系，从 fb映射到 fb状态，那个很容易。
  prefs: []
  type: TYPE_NORMAL
- en: 因为状态是先被定义的，而且引用不是方法函数定义的一部分，它是身体的一部分，在所有的定义都到位之前，身体不会被执行，从 fb状态到 fb图的引用，然而，结果并不是很好，它是方法定义的一部分。所以一个解决方案是把
    fb地图移到 fb状态前面，但在某些情况下，我们不想重新安排订单，因为它会让事情变得混乱，在其他情况下，函数定义本身有相互定义，我们可以让他们四处走动。但我们有一个神奇的技巧
    让我们不用担心这些，你几乎看不到这张幻灯片和上一张幻灯片之间的变化，我用一个字符串替换了类型名 fb映射，在进行分析时，我的pi将把字符串名解析为实际的基础类型名。所以现在我们可以让类型引用散布在模块周围，我们真的不需要在细节上费尽心思，就可以在依赖关系中获得正确的顺序，所以我得到了这两个初始化为
    fb映射的 fdb状态。
  prefs: []
  type: TYPE_NORMAL
- en: 我如何使用这些来实际计算每个数字的模糊性和嗡嗡性，有些代码我还没给你看，但我们一会儿就会讲到这一点，也许你想写下你自己的想法，当你想好了再按播放键，这是我在fb状态下的初始化版本，给出了一个数字。我先从一个空集开始，如果这个数可以被3整除，我将结合在一个由汽水组成的集合中，如果它能被5整除，我将在一个由嗡嗡声组成的集合中结合，所以像15这样的数字，我要汽水和嗡嗡声，然后我这里有一个属性定义。它将产生，从
    int类型可以看到一个包含整数和字符串集的元组，因此，这与以前的版本兼容，我们用这种结构工作的地方，我收到了剧透警报，我的圆周率需要帮助，self fb=set
    of。我的π{\displaystyle\pi}想要你们明确地，fb冒号的字符串集合等于空集函数，所以大多数时候在这里学到的重要一课是什么，将类定义放入合理的顺序中
    几乎没有问题，偶尔。
  prefs: []
  type: TYPE_NORMAL
- en: 我们需要在引号中使用类型名，它让我们有一个前瞻性的参考，当我们有循环引用时 这是很重要的，这是一个方便的方法，可以在非常复杂的事情上取得进展，各种纠结的事情，但是如果我们还不能解决这个问题。我们有什么调试工具，又不是说，我们是糟糕的程序员，尽管有时我们中的一些人有这种感觉，大多数时候，这是一个清晰度的问题，我们的意图不够明确，我们以为我们做到了，但我的派有时很需要。我喜欢把我的派想象成那个爱发牢骚的朋友，他总是问，我们真的想这么做吗，我想我可以驾驶我的船经过绿色的布，也许水流真的对我不利，我应该重新考虑，我的私家侦探经常问，你确定，有时候。你不知道为什么我的私家侦探会问这个问题，重要安全注意事项，不是真正的功能，它有一个函数的语法，但它只被我的饼使用来揭示内部实现细节，说明我的圆周率是如何理解该函数的，我给你看一个具体的例子。
  prefs: []
  type: TYPE_NORMAL
- en: 这里是 fb dunder init函数，当我运行我的圆周率，我得到了关于那个自我的警告，fb=set我的pi抱怨说它需要一个self dot fb的注释，当我弄不明白的时候，我问。我在下一行输入了揭示类型，问我的圆周率，它认为变量到底是什么，当我运行我的圆周率，你可以看到下面的输出，它显示出显示的类型是任何，是一种特殊的类型，为了，我不知道可能是什么。这是
    python内部工作方式的默认值，任何类型的都适合那里，我们经常需要将值的定义域从任何东西的集合缩小到字符串的集合，我见过三种常见的地方 复杂的程序，一开始看起来并不复杂。但是当我们试图添加类型提示时，我们发现了一些可能会让我们惊讶的细微差别，特别是复杂性似乎来自三个地方
    我见过蟒蛇鸭打字，意味着不同的运算符和不同的语句 允许许多替代类型，当我们使用这种管道类型时。
  prefs: []
  type: TYPE_NORMAL
- en: 灵活性通常需要将对象描述为不同类型的组合，所以这里是字符串列表和字符串集合的联合，很多奇怪的东西都可以很好地与列表或集合一起工作，另一个隐藏复杂性的地方是一些
    python内部的特殊方法名。Dunder get项目，例如，特别适用于整数和切片对象，这意味着我们需要使用超载装饰器，我们需要定义替代方案来缩小允许的组合，最后，我经常遇到这样的问题，我希望在这里提供一个类型名称。不是这种类型的实例，一般来说，当我们在我的圆周率中使用一个类型名称时，我们是，说实例将是那种类型，但是当我想用一种类型作为一种类型的时候呢，这个类型的括号
    t有一个语法片段，这样我就可以引用对象的类型。不是对象的实例，所以这些都是复杂性的来源，我不得不使用揭示类型来弄清楚到底发生了什么，这是我过去几年学到的重要一课，使用显示式，自由，尽早使用，这样你就能明白你的代码对我来说意味着什么。
  prefs: []
  type: TYPE_NORMAL
- en: 然后决定你是继续沿着这条路走还是改变你的类型 提示，很多事情都很简单，你不需要这个，有几件事很复杂，偶尔我们会转错弯，我们需要彻底地重构，暴露的类型可以帮助，一般来说当我们被逼到角落的时候。我们需要使用暴露型，这是一个建议，也许事情有点太复杂了，我们应该，重新思考它们，并在全球范围内进行一些简化，我想如果你想在你的汽水里有更多的嗡嗡声，一般来说，您希望在代码中力求清晰。我发现当我不能拼出一组清晰一致的输入信息时，我知道是时候喘口气了，离开键盘，喝杯冰茶，想出一个更好、更简单的方法，我喜欢用我的派在我的毒理二级档案里，对，以及我的单元测试，我想我不能再没有它了。我真的很喜欢暗示驱动设计的想法，高清，我通常喜欢先写类型提示，然后弄清楚什么函数会在以后实现这个提示，我认为对于某些类型的设计来说，首先展示暗示是一个很好的自然顺序，添加代码和复杂类型提示难以阅读。
  prefs: []
  type: TYPE_NORMAL
- en: 如果你真的很复杂，带有大量括号的嵌套提示，我建议你应该重构它，我不知道有钥匙的地图列表，两个元组的字符串，值是由三个元组组成的集合，我的天啊，我都不知道这是哪里，这些都是问题，给子结构命名。给自己留下一个穿越数据未来的路线图，你会感谢过去的你
    给了额外的类型，你包括的提示，两个纯技术注释使用带引号的字符串作为向前引用，你偶尔会需要它们的，在字符串周围加上引号会更简单，把整个模块重新排序。当有疑问的时候，使用显示式，它会告诉你什么，我朋友知道你的密码是，我最后的想法是，当我不能简单简洁地描述这些类型时，这可能意味着我没有一个很好的设计，要么，我做得太多了。或者我没有真正缩小类型定义来反映代码中重要的东西，谢谢你加入我，喜欢使用类型提示，它们可能会让你的嗡嗡声更多，永远记住这一点，可能是黑客。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f76102f3eab92c899a200eb17bfabe57_5.png)'
  prefs: []
  type: TYPE_IMG
