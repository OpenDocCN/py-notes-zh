- en: P46：Talk - Joseph Lucas_ Serialization  More than pickling - VikingDen7 - BV1f8411Y7cP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P46：演讲 - 约瑟夫·卢卡斯_序列化 超越腌制 - VikingDen7 - BV1f8411Y7cP
- en: Welcome to this afternoon's sessions here。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到今天下午的会议。
- en: '![](img/d93ae3f3d6226d59cf9cf0a529c49734_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d93ae3f3d6226d59cf9cf0a529c49734_1.png)'
- en: '![](img/d93ae3f3d6226d59cf9cf0a529c49734_2.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d93ae3f3d6226d59cf9cf0a529c49734_2.png)'
- en: Right now we have Joe Lucas making his PyCon debut here talking about serialization
    more。 than pickling。 Let's give him a nice hand。 Thanks everybody。 The alternative
    title could have been serialization and un-opinionated introduction。 We'll talk
    about pickle and some other formats and compare some of the pros and cons。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有乔·卢卡斯在这里首次亮相PyCon，谈论序列化超过腌制。让我们给他一个热烈的掌声。谢谢大家。替代标题可以是序列化和非偏见的介绍。我们将讨论pickle及其他格式，并比较一些优缺点。
- en: I won't be using slides。 I'll be doing this out of Jupyter Notebooks。 So for
    anyone who is not familiar with the format， we kind of have these editable sections。
    where we're going to run some code and see the outputs。 The Notebooks are available
    at this repository and during the presentation I'll be using the。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会使用幻灯片。我将通过Jupyter Notebooks进行演示。因此，对于不熟悉这种格式的人，我们有这些可编辑的部分，我们将在其中运行一些代码并查看输出。这些笔记本可在此存储库中获取，演示期间我将使用它们。
- en: eBird API as an example。 And I think during everyone's PyCon journey there comes
    a time when it would be useful。 to have a publicly available API that you could
    test some stuff with。 They'll give you an API key。 They have a bunch of different
    APIs you can hit。 So I think that's a cool service they provide。 So I'd encourage
    everyone to check that out。 And I'd also like to plug operation code which is
    a nonprofit that gets veterans and their。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: eBird API作为一个例子。我认为在每个人的PyCon旅程中，都会有一个时刻，公开可用的API会很有用，你可以用来测试一些东西。他们会给你一个API密钥。他们有一系列不同的API可以使用。我认为这是他们提供的一个很酷的服务。因此，我鼓励大家去看看。同时我也想提一下Operation
    Code，这是一个非营利组织，帮助退伍军人与他们的家人开始软件开发的职业生涯。如果你是可以从一些指导中受益或有兴趣指导那样的人，请查看一下。
- en: families started in careers in software development。 So if you're someone who
    could benefit from some mentorship or interested in mentoring。 folks like that，
    check it out。 So starting with some definitions， serialization。 It's converting
    data into something that can be stored， transmitted， or reconstructed， later。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 家庭开始软件开发的职业生涯。所以，如果你是一个可以受益于一些指导或有兴趣指导这些人的人，请查看一下。因此，从一些定义开始，序列化。它是将数据转换为可以存储、传输或后续重建的东西。
- en: It's not the act of transmitting or storing those。 It's just converting that
    data into that format。 often like a byte stream。 So what order do we put all these
    bytes in so that we can reconstruct it on the other。 side？ And also it's worth
    saying that deserialization is sometimes hard， right？
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是传输或存储它们的行为。它只是将数据转换为那种格式，通常像是字节流。那么我们如何安排这些字节的顺序，以便我们能够在另一端重建它？同时值得一提的是，反序列化有时是困难的，对吧？
- en: We have to establish these standards and you'll often see deserialization bugs
    causing security。 vulnerabilities。 So the two main categories of serialization
    are plaintext so you could open the file and。 read it or binary where that's not
    going to be possible。 We'll mainly be talking about binary serialization here
    but we may talk about plaintext a little。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须建立这些标准，你会经常看到反序列化的错误导致安全漏洞。因此，序列化的两个主要类别是明文（plaintext），这样你可以打开文件并读取，或是二进制（binary），而那样是不可行的。我们在这里主要讨论二进制序列化，但我们可能会稍微谈谈明文。
- en: bit。 And so why might you need to serialize your data or when are you going
    to do this？
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，为什么你可能需要序列化数据，或者你什么时候会这样做？
- en: One example might be if you've spent hours training a machine learning model，
    how do。 you save that and use it later？ How do you ship it into production？
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一个例子可能是，如果你花了几个小时训练一个机器学习模型，如何保存它并在之后使用？你如何将它部署到生产环境中？
- en: How do you share it with a colleague？ Right， because you don't want them to
    have to go through that retraining process。 Or assume you've built some object
    in memory with costly queries。 Are there expensive monetarily or through time？
    Or time-dependent queries on changing data？ So sure。 you could save that data
    as a CSV or in some sort of database。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你如何与同事分享它？没错，因为你不希望他们再经历重新训练的过程。或者假设你在内存中构建了一些需要高成本查询的对象。这些查询在金钱上或时间上是否昂贵？或者在变化数据上的时间相关查询？当然，你可以将这些数据保存为CSV文件或某种数据库。
- en: But if you've built an object around that data and done some post-processing
    already。 you may want to save that intermediate representation so that you could
    share with colleagues， for。 example。 Or I think the most widely used reason for
    serialization is transmitting data between。 two parties。 When data goes over a
    network it needs to be in a byte stream。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 但是如果你已经围绕这些数据构建了一个对象，并且已经进行了某些后处理，你可能想要保存这个中间表示，以便与同事共享。例如，我认为序列化最广泛使用的原因是两个方之间的数据传输。当数据通过网络传输时，它需要以字节流的形式存在。
- en: how do we put these bytes， in order so that they can be read correctly on the
    other side？
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何将这些字节按顺序排列，以便在另一端能够正确读取？
- en: So we'll take a quick look at the API。 We're just going to make a request for
    recent observations in Utah and look at the first。 result。 And this is just so
    we kind of understand the scenario later。 So the API gives us a bunch of things
    back。 We'll be looking mainly at the common name。 So here the first bird returned
    to us was a Woodhouse's scrub j。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们将快速查看API。我们只是请求犹他州最近的观察结果，并查看第一个结果。这只是为了让我们稍微理解后面的场景。API给我们返回了一堆东西。我们主要会关注通用名称。所以这里返回给我们的第一只鸟是Woodhouse's
    scrub j。
- en: I have no idea what that looks like。 But here's the Latin long where it was
    seen。 So this is the shape of data we'll be processing in this scenario。 So the
    scenario here is we've built this bird counter class and we might instantiate
    some， objects。 And we want to serialize the class so that our peers don't have
    to make the same API call。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我不知道那是什么样子的。但这是看到它的经纬度。所以这是我们在这种情况下将要处理的数据形状。因此，这里的场景是我们构建了一个鸟类计数器类，可能会实例化一些对象。我们希望序列化这个类，以便我们的同事不必做相同的API调用。
- en: or do the same calculations。 And so the class has this variety attribute which
    is just a list of every variety that。 the eBird API returned。 And then we'll build
    some tuples of the lat long locations。 So here we'll instantiate that class to
    an object B and call the getBirds method and then。 kind of inspect some of those
    attributes。 So in this example there were 266 birds that you can see here。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 或者做相同的计算。因此，这个类有一个品种属性，它只是eBird API返回的每种品种的列表。然后我们将构建一些经纬度位置的元组。所以在这里我们将把这个类实例化为对象B，并调用getBirds方法，然后检查其中的一些属性。因此，在这个例子中，有266只鸟可以在这里看到。
- en: And we'll use these attributes as our way to kind of prove or check that the
    deserialization。 is happening correctly through these various methods that we'll
    review over the course of。 the presentation。 In this case the entire process of
    constructing the object and calling the method only took。 in the order of milliseconds。
    But imagine you're making database queries to many databases。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用这些属性作为我们证明或检查反序列化是否正确进行的方式，通过我们将在演示过程中回顾的各种方法。在这种情况下，构造对象并调用方法的整个过程仅花费了毫秒级的时间。但想象一下，你正在对多个数据库进行数据库查询。
- en: fusing that data together。 That could take hours。 And so that might be a case
    where you need to serialize so that you don't have to do。 that work again。 So
    in the Python standard library we have pickle。 And pickle has a lot of great functionality。
    It's very user friendly。 To write an object to a pickle we just need to open a
    file that we can write binary data。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些数据融合在一起。这可能需要几个小时。因此，这可能是你需要序列化的情况，以便你不必再次做这项工作。在Python标准库中，我们有pickle。pickle有很多很棒的功能，非常用户友好。要将对象写入pickle，我们只需打开一个可以写入二进制数据的文件。
- en: to and dump our pickle。 Jupyter has this file explorer functionality here。 So
    we see now we've created this bird。pickle object。 Now we'll load that pickle back
    in to make sure that it is what we thought it was。 So it turns out we can take
    that binary blob， load it back in。 And it is the same thing。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 来转储我们的pickle。Jupyter在这里有这个文件浏览器功能。所以我们现在看到我们创建了这个bird.pickle对象。现在我们将加载这个pickle，以确保它是我们想象的那样。因此，事实证明我们可以将那个二进制块加载回去，结果是一样的。
- en: There are still 266 birds。 The first one is still a woodhouses scrub j。 Now
    one of the use cases I mentioned was collaborating with a colleague。 So let's
    share that pickle with a friend。 So in this new notebook it's a whole separate
    kernel。 None of the variables or anything else are shared with the other notebook。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然有266只鸟。第一只仍然是Woodhouse's scrub j。现在我提到的一个用例是与同事协作。那么让我们与朋友共享这个pickle。在这个新的笔记本中，它是一个完全独立的内核。没有任何变量或其他内容与另一个笔记本共享。
- en: So our friend is going to run the exact same code we just ran to load the pickle。
    And they can't do it。 They get this weird attribute error。 And getting this error
    was actually the thing that motivated me to write this talk。 So I was building
    a capture the flag competition and I wanted competitors to be able to submit。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们的朋友将运行我们刚刚运行的完全相同的代码来加载pickle。但他们做不到。他们遇到了这个奇怪的属性错误。获得这个错误实际上是促使我写这个演讲的原因。所以我正在构建一个夺旗比赛，想让参赛者能够提交。
- en: trained machine learning models that I would then test。 But I didn't want to
    care about what libraries they were using or what structure it was。 So I wanted
    them to be able to use scikit learn or pytorch or TensorFlow。 And I wanted there
    to be a really low barrier to them submitting these things。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我训练了机器学习模型，然后进行测试。但我不想关心他们使用的库或结构是什么。所以我希望他们能够使用scikit learn、pytorch或TensorFlow。我希望他们提交这些东西的门槛非常低。
- en: I didn't want them to have to submit a whole bunch of extra metadata for me
    to understand。 We'll come back to that。 But the bottom line with this error for
    anyone else who encounters it is that pickle doesn't。 work kind of like a zip
    file。 It doesn't pack everything that you'll ever need into this blob。 Instead
    it's this really fascinating and there are great articles about this that I won't，
    get into。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我不想让他们提交一堆额外的元数据让我理解。我们稍后会回到这一点。但对于遇到这个错误的其他人来说，关键是pickle并不是像zip文件那样工作。它并不会把你所需的一切打包进这个二进制文件。相反，这实际上非常吸引人，关于这个的精彩文章我不会深入探讨。
- en: It's kind of stack based virtual machine and it has these reference systems。
    So over here on our friend notebook our friend actually needs to know what a bird
    counter。 object is。 What does that class look like？ And so if they define that
    class over here now they can load that pickle successfully and。 see that there
    are 266 birds， one of which was a woodhouses scrubjay。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 它是一种基于栈的虚拟机，并且有这些引用系统。因此，在我们朋友的笔记本上，他们实际上需要知道鸟计数器对象是什么。那个类是什么样的？所以如果他们在这里定义了那个类，他们现在可以成功加载那个pickle，并看到有266只鸟，其中一只是Woodhouse的Scrub
    Jay。
- en: It's important to note that our friend didn't actually run any of that code。
    They just referenced the object or the class definition。 So they didn't have our
    API key to run that query。 This object was reconstructed from the binary pickle。
    We never called the constructor or any of the other methods。 So some pros to pickle。
    It's in the standard library。 I think everyone should have a slight bias towards
    importing new libraries if they can。 We didn't have to define a schema which we'll
    talk about before but like a system for defining。 the data and its types。 And
    pickle is really well documented so it has some sharp edges and has been used
    kind。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，我们的朋友实际上并没有运行任何代码。他们只是引用了对象或类定义。因此，他们没有我们的API密钥来运行该查询。这个对象是从二进制pickle重构的。我们从未调用构造函数或其他任何方法。所以pickle的一些优点是，它在标准库中。我认为每个人都应该稍微偏向于导入新库，如果可以的话。我们不需要定义一个模式，我们稍后会谈到，但就像是定义数据及其类型的系统。而且pickle文档非常完备，尽管它有一些尖锐的边缘，且使用得当。
- en: of nefariously in other examples。 And so the documentation is phenomenal。 They
    provide some guidance on using it safely。 They compare it with JSON。 They talk
    about the structure of the format。 There's actually different protocols for a
    pickle that you may want to use at various。 times。 And then they define what can
    be pickle or unpickle and we'll talk about that a bit too。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他例子中有恶意使用的情况。因此，文档非常出色。他们提供了一些安全使用的指导。他们将其与JSON进行了比较，讨论了格式的结构。实际上，pickle有不同的协议，你可能会在不同时间使用。然后，他们定义了什么可以被pickle或unpickle，我们稍后也会谈到这个。
- en: So some cons are this security consideration I keep alluding to and I'll demonstrate
    that， later。 And it's only interoperable with Python。 So if you're working in
    an enterprise and you think I need to persist or serialize this。 object and it
    may need to be read by some Java code later on， pickle might not be the。 best
    format for you to do that。 And as we saw in the other notebook。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一些缺点是我一直提到的安全考虑，我稍后会演示这一点。它只与Python互操作。因此，如果你在企业工作，认为我需要持久化或序列化这个对象，并且它可能需要被一些Java代码读取，那么pickle可能不是最佳格式。正如我们在另一个笔记本中看到的。
- en: load still requires access to the class definition。 Something I recently learned
    is that pandas has a pickle method for arbitrary data， not。 just data frames。
    So if you have pandas laying around， you can pickle stuff with pandas there。 There's
    some other cool things built on top of pickle。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 加载仍然需要访问类定义。我最近了解到，pandas 对任意数据有一个序列化方法，而不仅仅是数据框。因此，如果你有 pandas 可用，你可以在这里用 pandas
    对数据进行序列化。还有一些其他很酷的功能建立在 pickle 之上。
- en: So shelve is this kind of database construct where you can have a key that's
    a string and。 then a value is anything that can be pickled。 And so now you can
    kind of reference your pickled blobs in an organized key value structure。 So in
    this example， if we wanted to create one of these new bird counters every day。
    we could create some sort of key and then index and find these blobs。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 所以 shelve 是一种数据库结构，你可以有一个字符串作为键，然后值可以是任何可以被序列化的内容。因此现在你可以在一个有序的键值结构中引用你的序列化数据块。在这个示例中，如果我们想每天创建一个新的鸟类计数器，我们可以创建某种键，然后索引并找到这些数据块。
- en: Joblib is also kind of a cool library。 It uses pickle under the hood but has
    some optimization for large and umpire arrays。 And so that's the recommended solution
    for scikit-learn models。 And this idea of like， hey。 maybe there are optimizations
    we can do and we know something。 about the data structure is really important。
    So we'll see later on when we talk about schema。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Joblib 也是一个很酷的库。它在底层使用 pickle，但对大型和非结构化数组进行了优化。因此，这是 scikit-learn 模型的推荐解决方案。这种想法，比如，嘿，也许我们可以进行一些优化，而我们对数据结构有一定了解，这真的很重要。所以我们稍后在讨论
    schema 时会看到。
- en: But the more you know about what you are serializing， the more you can optimize
    for speed or space。 Some other interesting projects here are ice pickle。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 但你对正在序列化的内容了解得越多，就越能在速度或空间上进行优化。这里还有一些其他有趣的项目，比如 ice pickle。
- en: '![](img/d93ae3f3d6226d59cf9cf0a529c49734_4.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d93ae3f3d6226d59cf9cf0a529c49734_4.png)'
- en: So it's a safe way to serialize and deserialize linear scikit-learn models and
    I think it's。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种安全序列化和反序列化线性 scikit-learn 模型的方法，我认为它是。
- en: '![](img/d93ae3f3d6226d59cf9cf0a529c49734_6.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d93ae3f3d6226d59cf9cf0a529c49734_6.png)'
- en: worth looking at here。 And this builds on this concept of knowing what you are
    serializing and deserializing。 So you know they use this H5 format but every scikit-learn
    linear model is just going to。 have coefficients， intercepts and potentially classes。
    And so we can use that structure and dump it into a serialized format and know
    exactly。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这里值得一看。这建立在了解你正在序列化和反序列化的概念之上。你知道他们使用这种 H5 格式，但每个 scikit-learn 线性模型只会有系数、截距和可能的类别。因此我们可以利用这个结构，并将其转储到序列化格式中，并准确知道我们想如何提取它。
- en: how we want to pull it out。 And the whole point of ice pickle is that it avoids
    some of the other functionality in。 pickle that makes it potentially unsafe。 Trail
    of bits also did a ton of research into specifically security research in to pickle。
    and they offer this tool fickling that allows you to do some security analysis
    of pickle。 Now we'll move into some alternatives。 So dill is a drop-in replacement
    for pickle so you use dump and load the same way。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: ice pickle 的全部意义在于它避免了 pickle 中一些潜在不安全的功能。Trail of bits 也进行了大量的研究，专注于 pickle
    的安全性研究。他们提供了一个工具 fickling，允许你对 pickle 进行一些安全分析。现在我们将转向一些替代方案。因此，dill 是一个可替代 pickle
    的工具，你可以以相同的方式使用 dump 和 load。
- en: It has an expanded functionality so you can even save an entire interpreter
    session not。 just one object and the primary usage is to send python objects across
    the network as。 a byte stream。 And so dill is what I ended up using for that capture
    the flag example。 Any competitor could just package their classifier and dill
    and I'd be able to use it on their。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 它具有扩展的功能，因此你甚至可以保存整个解释器会话，而不仅仅是一个对象，主要用途是将 Python 对象作为字节流跨网络发送。因此，dill 是我最终用于捕获旗帜示例的工具。任何竞争者都可以将他们的分类器和
    dill 打包，我就能在他们的环境中使用它。
- en: receiving end。 In this case we made a slight modification to the bird counter。
    We're calling it a dog counter and the only reason for this is to show that our
    friend。 has no knowledge of a dog counter。 They don't know how to reconstruct
    that object。 And so you know we'll initialize one here at d and see how many dogs
    there are。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 接收端。在这种情况下，我们对鸟类计数器做了一个小修改。我们把它称为狗计数器，唯一的原因是为了表明我们的朋友对狗计数器毫无了解。他们不知道如何重建那个对象。因此，我们将在这里初始化一个
    d，并查看有多少只狗。
- en: It turns out a dog is the same thing as a bird so there's still only 266 and
    then we'll。 dump that out to a dill。 And our friend now with no knowledge of what
    a dog counter looks like can read this in and。 see that there are 266 dogs。 So
    we can see that this drop-in functionality gives you a lot more but it potentially
    comes。 at some trade-offs and we'll address that later。 Another alternative is
    message pack。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 结果表明，狗和鸟是相同的东西，所以仍然只有266个，然后我们会将其导出到一个dill。我们的朋友现在没有关于狗计数器的知识，可以读取这个并看到有266只狗。所以我们可以看到，这种即插即用的功能给你带来了更多的可能性，但它可能会有一些权衡，我们稍后会讨论。另一种选择是消息包。
- en: So this is binary serialization so everything will be compressed down to binary
    format and。 you know they advertise it small and efficient and they actually provide
    kind of wrappers。 to dump and load so that you can use those same methods that
    you're used to。 There's kind of an important distinction here though when we look
    at how we would actually。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这是二进制序列化，所以一切都会压缩为二进制格式。他们宣传它小且高效，实际上他们提供了一些包装器，用于导出和加载，以便你可以使用那些你熟悉的方法。不过，当我们实际查看时，这里有一个重要的区别。
- en: implement this in message pack and all we serialize to where the class attributes，
    not。 the entire object。 And so when it comes time to de-serialize we need to unpack
    those attributes and re-initialize。 a new object。 And that is effective in this
    case but may not be something you want to do in every case。 And this has to do
    with the types of data that message pack knows how to convert into。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在消息包中实现这一点，我们序列化的是类属性，而不是整个对象。因此，当需要反序列化时，我们需要解压这些属性并重新初始化一个新对象。在这种情况下，这是有效的，但可能不是你想在每种情况下都这样做。这与消息包知道如何转换的数据类型有关。
- en: a binary serialization format。 So up until this point we haven't really had
    to worry about schema。 We've just been able to take our objects and dump them
    into a method and then pull them。 out on the other side。 Everything after this
    point we're going to need to think more about defining what those。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制序列化格式。因此在此之前，我们实际上不需要担心模式。我们只需将对象放入一个方法，然后在另一端取出。之后的每一点，我们需要更多地考虑定义这些。
- en: '![](img/d93ae3f3d6226d59cf9cf0a529c49734_8.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d93ae3f3d6226d59cf9cf0a529c49734_8.png)'
- en: objects are。 So the first one I'm going to talk about here is marshmallow which
    has some nice integrations。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 对象是。我要在这里讨论的第一个是 marshmallow，它有一些很好的集成。
- en: '![](img/d93ae3f3d6226d59cf9cf0a529c49734_10.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d93ae3f3d6226d59cf9cf0a529c49734_10.png)'
- en: for flasting Django。 And here in marshmallow we're using kind of this dictionary
    construct to define our schema。 And if you remember from the class definition，
    variety is a list of strings and locations。 is a list of tuples of floats。 So
    we define that here。 And we're still referencing that same kind of first object
    B。 And then we dump that actually。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于快速 Django。在这里，marshmallow 使用这种字典结构来定义我们的模式。如果你还记得类定义，variety 是一个字符串列表，locations
    是浮点元组的列表。所以我们在这里定义它。我们仍然引用那个第一对象 B。然后我们实际上将其导出为 JSON。
- en: to a JSON。 And then our friend here can do some interesting things。 Here our
    friend defined their schema as a class but those definitions do need to functionally。
    match。 And then marshmallow provides a whole bunch of functionality because it
    knows the schema。 can help you out。 And so here's like a postload decorator and
    it does what we did with message pack。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们的朋友可以做一些有趣的事情。在这里，我们的朋友将他们的模式定义为一个类，但这些定义在功能上确实需要匹配。然后 marshmallow 提供了一整套功能，因为它知道模式，可以帮助你。因此，这里有一个
    postload 装饰器，它做了我们在消息包中所做的事情。
- en: It unpacks the attributes and uses it to reinitialize a new object。 By knowing
    the schema marshmallow can also do a lot of other data validation things that。
    you're not going to get with dill or pickle because they're schema agnostic。 So
    now that we've defined a schema here our friend can open this JSON and see again
    that。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 它解压属性并利用这些属性重新初始化一个新对象。通过了解模式，marshmallow 还可以进行许多其他的数据验证工作，而这些是 dill 或 pickle
    无法做到的，因为它们对模式不敏感。所以现在我们已经定义了一个模式，我们的朋友可以打开这个 JSON 再次看到。
- en: they're 266 birds。 And after this talk I'm going to have to look up what a woodhouse
    the scrub jay looks like。 I'll say each time I've done this， like rehearse this
    talk it's been a different bird， right？
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 它们是266只鸟。在这次讲座后，我需要查一下 Woodhouse 的 scrub jay 看起来是什么样子。我每次练习这次讲座时，看到的鸟都是不同的，对吧？
- en: So yesterday it was an American bald eagle， I thought that was really cool。
    The day before was a crow that would have been boring。 So you know notice how
    for both message pack and marshmallow we still need to have the。 bird counter
    class defined because we're going to reinitialize an object through it。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 昨天是一只美国秃头鹰，我觉得那真的很酷。前一天是一只乌鸦，那就有点无聊。因此，你会注意到对于message pack和marshmallow，我们仍然需要定义鸟计数类，因为我们将通过它重新初始化一个对象。
- en: Which we didn't need to do in dill。 And this makes me think a lot about the
    kind of Star Trek transporter debate about like。 do the transporters kill you？
    Are you the same person on both sides of the transport？
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 而我们在dill中不需要这样做。这让我想起了《星际迷航》中关于传送器的争论，比如传送器会杀死你吗？你在传送两边还是同一个人？
- en: And this is kind of the same idea here。 And then also note that for marshmallow
    the thing sent over the wire was JSON。 So if you have things that are not really
    turned into JSON you'll have to write some。 serialization or deserialization functions
    yourself。 So some other things that fall into this category of know the schema
    in advance are。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是同样的想法。同时还要注意，对于marshmallow，发送到网络上的内容是JSON。因此，如果你有一些内容并没有真正转换成JSON，你将不得不自己编写一些序列化或反序列化函数。所以一些属于提前了解架构的其他内容是。
- en: Avro and protobuff and they're like very robust solutions that I'm not going
    to go into。 Here they deserve talks of their own and I think there was a great
    protobuff talk earlier。 But they are in the same class of know something about
    your schema。 Compile it down to a binary format send it over the wire so that
    we can be super efficient。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Avro和protobuff，它们是非常强大的解决方案，我不会深入讨论。它们值得独立的讨论，我认为之前有一个很棒的protobuff讲座。但它们属于同一类，即对你的架构有所了解。将其编译为二进制格式并发送到网络上，以便我们可以非常高效。
- en: and then provide some other functionality。 It's also worth talking about JSON
    because we've been using this eBird API and it's communicating。 JSON back and
    forth。 And I think there are a lot of great things about JSON。 So it's human readable。
    It's very interoperable。 You're going to find JSON read libraries and everything
    you use。 Some cons though are that it attaches the schema every time。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 然后提供一些其他功能。值得谈谈JSON，因为我们一直在使用这个eBird API，它在进行JSON的双向通信。我认为JSON有很多优点。因此它是人类可读的，非常互操作。你会发现你使用的所有东西都有JSON读取库。然而，它的缺点是每次都附带架构。
- en: So when we open up a JSON object here it's going to have the schema in it。 Like
    it's going to have the words， variety and location。 Because we used a very wide
    JSON here where variety is this huge list we probably won't。 notice that in terms
    of size。 But imagine you had a very deep schema and it was really just holding
    binary values。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 所以当我们打开一个JSON对象时，它会包含架构。比如它会包含词汇、种类和位置。因为我们这里使用了一个非常宽泛的JSON，其中种类是一个庞大的列表，我们可能不会注意到它的大小。但想象一下，如果你有一个非常深的架构，仅仅保存二进制值。
- en: JSON becomes very inefficient at that point。 So we can talk about time and space
    a little bit。 This is going to be very unscientific。 We're going to just serialize
    the same object that we've been dealing with and kind of measure。 it across all
    these different libraries。 And I'll say you'll get very different behaviors based
    on the shape of your data。 And so understanding your data format and what you're
    trying to serialize is kind of。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，JSON变得非常低效。所以我们可以稍微谈谈时间和空间。这将是非常不科学的。我们将序列化同一个对象，并在这些不同的库中进行测量。我会说，根据你的数据形状，你会得到非常不同的行为。因此，理解你的数据格式以及你试图序列化的内容是很重要的。
- en: important to doing this rigorously in a way that's useful for your application。
    So in JSON here。 I think we normally see on the order of milliseconds for this
    object。 12 kilobytes。 Pickle is going to be faster。 There we go。 So half a millisecond
    and a little bit more compact。 Here's the cost I alluded to with Dil earlier。
    Dil did a lot for us， but it's slow。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以严谨的方式进行这项工作对于你的应用是非常重要的。在这里是JSON。我认为我们通常看到这个对象的时间大约是毫秒级。12千字节。Pickle会更快。看吧。半毫秒，并且更紧凑。这就是我之前提到的与Dil相关的成本。Dil为我们做了很多，但速度很慢。
- en: It's slower than JSON。 It's basically as big as JSON here in this example。 And
    I can see that becoming worse in other examples。 Message pack is nice and fast
    and pretty small as a binary format。 And then Marshmallow， I think。 is reasonably
    quick but a little big because it's packing， some of that schema data into the
    packet。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 它比JSON慢。在这个例子中，它基本上和JSON一样大。我可以看到在其他例子中这种情况变得更糟。Message pack作为二进制格式很快且相对小。然后Marshmallow，我认为速度合理，但由于将一些架构数据打包到数据包中而稍微大一些。
- en: So far we've also talked about pretty standard types， inks and strings and lists。
    But these don't necessarily hold or are not serializable in every format。 So here
    like a NumPy array cannot be serialized into JSON。 And that's something you have
    to handle yourself。 Or really go to NumPy and NumPy is going to help you with
    that。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们还讨论了一些相当标准的类型，比如墨水、字符串和列表。但这些并不一定在每种格式中都可以保持或可序列化。因此，例如NumPy数组无法序列化为JSON。这是你需要自己处理的，或者真正去NumPy那里，它会帮助你解决这个问题。
- en: We can try and serialize a function。 And so JSON can't serialize a function。
    But if it's a name function， most of the time Pickle can。 There's some exceptions
    to that。 But Pickle cannot serialize a Lambda because every Lambda is named Lambda。
    And so it has a lot of trouble with that。 And it's worth calling out。 Earth's
    gathering discoveries。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以尝试序列化一个函数。因此，JSON无法序列化函数。但如果是命名函数，大多数情况下Pickle可以。这其中有一些例外，但Pickle无法序列化Lambda，因为每个Lambda都是命名为Lambda的。因此，它在这方面会遇到很多麻烦，值得一提。地球的发现汇聚。
- en: I talked about the Pickle documentation and it calls it really explicitly。 And
    so if you are kind of shopping around for a serializer， I really recommend reading。
    that documentation page。 Next I think we need to talk about why products like
    Avro and Protobuff are really useful。 And at least for me their main kind of value
    proposition has been schema versioning and， evolution。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我谈到了Pickle文档，它非常明确。因此，如果你在寻找序列化器，我强烈推荐阅读那份文档页面。接下来，我认为我们需要讨论像Avro和Protobuff这样的产品为什么非常有用。对我来说，它们的主要价值主张在于架构版本控制和演变。
- en: So we can think about a schema as a point in time snapshot of what we expect
    something。 to look like。 So here's a fake object。 It has these two attributes。
    We can create one and we can dump it to a Pickle。 But let's say a new dev joins
    the project a year later。 And when they go look through the code， this is what
    a fake object has evolved to at this， point。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以把架构看作是我们期望某个东西在某一时刻的快照。这是一个虚假对象。它有这两个属性。我们可以创建一个，并将其转储到Pickle中。但假设一名新开发者在一年后加入项目。当他们查看代码时，这就是一个虚假对象在这一时刻演变的样子。
- en: It has this C attribute。 When they go to load this old Pickle， it doesn't have
    the C attribute。 And so this evolution and the inability of kind of more naive
    serialization solutions。 to handle it can cause a lot of edge cases。 And your
    code may behave unexpected ways or not at all。 And this may not matter for kind
    of like hobby learning projects。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 它有这个C属性。当它们加载这个旧的Pickle时，C属性不存在。因此，这种演变以及更简单的序列化解决方案的无能为力可能会导致许多边缘案例。你的代码可能会表现出意想不到的行为或根本不工作。这对像爱好学习项目这样的情况可能无关紧要。
- en: But it becomes important when you think about like client server architectures。
    So if you have a lot of clients serializing and sending you data， you might not
    be able。 to rely on them all updating when you update your schema at the same
    time。 And so being able to version or evolve your schema and have your app handle
    that kind of。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 但当你考虑客户端-服务器架构时，这就变得重要了。因此，如果有很多客户端在序列化并向你发送数据，你可能无法依赖它们在你同时更新架构时都进行更新。因此，能够版本化或演变你的架构并让你的应用程序处理这种情况是非常重要的。
- en: at the serialization layer can be really nice。 Because then you're not going
    to have to write all that kind of weird business logic for。 handling these different
    cases。 I don't think we can have a talk about Pickles without highlighting the
    security thing。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在序列化层可以非常好。因为这样你就不必编写所有这些处理不同情况的奇怪业务逻辑。我认为在讨论Pickle时，我们不能不强调安全性问题。
- en: I don't want to kind of just blow past that here。 So Pickle uses this dunder
    reduce when DC realizing the Pickle。 And here it needs to return this tuple。 But
    in this case instead of returning， hey。 here's how we actually construct a bird
    counter， we're going to return a call to a system command。 right？ Which is obviously
    not something we want。 And so when we dump this Pickle and our friend goes to
    run it。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我不想就这么轻描淡写地过去。因此，Pickle在DC意识到Pickle时使用了这个特殊的`dunder reduce`。这里需要返回这个元组。但是在这种情况下，除了返回，嘿，我们实际上是如何构造一个鸟类计数器的，我们将返回对系统命令的调用，对吧？这显然不是我们想要的。因此，当我们转储这个Pickle时，我们的朋友去运行它。
- en: okay， they ran the Pickle。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，他们执行了Pickle。
- en: '![](img/d93ae3f3d6226d59cf9cf0a529c49734_12.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d93ae3f3d6226d59cf9cf0a529c49734_12.png)'
- en: But it turns out that system command ran。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 但事实证明，系统命令执行了。
- en: '![](img/d93ae3f3d6226d59cf9cf0a529c49734_14.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d93ae3f3d6226d59cf9cf0a529c49734_14.png)'
- en: So we did echo this is bad。 So we just provided code execution， which obviously
    is dangerous。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们确实强调了这是有问题的。因此我们提供了代码执行，这显然是危险的。
- en: '![](img/d93ae3f3d6226d59cf9cf0a529c49734_16.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d93ae3f3d6226d59cf9cf0a529c49734_16.png)'
- en: So in conclusion， your serialization format is a design decision that impacts
    many things。 any interoperability and security。 And you need to choose the right
    tool for the right job。 So I think you'll see some kind of absolute articles on
    the internet kind of saying like。 never use Pickle。 I wouldn't go that far。 I
    think Pickle is like a really nice tool。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，您的序列化格式是一个设计决策，会影响许多事情，包括任何互操作性和安全性。您需要为合适的工作选择正确的工具。因此，我认为您会看到互联网上有一些绝对的文章大概说“永远不要使用Pickle”。我不会走到那一步。我认为Pickle是一个非常好的工具。
- en: And you just need to understand when to use it， what its limitations are。 I
    wouldn't recommend that everyone goes out and starts implementing protobuf， right？
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您只需要了解何时使用它，它的局限性是什么。我不会建议每个人都去实现protobuf，对吧？
- en: That is a heavyweight solution that may not be necessary for your needs。 So
    kind of think about your data structure， think about how your data structure may
    or。 may not evolve and then pick a format accordingly。 Thank you for your time。
    [APPLAUSE]。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种重量级解决方案，可能并不是您所需的。因此，请考虑一下您的数据结构，思考一下您的数据结构可能会如何演变，然后选择相应的格式。感谢您的时间。[掌声]
