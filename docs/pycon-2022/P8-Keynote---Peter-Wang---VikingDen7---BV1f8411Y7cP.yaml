- en: P8：Keynote - Peter Wang - VikingDen7 - BV1f8411Y7cP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P8：主题演讲 - Peter Wang - VikingDen7 - BV1f8411Y7cP
- en: All right， and now we're just going to take a minute to switch out the speakers，
    but I。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在我们将花一点时间更换发言人，但我。
- en: '![](img/62f475ca8a748fa6d0ea6cb5a8d61f2e_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/62f475ca8a748fa6d0ea6cb5a8d61f2e_1.png)'
- en: am very pleased to introduce Peter Wang， the CEO and co-founder of Anaconda。
    [Applause]。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 非常高兴地介绍Peter Wang，Anaconda的CEO和联合创始人。[掌声]。
- en: '![](img/62f475ca8a748fa6d0ea6cb5a8d61f2e_3.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![](img/62f475ca8a748fa6d0ea6cb5a8d61f2e_3.png)'
- en: All right。 All right。 How's everyone doing？ I give a big。 big thank you to the
    conference organizers， to Emily， the chair， to everyone。 all the volunteers who
    have worked so hard to bring us all together here。 It is really wonderful to be
    in person with everyone again。 I know everyone keeps saying that。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。大家都还好吗？我要衷心感谢会议组织者，感谢Emily，主席，感谢所有努力将我们聚集在一起的志愿者。再次与大家亲自见面真是太美好了。我知道大家一直在说这个。
- en: I just want to reiterate how awesome it is to see everyone here。 I actually
    can't see anyone because the lights are very bright。 but I'm assuming everyone's
    out there。 But today I'm going to go through a bunch of different things。 I'm
    going to talk really fast。 I apologize。 But there's a lot of ground to cover。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我想重申看到大家在这里是多么美妙。实际上我看不清任何人，因为灯光非常明亮。但我假设大家都在那儿。今天我会讲许多不同的内容，我会说得很快，抱歉。但要覆盖的内容很多。
- en: and it's super exciting。 Some new stuff I'm working on， I want to tell you about。
    But the title of my talk is programming for everyone， or the next 100 million
    Pythonistas。 You'll see why I call it that。 But to get started for those who don't
    know who I am or not familiar with Anaconda。 I am， the CEO and co-founder of Anaconda。
    And about 10 years ago， Travis Olafont。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常令人兴奋。我正在进行一些新的项目，想告诉大家。但我演讲的主题是“为每个人编程”，或者说“下一个一亿Pythonista”。你会明白我为什么这样称呼它。但首先，对于那些不知道我是谁或对Anaconda不熟悉的人，我是Anaconda的CEO和联合创始人。大约十年前，Travis
    Olafont。
- en: the creator of NumPy and SciPy and my co-founder， we had this insight that Python's
    scientific tools。 the ones that Sarah was just talking， about that the scientists
    have been nerding out on for over a decade at that point。 That those tools were
    really， really ready for prime time in business data analysis and。 business data
    processing。 At the time it was big data and Hadoop and all these things。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy和SciPy的创造者及我的联合创始人，我们意识到Python的科学工具，正如Sarah刚才所说，科学家们在那时已经对其进行了十多年的探索。这些工具实际上已经为商业数据分析和处理做好了准备。当时的热门话题是大数据、Hadoop等。
- en: but we were a couple of weirdos， at Strata conferences saying， "use Python。"，
    And since that time。 we've created a lot of things that now I hope are recognizable
    to， many of you， open source tools。 as well as really important things like the
    non-focus， the pie data conferences。 a lot of different things like that。 So that's
    where we started。 And the reason why， I guess。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们在Strata会议上是几个奇怪的人，倡导“使用Python”。从那时起，我们创造了许多现在我希望大家都能认出的开源工具，以及像非专注、Pie数据会议等非常重要的事情。这就是我们的起点。至于原因，我想。
- en: one of the things that is really important to appreciate why。 we did this is
    because there's a lot of things about Python that make it different and special。
    There's a lot that we love about Python and hopefully this is not controversial
    to any of you。 But I think there's a lot of other languages out there。 If we just
    focus on software development。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 理解我们这样做的重要性，有很多关于Python的特点使其与众不同且特殊。我们对Python的喜爱不胜枚举，希望这对你们来说并不具有争议性。但我认为还有许多其他语言。如果我们只关注软件开发。
- en: there's many different choices。 Why are we， why was Travis and I。 why were we
    so opinionated about taking Python to data， science and to data analysis？
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多不同的选择。为什么我们，Travis和我，为什么对将Python带入数据科学和数据分析如此坚持？
- en: And the reason is because of these things， right？ It is something that is approachable
    by lots of people。 more than just people with CS degrees。 And this last part，
    too， this last bullet point。 the fact that the communities are welcoming， and
    generally pretty pleasant， that's a really。 really big deal。 A really big deal
    if you want to keep growing user base。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 原因就是这些，对吧？这是许多人都能接触到的东西，远不止是计算机科学学位的人。而这最后一点，这最后一个要点，社区的包容性和通常的友好，这非常非常重要。如果你想继续扩大用户基础，这是一个非常大的问题。
- en: There's one other thing that people don't talk about too much， which is the
    Python interpreter。 has essentially under the hood capability to be extended with
    native extensions。 and call them binary extensions。 So I call it like a Honda
    Civic with mounting bolts for warp drive。 And so it's very unassuming。 It's a
    very common sort of thing。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一件人们不太谈论的事，就是Python解释器。它在底层实际上可以通过本地扩展来扩展，并称之为二进制扩展。所以我把它比作带有曲速驱动安装螺栓的本田思域。它看起来非常低调。这是一种非常常见的事物。
- en: Kids learn how to do basic scripting with Python。 And then you go into the Trump，
    you pop it open。 and you bolt on warpness cells。 And now you're running faster
    than C or C++ in some cases， right？
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 孩子们学习如何用Python进行基本脚本编写。然后你进入Trump，打开它，安装曲速单元。现在你在某些情况下的运行速度比C或C++还快，对吧？
- en: You're getting direct access to GPU。 So this is one of those other things that
    is a little bit underappreciated。 It's something that's obvious to me， because
    I've been doing this stuff for 20 years。 but it's something that I think really
    bears repeating。 It's not just like every other language。 It's not just like Node。
    It's not just an alternative to Ruby。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以直接访问GPU。这是另外一个稍微被低估的方面。对我来说这显而易见，因为我已经做了20年的这项工作。但我认为这值得反复强调。这不仅仅是其他语言。这不仅仅是Node。这也不仅仅是Ruby的替代品。
- en: The actual architecture of the CPython virtual machine itself has enabled， well。
    the kind of research， you just saw， right？ And research besides on cancer research
    on everything。 right？ Like the reason why Python got picked up by Wall Street
    10 years ago， 15 years ago。 was precisely， because of this warp drive capability。
    And that's what's led this incredible growth。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: CPython虚拟机的实际架构使得，嗯，您刚才看到的那种研究成为可能，对吧？此外，除了癌症研究，几乎涉及所有领域。对吧？Python在10年前、15年前被华尔街青睐的原因恰恰是由于这种曲速驱动能力。这就是导致其惊人增长的原因。
- en: If you look at these charts from Stack Overflow， from TOB， you know， this year
    actually just。 hot off the press， TOB ranked Python as number one again， continues
    to grow。 We can continue to add users and popularity to the language。 But all
    that being said。 there's some things that are not so great， right？ And so here
    among friends。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看一下来自Stack Overflow和TOB的这些图表，你会发现，今年实际上刚刚发布，TOB将Python再次排名第一，继续增长。我们可以继续为这门语言增加用户和受欢迎程度。但所有这些话说完，有些事情并不那么好，对吧？所以在朋友之间。
- en: I'm sure we can talk candidly about what sucks about Python。 And I'll be the
    first to go out there and say that， you know， packaging and installing all the
    bits。 right？ On the one hand， we have a diverse ecosystem of a huge number of
    libraries， over 100，000。 on PIPI， I believe。 But at the same time， getting all
    these to work together is difficult。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信我们可以坦诚地讨论Python的不足之处。我会第一个说出来，你知道的，打包和安装所有组件，对吧？一方面，我们有一个庞大的多样化生态系统，有超过100,000个库，在PIP上，我相信。但与此同时，让这些库共同工作是困难的。
- en: And although there are many solutions， they all are about 80%， right？
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有很多解决方案，但它们都大约只有80%的效果，对吧？
- en: Which means everyone's having a bad time， about 20% of the time。 Which is not
    great。 Secondly。 this is a really odd thing for the world's most popular language，
    which we are。 The challenge is we can't actually build things that have interfaces
    with。 Like you can't go and build an iOS app with Python very easily。 Rolling，
    you know。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着每个人在大约20%的时间内都在经历不愉快。这并不理想。其次，这对我们这样的世界上最受欢迎的语言来说，真的很奇怪。挑战在于我们实际上不能很容易地构建具有界面的东西。比如，你不能很容易地用Python构建iOS应用程序。
- en: native application on Windows， which is what runs on most corporate desktops。
    Trying to roll an application even with a web front end。 You have to write JavaScript
    and CSS and HTML。 So the fact that it's the world's most popular programming language。
    but we can't easily create things with user interfaces， is kind of weird， but
    kind of interesting。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Windows上的本地应用程序是大多数企业桌面的运行环境。尝试推出一个即使是带有网页前端的应用程序。你需要编写JavaScript、CSS和HTML。因此，它是世界上最流行的编程语言这一事实，但我们却无法轻易创建具有用户界面的东西，这有点奇怪，但也很有趣。
- en: right？ And the consequence of one and two， of course， makes it hard to share
    our work。 And I know some of you are thinking your mind， "Ha， but that's why I
    use Docker。"， Right？
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对吧？而一和二的结果，当然，使得我们很难分享我们的工作。我知道你们中的一些人在心里想，“哈，但这就是我使用Docker的原因。”对吧？
- en: And the speculator， when you're using Docker， you are literally compressing。
    zipping up a hard drive and shipping it to someone。 And that cannot be our way
    of getting this into kids' hands。 getting millions of people to be using this
    stuff。 Right？ There's got to be something easier。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 而且投机者，当你使用Docker时，你实际上是在压缩。把硬盘压缩并发送给某人。这不能是让孩子们接触这些东西的方式。让数百万人使用这些东西。对吧？必须有更简单的办法。
- en: But again， despite all these challenges， Python continues to grow。 Python continues
    to be the most popular language taught in schools at every level。 And to some
    extent， I think Python is the victim of its own success。 Precisely because it's
    so good at gluing together so many things。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，尽管面临这些挑战，Python依然在增长。Python继续成为每个级别学校中最受欢迎的语言。而在某种程度上，我认为Python是其自身成功的受害者。正因为它在粘合许多事物方面做得如此出色。
- en: it's stuck to all those things it glues to because it's glue。 Right？
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 它粘附在所有它所粘合的事物上，因为它是**胶水**。对吧？
- en: And so much of what we do in computing is tied to ideas， architectures。 things
    that were built really in the 70s and maybe the 80s。 And that is everything from
    the C programming language and the Unix process model and the compiler tool chains
    around all that。 to concepts， you know， like common internet working， TCP/IP and
    all these other kinds of things。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在计算中所做的许多事情都与70年代甚至80年代构建的理念和架构相关。这包括C编程语言、Unix进程模型以及围绕这些构建的编译器工具链，还有像TCP/IP这样的公共互联网工作概念。
- en: There's a lot of infrastructure that Python is able to kind of get into the
    nooks and crannies up。 but then it itself gets dragged into。 And so the thing
    is the language proper。 So if you read a Python tutorial， you can teach that to
    a child in an afternoon。 You can teach that to anyone in a weekend。 But if you
    really want to go beyond that。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Python能够深入到很多基础设施中。但它自身也会被拖入其中。所以语言本身就是问题所在。如果你阅读Python教程，你可以在一个下午教会孩子。你可以在一个周末教会任何人。但如果你真的想要超越这一点。
- en: if you want to go from there to， let's say， shipping a native exe on Windows
    or an iOS app on an iPad。 that's a lot more work than an afternoon。 Right？ And
    so the question I would pose is。 can we unshackle Python from all of this？ Right？
    When you look at the stack overflow rankings of language popularity。 JavaScript
    right up there at the number one， and then there's HTML and CSS and number two。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想从这里开始，比如说，在Windows上发布一个本地exe或在iPad上发布一个iOS应用。那可比一个下午的工作要多得多。对吧？所以我想问的是，我们能否将Python从这一切中解放出来？对吧？当你查看语言流行度的Stack
    Overflow排名时，JavaScript排在第一，HTML和CSS第二。
- en: Python is right there sitting comfortably on the podium at third place。 And
    can we ever get over that？ Because the browser clearly has won the operating system
    wars。 Right？
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Python就舒舒服服地坐在第三的位置上。我们能否超越这一点？因为浏览器显然赢得了操作系统的战争。对吧？
- en: It's， you know， is it the year， is it 2022， the year of Linux on the desktop？
    I don't know。 But I'll tell you， 2022， there's a lot of web browsers on the desktops。
    Right？
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道吗，是2022年，桌面Linux的年头？我不知道。但我可以告诉你，2022年，桌面上有很多网页浏览器。对吧？
- en: And the problem with the web browser， the reason why JavaScript is stuck there
    as king in number one is because it's the native language of the web browser。
    Right？ And so if we want to grow beyond that， right， we have to go where the people
    are。 We have to use Dinglehoppers or rather WebAssembly to do this because WebAssembly
    fundamentally changes the game。 WebAssembly， for those who are not familiar， it
    is a virtual CPU instruction set that recently became a standard。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 而网页浏览器的问题，JavaScript之所以依然是第一，是因为它是网页浏览器的本地语言。对吧？所以如果我们想要超越这一点，我们必须去人们所在的地方。我们必须使用Dinglehoppers，或者说WebAssembly来做到这一点，因为WebAssembly根本上改变了游戏。WebAssembly，对于那些不熟悉的人来说，它是一种最近成为标准的虚拟CPU指令集。
- en: It has a 32-bit memory space but it supports 64-bit arithmetic and there's a
    compiler tool called MScripten that operates as sort of a pseudo operating system
    layer。 It compiles a lot of CSC plus plus code to target WebAssembly。 And it's
    also WebAssembly because it's a standard。 It's well supported by most modern browsers。
    including mobile browsers。 So for those of you keeping track at home， Python。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 它有32位内存空间，但支持64位算术，并且有一个名为MScripten的编译器工具，作为一种伪操作系统层。它将大量的C++代码编译为目标WebAssembly。由于WebAssembly是标准，所以它也得到了大多数现代浏览器的良好支持，包括移动浏览器。因此，对于在家追踪的你们来说，Python。
- en: C Python is also a C program。 A lot of the Python numerical stack is also written
    in C and C++。 So the work that was done over the last couple years by projects
    like Pyodi and Jupiter Lite。 they've been compiling a large part of the Python
    data and scientific stack to target WebAssembly。 And so if you go to Pyodi。org，
    you'll get a nice little REPL。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: C Python也是一个C程序。Python的数值计算栈大部分也是用C和C++编写的。因此，过去几年，像Pyodi和Jupiter Lite这样的项目做了很多工作。他们将Python数据和科学栈的很大一部分编译为针对WebAssembly的版本。如果你访问Pyodi.org，你会看到一个很好的REPL。
- en: three little friendly angle brackets that you can import non-Pimpedas into。
    If you go to Jupiter Lite， you can actually get a full Jupiter-lab environment。
    no server process at all。 It just completely runs in your browser。 And most recently。
    Christian Himes has been talking a lot about WebAssembly and doing some great
    work on this stuff。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 三个小的友好的尖括号，你可以在里面导入非Pimpedas。如果你去Jupiter Lite，你可以获得完整的Jupiter-lab环境，完全不需要服务器进程。它在浏览器中完全运行。最近，Christian
    Himes也在谈论WebAssembly，并在这方面做了一些很棒的工作。
- en: WebAssembly is going to be soon getting official CPython support as a tier two
    supported platform。 So again， it's a virtual CPU kind of instruction set and it
    would be an alternative at an architecture level to things like the ARM instruction
    set or the x86 instruction set。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: WebAssembly即将获得官方CPython支持，成为第二层支持的平台。所以，它是一种虚拟CPU的指令集，可以作为ARM指令集或x86指令集的架构级替代方案。
- en: It's just another kind of thing that the Python code base， the interpreter can
    target。 So we've been looking at this for a little while at Anaconda and we came
    up with an idea for how to really maybe leverage some of this work and increase
    the experience of the Python code。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是Python代码库、解释器可以瞄准的另一种事物。因此，我们在Anaconda看了这个一段时间，并提出了一个想法，如何真正利用这些工作来提升Python代码的体验。
- en: And so I'm very， very excited to announce a project called PyScript。 So what
    is PyScript？
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我非常非常激动地宣布一个名为PyScript的项目。那么，PyScript是什么？
- en: I'll show you what PyScript is。 And I'm going to， yes， I realize I am live coding。
    My first PyCon keynote here， maybe my last。 Everyone is like。 what the hell is
    this going on over here？ Are y'all ready for this？ Whoa。 For our language。 I was
    in -- because we're good citizens， we're going to close out that HTML tag right
    there。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我来给你们展示PyScript是什么。是的，我意识到我在实时编码。我的第一次PyCon主题演讲，也许是最后一次。大家都在想，这到底发生了什么？你们准备好了吗？哇。对于我们的语言。因为我们是好公民，我们将在那里关闭那个HTML标签。
- en: So that is HTML file and it is stored here。 Where's my mouse？ There it is。 If
    I double click that bad boy， there it is。 Can you see that？ [ Applause ]， It's
    HTML。 Let's go have a little fun with it。 Let's have a little fun with it。 Let's
    put a -- let's put a blink tag in here。 [ Laughter ]， I say reload。 No blink tag。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这是HTML文件，存储在这里。我的鼠标在哪里？在那里。如果我双击那个小家伙，那里它来了。你能看到吗？[掌声]，这是HTML。让我们来玩得开心一点。让我们来玩得开心一点。我们放一个--放一个blink标签在这里。[笑声]，我说重新加载。没有blink标签。
- en: I'm old school。 I came up with a time when there were blink tags。 And now I
    have to explain to kids there's no more blink tag。 So we're going to have to do
    something a little different。 We're going to do -- we're going to create a div
    out here。 I'm going to call it output。 All right。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我是老派。我经历过有blink标签的时代。现在我得向孩子们解释不再有blink标签了。所以我们必须做点不同的事情。我们要--我们要在这里创建一个div。我称之为output。好的。
- en: In our PyScript， we're going to make our own blink tag。 [ Inaudible ]。 You all
    see where this is going？ [ Inaudible ]， [ Inaudible ]， Hey， I love you。 You've
    got to love me back。 All right。 Oh， this is not going to work because code --，
    [ Inaudible ]。 All right。 What do you guys think？ What's going to happen？ [ Applause
    ]， What the W3C takes away。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的PyScript中，我们将创建自己的blink标签。[听不清]。你们都看到这将如何发展吗？[听不清]，[听不清]，嘿，我爱你。你得爱我。好吧。这不会成功，因为代码--，[听不清]。好吧，你们觉得怎么样？会发生什么？[掌声]，W3C会拿走什么。
- en: PyScript gives you back。 All right。 There we go。 Nothing's going to stop us
    now。 All right。 So that's PyScript。 So what's really going on here？ When you look
    at something like this。 it's very simple。 It's about ten lines of code。 And we
    are just embedding HTML in the browser。 It's a framework for creating rich Python
    apps in the browser。 We interleave Python with HTML。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: PyScript给你带来了。[好的]。没什么能阻止我们了。好的。这就是PyScript。那么这里到底发生了什么？当你看这样的东西时，非常简单。大约十行代码。我们只是在浏览器中嵌入HTML。这是一个在浏览器中创建丰富Python应用程序的框架。我们将Python与HTML交织在一起。
- en: We have full access。 Full access to the DOM。 And we can call and be called by
    JavaScript libraries。 So all of your app logic， all your code is in one language
    in the browser。 There's actually no web server needed。 That was -- you saw that
    was just HTML file that double clicked。 I can put it on USB stick and give it
    to somebody and they can double click it。 Now， granted。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们拥有完整的访问权限。完全访问DOM。我们可以调用和被JavaScript库调用。因此，你所有的应用逻辑，所有的代码都在浏览器中的一种语言中。实际上不需要Web服务器。你看到的只是一个双击的HTML文件。我可以把它放在USB闪存中，给某人，他们可以双击它。当然，明白。
- en: you're like， okay， you have a script source equals。 Yeah。 There's a little bit
    something you've got to do if you want to have the script locally。 But the point
    is， all of the stuff is there in the HTML。 Okay？ So this is how it actually works。
    It is not a variant of the Python language。 Only very clear。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你会想，好的，你有一个脚本源等于。是的。如果你想在本地拥有脚本，你需要做一点事情。但关键是，所有内容都在HTML中。明白吗？这就是它的实际工作原理。它不是Python语言的变体，非常明确。
- en: This is the same CPython that all of you all run on your laptops and your servers。
    It's just been compiled to target the virtual CPU sitting inside the browser tab。
    And because of the PyoDied work from the PyDied team， that project。 we're able
    to leverage all of the NumPy and SciPy in the， core data and scientific stack
    in Python。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你们所有人在笔记本电脑和服务器上运行的相同CPython。它只是被编译为目标是浏览器标签内的虚拟CPU。由于PyDied团队的PyoDied工作，我们能够利用Python中的NumPy和SciPy以及核心数据和科学栈。
- en: The PyScript infrastructure itself， it's kind of an opinionated framework with
    these tags and a way to do some。 FFI stuff， a way to talk to the various bits
    and pieces。 And the idea here is that Python， you know。 we have wrapped C++。 We've
    swallowed them。 We've swallowed C++ for Tran。 We can also go and wrap and call
    JavaScript。 Why not？
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: PyScript基础设施本身是一个有些主观的框架，带有这些标签和一些FFI内容，提供与各种组件的交流方式。这里的想法是，Python，你知道，我们已经将C++进行了封装。我们已经吞下了C++以用于Tran。我们也可以去封装并调用JavaScript，为什么不呢？
- en: So this is actually truly serverless computing。 You can run client-side only。
    So let's look at a couple of additional demos。 So here's the basic REPL。 All right。
    One plus three。 Print。 Hello。 Well， you guys already saw this， but there's that，
    right？
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这实际上是真正的无服务器计算。你可以仅在客户端运行。所以让我们看几个额外的演示。这是基本的REPL。好的。一加三。打印。你好。好吧，你们已经看到过这个，但就是这样，对吧？
- en: But you can also do because it's just a DOM。 Well， and yet a little auto-completing
    there going on。 [Applause]， This is the most number of people I've simultaneously
    re-rolled。 So there we go。 Right？
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 但你也可以这样做，因为这只是一个DOM。嗯，还有一点自动补全的功能。[掌声]，这是我同时重新加载的最多人数。所以就这样，对吧？
- en: Yeah， a little bit of that going on。 Anyway， so that's your REPL。 But this isn't
    Jupiter。 I'm going to be very， very clear。 What is this？ Let's look at what this
    code for this looks like。 Because this is a coding conference， so we're going
    to look at some code。 Okay。 there's some stuff here。 But at the end of the day，
    you have just a little REPL。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，有一点那样的情况。无论如何，这就是你的REPL。但这不是Jupiter。我会非常非常明确。这是什么？让我们看看这个代码的样子。因为这是一个编码会议，所以我们将查看一些代码。好的，这里有一些内容。但归根结底，你只需一个小REPL。
- en: And we have this little pi REPL thing。 And we have this auto-generate equals
    true。 So pi REPL is one of the primitives that pi script provides。 Auto-generate
    means that every time you execute， it will create a new line for you。 But you
    can also change where that output goes。 So here， this is REPL 2。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有这个小的pi REPL。我们有这个auto-generate等于true。所以pi REPL是pi脚本提供的基本功能之一。自动生成意味着每次执行时，它会为你创建一行新的输出。但你也可以改变输出的位置。所以这里，这是REPL
    2。
- en: There's a lot to kind of parse in here。 But the key thing here is we are able
    to redirect standard output and standard error to different divs。 So if I go here
    and load up REPL 2， I can do this。 And this is not just to be very clear。 This
    is not Jupiter。 Many of you are familiar with Jupiter as the way of authoring
    and doing REPLs in the browser。 This is just Python in the browser， pi script，
    and then putting your output over here。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有很多内容需要解析。但关键是我们能够将标准输出和标准错误重定向到不同的div。因此，如果我在这里加载REPL 2，我可以做到这一点。而且要非常明确，这并不是Jupiter。许多人熟悉Jupiter，它是浏览器中创建和执行REPL的方式。这只是浏览器中的Python，pi脚本，然后将输出放在这里。
- en: So it's really nice。 And I won't re-roll you again。 but I assure you you can
    get re-rolled with this as well in the other div。 No one needs to see that again
    twice in one day。 Let's see here。 The other thing I want to show is this little
    to-do app。 And so when you do web programming。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这真的很不错。我不会再让你重新执行了，但我向你保证你也可以在其他 div 中重新执行。没有人需要一天内看到两次这一幕。让我们看看。我想展示的另一个东西是这个小待办应用。所以当你进行网页编程时。
- en: the blog post， the to-do app， these are the kind of canonical examples。 So eggs。
    we're going to add some things here。 Add the task。 Hold on， I know what's going
    on here。 This is to-do。html。 Let's do this guy。 All right。 So we give this a little
    second to load up the Python infrastructure。 And then if we do eggs， bacon， ham，
    and you can do this sort of thing。 I don't think you can see it。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 博客文章，待办应用，这些都是经典示例。所以 eggs。我们会在这里添加一些东西。添加任务。等一下，我知道发生了什么。这是 to-do.html。让我们来处理这个。好的。我们给它一点时间来加载
    Python 基础设施。如果我们输入 eggs、bacon、ham，您可以做这些事情。我想你可能看不到。
- en: but it's actually crossing out the item that clicks on it。 And the code for
    this。 I will show you the code for this looks。 Oh， really？ Oh， I'm in the wrong
    thing。 Hold on。 To-do。html。 There it is。 Okay。 So the to-do list app， most of
    the lot。 This is it right here。 This is HTML。 It's about 50 lines。 There's a lot
    of formatting and stuff。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 但它实际上是在划掉点击的项目。这个代码。我会给你展示这个代码的样子。哦，真的吗？哦，我在错误的地方。等一下。to-do.html。找到了。好的。待办事项应用，大多数是这样。这就是它。这是
    HTML，大约 50 行。里面有很多格式化的内容。
- en: but ultimately what happens is we have a button here， this new task button，
    and we click it。 we call the add task function， which is actually defined in all
    of our actual Python logic we put in a little helper file here。 This is to keep
    it a little bit cleaner。 Okay。 My vim is。 There it is。 Okay。 So your add task。
    what we're doing here is we're really playing with the DOM。 We're able to pull
    things out。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 但最终发生的事情是我们这里有一个按钮，这个新任务按钮，我们点击它。我们调用 add task 函数，这个函数实际上在我们所有的 Python 逻辑中定义，并且我们把它放在一个小的辅助文件里。这是为了保持代码的整洁。好的，我的
    vim 是……好吧。你的 add task。我们在这里实际上是在玩弄 DOM。我们能够提取内容。
- en: We're able to set the check mark on things。 We're able to do all these kinds
    of things here。 This is a really。 The point here is that there's no。 There's not
    a whole lot of translating back and forth to server state， to client state。 and
    all these other things。 You're literally just writing Python。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能够在某些项目上设置勾选标记。我们能够做这些事情。这真的很。关键在于没有。没有很多来回转换服务器状态和客户端状态的操作。你实际上只是写 Python。
- en: You're able to import that Python code right into your page here。 and you just
    kind of play with all of it。 So it all sort of works。 And that's nice。 Okay。 These
    are some toy examples。 That's kind of cool。 Let me just walk through these a little
    bit。 So you can load the JavaScript and the CSS and all these things from a local
    server or a server you run。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将 Python 代码直接导入到你的页面中，你可以玩弄这些内容。所以这一切都能正常工作。这很好。好的。这些是一些玩具示例。这有点酷。让我带你快速浏览一下这些。你可以从本地服务器或你运行的服务器加载
    JavaScript 和 CSS 以及所有这些东西。
- en: or you can run it off of pyscript。net。 You can output to divs。 You can do all
    sorts of fun things like this。 The REPL can output to various different places。
    so you can build a nice little， you know， flexible set of REPL things。 And you
    can do， actually。 because this is loading all of Python in there， we're able to
    do more sophisticated examples。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过 pyscript.net 来运行它。你可以输出到 div。你可以做各种有趣的事情。REPL 可以输出到不同的地方，所以你可以构建一个灵活的小
    REPL 集合。而且实际上，因为这里加载了整个 Python，我们能够做更复杂的示例。
- en: We're able to go and load， for instance， scikit-learn and the panel dashboard
    library with bouquet。 and things like that。 And so I'm able to sit here and actually
    do interactive scikit-learn in the browser with zero install。 So just to be very
    clear， this panel k means that HTML， which is this guy。 Okay。 Again。 there's a
    lot of stuff in the head which we will clean up。 This is all very alpha。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能够加载，比如说，scikit-learn 和 panel dashboard 库以及 bouquet。等等。所以我可以坐在这里，实际上在浏览器中进行互动的
    scikit-learn，零安装。所以为了非常明确，这个 panel k 指的是 HTML，就是这个家伙。好的。再说一次。头部有很多东西，我们会整理一下。这一切都是非常初步的。
- en: So we're very clear。 But we'll make a lot of this stuff much simpler。 But the
    core of the logic here is we have pi nth， where we did -- oh， sorry。 This is plotted
    with Altarius and not bouquet。 But we are -- we're declaring what we need in the
    environment to run。 Those things get loaded up。 And then the actual code here
    for this dashboard is all this Python。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们非常明确。但我们会让很多东西变得简单很多。但这里逻辑的核心是我们有pi nth，我们做了——哦，抱歉。这是用Altarius绘制的，而不是bouquet。但我们正在声明我们在环境中运行所需的内容。这些东西会被加载。然后这里的实际代码就是所有这些Python。
- en: We're using Vega to declare the plots。 And so you have interactive selection
    here and update。 All this stuff just runs client-side。 And if I take this HTML
    file， again。 similar to with the little REPL or any of those other examples， if
    I take this HTML file。 I zip it up and give it to someone else， they can just
    run it。 There's no install needed。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用Vega来声明图表。因此，你可以在这里进行交互式选择和更新。这些内容都在客户端运行。如果我再次拿这个HTML文件，类似于小REPL或其他例子，如果我把这个HTML文件压缩并给别人，他们可以直接运行。无需安装。
- en: So this is a really， really powerful example of how the distribution， the sharing。
    all those things that I said， you know， what's Python not so great at。 This。 because
    it uses the browser as the primary interface and as the portable CPU。 it just
    skips over a lot of those kinds of challenges。 But you can do one step further。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这真是一个非常强大的例子，展示了分发和共享。这些都是我之前提到的，Python不太擅长的事情。因为它使用浏览器作为主要接口和可移植的CPU，很多挑战就被绕过了。但你可以进一步提升。
- en: You can go and say， you know， there's a lot of really great stuff in JavaScript。
    What if we could leverage all those libraries in JavaScript？
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以说，知道吗，JavaScript中有很多很棒的东西。如果我们可以利用所有这些JavaScript库呢？
- en: deckGL is a fantastic example of one of these powerful JavaScript visualization
    systems。 And this example， again， uses the panel dashboard library and that's
    a little visualization of the New York taxi cab data。 We can animate it and see
    how， let's make this speed a little faster。 So you sort of see in these hex bins
    the number of taxi cab pickup and drop-offs they are on the island Manhattan。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: deckGL是这些强大的JavaScript可视化系统的一个绝佳例子。这个例子再次使用了面板仪表板库，这是纽约出租车数据的小可视化。我们可以对其进行动画处理，看看，我们让这个速度快一点。所以你可以在这些六边形区间中看到曼哈顿岛上的出租车接送数量。
- en: But what's， and you can modify this。 So you can change the radius of， you know，
    how many。 how big the radius is as you're contemplating these， or creating these
    bins。 You can also change kind of visually and configure the thing。 This is all
    pretty cool。 You can slide this along。 It's actually kind of neat。 All this is
    running in the browser。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 但你可以修改这个。因此，你可以更改半径，考虑这些或创建这些区间时，半径的大小。你还可以在视觉上进行更改和配置。这一切都很酷。你可以滑动这个。这实际上相当不错。所有这些都在浏览器中运行。
- en: No install。 I could put this on a USB stick。 Give it to anyone here。 You load
    up on your machine and it would definitely work。 Maybe。 But pretty much。 [laughter]，
    Look。 I've been doing this a while。 I know not to make sort of these absolutes。
    But， you know。 the other thing you could do though， because this is actually running
    in the browser。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 无需安装。我可以把这个放在USB闪存驱动器上，给在场的任何人。你在你的机器上加载，它肯定会工作。也许。但基本上是这样的。[笑声]，看。我做这个已经一段时间了。我知道不要说绝对的事情。但，知道吗。你可以做的另一件事是，因为这个实际上是在浏览器中运行的。
- en: and because you have a full Python environment here， you can actually compile。
    you can just play with all of this。 Right？ And notice how this changed this up
    there。 Let's go back to 50。 Right？ Oh， also you can， when you click on a thing。
    I don't know if you guys can see that， but it shows you where the taxi routes
    actually went to。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 并且因为你在这里拥有完整的Python环境，你实际上可以编译。你可以玩这些内容。对吧？注意到上面的变化。我们回到50。对了，当你点击某个东西时，我不知道你们能否看到，但它会显示出租车路线实际去往何处。
- en: Isn't that neat？ It's actually really beautiful。 It is。 But you can also access
    the data frame of data itself。 So the data frame， DF。 this is in the form and
    it has a little tricky here， but it's 50，000 rows。 But I can actually say。 look，
    I just want to look at， let's say， the data frames where the trip distance was
    less than five miles。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是很棒吗？实际上它非常美丽。是的。但你也可以访问数据框本身。因此，数据框，DF。这是以这种形式呈现的，稍微有点棘手，但有50,000行。不过我实际上可以说，看看，我只想查看那些行程距离少于五英里的数据框。
- en: Can you see that？ And it's interactive。 So this is it。 You can do more complex
    expressions。 I want to find the big tippers。 What's going on here？ There you go。
    Where did the big tippers go？
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你能看到吗？而且这是互动的。所以就是这样。你可以做更复杂的表达。我想找出大额小费的来源。这里发生了什么？你看到了吗？大额小费的人去哪儿了？
- en: Right？ So this is a really interesting capability where you have access to all
    of NumPy， SciPy。 SciPy， Scikit。 And you can see that it's a little bit different。
    And you can see that it's a little bit different。 And you can see that it's a
    little bit different。 And you can see that it's a little bit different。 And you
    can see that it's a little bit different。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 对吧？这是一种非常有趣的能力，你可以访问所有的 NumPy、SciPy 和 Scikit。你会发现这有一点不同。你会发现这有一点不同。你会发现这有一点不同。你会发现这有一点不同。你会发现这有一点不同。
- en: And you can see that it's a little bit different。 And you can see that it's
    a little bit different。 And you can see that it's a little bit different。 And
    you can see that it's a little bit different。 And you can see that it's a little
    bit different。 And you can see that it's a little bit different。 And you can see
    that it's a little bit different。 And you can see that it's a little bit different。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现这有一点不同。你会发现这有一点不同。你会发现这有一点不同。你会发现这有一点不同。你会发现这有一点不同。你会发现这有一点不同。你会发现这有一点不同。你会发现这有一点不同。
- en: And you can see that it's a little bit different。 And you can see that it's
    a little bit different。 And you can see that it's a little bit different。 And
    you can see that it's a little bit different。 And you can see that it's a little
    bit different。 And you can see that it's a little bit different。 And you can see
    that it's a little bit different。 And you can see that it's a little bit different。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现这有一点不同。你会发现这有一点不同。你会发现这有一点不同。你会发现这有一点不同。你会发现这有一点不同。你会发现这有一点不同。你会发现这有一点不同。你会发现这有一点不同。
- en: And you can see that it's a little bit different。 And you can see that it's
    a little bit different。 And you can see that it's a little bit different。 And
    you can see that it's a little bit different。 And you can see that it's a little
    bit different。 And you can see that it's a little bit different。 And you can see
    that it's a little bit different。 And you can see that it's a little bit different。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现这有一点不同。你会发现这有一点不同。你会发现这有一点不同。你会发现这有一点不同。你会发现这有一点不同。你会发现这有一点不同。你会发现这有一点不同。你会发现这有一点不同。
- en: And you can see that it's a little bit different。 And you can see that it's
    a little bit different。 And you can see that it's a little bit different。 And
    you can see that it's a little bit different。 And you can see that it's a little
    bit different。 And you can see that it's a little bit different。 And you can see
    that it's a little bit different。 And you can see that it's a little bit different。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现这有一点不同。你会发现这有一点不同。你会发现这有一点不同。你会发现这有一点不同。你会发现这有一点不同。你会发现这有一点不同。你会发现这有一点不同。你会发现这有一点不同。
- en: And you can see that it's a little bit different。 And you can see that it's
    a little bit different。 And you can see that it's a little bit different。 And
    you can see that it's a little bit different。 And you can see that it's a little
    bit different。 And you can see that it's a little bit different。 And you can see
    that it's a little bit different。 And you can see that it's a little bit different。
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现这有一点不同。你会发现这有一点不同。你会发现这有一点不同。你会发现这有一点不同。你会发现这有一点不同。你会发现这有一点不同。你会发现这有一点不同。你会发现这有一点不同。
- en: And you can see that it's a little bit different。 And you can see that it's
    a little bit different。 And you can see that it's a little bit different。 And
    you can see that it's a little bit different。 And you can see that it's a little
    bit different。 And you can see that it's a little bit different。 And you can see
    that it's a little bit different。 And you can see that it's a little bit different。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现这有一点不同。你会发现这有一点不同。你会发现这有一点不同。你会发现这有一点不同。你会发现这有一点不同。你会发现这有一点不同。你会发现这有一点不同。你会发现这有一点不同。
- en: And you can see that it's a little bit different。 And you can see that it's
    a little bit different。 And you can see that it's a little bit different。 And
    you can see that it's a little bit different。 And you can see that it's a little
    bit different。 And you can see that it's a little bit different。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到它有一点不同。你可以看到它有一点不同。你可以看到它有一点不同。你可以看到它有一点不同。你可以看到它有一点不同。你可以看到它有一点不同。
- en: '![](img/62f475ca8a748fa6d0ea6cb5a8d61f2e_5.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/62f475ca8a748fa6d0ea6cb5a8d61f2e_5.png)'
- en: And you can see that it's a little bit different。 And you can see that it's
    a little bit different。 And you can see that it's a little bit different。 And
    you can see that it's a little bit different。 And you can see that it's a little
    bit different。 And you can see that it's a little bit different。 And you can see
    that it's a little bit different。 And you can see that it's a little bit different。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到它有一点不同。你可以看到它有一点不同。你可以看到它有一点不同。你可以看到它有一点不同。你可以看到它有一点不同。你可以看到它有一点不同。你可以看到它有一点不同。你可以看到它有一点不同。
- en: And you can see that it's a little bit different。 And you can see that it's
    a little bit different。 And you can see that it's a little bit different。 And
    you can see that it's a little bit different。 And you can see that it's a little
    bit different。 And you can see that it's a little bit different。 And you can see
    that it's a little bit different。 And you can see that it's a little bit different。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到它有一点不同。你可以看到它有一点不同。你可以看到它有一点不同。你可以看到它有一点不同。你可以看到它有一点不同。你可以看到它有一点不同。你可以看到它有一点不同。你可以看到它有一点不同。
- en: And you can see that it's a little bit different。 And you can see that it's
    a little bit different。 And you can see that it's a little bit different。 And
    you can see that it's a little bit different。 And you can see that it's a little
    bit different。 And you can see that it's a little bit different。 And you can see
    that it's a little bit different。 And you can see that it's a little bit different。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到它有一点不同。你可以看到它有一点不同。你可以看到它有一点不同。你可以看到它有一点不同。你可以看到它有一点不同。你可以看到它有一点不同。你可以看到它有一点不同。你可以看到它有一点不同。
- en: And you can see that it's a little bit different。 And you can see that it's
    a little bit different。 And you can see that it's a little bit different。
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到它有一点不同。你可以看到它有一点不同。你可以看到它有一点不同。
- en: '![](img/62f475ca8a748fa6d0ea6cb5a8d61f2e_7.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/62f475ca8a748fa6d0ea6cb5a8d61f2e_7.png)'
- en: And you can see that it's a little bit different。 And you can see that it's
    a little bit different。 And you can see that it's a little bit different。 And
    you can see that it's a little bit different。 And you can see that it's a little
    bit different。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到它有一点不同。你可以看到它有一点不同。你可以看到它有一点不同。你可以看到它有一点不同。你可以看到它有一点不同。
- en: '![](img/62f475ca8a748fa6d0ea6cb5a8d61f2e_9.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/62f475ca8a748fa6d0ea6cb5a8d61f2e_9.png)'
- en: And you can see that it's a little bit different。 And you can see that it's
    a little bit different。 And you can see that it's a little bit different。 And
    you can see that it's a little bit different。 And you can see that it's a little
    bit different。 And you can see that it's a little bit different。 And you can see
    that it's a little bit different。
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到它有一点不同。你可以看到它有一点不同。你可以看到它有一点不同。你可以看到它有一点不同。你可以看到它有一点不同。你可以看到它有一点不同。你可以看到它有一点不同。
- en: '![](img/62f475ca8a748fa6d0ea6cb5a8d61f2e_11.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/62f475ca8a748fa6d0ea6cb5a8d61f2e_11.png)'
- en: And you can see that it's a little bit different。 And you can see that it's
    a little bit different。 And you can see that it's a little bit different。 And
    you can see that it's a little bit different。 And you can see that it's a little
    bit different。 And you can see that it's a little bit different。 And you can see
    that it's a little bit different。 And you can see that it's a little bit different。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到它有一点不同。你可以看到它有一点不同。你可以看到它有一点不同。你可以看到它有一点不同。你可以看到它有一点不同。你可以看到它有一点不同。你可以看到它有一点不同。你可以看到它有一点不同。
- en: And you can see that it's a little bit different。 And you can see that it's
    a little bit different。 And you can see that it's a little bit different。 And
    you can see that it's a little bit different。 And you can see that it's a little
    bit different。 And you can see that it's a little bit different。 And you can see
    that it's a little bit different。 And you can see that it's a little bit different。
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: And you can see that it's a little bit different。 And you can see that it's
    a little bit different。 And you can see that it's a little bit different。 And
    you can see that it's a little bit different。 And you can see that it's a little
    bit different。 And you can see that it's a little bit different。 And you can see
    that it's a little bit different。 And you can see that it's a little bit different。
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: And you can see that it's a little bit different。 And you can see that it's
    a little bit different。 And you can see that it's a little bit different。 And
    you can see that it's a little bit different。 And you can see that it's a little
    bit different。 And you can see that it's a little bit different。 And you can see
    that it's a little bit different。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/62f475ca8a748fa6d0ea6cb5a8d61f2e_13.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
- en: And you can see that it's a little bit different。 And you can see that it's
    a little bit different。 And you can see that it's a little bit different。 And
    you can see that it's a little bit different。 And you can see that it's a little
    bit different。 And you can see that it's a little bit different。 And you can see
    that it's a little bit different。 And you can see that it's a little bit different。
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: And you can see that it's a little bit different。 And you can see that it's
    a little bit different。 And you can see that it's a little bit different。 And
    you can see that it's a little bit different。 And you can see that it's a little
    bit different。 And you can see that it's a little bit different。 And you can see
    that it's a little bit different。 And you can see that it's a little bit different。
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: And you can see that it's a little bit different。 And you can see that it's
    a little bit different。 And you can see that it's a little bit different。 And
    you can see that it's a little bit different。 And you can see that it's a little
    bit different。 And you can see that it's a little bit different。 And you can see
    that it's a little bit different。 And you can see that it's a little bit different。
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: And you can see that it's a little bit different。 And you can see that it's
    a little bit different。 And you can see that it's a little bit different。 And
    you can see that it's a little bit different。 And you can see that it's a little
    bit different。 And you can see that it's a little bit different。 And you can see
    that it's a little bit different。 And you can see that it's a little bit different。
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: And you can see that it's a little bit different。 And you can see that it's
    a little bit different。 And you can see that it's a little bit different。 And
    you can see that it's a little bit different。 And you can see that it's a little
    bit different。 And you can see that it's a little bit different。 And you can see
    that it's a little bit different。 And you can see that it's a little bit different。
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: And you can see that it's a little bit different。
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/62f475ca8a748fa6d0ea6cb5a8d61f2e_15.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
- en: And you can see that it's a little bit different。 And you can see that it's
    a little bit different。 And you can see that it's a little bit different。 And
    you can see that it's a little bit different。 And you can see that it's a little
    bit different。 And you can see that it's a little bit different。 And you can see
    that it's a little bit different。 And you can see that it's a little bit different。
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: And you can see that it's a little bit different。 And you can see that it's
    a little bit different。 And you can see that it's a little bit different。 And
    you can see that it's a little bit different。 And you can see that it's a little
    bit different。 And you can see that it's a little bit different。 And you can see
    that it's a little bit different。 And you can see that it's a little bit different。
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: And you can see that it's a little bit different。 And you can see that it's
    a little bit different。 And you can see that it's a little bit different。 And
    you can see that it's a little bit different。 And you can see that it's a little
    bit different。 And you can see that it's a little bit different。 And you can see
    that it's a little bit different。 And you can see that it's a little bit different。
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: And you can see that it's a little bit different。 And you can see that it's
    a little bit different。 And you can see that it's a little bit different。 And
    you can see that it's a little bit different。 And you can see that it's a little
    bit different。 And you can see that it's a little bit different。 And you can see
    that it's a little bit different。 And you can see that it's a little bit different。
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: And you can see that it's a little bit different。 And you can see that it's
    a little bit different。 And you can see that it's a little bit different。 And
    you can see that it's a little bit different。 And you can see that it's a little
    bit different。 And you can see that it's a little bit different。 And you can see
    that it's a little bit different。 And you can see that it's a little bit different。
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: And you can see that it's a little bit different。 And you can see that it's
    a little bit different。 And you can see that it's a little bit different。 And
    you can see that it's a little bit different。 And so it's a really， it's a hodgepodge
    of different things。 It's very complex， actually。 much more complex than I think
    it needs to be。 And the thing we don't talk about is the fact that because we
    split the session state in。
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: half， a tremendous amount of stuff goes back to the server that like in the
    1980s and， 1990s。 you wouldn't ever send back to a server。 You would just。 it
    would be part of the object model state kind of living in the app itself。 And
    you can see that it's going to be part of the way it's going to be。
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 一半，大量的内容会回传到服务器，就像在1980年代和1990年代一样。你根本不会把数据返回到服务器。你会只是。这会成为对象模型状态的一部分，类似于在应用程序内部存在。你可以看到这将成为未来的一部分。
- en: And you can see it's going to be part of the way it's going to be。 And you can
    see that it's going to be part of the way it's going to be。 And you can see that
    it's going to be part of the way it's going to be。 And you can see that it's going
    to be part of the way it's going to be。
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到这将成为未来的一部分。你可以看到这将成为未来的一部分。你可以看到这将成为未来的一部分。你可以看到这将成为未来的一部分。
- en: And you can see that it's going to be part of the way it's going to be。 And
    you can see that it's going to be part of the way it's going to be。 And you can
    see that it's going to be part of the way it's going to be。 And you can see that
    it's going to be part of the way it's going to be part of the way it's going to
    be。
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到这将成为未来的一部分。你可以看到这将成为未来的一部分。你可以看到这将成为未来的一部分。你可以看到这将成为未来的一部分。
- en: And you can see that it's going to be part of the way it's going to be part
    of the way it's going to be。 And you can see that it's going to be part of the
    way it's going to be part of the way it's going to be。 And you can see that it's
    going to be part of the way it's going to be。 And you can see that it's going
    to be part of the way it's going to be。
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到这将成为未来的一部分。你可以看到这将成为未来的一部分。你可以看到这将成为未来的一部分。你可以看到这将成为未来的一部分。
- en: And you can see that it's going to be part of the way it's going to be。 And
    you can see that it's going to be part of the way it's going to be。 And you can
    see that it's going to be part of the way it's going to be。 And you can see that
    it's going to be part of the way it's going to be。
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到这将成为未来的一部分。你可以看到这将成为未来的一部分。你可以看到这将成为未来的一部分。你可以看到这将成为未来的一部分。
- en: And you can see that it's going to be part of the way it's going to be。 And
    you can see that it's going to be part of the way it's going to be。 And you can
    see that it's going to be part of the way it's going to be。 And you can see that
    it's going to be part of the way it's going to be。
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到这将成为未来的一部分。你可以看到这将成为未来的一部分。你可以看到这将成为未来的一部分。你可以看到这将成为未来的一部分。
- en: What are some better ways to do efficient memory transfers back and forth。 between
    Python and JavaScript？ All these different kinds of things。 better tooling for
    debugging and JIT and things like that。 And there's a lot of hard problems too。
    Obviously packaging is a hard problem。 We'd have to sit down and really think
    about how we're going to do this in a way that lets people deliver secure web
    apps。
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 有哪些更好的方法可以实现Python和JavaScript之间高效的内存传输？所有这些不同的事情。更好的调试工具、JIT和其他相关内容。而且还有许多困难的问题。显然，打包是一个困难的问题。我们必须坐下来认真思考如何以一种让人们能够交付安全Web应用程序的方式来实现。
- en: But at the same time， lets the community quickly iterate and move forward on
    things。 We want to avoid any additional kinds of things that we've seen in the
    JavaScript ecosystem when there's lots of packages moving very quickly。 So there's
    lots of learn here and to think about。 There's async and multi-threading things。
    There's a lot of potential here for beautiful， really cool stuff with multi-processing
    sub-interpreters and server-side stuff。
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 但与此同时，让社区能够快速迭代并向前推进。我们希望避免在JavaScript生态系统中看到的任何额外问题，当许多包快速移动时。所以这里有很多要学习和思考的。还有异步和多线程的事情。这里有很多潜力，能够实现多进程子解释器和服务器端的美妙、真正酷的东西。
- en: But at the same time， it's like pretty subtle work。 So we've got to make sure
    all this stuff works。 And then we can actually build multiple interpreter backends。
    Because many of the interpreters from Python， they can target。 They can be targeted
    for web assembly， alternative interpreters。
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 但与此同时，这项工作非常微妙。所以我们必须确保所有这些内容都能正常工作。然后我们实际上可以构建多个解释器后端。因为许多来自Python的解释器可以目标定位。它们可以定位到WebAssembly，替代解释器。
- en: And with all of the extension modules being targeted to web assembly now。 all
    the other alternative interpreters to CPython can actually be on a level playing
    ground from an extension perspective。 which has not been the case for a very long
    time。 So the reason why everyone keeps using CPython。 not because the CPython
    devs aren't cool。 They're awesome。
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 而且现在所有扩展模块都针对Web Assembly，所有其他替代的CPython解释器实际上可以在扩展的角度上处于同一竞争水平，这在很长一段时间内都没有发生过。因此，大家持续使用CPython的原因并不是因为CPython的开发者不好，他们非常出色。
- en: But the point is that there's a giant ecosystem of native libraries and extensions
    that only speak to CPython。 So this is -- but now how do we do this without burning
    all the devs out？
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 关键在于，有一个巨大的本地库和扩展的生态系统，只与CPython对接。那么，如何在不让所有开发者疲惫的情况下做到这一点呢？
- en: Because this is also a lot of really hard work。 So as a community。 you have
    to get together and really think about this and do this thoughtfully。 But I think
    everyone recognizes there's a massive prize to be won here。 It's absolutely massive。
    Arrow can get our legs。 We can just go on land and go where the people are。
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这也是一项非常艰巨的工作。因此，作为一个社区，你必须聚在一起，认真考虑这个问题并深思熟虑。但我认为每个人都意识到这里有一个巨大的奖品可以获得。真的是非常庞大。我们可以直接上陆地，去人们所在的地方。
- en: And solve the most fundamental and important problem， which is doing programming
    for the 99%。 And what I mean by that is this。 I think this is something that most
    people maybe don't think about。 One of the things that I've known for a long time，
    but I think it's bearish repeating。 is that Python has a unique position as the
    programming language。
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 解决最基本和重要的问题，即为99%的人编程。我指的是这个。我认为大多数人可能没有想到这一点。我很久以来就知道的一件事，但我认为值得重复的是，Python作为编程语言具有独特的位置。
- en: Because it was designed -- has this design ethos from the founder of it， this
    creator。 and all the core devs around it， there's this ethos about Python being
    approachable as a teaching language。 as a language to learn。 Really， really prioritizing
    education in the community。 Things in the Zen of Python， like readability counts
    and explicit is better than implicit。
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 因为它是由创始人及其周围的所有核心开发者设计的，具有这种设计理念，Python作为一种教学语言是非常可接近的，作为学习的语言。真正优先考虑社区中的教育。在Python之禅中，有诸如可读性很重要和显式优于隐式的原则。
- en: These are lots of these little things all come together to make it。 So that
    Python is a language that can be learned not just by the programmers who learn
    a new language every year。 but by all of their other people in the world who don't
    consider themselves programmers。 but they can do a little bit of something on
    their computer。
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这些小事结合在一起，使Python不仅是程序员每年学习新语言的语言，还可以被世界上那些不认为自己是程序员但在电脑上能做一点事情的人学习。
- en: And so this is led Python -- this is one of the dynamics that's allowed Python
    to dominate the way it has。 over the last 10， 15 years。 So how do we extend this
    and how can PyScript help？
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得Python在过去10到15年间能够主导的一个动态。那么我们如何扩展这一点，PyScript又能如何帮助呢？
- en: One question I'd like to ask everyone， and just give you a moment to think about
    how many software devs are there out there in the world。 Right？ 100，000？ Probably
    more than that。 100 million？ Definitely not。 Right？ How many are there？
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我想问大家一个问题，给你们一点时间想一想，世界上有多少软件开发者？对吧？10万？可能不止。1亿？绝对不是。到底有多少？
- en: And when I did some research into this， the numbers all seem to converge。 somewhere
    around 25 million， maybe a little bit more than that， maybe a little bit less
    than that。 But if you put that in perspective on how many people there are on
    the planet， it's 0。3%。 So。 can we turn the houselights on here real quick？ Is
    that -- I'm going to do the PyScript turn on houselights。
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 当我对此进行一些研究时，所有数据似乎都汇聚在一起。大约2500万，也许稍微多一点，也许稍微少一点。但如果考虑到地球上有多少人，这只是0.3%。所以，可以快速开灯吗？这是——我要用PyScript来开灯。
- en: No？ Okay。 There's a few -- I asked a few people beforehand as my volunteers
    to stand up。 Can my volunteer stand up？ What are my volunteers？ All right。 Oh，
    houselights！ It worked！
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 没有？好吧。我之前问了一些人作为志愿者站起来。我的志愿者可以站起来吗？我的志愿者在哪里？好吧，开灯！成功了！
- en: PyScript works。 Great。 So， six people。 If this room was the population of Earth。
    those six people are your software developers。 Now。 can three of you -- this is
    a distributed computing problem -- can three of you sit down？ All right。 There
    should be just three people standing。 Okay。 That's your Python programmers。
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**PyScript**有效。太好了。所以，六个人。如果这个房间代表地球人口，那这六个人就是你的软件开发者。现在，能有三个人——这是一个分布式计算问题——能坐下吗？好吧。应该只有三个人站着。好的。这就是你的**Python**程序员。'
- en: Can one of you sit down and one -- and another person crouch？ Okay。 That's your
    number of people who know enough stats and what not to do some data science in
    ML。 And then， if we -- if we let the crouching person finally sit down and rest
    their legs。 the one person standing， that is your AI/ML engineer。
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 你们中有人能坐下，而另一个人蹲下吗？好吧。这就是知道足够统计知识的人数，可以在机器学习中进行一些数据科学。如果我们让蹲着的人最终坐下，休息腿，那位站着的人就是你的AI/ML工程师。
- en: All the rest of you have to use the systems that she builds， that she twiddles
    the knobs for。 Point 3% -- and actually less than that -- point 1% of the population
    has anything approaching the skills and capability to do machine learning ML/AI。
    And you can turn the houselights off now and thank you， you can sit down as well。
    The point of this is that this is not a good state of affairs。 This is the state
    of affairs today。
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 其他所有人必须使用她构建的、她调节的系统。大约0.3%——实际上更少——0.1%的人口具备接近于进行机器学习ML/AI的技能和能力。现在可以关掉房间灯，谢谢，你们也可以坐下。这个问题是：这并不是一个好的状态。今天的状态就是如此。
- en: And it will continue to be the state of affairs unless we do something dramatically
    different。 One of the things that I found very inspiring when I lived in Boston
    was the Boston Public Library had this huge engraving on the sides。 It's the commonwealth
    requires the education of the people as a safeguard of order and liberty。 So all
    of us here -- well， many of us， most of us here are coders。 And we like to code。
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 除非我们采取一些完全不同的措施，否则这种状态将继续存在。我在波士顿生活时发现的一个非常鼓舞人心的事情是波士顿公共图书馆侧面有一块巨大的雕刻。它写着：“联邦要求人民接受教育，以维护秩序与自由。”所以在座的我们——好吧，许多人，我们大多数人都是程序员。我们喜欢编程。
- en: we like to create things。 Python is a wonderful language to help us do all those
    things。 But we really have to ask ourselves， why do we code？ What is it for？ And
    I think it's really。 really， really important that we keep our eye on the prize。
    which is that democratization and literacy --， computer literacy -- computational
    literacy。
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们喜欢创造东西。**Python**是一种帮助我们实现所有这些的绝佳语言。但我们真的需要问自己，为什么我们要编码？它的意义是什么？我认为保持目标明确非常重要，那就是民主化和素养——计算机素养——计算素养。
- en: as well as data literacy -- are foundational to ensure an open and free future
    for mankind -- for humankind。 sorry， for humankind。 So when we created SciPy and
    Pi Data and we did all these things to try to spearhead the open data science
    movement。 that was to ensure that machine learning and business computation in
    a cybernetic world had at least some open source and accessible foundations。 With
    PiScript， I'm really hoping that we can broaden that mission to the broader web
    and to computing in general -- right。
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 数据素养也是基础，确保人类未来开放自由。抱歉，应该是人类。因此，当我们创建**SciPy**和**Pi Data**，并尝试推动开放数据科学运动时，是为了确保机器学习和商业计算在网络世界中至少有一些开源和可访问的基础。通过**PiScript**，我真的希望能够将这个使命拓展到更广泛的网络和计算领域。
- en: computing for the people and for their communities。 So I would like to see kids
    first introduction of programming to be PiScript。 Install nothing。 You have a
    tablet， you have a little laptop， whatever it might be。 You can go to the library
    computer and you're rocking a little in， right？
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 为人民及其社区进行计算。因此，我希望孩子们首次接触编程时能使用**PiScript**。无需安装任何东西。你有一台平板电脑，或一台小笔记本电脑，随便是什么。你可以去图书馆的电脑，然后就能开始使用，对吧？
- en: We don't have to reinvent anything because existing educational materials on
    HTML and CSS and Python -- all these just pretty much will work。 We can focus
    on productivity and quality of life issues for casual programmers。 not the experienced
    software developers because you all will happily take on a ton of pain。 obviously。
    If you bashed your head into a wall enough。
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们无需重新发明任何东西，因为现有的HTML、CSS和Python教育材料都可以使用。我们可以专注于休闲程序员的生产力和生活质量问题，而不是经验丰富的软件开发者，因为你们会乐意承担许多痛苦，显然。如果你们把头撞在墙上足够多次。
- en: eventually the wall turns into a pile of yaml， which is a software thing to
    bash your head into。 The idea here is that I would love for us to make the web
    a friendly hackable place where anyone can make interesting things and share it
    with other people。
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，墙壁变成了一堆yaml，这是一个让你头痛的软件。这里的想法是我希望我们能让网络成为一个友好的可黑客的地方，让任何人都能创造有趣的东西并与他人分享。
- en: The remix aspect of this culture has really been lost， I think。 in the last
    20 years or so as the stacks have gotten more and more complicated。 The idea here
    is to put joy back into all of it， really to promote creativity for everyone to
    have fun。 really want everyone to bring some crazy and quirky stuff into it。 And
    by that。
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为，这种文化的混音方面在过去20年里真的丢失了，随着技术堆栈变得越来越复杂。这里的想法是将快乐重新带回其中，真正促进每个人的创造力，大家都能开心。真的希望每个人都能带来一些疯狂和古怪的东西。
- en: what I mean is something like this。 The old XKCD thing that everyone saw， right？
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我的意思是这样的。这是大家都见过的老XKCD，对吧？
- en: This comic where Randall Munro was first getting introduced to Python。 he just
    loved how it made him feel。 Of course， later he had an XKCD where he made fun
    of the packaging mess that we had。 so that was not so good。 But， you know， everyone
    can never see that。 Let's do that。 Let's do more of that。 Thank you all very much。
    I want to thank the people who made this possible。
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这个漫画是兰德尔·门罗首次接触Python时的情景。他喜欢这种感觉。当然，后来他有个XKCD拿我们打包混乱开玩笑，所以那不是很好。但你知道，大家永远看不到。让我们来做这个。让我们做更多的。非常感谢大家。我想感谢让这一切成为可能的人。
- en: This project has been kind of crazy， but it's been a lot of fun。 Fabio， where
    are you， Fabio？
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目有点疯狂，但真的很有趣。法比奥，你在哪里，法比奥？
- en: Stand up。 I don't know where he is。 He's right there。 Fabio is a man。 So tremendous
    amount of the work。 All of credit， who knows to him。 The Anaconda team making
    some of these demos and my late night slacks and everything。 Thank you all very
    much for being so responsive and making all this happen。 The PiaDide maintainers。
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 站起来。我不知道他在哪里。他就在那儿。法比奥是个了不起的人。做了大量的工作。所有的功劳，谁知道归他。安aconda团队制作了一些演示，感谢我深夜的Slack和一切。非常感谢大家如此迅速的反应，让这一切成为现实。PiaDide的维护者们。
- en: So Roman and Hood have been amazing to work with and so friendly。 They have
    a talk on PiaDide and WebAssembly。 If you want to nerd out on the internals。 they
    have a talk later this afternoon。 Please go to that talk。 And then Michael Dropboom
    and Christian Himes has been very supportive and very helpful with their feedback
    on all of this。
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 罗曼和胡德一起工作非常棒，他们非常友好。他们有关于PiaDide和WebAssembly的演讲。如果你想了解内部细节，他们今天下午有一个演讲。请去听那个演讲。还有迈克尔·德罗普博姆和克里斯蒂安·海梅斯，他们在所有这些方面都给予了非常支持和帮助的反馈。
- en: The project is， again， I just want to reiterate， super， super， super alpha，
    right？ In fact。 when you put alpha in the URL for the JavaScript， you are signing
    the EULA to say you acknowledge this is alpha。 But still， play with it。 Kind of
    like mess with it。 Figure stuff out。 PiScript。net。 Come check out our open space
    that we'll have later today or come by the Anaconda booth。
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目，又一次，我想重申，超级，超级，超级初期，对吧？实际上，当你在JavaScript的URL中放入alpha时，你是在签署最终用户许可协议，表示你承认这是alpha版本。但仍然，玩玩它。就像是搞搞它。搞清楚一些东西。PiScript.net。欢迎来看看我们今天稍晚的开放空间，或者来安aconda展位。
- en: Follow us at PiScript Dev on Twitter。 If you are the lurker。 the squatter that
    has the PiScript Twitter tag， like talk to me， I'll pay you money for it。 And
    then also， please contribute and give us your thoughts on GitHub。 So thank you
    all very。 very much。
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在Twitter上关注我们@PiScript Dev。如果你是潜水者，或者拥有PiScript Twitter标签的 squatters，跟我联系，我会为此付钱。而且，请在GitHub上贡献你的想法。非常感谢大家。
- en: '![](img/62f475ca8a748fa6d0ea6cb5a8d61f2e_17.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/62f475ca8a748fa6d0ea6cb5a8d61f2e_17.png)'
- en: '[applause]。'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '[掌声]。'
- en: '![](img/62f475ca8a748fa6d0ea6cb5a8d61f2e_19.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/62f475ca8a748fa6d0ea6cb5a8d61f2e_19.png)'
