- en: P36：Talk - Dustin Ingram_ Securing the Open Source Software Supply Chain - VikingDen7
    - BV1f8411Y7cP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P36：演讲 - 达斯汀·英格拉姆_保护开源软件供应链 - VikingDen7 - BV1f8411Y7cP
- en: Open source security team。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 开源安全团队。
- en: '![](img/36c8b03747c71096776f8465aa1bb28a_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/36c8b03747c71096776f8465aa1bb28a_1.png)'
- en: Today he's going to talk about how we can secure our open source supply chain。
    Thank you。 That's going to take it away。 Thanks。 Hi everybody。 It's so nice to
    be in person and have you all here。 So like Bernard said， I'm Dustin。 I have a
    couple hats。 I'm a software engineer on Google's open source security team。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 今天他将讨论我们如何保障我们的开源供应链的安全。谢谢。这就交给你了。谢谢大家。能够亲自见到你们真是太好了。所以正如伯纳德所说，我是达斯汀。我有几个角色。我是谷歌开源安全团队的软件工程师。
- en: This is a new team at Google。 Our mission is to make open source software at
    Google and the rest of the world uses more secure。 I'm also a director of the
    Python software foundation where I help ensure the long term success of one very
    big open source python project that you have probably heard of。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这是谷歌的新团队。我们的使命是让谷歌及世界其他地方的开源软件更安全。我也是Python软件基金会的主任，帮助确保一个非常大的开源python项目的长期成功，你可能听说过这个项目。
- en: python itself。 And I'm also a maintainer of the python package index where I
    help ensure the long term success of hundreds of thousands of tiny little python
    projects that you might have never heard of。 I'm going to be a bit unconventional
    and start with a Q&A。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: python本身。我还是python包索引的维护者，帮助确保成千上万你可能从未听说过的小型python项目的长期成功。我将采取一些不寻常的做法，先进行问答。
- en: But I'm also going to be the one asking the questions and then I'm also going
    to answer them。 So bear with me。 And the reason is because I think there's some
    really important questions that we should all be asking around open source security
    right now or the questions that you might already have。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 但我也会是提问的人，然后我也会回答这些问题。所以请耐心听我说。原因是我认为现在我们应该问一些关于开源安全的重要问题，或者是你可能已经有的问题。
- en: I'm going to try and preempt them。 First is， is it safe to use open source software？
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我会尽量先回答这些问题。第一个是，使用开源软件安全吗？
- en: This might be a question that you came here with today。 Maybe you've heard a
    lot about security challenges and open source things happening in the news。 You
    might have doubts or fears about the viability of using open source。 So I'm here
    to tell you that is it safe to use open source software？ Yes。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是你今天来到这里时带来的问题。也许你听说了很多关于安全挑战和开源软件的新闻。你可能对使用开源的可行性有疑虑或担忧。所以我在这里告诉你，使用开源软件安全吗？是的。
- en: the reality is that every day all kinds of open source software is deployed
    and somehow it all works。 And as someone whose career exists because people use
    open source software， I want to tell you yes。 Like yes， it is secure。 But you
    might say， wait， Dustin。 didn't you just say that your job was to make open source
    more secure？
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现实是，每天各种各样的开源软件被部署，而且它们都能正常工作。作为一个因为人们使用开源软件而存在的职业，我想告诉你“是的”。没错，它是安全的。但你可能会说，等等，达斯汀。你不是刚说你的工作是让开源更安全吗？
- en: Doesn't that also imply that open source software isn't quite as safe as it
    could be？
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这难道不意味着开源软件并没有它可以达到的安全性吗？
- en: And so kind of also yes。 So I really want to say yes with like a giant asterisk。
    And so basically it depends on how you use it。 And also it depends on what your
    threat model is。 You want to read that whole paragraph， catch me afterwards。 So
    maybe a better question to be asking is this， how can we use open source software
    safely？
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，有点儿是的。我真的想用一个巨大的星号说“是的”。基本上这取决于你如何使用它，也取决于你的威胁模型是什么。你想要读完整个段落，之后再找我。也许一个更好的问题是，我们如何安全地使用开源软件？
- en: If we're already using open source， how can we use it more safely？ And if you're
    not。 what should you be aware of？ So I want to start with what the software supply
    chain is。 Software supply chain is everything that it takes to produce your software。
    Every other piece of software， every piece of infrastructure。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们已经在使用开源软件，我们如何能够更安全地使用它？如果你没有使用，你应该注意什么？所以我想从软件供应链开始。软件供应链是制作软件所需的一切。每一段软件，每一块基础设施。
- en: just everything that is a dependency for you to create and use software。 So
    what is the secure software supply chain？ This is all those things and they're
    also definitely not compromised。 You may ask why is software supply chain security
    such a big deal？
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你创建和使用软件所依赖的所有内容。那么什么是安全的软件供应链？这包括所有这些内容，而且它们肯定没有被破坏。你可能会问，为什么软件供应链安全是个大问题？
- en: And the reason is basically because virtually everyone uses open source software。
    Anyone who says they don't probably don't have a great idea of what software they're
    using。 And in the past we made a lot of assumptions about how open source software
    is created。 how it's distributed， how it's consumed， etc。 And some of these assumptions
    were that things wouldn't go wrong and these assumptions were wrong。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 原因基本上是因为几乎每个人都在使用开源软件。任何说他们不使用的人可能对他们正在使用的软件并没有很好的了解。在过去，我们对开源软件的创建、分发、消费等做出了许多假设。其中一些假设是事情不会出错，而这些假设是错误的。
- en: But these problems have always existed so possibly a better question is。 why
    is software supply chain security such a big deal right now？
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 但这些问题一直存在，所以更好的问题可能是，为什么软件供应链安全现在是个大问题？
- en: And part of this is because there's an incredible amount of scrutiny being paid
    to recent compromises。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分原因在于对近期泄露事件的极大关注。
- en: '![](img/36c8b03747c71096776f8465aa1bb28a_3.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/36c8b03747c71096776f8465aa1bb28a_3.png)'
- en: We have all sorts of things happening。 Malicious libraries are published on
    package indexes。 There are new types of supply chain attacks affecting large corporations。
    We have an unintentional remote code execution in an extremely widely used Java
    logging library。 That vulnerability was so fun that we did it twice。 We had an
    entirely new class of malware。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们遇到了各种各样的事情。恶意库在包索引上被发布。新型供应链攻击正在影响大型企业。我们在一个极其广泛使用的Java日志库中无意中执行了远程代码。这一漏洞非常有趣，因此我们做了两次。我们有了一类全新的恶意软件。
- en: protestware。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: protestware。
- en: '![](img/36c8b03747c71096776f8465aa1bb28a_5.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/36c8b03747c71096776f8465aa1bb28a_5.png)'
- en: And we have SolarWinds which I think just about everyone and their mother has
    heard about by now。 But this was described as a worst nightmare cyber attack。
    And mostly it was described as a worst nightmare cyber attack because it was extremely
    sophisticated and it directly attacked the US government。 But the main reason
    why so much scrutiny is being paid to the open source software supply chain right
    now。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 还有SolarWinds，我想几乎每个人和他们的母亲现在都听说过这个事件。但这被描述为最糟糕的网络攻击梦魇。主要是因为这次攻击极其复杂，并且直接攻击了美国政府。但是目前对开源软件供应链如此关注的主要原因。
- en: the main reason is because of this。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 主要原因正是因为这个。
- en: '![](img/36c8b03747c71096776f8465aa1bb28a_7.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/36c8b03747c71096776f8465aa1bb28a_7.png)'
- en: Executive order 14028 which is on improving the nation's cyber security。 Which
    means actually the reason that supply chain security is a big deal is because
    the president said so。 Does anyone get that reference？ I don't know。 So for anyone
    not based in the US or for anyone based in the US who isn't up on how their government
    works。 an executive order is kind of like an email from your boss telling you
    what to do。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 行政命令14028旨在改善国家的网络安全。这意味着，实际上供应链安全之所以成为大问题，是因为总统这么说。有人理解这个引用吗？我不知道。因此，对于任何不在美国的人，或者在美国但对政府运作不太了解的人来说，行政命令有点像你老板发来的电子邮件，告诉你该做什么。
- en: So this has the effect of setting policy for the entire executive branch of
    the federal government in the US。 And it's also kind of like it's kind of like
    placing an order at a restaurant in the sense that you kind of say。 what you want
    to happen and then people go off and they try to figure out what that means and
    how to make it happen。 and maybe that takes a while to come back to you。 So this
    executive order was published about a year ago and we're still at the everyone
    is kind of trying to figure out how to make it happen stage。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这对美国联邦政府的整个行政部门设置了政策。这有点像在餐厅点餐，你说出你希望发生的事情，然后人们去尝试理解这意味着什么以及如何实现，也许这需要一些时间才能反馈给你。因此，这项行政命令大约在一年前发布，我们仍处于大家都在努力
    figuring out how to make it happen 的阶段。
- en: This executive order has a number of directives but it specifically calls out
    the software supply chain。 And if you think for a minute that this is just limited
    to the government。 remember that the government uses a lot of software。 They use
    a lot of the same software that you and I use。 So in terms of this order。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这项行政命令有许多指令，但它特别指出了软件供应链。如果你想一想，这不仅限于政府，记住政府使用很多软件。它们使用与你我相同的很多软件。因此，就这项命令而言。
- en: they sort of have a viral effect of improving software security for everyone。
    This is a good type of virus。 So one last question you might have。 how are we
    going to make this happen？
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 它们在改善每个人的软件安全性方面有一种病毒效应。这是一种良性的病毒。所以你可能会有最后一个问题：我们将如何实现这一点？
- en: '![](img/36c8b03747c71096776f8465aa1bb28a_9.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/36c8b03747c71096776f8465aa1bb28a_9.png)'
- en: And that's what I'd like to tell you about in this talk。 I don't have all the
    answers。 I don't have a crystal ball。 But there's some really interesting stuff
    happening and I want you to be aware of it all and also how it might affect you。
    So let's go on to part two。 Before I launch into a bunch of new tools and new
    technologies that you might have never heard of because they were like maybe created
    last year。 I want to take a minute to sort out like a base level of understanding，
    define some terms。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我想在这次演讲中告诉你的内容。我并没有所有答案，也没有水晶球。但有一些非常有趣的事情发生，我希望你能够意识到这一切，以及它可能对你产生的影响。所以让我们进入第二部分。在我开始介绍一些你可能从未听说过的新工具和新技术之前，因为它们可能是在去年创建的，我想花一点时间来理顺基本理解，定义一些术语。
- en: draw some parallels to stuff that you are already familiar with。 And we're going
    to do the AVCs of secure software supply chains。 So A is for artifact。 And artifact
    is in this context a single unique blob of data。 It's probably a file。 You might
    also call this a package， a project， a release， a distribution， a wheel， a beatus。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 与你已经熟悉的事物进行一些类比。我们将进行安全软件供应链的 AVC。A 代表工件。在这个上下文中，工件是一个独特的数据块。它可能是一个文件。你也可以称之为包、项目、发布、分发、wheel
    或 beatus。
- en: an estus。 They're all artifacts， right？ We don't really use the word artifact
    too much in the context of Python and packaging。 but basically you can consider
    every single individual file on PIPI as an artifact。 A is also for attestation。
    Generally， this means that there is evidence or proof of something。 And in the
    context of supply chains， this is a cryptographically secure and verifiable proof
    that something is a little bit different。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 estus。它们都是工件，对吗？在 Python 和打包的上下文中，我们并不常用“工件”这个词，但基本上可以认为 PIPI 上的每个单独文件都是一个工件。A
    也代表认证。通常，这意味着某种东西的证据或证明。在供应链的上下文中，这是一个加密安全且可验证的证明，表明某些东西略有不同。
- en: That something happened。 Really anything that you want。 But the attestation
    itself is metadata。 which can be anything。 And then that's cryptographically secure，
    which means it's been signed。 And it's verifiable， meaning that I can go and see
    where the attestation was generated。 and ensure that the output is what I'm expecting。
    Don't worry。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 表示某些事情发生了。真的可以是任何你想要的。但认证本身是元数据，可以是任何东西。然后这就具有加密安全性，这意味着它已经被签名。并且是可验证的，意味着我可以查看认证是在哪里生成的，并确保输出是我所期望的。别担心。
- en: I'm not going to do this many for all the letters。 A is also for。 there's a
    lot of A's though。 A is also for advisory。 And advisory is the public disclosure
    of a known vulnerability for an artifact or a series of artifacts。 So you might
    call these CVEs。 They are created by maintainers or security researchers to share
    knowledge with public about a known issue。 And advisories only exist for vulnerabilities
    that we know about。 That's important。 B is for build。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会为所有字母做这么多。A 也代表着。有很多 A 的例子。A 也代表咨询。咨询是对已知漏洞的公共披露，涉及一个工件或一系列工件。因此你可能称之为 CVE。它们由维护者或安全研究人员创建，以便与公众分享关于已知问题的知识。咨询只存在于我们知道的漏洞中。这一点很重要。B
    代表构建。
- en: Build is the process of turning a source tree， like a Git repo， into an artifact。
    So sometimes this is also called compilation， maybe。 Some ecosystems they build
    on release and they distribute built artifacts。 That's kind of what we do with
    Python。 Some ecosystems only distribute source and they let the build happen when
    you go to install it。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 构建是将源代码树（例如 Git 仓库）转换为工件的过程。因此有时这也称为编译。在某些生态系统中，它们在发布时构建并分发构建的工件。这正是我们在 Python
    中所做的。有些生态系统只分发源代码，并让构建在你安装时发生。
- en: We kind of also do that with Python。 And a build environment is the place where
    the build happens。 So hopefully it's not like your laptop。 Hopefully it's something
    else， maybe a little more secure。 But that's what a build is。 See us for certificates。
    Certificates underpin a lot of modern security on the web。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 Python 中也有类似的做法。构建环境是构建发生的地方。因此希望它不是你的笔记本电脑。希望它是别的东西，可能更安全一些。但这就是构建的概念。请注意证书。证书支撑了现代网络安全的许多基础。
- en: And it's a way to drive trust from some root called certificate authority。 So
    in the past getting a certificate was a long， lengthy， potentially expensive process。
    And now with new technology like let's encrypt， it's very easy to get a certificate。
    And we'll see how certificates can be used in the supply chain later。 D is for
    digest。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种从某个被称为证书颁发机构的根源中建立信任的方法。因此，在过去，获取证书是一个漫长、繁琐且可能昂贵的过程。而现在，有了像 Let's Encrypt
    这样的新技术，获取证书变得非常简单。稍后我们将看到证书如何在供应链中使用。D 代表摘要。
- en: When I say digest， I'm almost always referring to a hash digest。 which is essentially
    a unique value that will reproducibly represent some blob of data。 And it's not
    reversible。 Think of like if you've heard of MD5， SHA-256， these are hash digests。
    E is for ephemeral， meaning short lived， transitory， disappearing quickly。 And
    when I say ephemeral。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当我说摘要时，我几乎总是指一个哈希摘要。这本质上是一个独特的值，可以重现地表示某块数据。而且它是不可逆的。想想看，如果你听说过 MD5、SHA-256，这些都是哈希摘要。E
    代表短暂，意味着短命、临时、迅速消失。当我说短暂时。
- en: I'm almost always going to be talking about the ephemerality in the context
    of cryptographic keys and signing。 So normally when you do cryptographic keys
    and signing。 your private key is something that you generate once and you try
    your best to never lose。 But in ephemeral key is generated on the fly when you
    need it。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我几乎总是会在加密密钥和签名的上下文中谈论短暂性。因此，通常在处理加密密钥和签名时，你的私钥是你生成一次并尽量不丢失的东西。但短暂密钥是在你需要时即时生成的。
- en: It's used once or for not very long period of time。 And then you throw it away。
    I'll explain why I want you to throw away your private keys later。 F is for fuzzing。
    Fuzzing is using special tools to generally wildly varying inputs and unexpected
    inputs to your program。 It's not super widely used in Python， but it's generally
    starting to be considered a best practice in terms of software security。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 它被使用一次或使用时间不长。然后你就把它丢掉。稍后我会解释为什么我希望你丢弃你的私钥。F 代表模糊测试。模糊测试是使用特殊工具对程序进行普遍变化的输入和意外输入。虽然在
    Python 中并不普遍使用，但它通常被视为软件安全方面的最佳实践。
- en: G is for Google。 Oh， hey， that's where I work。 I didn't have a great one for
    G believe it or not。 So I wanted to take a minute to just try and kind of explain
    why Google even cares about supply chain security。 Because you might have heard
    that Google has a mono repo。 And what this means is in practice。 while software
    engineers at Google can use third party packages， we don't install them from PyPI。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: G 代表谷歌。哦，嘿，这就是我工作的地方。信不信由你，我并没有一个好的 G。于是我想花一点时间来解释一下谷歌为什么关心供应链安全。因为你可能听说过谷歌有一个单一代码库。这在实际操作中意味着，尽管谷歌的软件工程师可以使用第三方包，但我们并不会从
    PyPI 安装它们。
- en: And essentially a single version of the source is checked into the mono repo
    and then everyone uses the same version。 And generally what that means is that
    a lot of the open source tools and technology I'm sharing with you aren't directly
    applicable to Google itself。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，源代码的单一版本被检入单一代码库，然后所有人都使用相同的版本。一般来说，这意味着我与你分享的许多开源工具和技术并不直接适用于谷歌本身。
- en: But that's also a gross oversimplification and reality。 There are teams at Google
    that do install software from PyPI。 And we also have lots of customers who are
    definitely installing software from PyPI。 And we want to protect them。 And we
    probably have to protect them because the federal government is almost definitely
    one of our customers。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 但这也是一个极度简化的现实。谷歌有一些团队确实从 PyPI 安装软件。我们也有很多客户，他们确实在从 PyPI 安装软件。我们想保护他们。我们可能必须保护他们，因为联邦政府几乎肯定是我们的客户之一。
- en: So we have a lot of experience in bringing untrusted third party code in and
    ensuring that it's secure。 So we're interested in applying these things externally
    so that everyone can benefit from it and that our customers and et cetera can
    benefit from it as well。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们在引入不受信任的第三方代码并确保其安全方面有很多经验。所以我们有兴趣将这些东西应用于外部，以便每个人都能受益，我们的客户等也能受益。
- en: H is for hardware key。 This is different than a public private key。 It's a physical
    device that you put into your computer and it gives you the ability to do two
    factor authentication。 It is arguably the best way to do two factor authentication。
    They are not cheap but I recommend getting one if you currently use two factor
    authentication。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: H代表**硬件密钥**。这与公私密钥不同。这是一个物理设备，你可以插入电脑，它使你能够进行双因素认证。可以说这是进行双因素认证的最佳方式。它们并不便宜，但如果你目前使用双因素认证，我建议你购买一个。
- en: If you're not using two factor you should be using that as well。 H is for identity。
    Generally when we're talking about identities we're referring to the identities
    of individuals。 e-mail addresses， github handles that kind of thing。 But we're
    kind of entering a point where pretty much anything can have a unique and verifiable
    identity such as a workflow on github actions。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有使用双因素认证，应该开始使用。H代表**身份**。一般来说，当我们谈论身份时，指的是个人的身份，例如电子邮件地址、GitHub 账户名等。但我们正进入一个几乎任何事物都可以拥有独特且可验证身份的时代，例如
    GitHub Actions 中的工作流。
- en: These identities along with some new technologies I'll talk about shortly can
    be used as signing identities which is really interesting。 J is for Joe Biden。
    Shout out to Joe Biden for the executive order。 The executive order is going to
    be great。 It's going to inject a lot of time。 money and energy into an area of
    technology that desperately needs it。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这些身份以及我稍后将要讨论的一些新技术可以用作签名身份，这真的很有趣。J代表**乔·拜登**。感谢乔·拜登的行政命令。这个行政命令将会很棒，它将为一个迫切需要资金、时间和精力的技术领域注入大量资源。
- en: A lot of people have been working on this for a long time and suddenly everyone
    else is seeing the light。 K is for key。 We're talking about public keys before
    but by the power of math a key lets you sign something with your private key。
    Distribute that thing， the signature and your public key and consumers can verify
    that it was indeed you。 the key holder that signed it。 L is for lock file。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 很多人已经为此努力了很长时间，而突然间，其他人也看到了光明。K代表**密钥**。我们之前谈到过公钥，但通过数学的力量，密钥允许你用私钥签署某些东西。分发该对象、签名和你的公钥，消费者可以验证确实是你，密钥持有者签署的。L代表**锁定文件**。
- en: A lock file is a complete itemization of exactly what artifacts should be installed
    for an application。 This includes version pins and artifact hashes as well。 Hash
    digests。 Support for lock files varies from ecosystem to the next。 This is like
    go。mod， package。json。 pip file。lock。 Python has historically been not super great
    about supporting lock files but it is definitely getting better。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 锁定文件是关于应用程序应安装的确切工件的完整清单。这包括版本锁定和工件哈希等。哈希摘要的支持在不同生态系统之间有所不同。这就像 go.mod、package.json、pip
    file.lock。Python 在历史上对锁定文件的支持并不是很好，但它确实在逐渐改善。
- en: M is for money。 Real talk。 We don't always like to talk about it but software
    costs money to make even and especially free and open source software。 A lot of
    the new tools and technologies that I'm describing were not created for free out
    of goodwill but in exchange for money。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: M代表**金钱**。说实话。我们并不总喜欢谈论这个，但软件的制作确实需要花费金钱，尤其是免费和开源软件。我所描述的许多新工具和技术并不是出于善意免费创建的，而是以金钱作为交换。
- en: Elevating the security practices of the entire software supply chain is not
    a small feat and is not going to happen overnight and is not going to happen for
    free。 There are a lot of organizations that are making huge commitments of money
    to ensure that this happens。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 提升整个软件供应链的安全实践不是一项小任务，无法在一夜之间实现，也不会免费进行。有很多组织正在进行巨额投资，以确保这件事的发生。
- en: N is for non-forgable。 Unforgable is mostly used in the context of an attestation
    and it means that the content of the attestation。 the thing that you're actually
    attesting to， can't be modified。 So if I'm attesting that I ran a build in some
    build environment from let's say a get-shah and a non-forgable attestation。 it's
    going to tell me that it can't be modified by someone by some malicious actor。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: N代表**不可伪造**。不可伪造主要用于证明的背景，意思是证明的内容，即你实际证明的内容，不能被修改。因此，如果我证明我在某个构建环境中运行了一个构建，比如说某个
    git-hash 和一个不可伪造的证明，它会告诉我这个内容不能被某个恶意行为者修改。
- en: It's only going to refer to that build。 O is for OpenID Connect。 If you haven't
    heard of this。 I suspect that you're going to start hearing a lot more about it
    both in this talk and afterwards。 So this is an identity layer on top of OAuth
    2 and this allows services to provide， verify。 exchange identities， the identities
    that we talked about before。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 它只会涉及到该构建。O 代表 OpenID Connect。如果你没听说过这个。我怀疑你将在本次讲座及之后听到更多关于它的内容。这是位于 OAuth 2
    之上的身份层，它允许服务提供、验证、交换身份，即我们之前讨论过的身份。
- en: So already a lot of CI services are providing OIDC identities for the runs of
    their workflows and this is really powerful for reasons that I will get to later。
    P is for provenance。 P provenance is the paper trail。 This can take a lot of forms
    but think of it as a series of verifiable attestations that tell you everything
    you need to know about an artifact。 Where it came from， where it was built， who
    built it， who signed it， everything about it。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，许多 CI 服务正在为其工作流的运行提供 OIDC 身份，这在接下来的讨论中我会提到，这是非常强大的。P 代表来源。P 来源是文书记录。它可以采取多种形式，但可以将其视为一系列可验证的证明，告诉你关于工件的所有必要信息。它的来源、构建地点、构建者、签署者，关于它的一切。
- en: Basically the history of an artifact。 P is also for policy。 A policy is a way
    that you describe the security features that you want or expect to be present。
    Either in your library， your application， your repo and organization on GitHub。
    And ideally this policy can then be evaluated to tell you whether you're within
    the policy that you define or not。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上是一个工件的历史。P 也代表政策。政策是你描述期望或要求的安全特征的方式。无论是在你的库、你的应用程序、你的代码库还是在 GitHub 上的组织中。理想情况下，这项政策可以被评估，以告诉你是否符合你定义的政策。
- en: P is for quick。 Let's move on to R。 R is for remediation。 And it's usually used
    in the context of vulnerabilities but can also be used to refer to policies as
    well。 Remediation means to fix something that's wrong and so for vulnerability，
    if you remediate it。 you've removed the vulnerability。 You've upgraded to a fixed
    version。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: P 代表快速。让我们继续讨论 R。R 代表修复。通常在漏洞的上下文中使用，但也可以用于指代政策。修复意味着修复错误的事物，因此对于漏洞，如果你修复它，就消除了漏洞。你已经升级到修复版本。
- en: And also ideally remediation is easy or possibly automatic。 S is for signature。
    A signature is what you get when you sign something like an artifact with a cryptographic
    key。 It represents a verifiable proof that the key holder was in possession of
    the key that generated the signature。 Think of it as a rubber stamp of approval。
    T is for transparency log。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，修复是简单或可能是自动的。S 代表签名。签名是你用加密密钥签署某些东西（例如工件）时得到的。它代表可验证的证明，表明密钥持有者拥有生成签名的密钥。可以把它想象成一种批准的橡皮图章。T
    代表透明日志。
- en: A transparency log is a public immutable record of signed metadata at the stations。
    That's it。 I signed something。 I published the details to the transparency log
    and it is there forever for anyone to look at and verify。 V is for vulnerability。
    A bug in software with security related consequences。 V vulnerabilities are either
    known or unknown。 And if you find a good way of turning the ladder into the former。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 透明日志是已签名元数据在站点上的公共不可变记录。就是这样。我签署了某件东西。我将细节发布到透明日志中，任何人都可以查看并验证，这些信息将永远存在。V 代表漏洞。软件中的安全相关缺陷。V
    漏洞可以是已知的或未知的。如果你找到一种好的方法将后者转变为前者。
- en: I want to talk to you afterwards。 And Z is for zero。 This is the number of questions
    I'll take about what happened to WX and Y。 All right。 I hope you enjoyed that。
    So part three， how can we use open source safely？
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我想在之后和你谈谈。Z 代表零。这是我将接受的有关 WX 和 Y 发生了什么的提问数量。好的。希望你喜欢这个。那么第三部分，我们如何安全使用开源？
- en: Now I explained some of these kind of details and concepts to you。 Let's put
    them all together into something that we can do。 I did a talk on this last year。
    And a lot has changed in the last year。 So last year what I said what we can do，
    circa 2021。 is let's use HTTPS everywhere。 We're kind of already doing that。 Walk
    files， compiled dependencies。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我向你解释了一些这种细节和概念。让我们把它们结合成可以实施的内容。我去年对此进行了讲座。过去一年中发生了很多变化。因此，去年我说我们能做的，约在 2021
    年，是让我们在每个地方使用 HTTPS。我们已经在这样做了。行走文件，编译依赖项。
- en: vulnerability notifications， tough namespaces。 Cool。 I'm not going to explain
    any of that。 That was a year ago。 We've made a lot of progress。 You can go back
    and watch my talk if you're interested in those things。 I'm going to talk about
    what else we can do to fix this。 My talk must show I kind of wave my hand。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 漏洞通知，麻烦的命名空间。酷。我不打算解释这些。这是一年前的事情。我们已经取得了很大进展。如果你对这些内容感兴趣，可以回去观看我的演讲。我将讨论我们还能做些什么来解决这个问题。我的演讲中我会挥挥手。
- en: Here's some hypothetical stuff we can do to do better。 And we kind of started
    to implement that。 And those things have started to happen。 So I'm going to outline
    those that sort of exist that you can use now and introduce you to them。 So the
    first thing that's new is community advisory databases。 Actually some of these
    existed before。 But the Python one did not。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些假设的改进方案，我们开始实施这些方案了。这些事情已经开始发生。所以我将概述一下现在可以使用的那些方案，并向你介绍它们。首先，新的东西是社区建议数据库。实际上其中一些之前就存在。但Python的建议数据库并不存在。
- en: And this is a centralized ecosystem specific public repository for security
    advisory。 And the goal is to make it easier to both report and discover security
    advisories。 Remember。 an advisory is a notification about vulnerability。 So these
    exist from most major ecosystems。 This is what the Python one looks like。 It's
    a PIPA advisory database。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个集中式的、针对特定生态系统的公共安全建议存储库。其目标是让报告和发现安全建议变得更加容易。记住，建议是关于漏洞的通知。大多数主要生态系统都有这样的建议。这是Python的建议数据库的样子。它是一个PIPA建议数据库。
- en: And what it does is it has a list of vulnerabilities listed in the open source
    vulnerability format。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 它的功能是列出开放源代码漏洞格式中的漏洞列表。
- en: '![](img/36c8b03747c71096776f8465aa1bb28a_11.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/36c8b03747c71096776f8465aa1bb28a_11.png)'
- en: OSV also has an API and it acts as a vendor neutral aggregator。 And it pulls
    in advisories from all these different repositories and redistributes them。 So
    OSV actually pulls from this repository when new advisors are published。 And then
    actually in turn publishes those back to PIPI。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: OSV还拥有一个API，它作为一个中立的聚合器。它从所有这些不同的存储库中提取建议并重新分发。因此，当新的建议发布时，OSV实际上会从这个存储库中提取信息，然后再将其发布回PIPI。
- en: So then PIPI knows which dependencies or which projects have vulnerabilities。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，PIPI知道哪些依赖项或项目存在漏洞。
- en: '![](img/36c8b03747c71096776f8465aa1bb28a_13.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/36c8b03747c71096776f8465aa1bb28a_13.png)'
- en: Here's an example of a recent advisory for Django。 It's not a great example
    actually。 But it's kind of just a giant EML file。 But you're not supposed to read
    these by hand。 Definitely not。 So the other thing we have to go along with this
    is vulnerability auditing software。 And so these also aren't specifically new。
    Similar software has existed before。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个关于Django的近期安全建议示例。实际上这并不是一个很好的例子。但它确实像一个巨大的EML文件。不过你不应该手动阅读这些，绝对不应该。所以我们需要配合使用漏洞审计软件。而且这些软件并不是特别新。类似的软件以前就存在过。
- en: But we now have for the first time a community supported open source vulnerability
    auditing software for the Python ecosystem。 And that I'm really excited to introduce
    because I helped build it。 And this uses the advisory database that I previously
    mentioned in the API that OSV provides to PIPI。 So this tool is called PIP Audit。
    I helped and created and released this。 It's a third party tool。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们现在首次拥有了一个社区支持的开源漏洞审计软件，专为Python生态系统设计。我非常兴奋能介绍这个，因为我参与了它的构建。这个工具使用了我之前提到的，OSV提供给PIPI的API中的建议数据库。这个工具叫做PIP
    Audit。我帮助创建并发布了这个工具。它是一个第三方工具。
- en: It's not part of PIP itself yet。 You run this locally。 maybe as part of your
    release or your process， your integration tests。 You can run it in a container。
    You can run it against your requirements file。 And it will tell you if there are
    any known vulnerabilities present in your environment or requirements file。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 它还不是PIP的一部分。你可以在本地运行它，也许作为发布或流程的一部分，或者进行集成测试。你可以在容器中运行它。你可以针对你的需求文件运行它。它会告诉你在你的环境或需求文件中是否存在已知漏洞。
- en: This allows you to be confident that you're not going to deploy something with
    a vulnerability。 And use it kind of like this。 You can add a little environment，
    just run PIP Audit。 You can pass a requirements file。 This behaves just like PIP
    install。 Same flags and the same syntax and everything。 When you run it。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这让你能够自信地确保不会部署存在漏洞的东西。使用时可以这样操作。你可以添加一个小环境，直接运行PIP Audit。你可以传递一个需求文件。这和PIP install的行为相同。相同的标志和语法，运行时一致。
- en: it'll tell you I found the vulnerability。 It's in this package。 Here's the version
    you should upgrade to。 Here's the vulnerability ID。 You can also automatically
    remediate that。 You can read that。 So this， if you run PIP Audit。 it will just
    go and upgrade those and fix it for you as well。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 它会告诉你我发现了漏洞。它在这个包里。这里是你应该升级到的版本。这里是漏洞ID。你也可以自动修复它。你可以读取这个。所以，如果你运行PIP Audit，它将自动升级并修复这些问题。
- en: It will rewrite your requirements file and fix it as well。 So this is really
    cool。 I'd love for people to start using this more and just sort of avoid these
    vulnerabilities。 Go ahead and run it on your laptop right now and see if you have
    anything installed as a vulnerability。 Okay， another thing that's kind of new
    and fun and interesting is artifact signing。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 它会重写你的需求文件并修复它。所以这真是太酷了。我希望人们更多地开始使用这个，尽量避免这些漏洞。现在就去你的笔记本电脑上运行它，看看你是否有任何安装的漏洞。好的，另一个新鲜有趣且引人关注的事情是工件签名。
- en: And you might say wait， signing is definitely not new。 Because historically
    this has meant GPG。 And that technology has been around forever。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会说，等一下，签名绝对不是新鲜事。因为历史上这意味着GPG。而那项技术已经存在了很久。
- en: '![](img/36c8b03747c71096776f8465aa1bb28a_15.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/36c8b03747c71096776f8465aa1bb28a_15.png)'
- en: And if you're not familiar with GPG， historically this post by Donald kind of
    sums up how the Python packaging community has approached signing。 And if you
    actually read this post， you realize that the issue is not with signing as a technology
    itself。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不熟悉GPG，历史上唐纳德的这篇帖子大致概括了Python打包社区如何处理签名的问题。如果你真的读了这篇帖子，你会意识到问题不在于签名作为一种技术本身。
- en: That's the boring， easy part。 The hard part is about trust and identity。 So
    right now you can sign anything that you want on PIPI。 You can upload that signature
    alongside your release， but distributing your public key is up to you。 And having
    people trust that public key is also up to you。 And so in practice nobody does
    this。 Why？
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分很无聊，简单。难点在于信任和身份。因此，现在你可以在PIPI上签署任何你想要的内容。你可以将那个签名与发布内容一起上传，但分发你的公钥则取决于你。而让人们信任那个公钥也是你的责任。所以实际上没有人这样做。为什么？
- en: '![](img/36c8b03747c71096776f8465aa1bb28a_17.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/36c8b03747c71096776f8465aa1bb28a_17.png)'
- en: First， GPG is confusing and unfriendly。 Who has manually signed something with
    GPG before？
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，GPG令人困惑且不友好。谁以前用GPG手动签过东西？
- en: Who enjoyed that experience？ Case and point。 It's not like automated git commits
    and things like that。 It's not a fun。 It's not a friendly experience。 Second，
    GPG requires humans to not be humans。 It requires users to maintain their private
    keys， essentially indefinitely。 I was talking to Paul before， I don't know if
    he's in here。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 谁享受过那种体验？这就是例子。这并不像自动git提交等那样。它不是一个有趣的体验，也不是一个友好的体验。其次，GPG要求人们不做人的事情。它要求用户基本上无限期地维护他们的私钥。我之前在和保罗聊，不知道他是否在这里。
- en: and he said something which I really like， which is GPG would be really great
    if you could go around permanently stapling everyone's private keys to their foreheads。
    You can't do that。 People will lose their keys。 Third reason why GPG relies on
    a web of trust。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 他曾说过我非常喜欢的一句话，那就是如果你能把每个人的私钥永久地钉在他们的额头上，GPG会非常好。但你无法做到这一点。人们会丢失他们的密钥。这就是GPG依赖信任网络的第三个原因。
- en: So GPG is great at signing。 It doesn't solve the problem of trust and identity。
    Even if an artifact。 let's say on PIPI， is signed， how do you know that you can
    trust that signature？
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 所以GPG在签名方面表现很好。但它并不能解决信任和身份的问题。即使一个工件，比如在PIPI上，被签名，你怎么知道可以信任那个签名？
- en: It assumes that you or someone you know has met the signer。 verified their public
    key and their identity。 And this law actually a reasonable thing to do with the
    size of modern open open source software。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 它假设你或你认识的人见过签名者，验证过他们的公钥和身份。根据现代开源软件的规模，这实际上是一个合理的做法。
- en: '![](img/36c8b03747c71096776f8465aa1bb28a_19.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/36c8b03747c71096776f8465aa1bb28a_19.png)'
- en: So we have a new technology called 6-store。 It's a new project by the Linux
    Foundation that's being built across multiple vendors including Google。
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们有了一种新技术，叫做6-store。它是由Linux基金会发起的一个新项目，涵盖了包括谷歌在内的多个供应商。
- en: '![](img/36c8b03747c71096776f8465aa1bb28a_21.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/36c8b03747c71096776f8465aa1bb28a_21.png)'
- en: and is a new way to think about signatures， identities and trust。 First。 when
    you go to sign something with 6-store， you throw away your keys。 The first thing
    you do is generate an ephemeral， public and private key。 and that means that the
    signing keys are used once and then they're gone forever。
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个新的思维方式，涉及签名、身份和信任。首先，当你使用6-store签署某件事情时，你会丢弃你的密钥。你做的第一件事是生成一个短暂的公钥和私钥。这意味着签名密钥只会使用一次，然后永远消失。
- en: You never see them， you never touch them or interact with them。 You are supposed
    to lose them。 The second thing you do is you provide an identity。 This could be
    an OIDC identity created by an identity provider。 Right now， 6-store supports
    Google。 GitHub， Microsoft。 Remember， this is built on top of OAuth as well as
    some fine grained OIDC identities。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你从未见过它们，从未接触过它们或与它们互动。你应该将它们遗失。第二件事是你提供一个身份。这可以是由身份提供者创建的OIDC身份。目前，6-store支持Google、GitHub和Microsoft。记住，这个系统是基于OAuth以及一些细粒度的OIDC身份构建的。
- en: provided by environments like GitHub Actions。 The next thing you do is bind
    that key and identity to a signing certificate。 You provide your public key that
    you is ephemeral to a certificate authority and it gives you back a certificate。
    And this authority binds these keys to the identity and the artifact and sort
    of like lets encrypt it。 but on a micro scale。 You're getting a certificate essentially
    for every time you want to sign something。
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 由GitHub Actions等环境提供的。接下来你做的是将该密钥和身份绑定到签名证书。你提供的公钥是短暂的，发送给证书颁发机构，机构会将证书返还给你。该机构将这些密钥与身份和工件绑定，并类似于Let's
    Encrypt，但在微观规模上。你每次想签名时，基本上都会获得一个证书。
- en: Then you sign it quickly because signing certificates are only valid for a short
    period of time to prevent abuse。 Then you publish in the transparency log。 Every
    signature is stored in a log that can be searched and can't be tampered with。
    And this is used later when you go and verify a signature。 So the end result is
    you have the artifact that you started with。 You get a new signature。
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你会迅速签名，因为签名证书的有效期很短，以防止滥用。接着你会在透明日志中发布。每个签名都存储在一个可以被搜索并且不能被篡改的日志中。这在你后续验证签名时会被使用。因此最终结果是，你拥有了最初的工件，并获得了一个新的签名。
- en: You get a certificate that binds the identity you provided。 which might be your
    email address or your GitHub repository to that signature。 And then you put that
    entry in a public log which records all of it。 And if this sounds like a lot of
    manual steps you are not wrong。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你会获得一个将你提供的身份（可能是你的电子邮件地址或你的GitHub仓库）绑定到该签名的证书。然后，你将该条目放入公共日志中，以记录所有信息。如果这听起来像是很多手动步骤，你并没有错。
- en: This is why Six-door provides clients。 Originally。 Six-door was primarily focused
    on the container ecosystem but has now grown。 And we just produced a new Python
    native client for Six-door called， it's called Six-door on PIPI。 which we can
    install directly there。 It's a native Python client for signing and verifying
    signatures with Six-door。
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么六扇门为客户提供服务。最初，六扇门主要专注于容器生态系统，但现在已经发展壮大。我们刚刚为六扇门制作了一个新的Python原生客户端，名为Six-door
    on PIPI，我们可以直接在那儿安装。它是一个用于与六扇门进行签名和验证签名的原生Python客户端。
- en: Now focused on containers， focused on signing any binary blob。 But this could
    be a Python package。 It could be anything you want really。 This includes detecting
    ambient credentials which means if you try to sign in an environment。 that provides
    a no IDC identity it will use that automatically。 Right now it just supports actions。
    This is not feature complete yet but there is a beta release now on PIPI。
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在专注于容器，专注于对任何二进制文件进行签名。但这可以是一个Python包，也可以是任何你想要的东西。这包括检测环境凭证，这意味着如果你在一个提供无OIDC身份的环境中尝试登录，它会自动使用该身份。目前它仅支持Actions。这还没有完全实现，但现在在PIPI上有一个测试版发布。
- en: And we are working towards a 1。0 release。 Some other things we can do。 Better。
    more secure build infrastructure。 There's lots of different environments ecosystems
    where software can be built。 Some properties increase security， others don't。
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在朝着1.0版本努力。我们可以做的一些其他事情。更好，更安全的构建基础设施。有很多不同的环境生态系统可以构建软件。一些属性增加了安全性，而其他则没有。
- en: '![](img/36c8b03747c71096776f8465aa1bb28a_23.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/36c8b03747c71096776f8465aa1bb28a_23.png)'
- en: There's a new standard for describing the level of security for where artifacts
    are built。 And that's called Salsa。 I don't know if you can see that super well。
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个新的标准用于描述工件构建的安全级别，称为Salsa。我不知道你是否能很好地看到它。
- en: '![](img/36c8b03747c71096776f8465aa1bb28a_25.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/36c8b03747c71096776f8465aa1bb28a_25.png)'
- en: Salsa is SLSA。 Supplatch in levels for software artifacts pronounced Salsa。
    It's a security framework。 So it's not a framework in the sense of a tool that
    you can use but a way to think about。 how secure is this supply chain that I'm
    using to produce an artifact。 So given build process it might produce an artifact
    that's also level one。
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Salsa 是 SLSA。软件工件的安全级别的补充，发音为 Salsa。这是一个安全框架。因此，它不是你可以使用的工具框架，而是一种思考方式。如何评估我使用的供应链的安全性，以产生一个工件。因此，在给定的构建过程中，它可能会产生一个也是一级的工件。
- en: Most are kind of Salsa level one。 Or it might ratchet up higher as you add requirements
    for things that need to be。 introduced into the build environment to make it more
    secure。 Another thing that is new is attestation。 Atticitutions are what are going
    to prove that an artifact was created at a certain Salsa。 level or at a certain
    level of security。
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数是 Salsa 级别一。或者随着你添加需要引入构建环境的要求，它可能会提升到更高的级别。另一个新事物是证明。证明将证明一个工件是在某个 Salsa
    级别或某个安全级别下创建的。
- en: '![](img/36c8b03747c71096776f8465aa1bb28a_27.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/36c8b03747c71096776f8465aa1bb28a_27.png)'
- en: One exciting technology in this space that you might not have heard of is in
    Toto。 In Toto is a way to， well here it is。
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个领域中，你可能听说过的一项激动人心的技术是 in Toto。in Toto 是一种方法，嗯，就是这个。
- en: '![](img/36c8b03747c71096776f8465aa1bb28a_29.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/36c8b03747c71096776f8465aa1bb28a_29.png)'
- en: It's a universal standard for all ecosystems to describe the integrity of an
    artifact and。 proof of what was done at each step to build it。 Make it transparent，
    make it public。 show people exactly how something was built so they can verify
    it。 New is also ways to enforce security policies for source control。
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这是所有生态系统通用的标准，用于描述工件的完整性和在每一步构建它时所做的证明。让它透明，让它公开。向人们展示某物是如何构建的，以便他们可以验证。新的一点也是强制执行源代码控制的安全政策的方法。
- en: So we have some tools in GitHub right now built in that allow us to do this。
    This is above and beyond what you can do with your regular source repository。
    So AllStar is a GitHub application。 It enforces best practices allows you to set
    up a policy for your repository or your。 entire organization and do things like
    branch protection， detect if you have checked in。
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们现在在 GitHub 中内置了一些工具，允许我们做到这一点。这超出了你在常规源代码库中所能做的。因此，AllStar 是一个 GitHub 应用。它执行最佳实践，允许你为你的代码库或整个组织设置政策，并做一些像分支保护、检测你是否进行了检查等操作。
- en: binary artifacts， whether you have outside collaborators enabled fuzzing and
    that kind of thing。 So I was talking about six-door Python。 Here's one that just
    generated the other day because we had people that were admins on the repository。
    who weren't actually in the organization because we had just transferred it there。
    So this is cool because it will alert you when there's security violations that
    violate your policy。
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制工件，不论你是否启用了外部协作者模糊测试之类的功能。所以我在谈论六门 Python。这里有一个是前几天生成的，因为我们有一些管理员在这个代码库上，但他们实际上并不在组织内，因为我们刚刚将其转移过来。这很酷，因为它会在有安全违规行为违反你的政策时提醒你。
- en: And the last thing I want to highlight， super exciting stuff， is new security
    features for。 PIPI and these are kind of announcements because we haven't really
    publicly said that this stuff is happening。 So I hope you're excited。 So if you're
    a project maintainer on PIPI。 you will soon be able to check a box that says，
    all of my collaborators must have two-factor authentication enabled or they will
    not be able to do anything to this project。
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我想强调的最后一件事，超级激动人心的是，PIPI 的新安全功能，这些算是公告，因为我们还没有真正公开说这些事情正在发生。所以我希望你们感到兴奋。因此，如果你是
    PIPI 的项目维护者，你将很快能够勾选一个框，表示所有我的协作者必须启用双重身份验证，否则他们将无法对这个项目做任何事情。
- en: The reason we're -- don't clap。 There's a long list。 Clap at the end。 The reason
    we're doing this is because we're also implementing a two-factor mandate for critical
    projects。 Don't clap。 Clap at the end。 Top 1% of projects by downloads plus some
    other critical projects like dependencies of PIPI itself will be included in this
    mandate。 which means that all collaborators and those projects will be required
    to use two-factor authentication。
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之所以这样做——别鼓掌。还有很长一串。最后再鼓掌。我们这样做的原因是因为我们还在对关键项目实施双重身份验证的强制性要求。别鼓掌。最后再鼓掌。下载量前
    1% 的项目加上一些其他关键项目，比如 PIPI 本身的依赖项，将被纳入这一要求，这意味着所有这些项目的协作者都必须使用双重身份验证。
- en: That's going to be a lot of people。 Most of those people don't have hardware
    keys。 I said hardware keys are expensive before。 What are we going to do about
    that？
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这将会有很多人。其中大多数人没有硬件密钥。我之前说过硬件密钥很贵。我们该如何应对？
- en: We are doing a hardware key giveaway。 We're going to give away 4。000 Google
    Titan security keys to PIPI maintainers of critical projects。 This doesn't happen
    yet because we're waiting for them to come back in stock。 It's too large of an
    order， but it's going to happen very soon and you will hear about it。
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在进行一次硬件密钥赠送活动。我们将赠送4,000个谷歌Titan安全密钥给关键项目的PIPI维护者。这还没有发生，因为我们在等待它们重新入库。这是一个过大的订单，但很快就会发生，你会听到消息。
- en: And it's going to be very exciting。 Another thing that's coming soon。 credentialless
    publication via OIDC。 So one really nice thing that OIDC enables when you have
    it in your build environment is that OIDC allows you to exchange identities。 If
    you have an authorized identity of a build environment and you've told PIPI。 I
    trust that identity to publish to PIPI。 PIPI can exchange the identity for PIPI's。
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这将会非常激动人心。另一个即将推出的功能是通过OIDC进行无凭证发布。因此，OIDC在构建环境中启用的一件非常好的事情是，OIDC允许你交换身份。如果你有构建环境的授权身份，并且告诉PIPI，我信任该身份以发布到PIPI，PIPI可以为PIPI交换该身份。
- en: An identity on PIPI， I'm waiting my hands here because we're not totally sure
    what that means yet。 But that will allow you to publish a package to PIPI and
    say without passwords。 without API tokens or anything at all， just by trusting
    the repository that has the workflow and that identity。 Also coming soon， I feel
    like I say this every year。
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在PIPI上的身份，我在这里等待，因为我们还不完全确定这意味着什么。但这将允许你在不使用密码、API令牌或任何东西的情况下，直接向PIPI发布包，只需信任具有工作流程和身份的仓库。这个功能也即将推出，我感觉我每年都在说这个。
- en: but PEP458 is actually going -- it's happening and that's for repository signed
    metadata via TUF。 And PEP480 is going to get a big update to talk about developer
    signed artifacts。 which is end-to-end signing， which you might guess what we're
    going to talk about there。 All right。 to wrap up， what else can we do to fix these
    things？
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 但是PEP458确实在进行中——这是通过TUF进行的仓库签名元数据。而PEP480将进行重大更新，讨论开发者签名的工件，这涉及端到端签名，你可能可以猜到我们将要讨论什么。好的，最后，我们还可以做些什么来修复这些问题？
- en: One improvement is vendor neutral collaboration。 The reason that's six-door
    and salsa and all these things are going to be successful is because we have lots
    of people and lots of organizations working together at these companies via the
    OpenSSF。 This is a new nonprofit part of the Linux Foundation that brings together
    all these large organizations。
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 一项改进是供应商中立的协作。之所以像six-door和salsa这些项目会成功，是因为我们有很多人和组织通过OpenSSF在这些公司合作。这是一个新的非营利组织，隶属于Linux基金会，汇集了所有这些大型组织。
- en: including Google， to work together on essentially making the software supply
    chain more secure。 This organization is also bringing and collecting more funding
    for security projects。 The cost of these projects is being supported by big vendors。
    but there's likely need for support in your system as well。
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 包括谷歌在内，合作使软件供应链更加安全。这个组织还在为安全项目筹集更多资金。这些项目的费用由大型供应商支持，但你的系统可能也需要支持。
- en: So financially sponsoring your local Python software foundation makes things
    like this possible。 allows us to contribute to these security features。 Or your
    organization can become a member of the OpenSSF。 And other thing is more users
    and more contributors。 Use these tools， come。
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，经济上赞助你当地的Python软件基金会使得这样的事情成为可能，允许我们为这些安全功能做贡献。或者你的组织可以成为OpenSSF的成员。另一个方面是更多的用户和贡献者。使用这些工具，过来吧。
- en: contribute their open source， try this stuff out， tell us how it works for you。
    share your experience， possibly become a contributor。 It's all open source。 So
    here's my predictions for the next year。 If you're an open source software repository
    or package installer or maintainer。 and there's a couple of us in this room， brace
    for interest and funding。
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 为他们的开源项目做贡献，尝试这些东西，告诉我们它们对你来说如何运作。分享你的经验，可能成为贡献者。这都是开源的。那么，以下是我对明年的预测。如果你是一个开源软件仓库、包安装器或维护者，房间里有几个我们，做好迎接兴趣和资金的准备。
- en: And I hope you can ride that wave and make the most of it and really invest
    in your project。 If you're an open source maintainer， brace for people asking
    you to adopt new security practices and ask you to pick up new features and do
    new things and turn on to factor authentication。
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你能抓住这个机会，充分利用它，真正投入到你的项目中。如果你是开源维护者，准备好面对人们要求你采用新安全实践的情况，并要求你增加新功能，做新事情，开启双因素认证。
- en: We're trying to lift the entire ecosystem here， so you're going to get a lot
    of feedback from everyone asking you to help do that。 And if you're an open source
    consumer， educate yourself。 You're likely going to hear a lot about this stuff
    more and more as there's this increasing crescendo of voices and。 you know， make
    yourself aware。 Real quick， I'm going to do two shoutouts。 First。
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在努力提升整个生态系统，所以你会收到很多来自大家的反馈，要求你帮助实现这一目标。如果你是开源用户，提升自己的知识吧。随着声音的增多，你将越来越多地听到这些内容，要让自己了解。接下来，我要做两个致敬。首先。
- en: to William Woodruff and Alex Cameron at Trail of Bits。 They've been instrumental
    in helping build both 6-door Python and PIP audit and shout out to them。 I also
    want to give a huge shout to the PyCon staff。 Everything they've dealt with with
    the pandemic to bring this conference back and in person。
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 致敬于Trail of Bits的William Woodruff和Alex Cameron。他们在构建6-door Python和PIP audit方面发挥了重要作用，值得赞扬。我还想向PyCon的工作人员致以诚挚的感谢。面对疫情，他们为将这个会议恢复到线下所做的一切。
- en: they absolutely deserve your thanks。 So if you see them。 let them know that
    you appreciate them and the work that they're doing。 Thanks。 I'll see you all
    next year。 [applause]。
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 他们绝对值得你的感谢。所以如果你见到他们，请让他们知道你感激他们及他们所做的工作。谢谢！明年再见。[掌声]
- en: '![](img/36c8b03747c71096776f8465aa1bb28a_31.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/36c8b03747c71096776f8465aa1bb28a_31.png)'
