- en: P90：Talk - Reka_Ben_ Actionable insights vs ranking How to use and how NOT to
    use co - VikingDen7 - BV1f8411Y7cP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P90：演讲 - Reka_Ben_ 可操作的见解与排名 如何使用以及如何不使用代码 - VikingDen7 - BV1f8411Y7cP
- en: \>\> Good morning。 Thank you for picking this as your first talk， not counting
    the keynote。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: \>\> 早上好。感谢你选择这个作为你的首次演讲，不算主题演讲。
- en: '![](img/50130107e1b57a24c3d6e48c13547005_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/50130107e1b57a24c3d6e48c13547005_1.png)'
- en: '![](img/50130107e1b57a24c3d6e48c13547005_2.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/50130107e1b57a24c3d6e48c13547005_2.png)'
- en: Today we're going to be talking about code quality metrics， which is something
    that's。 a great interest to us down at sorcery。 And we're going to be talking
    in particular。 about how to use and how not to use code quality metrics。 So let's
    start off by talking about code reviews。 Who here does code reviews？ Who gets。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 今天我们将讨论代码质量指标，这对我们在sorcery的工作非常重要。我们特别将讨论如何使用以及如何不使用代码质量指标。让我们首先谈谈代码审查。这里有多少人进行代码审查？谁会得到。
- en: their code reviewed from time to time？ Raise your hands。 Who does code reviews？
    Who。 code reviews for other people？ Most of us here。 Who's a solo developer and
    doesn't。 do any code reviews at all？ Yeah， I thought it might be one or two。 And
    who thinks their。 code reviews are objective？ That's what I thought。 So today
    we're going to be talking。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 有多少人会不时审查自己的代码？请举手。谁会进行代码审查？谁为其他人进行代码审查？我们大多数人在场。谁是独立开发者，从不进行代码审查？是的，我想可能只有一两个人。谁认为自己的代码审查是客观的？我也是这样认为的。所以今天我们将讨论。
- en: a little bit about how to introduce some objectivity into your code reviews
    in certain situations。 \>\> So for that， we are going to introduce some metrics，
    then try to show how you can。 gain insights from those metrics。 And we think it's
    very important to talk about the pitfalls。 of those as well。 And I'm Reka。 And
    as a colleague is Ben， we both work at sorcery on code quality。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如何在某些情况下为代码审查引入一些客观性。 \>\> 为此，我们将介绍一些指标，然后尝试展示如何从这些指标中获得见解。我们认为讨论这些指标的陷阱也非常重要。我是Reka。我同事是Ben，我们都在sorcery公司专注于代码质量。
- en: tools， which includes refactoring automation and automated code reviews。 So
    that's one。 of the reasons why we are so interested in this topic。 And in the
    years before joining， sorcery。 I worked at fintech APIs。 \>\> And I said I'm Ben。
    And for joining sorcery。 I worked -- I did a PhD in material science and then
    worked as a data analyst and data。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 工具，包括重构自动化和自动化代码审查。这是我们对这个话题如此感兴趣的原因之一。在加入sorcery之前，我在金融科技API工作。 \>\> 我是Ben。在加入sorcery之前，我攻读了材料科学的博士学位，随后担任数据分析师和数据。
- en: engineer at a fintech company。 So throughout this presentation， we're going
    to be looking。 at a few code snippets。 We're going to be doing some code review，
    in fact。 And as we， go。 we're going to be normally a bit thinner right。 And I
    just want to get your initial， opinion。 And the reason for this is that these
    code quality metrics are designed to mirror。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我是一家金融科技公司的工程师。在本次演讲中，我们将查看几个代码片段。实际上，我们将进行一些代码审查。随着讨论的进行，我们的视角可能会稍微狭窄一些。我想先了解你们的初步看法。这样做的原因是，这些代码质量指标旨在反映。
- en: our personal biases， our personal feelings about what good code looks like。
    So when we。 see these things on the screen， just call out the right。 And let me
    know which one you， prefer。 Let's get started with the first one。 Two snippets
    on screen and without any sort。 of in-depth reading into what these do， who prefers
    the code snippet on your left， the。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们个人的偏见，以及我们对优秀代码的个人看法。所以当我们在屏幕上看到这些东西时，直接指出正确的选择，并告诉我你更喜欢哪个。让我们开始第一个话题。屏幕上有两个代码片段，在没有深入阅读这些代码的情况下，谁更喜欢你左边的代码片段？
- en: one on my right。 One person。 Interesting。 And who prefers the one on my left？
    Your right。 That's most people。 That's kind of what we guessed。 And when we talk
    about these sorts。 of pieces of code， we've generally got several bits and pieces
    of code。 Things like whether。 it is Pythonic， whether it is elegant， whether it
    is short， whether it is flat， we talk about。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 右边的代码片段。一个人。很有趣。谁更喜欢左边的那个？你们的右边。大多数人选择了这个。我们大致猜到了这个结果。当我们谈论这些代码片段时，通常会考虑几个方面。比如它是否符合Python风格，是否优雅，是否简短，是否平坦，我们讨论这些。
- en: naming conventions。 And all of these are very useful terms， but they fall into
    a bit of。 a bit of a region of difficulty if we're not thinking more specifically
    about how to apply。 those terms。 So to introduce a very -- so to end。 So again。
    a very similar question to the previous one。 Please take a look at these code
    two snippets and raise your hands if you prefer the one。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 命名约定。这些都是非常有用的术语，但如果我们不更具体地考虑如何应用这些术语，它们会进入一个难度区域。所以，提出一个非常——所以结束。所以再次，和前一个问题非常相似。请查看这两个代码片段，如果你更喜欢其中一个，请举手。
- en: on the left。 And raise your hands if you prefer the one on the right。 And probably
    the reason。 is that the second one is significantly short， which induces our first
    very simple。 but surprisingly， useful metric function length。 And here we can't
    hit the statement in these snippets。 but in Python it's even simpler to count
    the lines， which is often very close to the number。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧。如果你更喜欢右侧的那一个，请举手。可能原因是第二个明显更短，这引出了我们第一个非常简单但出乎意料有用的度量——功能长度。在这些片段中我们不能精确描述，但在Python中计数行数甚至更简单，通常非常接近。
- en: of statements at least。 And this can already give us some good feeling about
    how complicated。 code is。 So if you come to the conclusion after this talk that
    the other metrics are。 way too complicated， not first to have thought， that is
    already a way to make your conversations。 about code a bit more specific and a
    bit more numeric。 And one thing which functional length。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 至少的语句数。这已经可以让我们对代码的复杂性有个初步的感觉。所以如果你在这次讲座后得出结论，认为其他度量过于复杂，初次想到这一点，已经是一种让你的代码讨论更具体和更数字化的方式。一个功能长度的概念。
- en: has in common with the more sophisticated metrics that it definitely has its
    limitations。 And as this one single statement shows it's not always a good thing
    to strive for the shortest。 possible solution。 So this introduces the next a bit
    more sophisticated quality metric， which。 snippets do you prefer from these two。
    Please raise your hands if you like more than one。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 与更复杂的度量标准有共同点，但显然也存在局限性。正如这一个简单陈述所显示的，追求最短的解决方案并不总是好事。所以这引入了下一个更复杂的质量度量标准，你更喜欢这两个片段中的哪一个？如果你喜欢不止一个，请举手。
- en: on the left。 Thanks a lot。 And raise your hands if you prefer the one on the
    right。 And here the difference is not in size， but rather in complexity which
    leads to our next， metric。 Yeah， so we all know the danger of one line is， and
    this next metric is a way。 of sort of overcoming some of the difficulty in describing
    code in terms of shortness。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧。非常感谢。如果你更喜欢右侧的那一个，请举手。这里的区别不在于大小，而在于复杂性，这引出了我们下一个度量标准。是的，我们都知道一行的危险，而下一个度量标准是克服某些困难的方式，用于用简洁描述代码。
- en: Cyclomatic complexity is essentially a measure of the number of branches in
    your code。 There's。 a more mathematical description we don't really need to get
    into。 The right here shows， has。 seven branches。 And by a branch we just mean
    different routes that might happen through。 the code depending on the initial
    conditions。 And the one on the left， the sort of intuitively。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 循环复杂度本质上是代码中分支数量的衡量标准。有一个更数学化的描述，但我们不需要深入了解。右侧显示有七个分支。我们所指的分支只是根据初始条件可能通过代码发生的不同路径。左侧的直观上。
- en: nice one， nominally only has one branch。 Now I've put， because in practice，
    it's obviously。 more than one， it's way through this code。 But the cyclomatic
    complexity was developed。 quite some time ago。 The calculation is simple for every
    if statement， every try except block。 and there's a few other conditions as well。
    We just add one。 And that is the total cyclomatic。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，名义上只有一个分支。现在我说，因为在实践中，显然不止一个，它在这段代码中经过多次。但循环复杂度是很久以前开发的。每个if语句、每个try-except块，以及其他一些条件的计算都很简单。我们只需加一。这就是总的循环复杂度。
- en: complexity of the code。 As I said， this was developed quite some time ago back
    in the， 70s。 And it was， it was。 At a time when code was significantly more monolithic
    than it is， today。 this is a famous photo of Margaret Hamilton with her code for
    the Apollo 13 program。 When。 testability and maintainability were really important
    and testability in particular is。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的复杂性。正如我所说，这个项目是在70年代开发的。当时的代码显著比今天更单一。这是一张著名的照片，展示了玛格丽特·汉密尔顿和她为阿波罗13号程序编写的代码。当时，可测试性和可维护性非常重要，而特别是可测试性。
- en: closely related to cyclomatic complexity。 The more branches you have in a piece
    of code。 the more things you need to test going through it。 So that was why it
    was developed and why。 it's still hanging around。 It is quite useful just as that
    first guess of how do we go beyond。 function length。 But it too has its limitations。
    These two pieces of code are more similar， ones。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: But just as again rough intuition， who prefers the one on my right on your left？
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: And who prefers the one on my left， your right？ Yeah。 So that leads into the
    development of。 cyclomatic complexity into our next metric。 This is called cognitive
    complexity。 And both of these nipets have a cyclomatic complexity， of three。 But
    the major difference is that on the left we have a nested structure。 And， on the
    three we have。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: on the right we have exactly three top level branches。 And this。 is something
    which cyclomatic complexity doesn't make a difference of but cognitive。 complexity
    penalizing it's not just new branches but every nested structure which gives this。
    very short nipet or cognitive complexity score of eight。 And cognitive complexity
    was developed。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: as an improvement of cyclomatic complexity。 And one significant difference between
    the。 two metrics is the nesting which we have just presented。 Another one is that
    it also penalizes。 recursion。 And on the other hand it tries to instant device
    good coding practices， things。 which it calls shorthand structures which summarize
    multiple lines of code in one。 And。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: this is something that Python really shines for example with these comprehension
    and。 context managers。 And cognitive complexity is much newer。 So it was developed
    in 2016。 and I encourage you to check out the sonar's paper which has been updated
    since then regularly。 And in the introduction they mentioned that cyclomatic complexity
    does a good job of providing。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: testability especially branch coverage。 But maintainability is a different thing
    which。 has a lot of other components。 And one thing which they put a lot of emphasis
    on is readability。 for humans and that's why for example nesting and recursion
    are regarded as not so great， features。 Of course， psychomantic and cognitive
    complexity both have their limitations as。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: well because here both scores for this snippet would be one but probably you
    still wouldn't。 describe this as really readable。 So to motivate our next metric
    we're going。 to do a little exercise here it's not code review。 There are three
    numbers on screen。 and the next slide is going to be blank and I'm going to ask
    you to put your hand up if。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: you feel confident remembering these three numbers。 Hands up。 Good。 Expect nothing
    less。 Seven numbers on screen now。 I'm going to give you three， two， one to remember。
    Who would。 feel confident remembering those seven numbers after that。 Yeah， okay
    about half people that's。 kind of what we'd expect。 You can see what's coming
    next。 Two， one and who'd feel confident。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: reciting out those numbers。 I think there's 13 there。 No one。 Interesting。 We'll
    come back。 to that in a sec。 Hmm？ Oh， well， let's cheating。 So this is a very
    well known psychological。 phenomenon。 It's difficult to keep more than about seven
    things in your brain for short， periods。 So this motivates our next metric which
    we call working memory and this is a。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 背诵那些数字。我认为有 13 个。没有人？有趣。我们稍后会再回来讨论。嗯？哦，好吧，让我们作弊。这是一个众所周知的心理现象。在短时间内，记住超过七个事物是非常困难的。因此，这激励了我们的下一个指标，我们称之为工作记忆，这是一个。
- en: very much work in progress thing that was developed down the outside by Brendan
    and Nick。 So the count there's a number of ways we could describe the calculation
    for working memory。 This is the one I've chosen for this talk。 The essential idea
    is that for each statement。 we look at the number of variables in use。 We look
    at the number of variables which are。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个正在进行的工作，由布伦丹和尼克在外部开发。所以我们可以用多种方式来描述工作记忆的计算。这是我为本次演讲选择的方式。基本思路是，对于每个语句，我们查看正在使用的变量数量。我们查看。
- en: no longer in use but you might need to keep in your brain to work out what's
    going to， happen。 And we also add an additional T4 conditions because the context
    matters basically。 As we。 work through a function or something we look at the
    peak cognitive complexity and we use。 that to describe sorry the peak working
    memory and we use that to describe the overall working。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 不再使用的变量，但你可能需要将其保留在脑海中以判断接下来会发生什么。我们还增加了一个额外的 T4 条件，因为上下文是基本重要的。当我们处理一个函数或其他东西时，我们查看峰值认知复杂性，并用它来描述峰值工作记忆，从而描述整体工作。
- en: memory of that piece of code。 And as I already mentioned this is based on the
    sort of 7+2。 rule in psychology。 Now you might sort of think well I don't need
    to remember everything and。 that's 100% true。 This is one of the major limitations
    of the working memory as a metric。 For instance if you knew that these numbers
    we just looked at were part of the digits of。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 记住那段代码的内容。正如我已经提到的，这基于心理学中的7+2规则。现在你可能会想，我不需要记住所有内容，这确实是100%正确的。这是工作记忆作为一个指标的主要局限之一。例如，如果你知道我们刚才看到的这些数字是某个。
- en: pi you might have a much easier time reciting or being confident about those
    last few numbers。 Does anyone know pi to 25ish places？ Yay。 So this is one of
    the main limitations。 It's。 very difficult to specify what people need to know
    as their reading code。 Do they need。 to remember the elements of the standard
    library？ Do they need to remember the context of the。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会更容易背诵或对最后几个数字有信心。有人知道 π 的前 25 位数字吗？耶。这是主要的局限之一。很难具体说明人们在阅读代码时需要知道什么。他们需要记住标准库的元素吗？他们需要记住上下文吗？
- en: package that they're working in？ There's a sort of element of expertise that
    comes in， here。 So it's subjective and it's a bit difficult to define but it is
    quite well rooted in psychology。 and in code style as we'll see in a bit。 So we
    have just seen four different metrics。 Two of them were trying to measure the
    size of a code snippet and two of them the complexity。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 他们所工作的包中？这里有一种专业知识的元素。因此，这是主观的，有点难以定义，但它在心理学中根深蒂固，正如我们稍后将看到的代码风格一样。我们刚刚看到了四种不同的指标。其中两个试图测量代码片段的大小，而另外两个则测量复杂性。
- en: And for both we have a human focus and a code focused view and what this small
    matrix is。 trying to show us that it's not that one of those is necessarily better
    than the other。 but these are all important aspects of readability。 And it really
    makes sense to try to improve。 all of them。 So to shorten your function， it's
    a name for conciseness to reduce the。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这两者，我们都有以人为本和以代码为本的视角，这个小矩阵试图向我们展示，并不是其中一个一定比另一个更好，而这些都是可读性的关键方面。努力改善所有这些是很有意义的。因此，为了缩短你的函数，这是对简洁性的称谓，以减少。
- en: psychromatic complexity and create specific methods which don't have too many
    branches。 reducing cognitive complexity by nesting those branches also following
    the son of Python。 and also reducing the working memory by being conscious about
    the scope of the variables。 we introduce。 And we have already seen four metrics
    which sometimes perhaps contradict。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 心理复杂性并创建特定的方法，尽量减少分支。通过嵌套这些分支来降低认知复杂性，同时遵循 Python 的风格，并通过关注我们引入的变量范围来减少工作记忆。我们已经看到四个指标，有时这些指标可能相互矛盾。
- en: each other and sometimes it would be perhaps nice to have one single score showing
    whether。 a code has gotten better or worse。 So at sorcery for example we use weighted
    average for this。 and another very interesting attempt for this is the maintainability
    index in Python 2019。 that was an excellent about this from Antoni Show。 So if
    you are interested in metrics generally。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 彼此之间有时可能会希望有一个单一的分数来显示代码是否变得更好或更糟。例如，在Sorcery中我们为此使用加权平均值。对于这一点，Python 2019中的可维护性指数也是一个非常有趣的尝试，这是Antoni
    Show提出的一个优秀方法。因此，如果你对指标感兴趣的话。
- en: I encourage you to check out the video about that。 So let's take a look at some
    ways we can measure some of these things for real repositories。 So here I've got
    a type of chart called a box and plot。 Depending on the C-born you may。 have played
    around with this。 Box and plot is basically a discretized distribution。 It's。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我鼓励你查看关于这个主题的视频。接下来，让我们看看一些可以衡量真实代码库的方式。所以在这里我有一种称为箱线图的图表。根据C-班，你可能对这个有些了解。箱线图基本上是一个离散的分布。这是。
- en: one way of an extension of a box plot essentially and each of the boxes corresponds
    to a quartile。 And what we're looking at here is the function length for all the
    functions in some of these， repos。 We haven't picked these for any particular
    reason other than that they are popular， well。 tested and they're quite familiar
    to people。 Notice on the bottom I've got a log scale。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一种扩展箱线图的方法，每个箱子对应于一个四分位数。我们在这里看到的是一些这些代码库中所有函数的长度。我们选择这些没有特别的原因，只是因为它们很流行、经过良好的测试，并且对人们非常熟悉。请注意底部我使用了对数刻度。
- en: so these metrics on the far right are particularly long functions。 We've got
    functions with well。 over 100 lines in them。 There's a couple of things I want
    to draw your attention to。 One is the line down the middle of the box represents
    the median and what I found really。 interesting looking at this the first time
    was well the median of all of these， the median。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，右侧的这些指标尤其是较长的函数。我们有一些函数，其行数超过100行。我想引起你注意的有两点。第一点是框中间的线代表中位数，我第一次看到这个时发现非常有趣的是，所有这些的中位数。
- en: function length in all of these packages is approximately the same。 It's between
    5 and。 6 and that just indicates well if we want our code to be maintainable easy
    to use open source。 stuff， 8 for 5 lines in your function。 That's a good style
    guide and that's the thing that。 I want to draw from this。 The other thing is
    that I already mentioned that are serious。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些包中的函数长度大致相同，介于5到6之间。这表明，如果我们希望我们的代码可维护、易于使用且是开源的，5行的函数长度是一个好的风格指南，而这是我想从中提取的内容。还有一点是，我已经提到过的一些严重的内存问题。
- en: outliers and we'll talk a bit in a moment about why the outliers are important。
    As well。 as function length we can look at the psychomatic complexity that's in
    blue and the cognitive。 complexity。 I've drawn these side by side because they're
    quite similar。 The only thing I'm going。 to draw attention to beyond the last
    slide was well as we'd expect the cognitive complexity。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会谈论一下异常值，稍后会讨论为什么异常值很重要。除了函数长度，我们还可以查看心理复杂度（蓝色）和认知复杂度。我将这两者并排绘制，因为它们非常相似。唯一要引起注意的，是如我们所预期的，认知复杂度。
- en: is a little bit more than the psychomatic complexity for most of these repositories
    as we'd expect。 The working memory and this is something I alluded to earlier
    again the median of all。 of these has an approximately equivalent working memory
    and that's really nice because and。 it says oh whether by design or happy accident
    these functions have grown to have a working。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数这些代码库来说，心理复杂度略高于我们预期的水平。工作记忆，这是我之前提到过的，所有这些的中位数大致相同。非常好，因为这意味着，无论是设计还是偶然，这些函数的工作都已经增长到一定程度。
- en: memory about 9。 That's within the parameters of what we can keep in our brains。
    So it's。 a good indication that the psychology that was developed for the working
    memory metric。 is actually seen in practice even without trying。 Another interesting
    way to look at these numbers is to compare the numbers of the same。 repository
    across time and here we can see the cognitive complexity of a specific repository。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 大约为9。这在我们能够记住的参数范围内。因此，这是一个很好的指示，表明为工作记忆指标而开发的心理学理论实际上在实践中得到了体现，甚至在没有尝试的情况下也是如此。另一种有趣的方式来看待这些数字是比较同一代码库随时间的变化，在这里我们可以看到特定代码库的认知复杂度。
- en: so you can find some more similar analysis at repo analysis。com。 Here we just
    pick the。 repo which shows a pattern which is probably a bit difficult。 So we
    see cognitive complexity。 so the lower numbers are better and we see that this
    package started out with a fairly。 high complexity then around version 0。8 there
    was a big rewrite which significantly decreased。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你可以在 repo analysis.com 找到一些类似的分析。在这里，我们只是选择了一个显示出可能有点困难模式的仓库。因此，我们看到认知复杂性，数字越低越好，我们看到这个包一开始的复杂性相当高，然后在版本
    0.8 附近进行了大规模重写，显著减少了。
- en: this complexity and since then there is a trend of sometimes going a bit up
    when new。 features are added and then come up so period of refactoring and stabilizing
    where it complexity。 goes down。 This is the repository where we， the only repository
    where we show where the。 data comes from because it is our own and here you can
    again see the cognitive complexity。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 自那以后，随着新功能的添加，复杂性有时会稍微上升，然后又会经历一段重构和稳定期，复杂性下降。这是我们展示数据来源的唯一仓库，因为这是我们自己的，在这里你可以再次看到认知复杂性。
- en: and it looks like quite good so since 0。8 we have added quite a lot of new features
    and。 the cognitive complexity has been still decreasing continuously so everything
    nice。 That's another。 representation of or the very same repo and it tells a little
    bit of a different story。 because we see that while the average complexity has
    been decreasing we have also managed to。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来相当不错，自 0.8 以来我们添加了很多新功能，认知复杂性仍在持续下降，所以一切都很好。这是同一仓库的另一种表现，讲述了一个稍微不同的故事，因为我们看到虽然平均复杂性在下降，但我们也成功地。
- en: add new outliers in this period and I think this is a very general pattern which
    we then。 to oversee that even if we really care about quality and know how to
    try to improve it we。 still add new outliers and it means we add new technical
    depth。 Let's talk quickly about。 code quality and I'm going to draw an analogy
    with test coverage as another metric that。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段时间里添加新的异常，我认为这是一种非常普遍的模式，即使我们真的关心质量并知道如何尝试改善它，我们仍然会添加新的异常，这意味着我们增加了新的技术债务。让我们快速谈谈代码质量，我将用测试覆盖率作为另一个指标进行类比。
- en: we're probably quite familiar with。 High test coverage as we all know doesn't
    necessarily。 mean that your tests are great。 There's lots of ways that we can
    test things badly that。 nevertheless cover all of our code。 However it's important
    to note that low test coverage。 probably means your tests are pretty bad and there's
    an analogy here with the code quality， metrics。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能对高测试覆盖率非常熟悉，正如我们所知，高测试覆盖率并不一定意味着你的测试很好。有很多方法可以不良测试某些东西，尽管覆盖了我们所有的代码。然而，需要注意的是，低测试覆盖率可能意味着你的测试相当糟糕，这与代码质量指标有相似之处。
- en: High code quality or good metrics short functions low cognitive complexity that。
    doesn't mean that your code is good。 However having high numbers of these functions
    probably。 indicates that your code is bad and that's how we interpret some of
    these things。 The。 higher numbers are less useful than the lower numbers。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 高代码质量或良好指标、短函数、低认知复杂性并不意味着你的代码很好。然而，拥有这些函数的高数量可能表明你的代码不好，这就是我们对某些事情的解读。数字越高的效果不如数字越低的有用。
- en: So at the beginning we mentioned that these metrics can help us in various conversations。
    about code and one of these decisions is refactor or rewrite。 So for example let's
    assume that。 you are developing an application for an online conference and you
    need to handle time zones。 and there is already some time zone package in your
    organization which has been used occasionally。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 所以在开始时我们提到这些指标可以帮助我们在各种关于代码的讨论中，而其中一个决策是重构或重写。例如，假设你正在为一个在线会议开发应用程序，需要处理时区，而你们组织中已经有一个偶尔使用的时区包。
- en: and there is a discussion within the team members。 Some of them say that yes
    we obviously。 should reuse what we already have while other team members say that
    all know that code is。 quite difficult to understand。 We are afraid that it contains
    some hidden bugs。 Let's just。 write something completely new and this is the kind
    of conversation which has the nature。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 团队成员之间有讨论。一些人说是的，我们显然应该重用已有的，而其他团队成员则说我们知道代码相当难以理解。我们担心它包含一些隐藏的错误。我们干脆写点完全新的，这就是这种对话的性质。
- en: of getting emotional particularly especially of the author of the library is
    involved and。 we definitely don't say that this kind of a chart will give you
    an explicit answer whether。 to refactor or rewrite but it can give some good hints
    that yes there are many quite some。 of the majority of this library looks quite
    good but again we have some quite big outliers。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是当库的作者参与时，情感因素的影响是显而易见的。我们并不说这种图表能明确告诉你是重构还是重写，但它可以提供一些有用的线索，表明这个库的大多数部分看起来相当不错，但我们也有一些比较大的异常值。
- en: and taking a look at these very complex functions is probably what should decide
    whether it's。 worth keeping working with this。 Besides that another decision where
    these metrics can give。 us some guidance is what to refactor and how to refactor。
    So regarding what again the outliers。 like these some functions with complexity
    around 70 there so if you have something like a clean。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 检查这些非常复杂的函数可能决定了是否值得继续工作。此外，这些指标可以在重构时提供一些指导，关于异常值，比如复杂度在70左右的一些函数，如果你有一些像这样清晰的。
- en: up week or whatever probabilities are the ones where it makes sense to focus
    the most effort。 and probabilities are the ones which need the need the more additional
    test cases because。 they are the most probable to hide some bugs and regarding
    how to refactor usually these。 different metrics tend to correlate strongly with
    each other so shorter functions are also。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 关注的概率是那些需要更多附加测试用例的，因为它们最有可能隐藏一些错误，而关于如何重构，通常这些不同指标之间的相关性很强，因此较短的函数也适用。
- en: less complex and if this there is a big discrepancy between them that's often
    a sign that some。 specific kind of refactoring would be beneficial so this is
    again an example from this repo。 analysis。com and this specific in this module
    the average function length is just under 3。 and but the average working memory
    is above 13 which is which is definitely above that。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它们之间存在很大的差异，这往往是某种特定重构是有益的标志，这又是来自于这个repo的一个示例。在这个模块中，平均函数长度仅略低于3，但平均工作记忆则高于13，这绝对超出了范围。
- en: optimal range and this is an indication that we try to probably squeeze a bit
    too much。 information and too many different variables into those short functions
    so in that case。 we probably are missing some levels of abstraction and we should
    introduce new data structures。 new classes and things like that。 So that's to
    summarize this section it seems that there。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最优范围的指示表明，我们可能试图在这些短函数中挤压太多信息和不同变量，因此在这种情况下，我们可能缺少一些抽象层次，应该引入新的数据结构、新的类等。总之，这一部分似乎表明存在这样的问题。
- en: is a general agreement on some elements of good code style like this medium
    functional。 length of 5/6 which represented and that keeping the working memory
    under 10 is a idea。 It's。 very important to say that poor quality provides more
    information than good quality numbers。 because good quality code can be still
    difficult to under so good numbers can be still difficult。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一些良好代码风格元素的普遍共识是，这种中等函数长度为5/6，并且保持工作记忆低于10是个好主意。非常重要的一点是，低质量提供的信息比高质量数字更多，因为高质量代码仍然可能难以理解，所以良好的数字仍然可能难以把握。
- en: to understand and then you are doing such analysis probably the most valuable
    information。 under outliers which shows some areas for improvement。 Also seen
    some ways that we can use code quality metrics but the title of the talk includes。
    a bit about how we should not use code quality metrics so we are going to go through
    a bit。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 理解这些分析时，最有价值的信息往往在于异常值，它显示出一些改进的领域。此外，也看到了我们如何使用代码质量指标，但讲座的标题也提到了一些我们不应该使用代码质量指标的内容，因此我们将对此进行探讨。
- en: of that now。 One obvious problem with metrics in general is that they are typically
    gameable。 A wheel-nove ways that we can come up with you know sort of systems
    to do code coverage。 for example that doesn't actually test anything。 I was heard
    a story yesterday of somebody。 who wrote a package which had 100% code coverage
    in their tests but none of the tests contain。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，关于指标的一个明显问题是它们通常是可以被操控的。我们可以想出一些系统来进行代码覆盖测试，例如这些测试实际上并不测试任何内容。我昨天听到一个故事，有人写了一个包，测试的代码覆盖率达到100%，但测试中没有任何有效内容。
- en: any assert statements。 This is the kind of thing that can cause a problem。 We
    also really shouldn't be looking at using these types of metrics as developer
    performance。 metrics。 They are biased， they are sort of adhered to a particular
    style and those styles。 aren't universal and they certainly aren't necessarily
    applicable depending on the type。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 任何断言语句。这类问题可能会造成麻烦。我们真的不应该将这些类型的指标视为开发者绩效指标。它们是有偏见的，遵循特定的风格，而这些风格并不是普遍适用的，根据类型的不同，它们也不一定适用。
- en: of project you are approaching。 We have also mentioned something about average
    code quality， here。 Averaging is a real problem for these types of metrics because
    as we have already。 seen they tend to live on a sort of logarithmic style scale
    and the average dotted line on。 the far left there that's way skewed low。 The
    thing that we are most interested in probably。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你所接触的项目。我们也提到了一些关于平均代码质量的内容。平均值对于这些类型的指标来说是一个真正的问题，因为正如我们已经看到的，它们往往呈现出一种对数样式的规模，而最左侧的平均虚线显得异常偏低。我们可能最感兴趣的事情。
- en: is these outliers。 So averaging， ranking and sort of trying to use these things
    as developer。 performance indicators would become a real problem。 Besides that
    it's important to mention that code quality contains some elements which。 aren't
    captured by any of these metrics and here we see some examples for bad naming
    like。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 是这些异常值。因此，平均、排名以及试图将这些用作开发者绩效指标将会成为一个真正的问题。此外，重要的是要提到，代码质量包含一些元素，这些元素并未被任何这些指标所捕捉，这里我们看到一些坏命名的例子，比如。
- en: not so descriptive names and descriptive names but not consistent terminology。
    Another important。 aspect is that these metrics are all quite on a short scale
    so they measure functions or。 perhaps a module level but they don't tell us anything
    about the structure of a project。 and also not about the external API of it and
    how convenient it is to use it。 So let's wrap up。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 名称不够描述性和描述性名称，但术语不一致是另一个重要方面。这些指标通常都是在短范围内，因此它们测量的是函数，或者可能是模块级别，但它们并不告诉我们关于项目结构的信息，也没有关于外部
    API 的便捷性和使用方便程度的信息。所以让我们总结一下。
- en: We've seen a number of code quality metrics today。 This is by far， this。 is
    very much not an exhaustive list but as we saw from the matrix it does tend to
    capture。 a reasonable subset of what we'd expect to understand about our code
    quality。 So we talked。 about the function length probably one you already knew
    about， things about the psychomatic。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 今天我们看到了许多代码质量指标。这绝对不是一个详尽无遗的列表，但正如我们从矩阵中看到的，它确实捕捉到了我们期望了解的代码质量的合理子集。因此我们讨论了函数长度，可能是你已经了解的内容，以及关于心理复杂度的事宜。
- en: complexity， the cognitive complexity and this idea of working memory。 And we
    have seen some areas where these metrics can provide valuable information so they
    can。 be a good input to various conversations and trying to make them a bit more
    objective。 They can also serve as code style checks so especially for things like
    method lengths。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 复杂性，认知复杂性以及工作记忆的概念。我们已经看到一些领域，这些指标可以提供有价值的信息，因此它们可以成为各种对话的良好输入，帮助使其更加客观。它们也可以作为代码风格检查，特别是对于像方法长度这样的内容。
- en: or also the more complex things for working memory。 They are a great way to
    identifying。 areas for improvement and pieces of the code which are most probable
    to have some problems。 and bugs and they can also help us with some more complex
    decisions like refactor and rewrite。 We've been through the limitations of all
    of these metrics and also metrics in general。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 或者更复杂的工作记忆内容。它们是识别改进领域和最可能存在问题和错误的代码部分的好方法，同时也可以帮助我们进行一些更复杂的决策，比如重构和重写。我们已经探讨了所有这些指标及其一般限制。
- en: We certainly shouldn't be using code quality metrics， these metrics is the only
    measure of。 code quality which we very careful with our aggregations and they
    shouldn't be used in， rankings。 There's one more final point I'd like to make
    which is that like everything。 like a lot of the tools we use， code quality metrics
    are just a tool。 You can't determine。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们当然不应该使用代码质量指标，这些指标是唯一衡量代码质量的标准，我们必须非常小心地进行汇总，它们不应该用于排名。我想强调的最后一点是，像所有事物一样，包括我们使用的许多工具，代码质量指标只是一个工具。你无法仅凭这些。
- en: correctness using code quality and that's the final line。 It is a tool to help
    us write， good。 It's not going to tell us whether or not the code is correct and
    is doing the。 thing that is supposed to do and that's why we're all here。 For
    those who might not be。 able to read this， this is one of my favourite XKCD comics，
    four-star rating on an app which。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用代码质量来验证正确性，这就是最终的目标。这是一个帮助我们编写良好代码的工具。它不会告诉我们代码是否正确，以及是否实现了应该做的事情，这就是我们大家在这里的原因。对于那些可能无法阅读的人来说，这是我最喜欢的XKCD漫画之一，应用的四星评级。
- en: has a good UI and it doesn't crash。 You can set multiple locations but it doesn't
    warn。 about tornadoes。 Thank you very much。 So， we would like to thank you to
    all the sources which you have used here and also to。 the developers of these
    various metrics。 So， you can check out these if you are interested。 in learning
    more about them and you will find a list of these sources and some metrics about。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 界面良好且不会崩溃。你可以设置多个位置，但它不会警告关于龙卷风的信息。非常感谢你。因此，我们想感谢在这里使用的所有来源，以及这些不同指标的开发者。如果你有兴趣了解更多，可以查看这些内容，并且你会发现这些来源的列表和一些指标。
- en: various open source repositories at RepoAnalyses。com。 You can contact us at
    the source reboot number， 713 or in the hallway here during the conference and
    at the GitHub after the conference。 Yeah， as said， come and find us。 We're happy
    to talk and we're typically friendly and we。 won't judge your code。 Thank you。
    [Applause]。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 各种开源库在RepoAnalyses.com上。你可以在会议期间通过源重启号码713与我们联系，或者在这里的走廊中以及会议后在GitHub上找到我们。是的，正如所说，来找我们。我们很乐意交流，通常也很友好，不会评价你的代码。谢谢。[掌声]
- en: '![](img/50130107e1b57a24c3d6e48c13547005_4.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/50130107e1b57a24c3d6e48c13547005_4.png)'
