- en: P81：Talk - Zachary Sarah Corleissen_ Localize your open source documentation_
    a Kube - VikingDen7 - BV1f8411Y7cP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P81：演讲 - Zachary Sarah Corleissen_本地化你的开源文档_一个Kube - VikingDen7 - BV1f8411Y7cP
- en: Hello everyone， welcome back。 So we have our first talk in the evening by Zachary
    Sarah。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 大家好，欢迎回来。所以我们今晚的第一场演讲由Zachary Sarah进行。
- en: '![](img/1ab8ec46d3e9322bf33e33244fb68778_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1ab8ec46d3e9322bf33e33244fb68778_1.png)'
- en: '![](img/1ab8ec46d3e9322bf33e33244fb68778_2.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1ab8ec46d3e9322bf33e33244fb68778_2.png)'
- en: Carlson on localized your open source documentation。 What to use there？ Hello。
    So as advertised。 this talk is about localizing documentation for open source
    projects。 based on the experience of localizing Kubernetes documentation。 My goal
    today is to encourage you。 to localize your projects documentation。 I will do
    that by sharing advice based on what the Kubernetes。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Carlson关于本地化你的开源文档。该使用什么？你好。因此，正如宣传的那样，这个演讲是关于为开源项目本地化文档，基于Kubernetes文档的本地化经验。今天我的目标是鼓励你们本地化项目文档。我将通过分享基于Kubernetes的建议来做到这一点。
- en: project has learned about localization in our own documentation set。 I have
    given previous versions of this talk that focus on different aspects of the Kubernetes
    experience。 If you are interested in research and tooling， I recommend watching
    my talk at Fozdem in 2019。 titled Multilingual Kubernetes。 If you are more interested
    in site analytics relating to localization。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 项目在我们自己的文档集中学习了本地化。我之前曾给出过不同侧重于Kubernetes体验各个方面的演讲。如果你对研究和工具感兴趣，我建议观看我在2019年Fosdem上的演讲，题为多语言Kubernetes。如果你更感兴趣的是与本地化相关的网站分析。
- en: I recommend watching my talk at Write the Docs EU in Prague， also in 2019。 titled
    Found in Translation。 So who am I and why am I up here talking to you about all
    this？
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议观看我在2019年布拉格Write the Docs EU上的演讲，题为翻译中的发现。那么，我是谁，为什么在这里跟你们谈论这些？
- en: My name is Zach or Sarah。 My pronouns are they/them or she/her。 Feel free to
    use my names and pronouns interchangeably。 I am currently a staff technical writer
    at Stripe previously at the Linux Foundation。 And I served as chair for Kubernetes
    documentation from 2017 to 2021。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我叫Zach或者Sarah。我的代词是他们/她，随意交替使用我的名字和代词。我目前是Stripe的员工技术作家，之前在Linux基金会工作。我曾担任Kubernetes文档的主席，任期为2017年至2021年。
- en: And I'm still an approver for the documentation in the Kubernetes project。 And
    I'm also here because one of the maintainers of the NumPy library invited me to
    submit this talk and I said。 "Sure。"， So what is localization？ To paraphrase the
    W3C definition。 localization is the adaptation of documentation to meet the language。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我仍然是Kubernetes项目文档的审核人。我之所以在这里，是因为NumPy库的一位维护者邀请我提交这个演讲，我说：“当然。”那么，本地化是什么？用W3C的定义来
    paraphrase。本地化是将文档调整以满足语言需求。
- en: cultural and other requirements of a specific target market。 This definition。
    I like it because it highlights that localization is more than translation。 And
    when I first started learning about localization for Kubernetes， I wondered。 "Why
    isn't machine translation good enough？ Why can't I just plug all of this into
    Google Translate and have it work？
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个特定目标市场的文化和其他要求。我喜欢这个定义，因为它强调了本地化不仅仅是翻译。当我第一次开始学习Kubernetes的本地化时，我想知道：“机器翻译为什么不够好？为什么我不能把所有内容放入Google翻译中就能工作？”
- en: '"， And the short answer is that while machine translators are powerful tools。
    they often return translations that lack linguistic and cultural relevance。 So
    in this talk。 I''m going to speak to you as if you are all project maintainers。
    But this talk is for contributors in any role of an open source project。 So TLDR，
    this talk。'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，虽然机器翻译工具很强大，但它们往往返回缺乏语言和文化相关性的翻译。因此，在这个演讲中，我将和大家讨论，就好像你们都是项目维护者。但这个演讲适合任何开源项目的贡献者。所以总结一下，这个演讲。
- en: I absolutely believe that most open source projects can and should localize
    their documentation。 And while localization does require some effort， the rewards
    greatly exceed the work required to do it。 So here， I say expensive and costly
    to differentiate between two different things。 Localization doesn't have to be
    expensive or costly。 And by expensive。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我坚信大多数开源项目可以并且应该本地化它们的文档。尽管本地化确实需要一些努力，但回报远远超过所需的工作。因此，在这里，我想区分两件不同的事。 本地化不一定昂贵或费钱。
- en: I mean the financial expense of localization tools， tool subscriptions， things
    like that。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我是指本地化工具的财务开支，工具订阅之类的东西。
- en: '![](img/1ab8ec46d3e9322bf33e33244fb68778_4.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1ab8ec46d3e9322bf33e33244fb68778_4.png)'
- en: It doesn't have to be expensive。 And by cost， it doesn't have to be costly。
    I mean the cost of attention and labor in projects where maintainers already struggle
    with the burden of maintenance in the project。 So localization doesn't have to
    cost you a lot of money or impose a significant burden of labor。 That said， localization
    does require maintenance。 It requires maintenance to do and then some maintenance
    to upkeep。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本地化并不一定要昂贵。而且说到成本，实际上不一定要花费很多。我指的是在那些维护者已经在项目维护中挣扎的项目里，关注和劳动的成本。因此，本地化并不需要你花费很多钱或施加重大的劳动负担。不过，本地化确实需要维护。它需要进行维护，并且还需要一些维护来保持。
- en: And for localization to be sustainable in open source projects。 that means choosing
    our maintenance wisely。 And I said on a previous slide that the benefits of localization
    are greater than additive。 When you localize， you get more back than you put in。
    And one way in which localization benefits projects is that when localization，
    sorry。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保开源项目中的本地化可持续，这意味着我们需要明智地选择维护方式。我在之前的幻灯片中提到过，本地化的好处是大于累加的。当你进行本地化时，你得到的回报往往超过你投入的。而本地化所带来的一个好处是，当本地化，抱歉。
- en: my time has me hurrying along and I'm just going to stop that。 So one way in
    which localization benefits projects is that when projects localize。 they usually
    attract a new set of maintainers， new contributors and new maintainers。 So when
    you localize， you open the door for more people to become contributors and maintainers
    to your project。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我的时间让我匆忙前行，我就此停止。因此，本地化对项目的一个好处是，当项目进行本地化时，通常会吸引一批新的维护者、新的贡献者和新的维护者。因此，当你进行本地化时，你为更多的人成为项目的贡献者和维护者打开了大门。
- en: So with the need for selective maintenance in mind， based on what we've learned
    in Kubernetes。 some of these things we learned the hard way， here is some advice
    about how to localize and scale your project while minimizing the amount of required
    maintenance。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到选择性维护的需要，基于我们在Kubernetes中学到的经验，我们有一些建议，关于如何本地化并扩展你的项目，同时尽量减少所需的维护量。
- en: This is probably the single greatest factor to being able to scale localization
    in Kubernetes docs。 Be indifferent to the origins of localized content。 Don't
    care where it comes from before it shows up in a pull request。 And this applied
    indifference is one of the keys to sustainable maintenance。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这是能够在Kubernetes文档中扩展本地化的最大因素之一。对本地化内容的来源漠不关心。在内容出现在拉取请求之前，不要关心它来自哪里。而这种漠不关心是可持续维护的关键之一。
- en: There are some reasons to be indifferent to localized content before it shows
    up as a pull request in your repository。 And one of those reasons is that different
    tools work better for different teams。 There are a host of tools out there that
    trans-effects， crowd in， Google Translate。 your time and attention as a maintainer，
    gaining expertise in these tools and then trying to support them for multiple
    localizations that doesn't scale。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地化内容出现在你的仓库的拉取请求之前，有一些理由让人对其漠不关心。其中一个原因是，不同的工具对不同的团队效果更佳。有很多工具可以使用，例如trans-effects、crowd
    in、Google Translate。作为维护者，你的时间和精力会被这些工具所消耗，学习这些工具的专业知识，然后尝试支持多个本地化，这并不具有可扩展性。
- en: and your attention and time are not valuable when you try to support these things。
    So applied indifference is one of those things that saves you maintenance。 And
    every team has tools and processes that are going to work better for them。 And
    that kind of non-standardization is healthy， but it also means that you as a maintainer
    have to be selective with how much attention you put into the origin of localized
    content。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当你试图支持这些内容时，你的注意力和时间并不重要。因此，应用的漠不关心是节省维护的一种方式。每个团队都有适合自己的工具和流程。而这种非标准化是健康的，但这也意味着你作为维护者必须选择性地投入多少注意力于本地化内容的来源。
- en: One of the benefits of this as well is that it is somewhat toolproof。 But if
    machine translation somehow becomes the perfect localization tool tomorrow。 you
    are already prepared because you already don't care。 That said。 once localized
    content does arrive in a pull request to your repository。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这方面的一个好处是，它在某种程度上是抗工具的。但如果机器翻译在明天变成完美的本地化工具，你已经做好准备，因为你早已不在乎。也就是说，一旦本地化内容在你的仓库中以拉取请求的形式出现。
- en: you must care deeply about how it's reviewed and approved。 So here are some
    tips for a good strict review process。 Don't allow authors to approve their own
    pull requests。 This is seldom a good practice。 It's especially not a good practice
    in localization。 Require a review process。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须非常关心它是如何被审核和批准的。所以这里有一些良好的严格审核流程的建议。不要允许作者自己批准他们的拉取请求。这很少是个好做法，尤其在本地化中。要求进行审核流程。
- en: And in addition to requiring reviews， it's good to limit who can review localized
    content。 I highly recommend requiring reviewers to have native or equivalent fluency
    with the content they review。 I have zero fluency in Mandarin。 I do not approve
    Mandarin language content for Kubernetes documentation。 But because I know that
    strict reviews are required， I know that that content， when it is approved。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 除了要求审核之外，限制谁可以审核本地化内容也是很好的。我强烈建议要求审核人员对他们审核的内容具有母语或等效的流利程度。我对普通话没有流利的掌握。因此，我不批准Kubernetes文档中的普通话内容。但因为我知道严格的审核是必需的，所以我知道当这些内容被批准时。
- en: meets the standard of quality。 That it is legible and meaningful to the people
    who consume that content。 So establish a canonical source language and branch。
    A canonical language and branch are useful for the same reason upstream Git remotes
    are useful。 A canonical source language and branch helps your project scale。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 满足质量标准。确保内容对消费这些内容的人是清晰且有意义的。因此，建立一个规范的源语言和分支。规范语言和分支对于上游Git远程的作用是相同的。规范的源语言和分支有助于你的项目扩展。
- en: It means that localization teams are working from the same understood source。
    And it's an efficiency piece。 I recommend matching your canonical source language
    to the primary language of your contributors。 and matching your canonical branch
    to the project's published branch。 For Kubernetes。 English is the canonical source
    because it's the primary working language for the majority of contributors。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着本地化团队在相同的已理解源上工作。这也是效率的体现。我建议将你的规范源语言与贡献者的主要语言匹配，并将你的规范分支与项目的发布分支匹配。对于Kubernetes，英语是规范源，因为它是大多数贡献者的主要工作语言。
- en: both to documentation and to feature development。 Main is the canonical branch
    in Git because it's the most current version of docs published on the website。
    It doesn't have to be English。 If your contributors work primarily in another
    language。 consider using that language as a canonical source。 I recommend establishing
    a minimum viable documentation set。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 既适用于文档，也适用于功能开发。Main是Git中的规范分支，因为它是网站上发布的最新文档版本。它不一定是英语。如果你的贡献者主要使用其他语言，可以考虑将该语言作为规范源。我建议建立一个最小可行的文档集。
- en: The origin for this phrase minimum viable documentation is Heidi Waterhouse，
    who is seated here。 Identifying a minimum viable documentation set serves a couple
    of purposes。 I think the most valuable is that it clarifies your project's most
    critical content。 This will help you develop empathy for your users。 What do they
    most need？
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这个短语“最小可行文档集”的来源是Heidi Waterhouse，她坐在这里。识别最小可行文档集有几个目的。我认为最有价值的是它澄清了你项目中最关键的内容。这将帮助你对用户产生共鸣。他们最需要什么？
- en: What can they not live without？ And another reason is that it establishes a
    threshold at which a localization meets the requirements for inclusion in your
    published docs。 You have a very clear understanding of what is the requirement
    for a localization to meet before it can be published。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 他们无法离开的内容是什么？另一个原因是它建立了一个门槛，使得本地化满足包含在你发布文档中的要求。你清楚地理解本地化需要满足什么要求才能被发布。
- en: I recommend scripting away common functions。 These links are to Python scripts
    in very tiny print for which I apologize deeply。 These are Python scripts for
    tracking difts between localization branches and for tracking difts from upstream
    source from the canonical branch。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议将常见功能脚本化。这些链接指向的是非常小字体的Python脚本，对此我深表歉意。这些是用于跟踪本地化分支之间差异和从规范分支跟踪上游源的差异的Python脚本。
- en: I talked earlier about how some translation tools。 how it's good for each team
    to have their own workflow around creating localized content。 As a corollary to
    that， there are some tasks that every localization team shares in common and it's
    good to standardize those。 Every team needs to track difts across their own collaboration
    branches。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我之前谈到一些翻译工具，如何让每个团队围绕创建本地化内容有自己的工作流程。作为一种推论，有一些任务是每个本地化团队共同分享的，标准化这些任务是有益的。每个团队都需要在自己的协作分支上跟踪差异。
- en: This is a script to basically find out what did everyone else work on since
    the last time I ran the script。 Where are we as a localization？ The other script
    tracks upstream changes in order to keep that localization current。 What changed
    upstream we need to now localize。 Unlike translation tools， which we don't care
    about。 difts are automatable。 If it's automatable， it's scalable。 This also。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个脚本，基本上用于找出自上次运行脚本以来，其他人都在做什么。我们作为一个本地化团队处于什么位置？另一个脚本跟踪上游变化，以保持本地化的最新状态。上游发生了什么变化，我们需要现在进行本地化。与我们不在乎的翻译工具不同，差异是可以自动化的。如果可以自动化，就可以扩展。这也是。
- en: standardizing in this kind of scripted way， makes it easier for you as a maintainer
    and it makes it easier for teams to be able to support each other in a decentralized
    way。 This is another one of those greater than additive benefits teams support
    themselves。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种脚本化的方式进行标准化，使得作为维护者的你更容易，同时也让团队能够以去中心化的方式相互支持。这是团队自我支持的又一个增值效益。
- en: I recommend using tools that support localization or internationalization， what
    I have on the slide。 but localization as well。 Choose a content management system
    and static site generator that have built-in support for localization。 For example，
    Hugo and Gatsby are both static site generators that have built-in support for
    localization。 I recommend using a tool， whatever it is that you use for a static
    site generator。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我推荐使用支持本地化或国际化的工具，如我在幻灯片上提到的那样，也包括本地化。选择一个内置支持本地化的内容管理系统和静态网站生成器。例如，Hugo和Gatsby都是具有内置本地化支持的静态网站生成器。我建议使用一个工具，不论你选择什么样的静态网站生成器。
- en: Choose one that is built on a language that aligns with your own projects。 languages
    and sources of expertise。 This increases scalability。 Kubernetes uses Hugo because
    Hugo is written in Go and unsurprisingly。 Kubernetes has a deep pool of Go-Lang
    expertise。 Avoid hard-coding strings。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 选择一个建立在与你的项目语言一致的语言上。这增加了可扩展性。Kubernetes使用Hugo，因为Hugo是用Go编写的，而Kubernetes恰好拥有丰富的Go语言专业知识。避免硬编码字符串。
- en: This is an efficiency piece and it's also a scalability piece。 I will say little
    about partials apart from mentioning just don't hard-code them。 Instead。 I will
    refer you to the Hugo documentation for partials and for the Kubernetes website
    repository as an applied example of what localized partials look like。 Partials
    only work once you solve for repository permissions。 Rather。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个效率的部分，也是一个可扩展性的部分。我将对局部内容提到很少，只想提到不要对它们进行硬编码。相反，我会参考Hugo文档中的局部内容，以及Kubernetes网站仓库作为本地化局部内容的实际示例。局部内容只有在解决了仓库权限问题后才能正常工作。
- en: they're an example of what you need to solve for with repository permissions。
    Permissions are tricky to solve for。 The permissions required for localization
    teams to work effectively don't map well to the granular permissions that Git
    allows repo admins to assign。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你需要解决的仓库权限的一个例子。权限问题很棘手。本地化团队有效工作所需的权限与Git允许仓库管理员分配的细粒度权限并不匹配。
- en: I do have a recommendation for how to solve for permissions。 but I want to dig
    into the specifics of why and how permissions are problematic for localization
    projects。 One example is branches。 Neither GitHub nor GitLab permit granular permissions
    to only create a branch。 When you assign permission to create a branch that is
    bundled with the permission to merge or to delete not only a particular branch
    but any branch in that repository。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我确实有一个关于如何解决权限问题的建议，但我想深入探讨权限对本地化项目为何以及如何成为问题的具体细节。一个例子是分支。无论是GitHub还是GitLab都不允许对创建分支的权限进行细粒度控制。当你分配创建分支的权限时，这与合并或删除权限是捆绑在一起的，不仅是某个特定分支，还有该仓库中的任何分支。
- en: And the easiest way for localization teams to collaborate is on shared long
    running branches in the project repository。 This creates a challenge in projects
    where people contribute by forking the repository。 There's a whole set of reasons
    why it's a poor idea for multiple contributors to work on a branch of one contributors
    fork。 especially for a long running fork。 Conversely， there are good reasons to
    localize on a long running branch that is off of the project's main repository。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 本地化团队协作的最简单方式是在项目仓库中共享长期运行的分支。这在一些人通过分叉仓库进行贡献的项目中带来了挑战。对于多个贡献者在某个贡献者的分叉分支上工作，尤其是长期分叉来说，存在一系列原因使其成为不明智的选择。相反，在项目的主仓库之外的长期运行分支上进行本地化则有其合理之处。
- en: So that means assigning a localization team the permission to perform right
    operations in the project repo。 And that raises a whole host of concerns。 So with
    that comes the question of permissions for approvals。 So you will almost certainly
    not be able to assign repo permissions in a way that matches the permissions that
    localization teams require to configure themselves and only themselves。 So for
    example， Hugo requires that localized markdown files be placed along a language
    specific path/content/two-letter country code。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着要赋予本地化团队在项目代码库中执行正确操作的权限。这引发了一系列关注。因此，随之而来的问题是批准权限。你几乎肯定无法以符合本地化团队配置自身的权限的方式分配代码库权限。例如，Hugo要求本地化的markdown文件放置在语言特定路径/content/两字母国家代码下。
- en: So it would be for Korean， it would be like /content/ko。 So Hugo requires that
    localized content exist on that file path。 but Hugo performs the site configuration
    for a localization in a root level config file。 The Hugo parser will fail a build
    if content exists on a file path and it isn't properly configured in the root
    level file。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 对于韩语而言，它的路径将是/content/ko。因此，Hugo要求本地化内容存在于该文件路径下。但是，Hugo在根级配置文件中执行本地化的站点配置。如果文件路径下存在内容，但未在根级文件中正确配置，Hugo解析器将失败构建。
- en: So localization requires permission to alter root level files。 And that's concerning
    for a whole host of reasons。 Partials are another example of that。 Hugo puts all
    of its string partials into a directory off of the root level that is not on the
    localized content path。 So granular permissions， it's impossible to assign them
    in a way that the Venn diagram is 100% overlap。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，本地化需要修改根级文件的权限。这在许多方面都是令人担忧的。部分内容是另一个例子。Hugo将所有字符串部分放在一个不在本地化内容路径下的根目录下的目录中。因此，细粒度权限无法以100%重叠的方式进行分配。
- en: So assigning permissions， giving localization teams enough permissions to do
    what they need to do creates a problem of trust。 And the intersection of team
    needs and get permissions creates choices about security that are unfortunately
    pretty either/or。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，分配权限，给予本地化团队足够的权限以完成所需操作，便造成了信任问题。团队需求与获取权限的交集导致了关于安全的选择，这不幸的是比较二元。
- en: It's all or nothing。 Not 100%， but it's pretty hard binary sometimes。 So let's
    talk about trust。 And trust is where you as a project maintainer decide what kind
    of maintenance you want to engage in。 Low trust means engaging in the custodial
    maintenance of periodically creating。 merging and deprecating branches at increasing
    scale， which is to say that it doesn't scale。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这是全有或全无的情况。不是100%，但有时这确实很难区分。那么我们来谈谈信任。信任是你作为项目维护者决定想要参与何种维护的地方。低信任意味着进行监护维护，定期创建、合并和淘汰分支，而这并不具备可扩展性。
- en: Or you can have higher trust and engage in occasional forensic maintenance。
    Forensic as opposed to custodial forensic maintenance of undoing disruptive actions。
    Please note disruptive， not malicious。 There have been many disruptive actions
    related to localization work in the Kubernetes repo。 but none of them were malicious。
    We're very fortunate in that regard。 It does require vigilance。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你可以选择更高的信任，进行偶尔的取证维护。取证与监护相对，取证维护旨在撤销破坏性行为。请注意，是破坏性的，而非恶意的。在Kubernetes代码库中与本地化工作相关的许多行为都是破坏性的，但都不是恶意的。对此我们非常幸运，这确实需要保持警惕。
- en: It does require maintenance。 But this is where you as a project maintainer and
    you as a project figure out how you think about trust。 So I recommend treating
    localization teams with the same trust that you would give to any release branch。
    And to treat localization maintainers the same way that you would any other release
    lead who has right permissions。 Not everyone who contributes localized content
    needs right permissions。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这确实需要维护。但这就是你作为项目维护者以及项目自身如何思考信任的问题。因此，我建议对待本地化团队的信任程度应与对待任何发布分支的信任相同。而且要将本地化维护者视为任何其他具有写权限的发布负责人。并非所有贡献本地化内容的人都需要写权限。
- en: But in order to scale as a project， every localization team should have someone
    who serves as a team lead and with whom you as a maintainer have explicit and
    well documented conversations about security and trust。 Perhaps unsurprising coming
    from a technical writer but document everything。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 但是为了让项目具备可扩展性，每个本地化团队都应该有一位团队负责人，而你作为维护者与之进行明确且有文档记录的关于安全和信任的对话。作为技术作家，我并不惊讶，但请务必记录一切。
- en: A frank and explicit conversation about trust and permissions requires a thorough
    written understanding。 Every project has norms， expectations and boundaries about
    what people who have certain levels of permission can do with those permissions。
    Because expectations and boundaries are cultural and because localization is also
    about cultural relevance。 It is important， I would say critical， to document the
    expectations and boundaries around localization work in your project。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 关于信任和权限的坦诚明确的对话需要深入的书面理解。每个项目都有关于具有特定权限级别的人可以做什么的规范、期望和界限。因为期望和界限是文化性的，而且本地化也与文化相关。因此，我认为在你的项目中记录与本地化工作相关的期望和界限是重要的，甚至是关键的。
- en: Every single disruptive action in the Kubernetes website could have been prevented
    with better documentation about the expectations for permissions and what people
    can and can't do with them。 So I recommend making issues in pull requests filterable
    by language。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 网站上每一个破坏性行动都可以通过更好的文档来预防，特别是关于权限期望和人们可以做什么与不能做什么的文档。因此，我建议将拉取请求中的问题按语言进行筛选。
- en: And one of the easiest ways to do that is with repo labels that are specific
    to a language。 They are an easy solution to what otherwise is a big maintenance
    burden。 Without the ability to filter by language， it's just its toil。 And as
    with any form of toil。 I highly recommend automating it away。 So I recommend language
    labels that follow the format of language plus the two letter language code。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最简单的方法之一，就是使用特定于语言的仓库标签。它们是一个简单的解决方案，解决了原本是一个大维护负担的问题。如果没有按语言过滤的能力，那就是单纯的繁琐。对于任何形式的繁琐，我强烈建议自动化处理。因此，我推荐的语言标签格式是语言加上两位字母的语言代码。
- en: And this tracks to the same standard that you use to set that content path in
    a repository for example。 And it makes it easy to correlate that this label applies
    to this content。 And you can automate these with a GitHub action。 There is a GitHub
    action that will specifically apply a label to a pull request based on the content
    in that file path。 So when localization contributors identify something that needs
    to change in the upstream source。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这与您用于设置存储库中内容路径的标准相同。因此，它使得关联这个标签适用于这个内容变得容易。您可以通过 GitHub 操作自动化这些操作。有一个 GitHub
    操作会根据该文件路径中的内容特定地应用标签到拉取请求上。因此，当本地化贡献者识别出需要在上游源中更改的内容时。
- en: they will often open a pull request that includes both a change in the upstream
    source and their own localized content。 And these are the most noble and well-intended
    pull requests and they almost always languish because multiple languages require
    multiple approvers。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 他们通常会打开一个拉取请求，其中既包含上游源中的更改，也包含他们自己的本地化内容。这些是最值得尊敬和出于良好意图的拉取请求，而它们几乎总是因为多种语言需要多个审批者而被搁置。
- en: It's a bit of a hassle to say to somebody， "Hey， can you do this in two pull
    requests rather than one？
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 对某人说“嘿，你能不能分成两个拉取请求而不是一个？”确实有点麻烦。
- en: '"， But they will get approved more quickly based on practice。 I recommend preview
    builds。 It just makes the review process faster and easier for everyone regardless
    of localization。 Kubernetes uses Netlify to generate preview builds。 We use it
    as our content delivery network。 It''s what actually publishes our rendered content。
    And it works great。'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: “但是它们会根据实践更快地获得批准。我推荐预览构建。这使得审查过程对每个人来说都更快、更容易，无论本地化如何。Kubernetes 使用 Netlify
    生成预览构建。我们将其作为我们的内容交付网络。它实际上发布我们的渲染内容，而且效果很好。
- en: It integrates well with the site CICD。 So this is one of the best kept secrets
    in the Kubernetes website and I wish it wasn't a secret because I wish every project
    had a smoke test page。 A smoke test is one page generated from a single markdown
    file that contains an instance of every syntax or formatting element in your docs。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 它与网站的持续集成和持续交付（CICD）集成得很好。这是 Kubernetes 网站上最好的保密秘密之一，我希望它不是秘密，因为我希望每个项目都有一个冒烟测试页面。冒烟测试是从单个
    Markdown 文件生成的一个页面，包含文档中每种语法或格式元素的实例。
- en: And this is great for figuring out whether a proposed change works as intended。
    Sometimes when you localize different languages have different site element requirements。
    And this is a great way to test that。 And you can follow this particular path
    to a smoke test on preview builds so you can see whether it works before you approve
    it。 So this page， the smoke test page is crawlable by robots but it's de-indexed
    from site search so it doesn't interfere with organic search results。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这对判断提议的变更是否按预期工作非常有帮助。有时候，当你本地化时，不同的语言有不同的网站元素需求。这是测试这一点的好方法。你可以通过这个特定路径在预览构建上进行烟雾测试，以便在批准之前查看它是否有效。这个页面，烟雾测试页面是可以被机器人爬取的，但它在网站搜索中被去索引，因此不会干扰有机搜索结果。
- en: So handy。 So it is easier in some ways to set up a framework for localization
    before any of the work actually happens。 On the other hand， there are real benefits
    to adding localization tooling and workflows in equal partnership with the contributors
    who are actually doing that work。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这很方便。因此，在实际工作发生之前，某种程度上设置本地化框架更容易。另一方面，与真正做这项工作的人平等合作添加本地化工具和工作流程有实实在在的好处。
- en: So both of these approaches are valid。 Do it before you need it。 Wait until
    you need it。 It's kind of a wash。 So is localization worth it？ All of the advice
    that I've offered so far has been like on the level of implementation detail and
    systems level process。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这两种方法都是有效的。提前做，还是等到需要时再做，这差不多是一个平衡。那么，本地化值得吗？到目前为止，我提供的所有建议都是在实施细节和系统级流程的层面上。
- en: So it's not clear from my advice what maintaining a localization looks like
    in practice。 So I want to examine some specific maintenance cases and I would
    like to use the example of Korean language content on Kubernetes。io for the month
    of March 2022。 So in March of this year。 six people contributed Korean language
    content to the Kubernetes website。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我的建议并不明确维持本地化在实践中是什么样的。我想考察一些具体的维护案例，并以2022年3月kubernetes.io的韩语内容为例。在今年3月，六个人为Kubernetes网站贡献了韩语内容。
- en: And site traffic for Korean content constituted approximately 2。1% of site visitors。
    At this point。 you may be asking whether the advice that I'm giving you is worth
    the work for six contributors at 2。1% of site traffic。 So let's unpack those numbers
    a bit。 So in March， kubernetes。io had 1。4 million visitors for a total of 4 million
    sessions and 10 million page views。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 而韩语内容的网站流量大约占网站访问者的2.1%。此时，你可能会问我给出的建议是否值得为这2.1%的网站流量的六位贡献者付出努力。让我们稍微深入分析一下这些数字。今年3月，kubernetes.io有140万访客，共计400万次会话和1000万次页面浏览。
- en: Forget those millions for a moment。 For 1。4 million visitors， 2。1% of site traffic
    is 30。123 visitors。 And those six contributors in March sustained a one to many
    support ratio of just one to over 5。000。 One to 5，000。 Each one of those people
    who contributed localized content had the net effect of supporting 5。000 people
    in one month。 And that is a phenomenal number。 So yeah， 1。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时忘掉那几百万吧。对于140万访客，2.1%的网站流量是30,123位访问者。而在三月，这六位贡献者维持了超过5000的支持比例。每一位贡献本地化内容的人在一个月内支持了5000人。这是一个惊人的数字。
- en: 4 million people of those site visits， only 52% of those visitors viewed content
    in English。 Almost half of the site's total monthly traffic was to localized content。
    It is absolutely worth it。 So localization teams contribute more than just their
    own language content。 Localization teams contribute to upstream source。 They contribute
    to each other's mutual support。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这4百万次网站访问中，只有52%的访问者查看了英文内容。几乎一半的网站总月流量是指向本地化内容的。这绝对是值得的。因此，本地化团队贡献的不仅仅是他们自己的语言内容。本地化团队还为上游源提供支持。他们互相支持。
- en: Localization teams in related language groups consult with each other for their
    own mutual benefit。 Localization teams contribute to shared tooling。 Both of the
    scripts that I linked to earlier。 None of the English language maintainers contributed
    those scripts。 Those are from the French and Korean teams respectively。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 相关语言组的本地化团队互相咨询以获得共同的利益。本地化团队共同开发工具。我之前链接的两个脚本，均没有英语维护者贡献。这些脚本分别来自法语和韩语团队。
- en: And those are a benefit to the entire project。 And localization teams often
    become not just contributors but maintainers to a project。 So what's the point
    of all of this？ Why do we localize？ It is not for its own sake。 We don't localize
    for our own sake。 We localize to increase access to our projects and to drive
    adoption of our projects。 And when you open a door， people come in。 And that's
    beautiful。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这些对整个项目都是有益的。 本地化团队不仅是贡献者，往往也是项目的维护者。那么，这一切的意义是什么呢？我们为什么要进行本地化？这并不是为了自身的缘故。我们不是为了我们自己而进行本地化。我们进行本地化是为了增加项目的可访问性，并推动项目的采用。当你打开一扇门时，人们就会进来。这是美妙的。
- en: So here are some resources for the slide。 Again， in Tiny Print， Deepest Apologies。
    This is to the Kubernetes documentation for how to contribute localized content。
    This is a link to the website repository and the Python script directory。 This
    is a link to the Hugo static site generator。 And here's a link to the NumPy projects。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些幻灯片的资源。 再次以小字表示，深感抱歉。这是关于如何贡献本地化内容的Kubernetes文档链接。 这是网站仓库和Python脚本目录的链接。
    这是Hugo静态网站生成器的链接。 这是NumPy项目的链接。
- en: That library's own localization work and the ongoing discussion there。 Shameless
    plug by our book。 Last year I co-authored a book called Docs for Developers。 An
    engineers field guide to technical writing。 I co-wrote it with Heidi。 It's a good
    book and you should totally buy it。 Thank you very much。 [Applause]， [Silence]。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 该库自身的本地化工作和持续的讨论。 我们的书的无耻宣传。 去年我与海蒂共同撰写了一本书，名为《开发者文档》。这是一本技术写作的工程师手册。 我和海蒂共同撰写的。这是一本好书，你绝对应该买。
    非常感谢。 [掌声]，[静默]。
- en: '[BLANK_AUDIO]。'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[空音频]。'
- en: '![](img/1ab8ec46d3e9322bf33e33244fb68778_6.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1ab8ec46d3e9322bf33e33244fb68778_6.png)'
