- en: P86：Tutorial - Jacob Deppen_ Documenting your code from docstrings to automated
    buil - VikingDen7 - BV1f8411Y7cP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All right， is it time？
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3b9b1da3134251233edb777a8f445166_1.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/3b9b1da3134251233edb777a8f445166_2.png)'
  prefs: []
  type: TYPE_IMG
- en: It's time。 Welcome everyone。 Thanks for coming。 We are here for the documenting
    your code from Duckstrings to Automated Builds tutorial。 It's like the first day
    of college。 Everybody's in the right room。 Don't need to go down the hall。 Okay。
    Welcome。 If you didn't get the links there， we'll get to them again。 So if you
    haven't got the links yet， don't worry。 I am Jacob Deppin。
  prefs: []
  type: TYPE_NORMAL
- en: You can find me on Twitter if you care to read tweets about my kids and Disney
    things and。 other stuff like that。 Also data science sometimes。 Yeah， we're going
    to talk about documentation。 And thanks to everyone who filled out the survey
    that I sent around。 We got really good participation in that。 It was super helpful
    for me to understand where you're coming from。
  prefs: []
  type: TYPE_NORMAL
- en: And I've been able to refactor some things a little bit in the talk。 Hopefully
    that will meet folks where they are。 And we can， we have a successful session
    together。 I want this to be open enough that you can ask questions as we go。 I'm
    happy to be interrupted。 If I'm in a flow or something， I'll just tell you to
    hold on for a second。 And that's totally cool。
  prefs: []
  type: TYPE_NORMAL
- en: I'm going to now pass out some Post-It notes。 This is a thing that I love to
    do。 Has anybody ever taken a Carpentries workshop， software carpentry， data carpentry？
  prefs: []
  type: TYPE_NORMAL
- en: We do Post-It notes。 Everybody needs a green Post-It and a pink Post-It。 And
    you're going to keep them kind of next to you。 And these are your way of telling
    me that you're following along or that you are lost or you。 need help or something
    like that。 So green is good。 Red is， I got some problem。 I'm not done yet。
  prefs: []
  type: TYPE_NORMAL
- en: And in a big group like this， it's easier for me to see Post-It rather than
    really walking。 around and finding out。 So just grab one of each， one off the
    top， one off the bottom。 And please pass them towards the back as we go。 We won't
    need them yet for a while。 but get them circulated now。 So why does documentation
    matter？
  prefs: []
  type: TYPE_NORMAL
- en: I don't think I need to spend a lot of time on this。 You probably wouldn't be
    here if you didn't think documentation mattered or you didn't。 care about writing
    documentation， building documentation。 So hopefully we're kind of past that。 But
    I want to get us kind of all in the same terms。
  prefs: []
  type: TYPE_NORMAL
- en: And this is how I think about the values of documentation。 First of all， we
    want to help ourselves。 You're the one who's going to read your code more than
    anybody else。 So you want to help yourself with documentation to revisit your
    own code。 What was I doing there？
  prefs: []
  type: TYPE_NORMAL
- en: Why did I make the choice that I made？ Next up from that。 your team or your
    collaborators want to be using your code。 And you might not be available to help
    them use your code。 So documentation needs to help them get oriented with your
    code， read your code， maybe for。
  prefs: []
  type: TYPE_NORMAL
- en: code review purposes， you're going to have documentation。 And it's going to
    make the code review smoother when they know why you made certain choices。 or
    the way you did things。 Above that， we want to help strangers use your code。 That's
    the ultimate。 It's getting people that you've never met to use your code。
  prefs: []
  type: TYPE_NORMAL
- en: Whether that's people at your company in the future， whether it's an open source
    project。 that you're distributing to the world， you want to build documentation
    that other people， can use。 If it isn't documented， then your code kind of doesn't
    exist。 This is something you've maybe heard said before。 If it's not documented，
    it doesn't exist。
  prefs: []
  type: TYPE_NORMAL
- en: And that's pretty much true to some extent。 Finally， reaching documentation
    enlightenment。 our documentations will actually do some teaching， for us。 They'll
    do some teaching to other people to strangers about how to use our code， what。
    our code does， why it does it， how are--what are some interesting ways to use
    the code。
  prefs: []
  type: TYPE_NORMAL
- en: And you never have to interact with those people， right？
  prefs: []
  type: TYPE_NORMAL
- en: You think about all the open source projects where you've never interacted with
    the maintainers。 but you've somehow learned to use the code。 Maybe never taken
    a formal class in some kind of coding technique or whatever。 but you've， somehow
    learned it， right？ Because the documentation was there for you to learn it。 And
    that's what we're kind of--eventually one to try to reach。 But who am I？
  prefs: []
  type: TYPE_NORMAL
- en: I have a bunch of different things going on for me， but I'm a data scientist。
    I work for Corteva Agar Science， a big tech ag company。 I'm also simultaneously
    finishing up my PhD in archeology at the University of Washington。 where I did
    a lot of data science kind of stuff for my PhD project。
  prefs: []
  type: TYPE_NORMAL
- en: I maintain a couple of open source libraries， one's called PandasVet， which
    is a Linter tool。 for specifically designed to help you out with Pandas。 Prospect。
    which is a simulation tool for archeologists。 But I like to do a lot of stuff
    in the community。 The Puget Sound Python community has been something that's been
    really influential for， me。
  prefs: []
  type: TYPE_NORMAL
- en: and I've tried to give back a little bit there。 And the Carpentries。 I mentioned
    that with the sticky notes。 A great organization that teaches groups of folks。
    mostly people in research fields， how， to start coding。 how to start using digital
    tools in various ways to make their work better， more reproducible。
  prefs: []
  type: TYPE_NORMAL
- en: and kind of make them better data scientists or better scientists who use， digital
    tools。 But who I am not is any of these people who are people who really think
    deeply about documentation。 and do documentation if not full time job as a big
    part of what they do。 I wanted to put their names up there because a lot of what
    I know about documentation is。
  prefs: []
  type: TYPE_NORMAL
- en: drawn from their work， some of the tools we're going to use today are built
    by them， and they。 are kind of the experts of the experts。 There's links to everybody's
    Twitter profiles and stuff like that in that links page so。 you can find out more
    there。 But if I'm not an expert， why am I leading a tutorial on documentation？
  prefs: []
  type: TYPE_NORMAL
- en: Like a lot of you I suspect I like good documentation， I value good documentation，
    and I also want。 to get stuff done。 And I don't want to have to become one of
    those people you saw in the previous slide in order。 to be writing good documentation，
    building good documentation。 I want to be able to find a way to make documentation
    a little bit easier for me。
  prefs: []
  type: TYPE_NORMAL
- en: Turn away to make documentation a little bit quicker。 There's all kinds of incentives
    out there in。 you know， I work in industry。 Documentation is not part of my evaluation。
    It's not how I measured in my job。 So for a lot of us it's a secondary thought。
    but we still want it to be good。 So we want it to be as quick and easy as possible
    to get to that good stage or get to that stage。
  prefs: []
  type: TYPE_NORMAL
- en: whatever it might be， stage that works for you。 And so I've gone through this
    process for a while。 I've thought about， you know， what works for me。 I've tried
    a lot of different documentation workflows and tools and things like that。 And
    what I'm going to teach to you today， what we're going to kind of build together
    is a。 workflow that I think works pretty well for those of us who can't or don't
    want to become。
  prefs: []
  type: TYPE_NORMAL
- en: super deep in the documentation world， but we still want good documentation。
    I want documentation that I can build with and write with tools that I already
    know。 I do a lot with Markdown。 A lot of folks do a lot with Markdown。 Markdown
    is kind of everywhere these days。 So it wouldn't be great if I could write all
    my docs in Markdown。
  prefs: []
  type: TYPE_NORMAL
- en: I also do a lot of stuff in Jupyter Notebooks。 Wouldn't it be great if I could
    write all my docs in Jupyter Notebooks？
  prefs: []
  type: TYPE_NORMAL
- en: I write doc strings for my functions and classes and all that good stuff。 I
    want my docs to use those。 I want to just press a button and have it go， find
    all those。 get me some nice pretty documentation。 I don't want to mess around
    with CI/CD too much。 You're going to always have to mess around with CI/CD if
    you've ever tried to set anything up。
  prefs: []
  type: TYPE_NORMAL
- en: on any CI/CD system。 There's always 12 commits of you fussing with it and trying
    to get it to work。 A lot of us have been there。 But we can make it as minimally
    fussy as possible， I think。 and that's kind of a goal。 I want it to look nice
    by default。 We don't want to have to spend a lot of time custom tweaking CSS，
    which is something that。
  prefs: []
  type: TYPE_NORMAL
- en: I know basically nothing about。 I want it to look nice right out of the box。
    I don't want to have to call in a product designer to get some documentation that's
    going to。 be nice and readable and modern looking。 So what about Sphinx？ Sphinx。
    I know some people based on the survey have tried Sphinx or used Sphinx a little
    bit。 Sphinx is。
  prefs: []
  type: TYPE_NORMAL
- en: I call it the human-headed line in the room， get it into Sphinx。 It's a tool
    that has been around for quite a long time and it is the de facto standard， in
    Python。 But if you've played around with it very much， you know that Sphinx is
    sort of a time longer。 ago and it's not the most modern of tools。 It is incredibly
    powerful but that also leads to a lot of complexity。
  prefs: []
  type: TYPE_NORMAL
- en: And it's often complexity that we're never going to touch in the projects that
    we need， to document。 Professional documentation writers use Sphinx and they use
    it to great effects to do really。 amazing things and build really amazing documentation。
    But for most of the projects that folks in the Python community are going to be
    working， on。
  prefs: []
  type: TYPE_NORMAL
- en: we're not going to have that level of documentation。 You might want to document
    a little Python package that you've been working on for your。 team in your company
    and it doesn't need to be totally vetted for a broad audience。 It needs to be
    understandable to the people， you know， 10， 12 people in your team maybe。
  prefs: []
  type: TYPE_NORMAL
- en: So that's the scale that we're thinking about here。 We're not thinking about
    the most complicated projects in the world and that's why I think。 we're going
    to try to touch on Sphinx。 Sphinx is going to be behind everything we do today。
    So I don't want to make it seem like we're getting rid of Sphinx because Sphinx
    is actually。
  prefs: []
  type: TYPE_NORMAL
- en: there the whole time。 It's the backbone of everything we're going to do。 But
    I'd like to touch Sphinx as little as possible because of that complexity and
    we want。 to try to reduce that complexity for us as much as possible。 So there's
    pros to Sphinx。 It is the backbone of tools that we're going to use like Jupiter
    Book and many other kinds。
  prefs: []
  type: TYPE_NORMAL
- en: of things that interact with Sphinx。 It's a really large ecosystem and this
    is part of that complexity。 Different kinds of templates。 The extensions is what
    we're going to make use of today。 And if you want to host your docs on Read the
    Docs， you've almost undoubtedly found documentation。 hosted on Read the Docs if
    you've done anything in Python。 It works really nicely with Sphinx。
  prefs: []
  type: TYPE_NORMAL
- en: And so there's a lot of compatibility there that's very natural on both sides
    of that equation。 But Sphinx is complicated。 Complex maybe is better than complicated。
    It relies on things or can rely on things like make files and other technologies
    that。 you may not have a lot of experience with or you may not want to learn as
    part of documenting。
  prefs: []
  type: TYPE_NORMAL
- en: your Python package。 And it may not be compatible with whatever system you're
    on and you have to find a workaround。 And that's the kind of complexity that starts
    to compound and ends up with people just not。 building the docs。 Not writing the
    docs， not maintaining the docs because it's a pain to update them and。 all of
    those things。 And we don't want to be there。
  prefs: []
  type: TYPE_NORMAL
- en: We want to keep our docs as kind of light and flexible as possible until you
    become NumPy。 and a massive open source project that needs really complicated
    documentation and really。 a lot of thought in it。 But most of us aren't doing
    that。 And Sphinx in its original form relies on restructured text。
  prefs: []
  type: TYPE_NORMAL
- en: And I don't know if things beyond Sphinx that use restructured text。 I'm sure
    there are some。 But they're not common in the daily workflow of somebody who's
    doing a lot of Python stuff。 Things like Markdown， Jupyter Notebooks with Markdown。
    That's something we're usually a little bit more familiar with。 And text is its
    own world of markup。
  prefs: []
  type: TYPE_NORMAL
- en: And if you don't want to learn it， we can mostly skip it。 We'll do a little
    bit of restructured text here in a little while。 But just enough。 So we're going
    to get just enough to be useful。 In my pre-survey。 I asked folks how many people
    had tried to use Sphinx to build documentation。
  prefs: []
  type: TYPE_NORMAL
- en: and how many people were successful。 And 10 people had tried and four people
    were successful。 And this is a gap that I think it's a leak in the pipeline of
    documentation。 I think a lot of people encounter in the Python ecosystem is you
    try to do the right thing。 You try to build documentation for your project。 But
    Sphinx is a little more complicated than you wanted。
  prefs: []
  type: TYPE_NORMAL
- en: And there's other priorities in your work。 So it gets pushed back and pushed
    back。 It's something you're going to do later or something that just never quite
    happens or。 never gets updated after you get it built one time。 And so I think
    this is a common story where you try Sphinx。 Maybe you get something working。
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you don't。 And then maybe your project has documentation and maybe it
    doesn't。 So we're going to start with a little bit of a motivating case for today。
    This is where I hope that we're going to end up by the end of our session。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3b9b1da3134251233edb777a8f445166_4.png)'
  prefs: []
  type: TYPE_IMG
- en: We're going to build all this together。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3b9b1da3134251233edb777a8f445166_6.png)'
  prefs: []
  type: TYPE_IMG
- en: Oops。 We're going to build a web page。 It's going to be live on the internet
    that looks something like this。 It's not the most glamorous。 There's the ability
    to add images here that I haven't done。 But it's live。 It has， let's check out
    some features。 Well one， it has a search feature built in。 We don't have to do
    anything special to get a search。 We can put a guide here。
  prefs: []
  type: TYPE_NORMAL
- en: We have a nice table of contents on the right side。 We get some code blocks。
    We get the auto copy little thing。 This is becoming more and more common。 You
    start to see this in documentation and it's so useful。 This little guy to copy
    what's in the box。 There'll be syntax highlighting and other things。
  prefs: []
  type: TYPE_NORMAL
- en: This is a Jupyter notebook that I have added some special little kind of box
    to to make， a note。 You might add a caution or a tip or something like that， a
    call out。 I can put code。 I can mix it with markdown。 This might be something
    familiar if you use Jupyter notebooks a lot。 Mixing all that together into a guide
    or more prose style documentation。
  prefs: []
  type: TYPE_NORMAL
- en: We also get some technical documentation， reference documentation that you're
    probably。 familiar with。 Function signatures， arguments， types， all of that formatted
    nicely for us。 We can even click on the source and see the raw code that's behind
    it。 Here we start to have a pretty good foundation for documentation。
  prefs: []
  type: TYPE_NORMAL
- en: We have the ability to drop a markdown file in and add a new guide to add a
    new module。 to our package and get it built automatically in the reference documentation
    with nice syntax。 highlighting and all of that stuff。 There's some other extra
    features that we'll see along the way。 A lot of this functionality comes from
    Jupyter book。 That's the tool we're going to try today。
  prefs: []
  type: TYPE_NORMAL
- en: That was our goal。 The sticky notes I mentioned。 Green is all good。 I'm finished
    with something that we're working on or I'm ready to move on。 Pink is。 I have
    a question， some of you in the back， I still might not be able to see。 your pink
    sticky notes。 If you do have a question， please go ahead and raise your hand。
  prefs: []
  type: TYPE_NORMAL
- en: That's totally cool。 But the sticky notes are good when everybody's working
    on something and I can take a look。 around or help I'm lost。 That can be good
    as well。 If we haven't gotten the code。 we need to fork the repository from GitHub
    and then clone， that to our local machine。 Is there anyone who has not been able
    to do that yet？ I have time built in。 We can wait。
  prefs: []
  type: TYPE_NORMAL
- en: If you have done that， put a green sticky note up。 Yes， thank you。 You can just
    put it on the top of your machine maybe。 That can help me know where we're at。
    If you haven't， keep your green sticky note down or if you have a question about
    that。 you can put the pink sticky note up or flag me down。 ( songs then stop )，
    ( silence )， ( silence )。
  prefs: []
  type: TYPE_NORMAL
- en: ( silence )， ( silence )， ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )。 ( silence )， ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )。 ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )， ( silence )。 ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )， ( silence )， ( silence )。
  prefs: []
  type: TYPE_NORMAL
- en: ( silence )， ( silence )， ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )。 ( silence )， ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )。 ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )， ( silence )。 ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )， ( silence )， ( silence )。
  prefs: []
  type: TYPE_NORMAL
- en: ( silence )， ( silence )， ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )。 ( silence )， ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )。 ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )， ( silence )。 ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )， ( silence )， ( silence )。
  prefs: []
  type: TYPE_NORMAL
- en: ( silence )， ( silence )， ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )。 ( silence )， ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )。 ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )， ( silence )。 ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )， ( silence )， ( silence )。
  prefs: []
  type: TYPE_NORMAL
- en: ( silence )， ( silence )， ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )。 ( silence )， ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )。 ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )， ( silence )。 ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )， ( silence )， ( silence )。
  prefs: []
  type: TYPE_NORMAL
- en: ( silence )， ( silence )， ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )。 ( silence )， ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )。 ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )， ( silence )。 ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )， ( silence )， ( silence )。
  prefs: []
  type: TYPE_NORMAL
- en: ( silence )， ( silence )， ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )。 ( silence )， ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )。 ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )， ( silence )。 ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )， ( silence )， ( silence )。
  prefs: []
  type: TYPE_NORMAL
- en: ( silence )， ( silence )， ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )。 ( silence )， ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )。 ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )， ( silence )。 ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )， ( silence )， ( silence )。
  prefs: []
  type: TYPE_NORMAL
- en: ( silence )， ( silence )， ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )。 ( silence )， ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )。 ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )， ( silence )。 ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )， ( silence )， ( silence )。
  prefs: []
  type: TYPE_NORMAL
- en: ( silence )， ( silence )， ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )。 ( silence )， ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )。 ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )， ( silence )。 ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )， ( silence )， ( silence )。
  prefs: []
  type: TYPE_NORMAL
- en: ( silence )， ( silence )， ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )。 ( silence )， ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )。 ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )， ( silence )。 ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )， ( silence )， ( silence )。
  prefs: []
  type: TYPE_NORMAL
- en: ( silence )， ( silence )， ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )。 ( silence )， ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )。 ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )， ( silence )。 ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )， ( silence )， ( silence )。
  prefs: []
  type: TYPE_NORMAL
- en: ( silence )， ( silence )， ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )。 ( silence )， ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )。 ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )， ( silence )。 ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )， ( silence )， ( silence )。
  prefs: []
  type: TYPE_NORMAL
- en: ( silence )， ( silence )， ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )。 ( silence )， ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )。 ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )， ( silence )。 ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )， ( silence )， ( silence )。
  prefs: []
  type: TYPE_NORMAL
- en: ( silence )， ( silence )， ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )。 ( silence )， ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )。 ( silence )， ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )， ( silence )。 ( silence )， ( silence )， ( silence )，
    ( silence )， ( silence )， ( silence )， ( silence )。
  prefs: []
  type: TYPE_NORMAL
- en: ( silence )， ( silence )， ( silence )， ( silence )， ( silence )， I'm going to
    leave that up。 I'm going to open my table of contents so we can keep moving。 And
    this time I'm going to add a new section。 I'm going to call it API reference。
    And my chapters。 This is a really killer feature。 I can glob for files here。 So
    I can glob for API star。
  prefs: []
  type: TYPE_NORMAL
- en: So now we'll grab anything in that API folder that we have。 So I never have
    to change my table of contents when I add a new module to my code。 I just need
    to add that RST file to the API folder and Jupyter book will snatch it up when
    it builds。 So glob if you're not familiar is kind of a Linux thing to search。
  prefs: []
  type: TYPE_NORMAL
- en: You find -- I don't know how to describe it。 Find files with patterns。 Find
    things with patterns。 Yeah， in this case we're using a wild card。 But there's
    all kinds of complicated glob syntax you can use。 Okay。 How are we doing？ Is everybody
    have that？ Show me a pink sticky if you're still working on something。 All right。
    We did that。 Let's build it again。 So if you were able to build it before。
  prefs: []
  type: TYPE_NORMAL
- en: hopefully you will be able to build it again。 Make sure everything's saved。
    But we build our docs。 I fixed my errors。 So I don't get any errors anymore。 I'm
    going to highlight that code pass。 Now we'll see a couple of things happen。 We
    have our table of contents being auto generated。 We added that little thing on
    the home page。 So it's being updated。
  prefs: []
  type: TYPE_NORMAL
- en: So here our API reference has this section points。 And we have our nicely built
    documentation from our doc string。 So we're going to have a couple of different
    types of stuff。 So we're going to have a little bit of level two。 So you're welcome
    to keep moving on that。
  prefs: []
  type: TYPE_NORMAL
- en: But otherwise， let's take a break。 Let's take a 10-minute break。 If we can be
    back here at 4。15。 So we're going to have a little bit of a break。 So we're going
    to have a little bit of a break。 So we're going to have a little bit of a break。
    Now we're on to level three。 If you want to fast forward your code and everything。
  prefs: []
  type: TYPE_NORMAL
- en: you can check out your -- check out to level two。 A level two branch。 Close
    all these。 I'm sure there's some kind of conflict or something like that。 I'm
    just going to ignore them。 All right。 Now I have fast forwarded to my level two。
    And I have some API docs for all of the different modules here。 You can do that
    if you like。
  prefs: []
  type: TYPE_NORMAL
- en: But in any case， we're going to work with GitHub Actions and GitHub pages。 These
    are not the only way to host your book。 Your book， when it builds， it spits out
    HTML。 So anything that can render HTML and host HTML is somewhere you can put
    your book。 You can configure an AWS S3 bucket to be a website。
  prefs: []
  type: TYPE_NORMAL
- en: And you can send your built docs up there to AWS S3。 And you get a super long，
    complicated URL。 But that's great。 Especially for internal projects。 If you want
    to put something in there。 you can manage security through your AWS stuff。 When
    it comes to private projects and GitHub pages。 there are now， I think， a couple
    years ago， GitHub allowed pages to be available for private repos。
  prefs: []
  type: TYPE_NORMAL
- en: Maybe only on enterprise GitHub。 So if you're -- anybody work for GitHub。 That's
    something to confirm。 But if you are on an enterprise GitHub。 you can create a
    private page that works just like the rest of GitHub pages。 And so this workflow
    would work for that。 What we're going to do today is make it public to the world。
  prefs: []
  type: TYPE_NORMAL
- en: But there are ways to make it private。 And you can ultimately send these built
    docs wherever you want。 So， GitHub Actions。 GitHub Actions are a CI/CD kind of
    tool to automate things。 You can do a lot with GitHub Actions。 I saw in the pre-survey
    quite a few folks have worked with GitHub Actions at some level。 You might run
    your tests。 You might run linting。 You might do your builds， your deployments
    of code。
  prefs: []
  type: TYPE_NORMAL
- en: all from GitHub Actions。 If you use GitLab， GitLab CI/CDs， a very similar kind
    of process， Jenkins。 I think， Travis。 There's a whole bunch of tools like that
    out there that do similar kinds of things。 But GitHub Actions is nice because
    if you use GitHub， it's already there for you。 And it lives right where your code
    lives and that makes a difference。
  prefs: []
  type: TYPE_NORMAL
- en: So we're going to specify things in YAML files， just like we've been doing with
    our configuration before。 We're going to write YAML files。 And these days， Actions
    have been around for， what。 four years maybe？ Five years。 And everything that
    you want to do is probably been done before。 You're not the first person to try
    to do it。 And that's really awesome。
  prefs: []
  type: TYPE_NORMAL
- en: So there's a lot of pre-built Actions out there that you can just use off the
    shelf without having to write the details yourself。 There's a whole world of GitHub
    Actions that we're not going to get into。 We're going to do a pretty simple flow
    to build our docs and put it in GitHub pages。 You can do things like protect your
    branches until certain things pass through your GitHub Actions as well。
  prefs: []
  type: TYPE_NORMAL
- en: So what I like to do is you can't merge your branch until the docs have built。
    Or immediately upon merging your branch， you build the docs and deploy them。 So
    let's add some Actions。 We're just going to add one。 And it's this long thing
    on the right。 But there's a template for that。 We're going to create this directory
    structure first。
  prefs: []
  type: TYPE_NORMAL
- en: This is where GitHub is going to look for your Actions。 So we're going to create
    a top level of our repository。 We're going to create a 。github。 You need the 。github。
    Under that， I'm going to create a workflows folder。 Don't need a 。there。 And then
    inside the workflows， you're going to create a 。yaml file。
  prefs: []
  type: TYPE_NORMAL
- en: You can name it whatever you want。 But I'm going to call it deploy。yaml。 And
    the book is well documented and has a template that we can use for deploying a
    book。 I'm going to go to that link。 It should be in the link list。 And copy the
    template and put it here in my 。yaml file。
  prefs: []
  type: TYPE_NORMAL
- en: Let's look through some things that it's doing。 We give it a name for this action。
    Then we have triggers。 So we want to trigger it when something happens on -- in
    this case on push。 When we push to the master or main branch， you probably will
    have a main branch。 not a master branch。 You might want to change this to main。
    On push to main。
  prefs: []
  type: TYPE_NORMAL
- en: that's when this action is going to run。 So that's the trigger。 For other GitHub
    Actions that are not related to this docs。 you might want to trigger it on something
    else。 But push to main is where we're going to work。 Let's go down here。 We're
    going to do -- this is a very generic prebuilt action for us that we're just going
    to make use of。
  prefs: []
  type: TYPE_NORMAL
- en: And let's check out an Ubuntu operating system。 We're going to install Python
    3。8。 Again。 this is a pre canned action for us。 We don't have to write out all
    the steps to get that there。 We just say use this action and then give it some
    configuration。 We're going to install our dependencies。 And then we're going to
    change our build directory。
  prefs: []
  type: TYPE_NORMAL
- en: We're not going to build from the top level。 We're going to use the command
    that we used before。 which was build docs。 That's important on line 35。 Change
    that。 The next thing is the real magic for taking that built documentation and
    putting it onto GitHub pages。 And this is somebody who has already built this
    action and written it out。
  prefs: []
  type: TYPE_NORMAL
- en: What we do is it's going to look for a GitHub pages branch。 It's going to take
    the built documentation， send it to the GitHub pages branch。 That's a branch where
    GitHub pages is going to look to build itself， to build the site。 Here we need
    to specify docs again in the last line， line 42。
  prefs: []
  type: TYPE_NORMAL
- en: There's one last step that we need to add to our workflow here。 We need to install
    randomly so that we can run things in our Jupyter Notebooks so that the Jupyter
    Notebook can build properly。 It will need to know where randomly is。 It hasn't
    been installed in this Ubuntu environment when it's running in GitHub Actions。
    We're going to mimic the install dependencies command here。 We're going to call
    it install randomly。
  prefs: []
  type: TYPE_NORMAL
- en: And then we're going to run colon。 The vertical bar is just a way of saying
    continue on the next line。 It's a little bit nicer formatting。 And then I'm going
    to pip install。 Period。 So we're going to install from the current directory at
    this point which is the top level of the repository。 You could do the dash e install
    if you wanted to but it's not really helpful because our module is not going to
    change。
  prefs: []
  type: TYPE_NORMAL
- en: the workflow so the editable mode doesn't help us。 Show me green stick keys
    if you're there。 Make sure to save your deploy file。 Show me pink stick keys if
    it's something you still need a little bit of help with。 [silence]， Any other
    pink stick keys out there？ Alright。 Let's see what we can do。 We're going to commit
    this and push it back to the GitHub repository。 [silence]。
  prefs: []
  type: TYPE_NORMAL
- en: After you do that push you should go to your repository。 [silence]。 And yours
    should look something like this。 You should have your GitHub workflows here。 Your
    yaml file。 Everybody there？ Show me any pink stick keys。 Alright。 Now we need
    to enable GitHub pages。 [silence]， In this case you can merge it into main。 That's
    fine。
  prefs: []
  type: TYPE_NORMAL
- en: You might have a different little bit more cautious workflow on your own repositories
    but in this case we're going to just merge it to main。 So once you're in your
    repository we can go to settings on top right。 And on the left side pages。 And
    we're going to tell it to build from the GH pages branch。 You didn't create that
    branch but the GitHub action will create it for you。
  prefs: []
  type: TYPE_NORMAL
- en: So that is a nice thing because then the built version of your docs。 all the
    HTML files and all of that doesn't end up in your main code branch。 And polluting
    that branch a little bit it stays in its own isolated built branch。 And we can
    specify root of that branch as the GitHub pages。 And if you say that again。
  prefs: []
  type: TYPE_NORMAL
- en: Change it to docs。 Let's see how others did。 So if you save that it will this
    should turn something。 This green box should change color or it will say your
    site is ready to be published or something like that maybe。 Thanks to Geex。 Thank
    you。 Thank you。 Thank you。 Thank you。 I want everyone to go to the actions tab。
    And see what happened。 See if it failed。
  prefs: []
  type: TYPE_NORMAL
- en: Raise your hand if you got a successful build。 You should have a green link
    here。 A green box around the link and your link should open to your build documentation
    on the web。 Pretty nifty。 We'll see what we can do。 Thank you。 Thank you。 Thank
    you。 Thank you。 Thank you。 Thank you。 Thank you。 Thank you。 Thank you。 Thank you。
    Thank you。 Thank you。 Thank you。 Thank you。
  prefs: []
  type: TYPE_NORMAL
- en: Thank you。 Thank you。 Thank you。 Thank you。 Thank you。 Thank you。 Thank you。
    Thank you。 Thank you。 Thank you。 Thank you。 Thank you。 Thank you。 the next slide。
    the next slide。 the next slide。 the next slide。 the next slide。 the next slide。
    the next slide。 the next slide。 the next slide。 the next slide。 the next slide。
    the next slide。 the next slide。 the next slide。 the next slide。
  prefs: []
  type: TYPE_NORMAL
- en: the next slide。 the next slide。 the next slide。 the next slide。 the next slide。
    the next slide。 the next slide。 the next slide。 the next slide。 the next slide。
    the next slide。 the next slide。 the next slide。 the next slide。 the next slide。
    the next slide。 the next slide。 the next slide。 the next slide。 the next slide。
    the next slide。 the next slide。 the next slide。 the next slide。
  prefs: []
  type: TYPE_NORMAL
- en: the next slide。 the next slide。 the next slide。 the next slide。 the next slide。
    the next slide。 the next slide。 the next slide。 the next slide。 the next slide。
    the next slide。 the next slide。 the next slide。 the next slide。 the next slide。
    the next slide。 the next slide。 the next slide。 the next slide。 the next slide。
    the next slide。 the next slide。 the next slide。 the next slide。
  prefs: []
  type: TYPE_NORMAL
- en: the next slide。 the next slide。 the next slide。 the next slide。 the next slide。
    the next slide。 the next slide。 the next slide。 the next slide。 the next slide。
    the next slide。 the next slide。 the next slide。 the next slide。 the next slide。
    the next slide。 the next slide。 the next slide。 the next slide。 the next slide。
    Any other questions for this launch？
  prefs: []
  type: TYPE_NORMAL
- en: \>\> We'll come back to it when it's done doing this thing。 There's a library
    called -- I'm going to run through these tools。 These are not tools that I use
    a lot， but they're tools that are pretty nifty。 If you want to level up your documentation
    setup and your work flows， especially with teams。
  prefs: []
  type: TYPE_NORMAL
- en: how many people have used the coverage tool for testing their Python code？
  prefs: []
  type: TYPE_NORMAL
- en: What it does is it goes through your code and goes through your tests and says，
    okay， well。 this part of your code has been touched by a test， and so， you know，
    ultimately。 you get a report on， how much of your code is covered by tests。 In
    perfect measure， of course。 but it's a nice thing to have。 This is doing the same
    thing for docstrings。
  prefs: []
  type: TYPE_NORMAL
- en: So what we're looking at here is a report that I ran on the randomly module
    or randomly。 package that tells us how much coverage we got。 So you notice we
    missed one something in every single one of our modules。 That's because according
    to pep 257， you should have a docstring at the top of the module that。 describes
    the module。 We didn't do that。 It's -- I don't know。
  prefs: []
  type: TYPE_NORMAL
- en: I don't know how common of a practice it is or not。 I tend not to use it。 but
    now that I know that it's a pep 257 thing， maybe I will start using， it a little
    bit more。 but that's why we got misses here。 This one's called interrogate。 The
    next one is pi doc style。 which is similar。 How many people have used flake 8，
    the linter flake 8 to run on their code？
  prefs: []
  type: TYPE_NORMAL
- en: What this does is it will look through your docstrings and it will check for
    some of those。 best practices things。 We'll see what it flagged here。 So it flagged
    missing docstring in a public module。 That means I didn't have that line at the
    top。 so that one's going to appear every time。 The first line of your docstring
    should end with a period。
  prefs: []
  type: TYPE_NORMAL
- en: That's part of pep 257 recommendations。 I failed at that a couple of times。
    What else？
  prefs: []
  type: TYPE_NORMAL
- en: I'm missing one here。 Maybe that's it。 Oh， after your docstring。 you're not
    supposed to have blank lines。 I didn't know that that was an official recommendation。
    I'm going to start enforcing that good patterns of documentation， adding a tool
    like this to。 your testing or linting things you might be doing already in your
    code。
  prefs: []
  type: TYPE_NORMAL
- en: These could be part of GitHub actions。 Any of these could be incorporated there。
    You could fail。 You could block merging a PR until all of these pass if you really
    want to。 It's up to you how strict you want to be with it。 It at least gives you
    some insight。 Especially as your project grows， you start getting contributions
    from multiple people。
  prefs: []
  type: TYPE_NORMAL
- en: These tools might give you some insight as to where you're lacking in docstrings
    or where。 docstring coverage is weak or needs to be improved。 I mentioned X-Doc
    test before。 There's an older tool called DocTest。 I think X-Doc test is really
    nice。 It integrates with PyTest。 Here's how。 Let's say we have a Fibonacci function。
  prefs: []
  type: TYPE_NORMAL
- en: We create a Fibonacci series up to whatever number we give it。 As part of our
    docstring。 we can add an example。 We didn't do that in any of our docstrings。
    That's how you can do it。 You can add an example。 You have the three arrows there。
    The three chevrons。 Then you have something you would execute in Python。 In this
    case。
  prefs: []
  type: TYPE_NORMAL
- en: we're calling the function and giving it a parameter。 On the next line after
    that。 we have the expected output。 You can think of this as a software test。 A
    unit test where we say。 given this， I expect this。 What X-Doc test can do is turn
    that into executable Python。 not just a string as part of the docstring。 It will
    turn that into executable Python and run it。
  prefs: []
  type: TYPE_NORMAL
- en: If it doesn't get this output， it will fail。 That's pretty fun。 It's pretty
    cool。 That's one way to do some regression testing on your docs。 If you try to
    keep your examples up to date， that's an interesting feature。 We already talked
    about editor support for VS code， PyCharm， how you can use these tools。
  prefs: []
  type: TYPE_NORMAL
- en: to generate your docs for you or to at least generate the stubs of your documentation
    for you。 and make sure things are as easy and smooth as possible when you're trying
    to write docstrings。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3b9b1da3134251233edb777a8f445166_8.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/3b9b1da3134251233edb777a8f445166_9.png)'
  prefs: []
  type: TYPE_IMG
- en: With that， I am done with everything that I have prepared。 I'm happy to take
    questions， thoughts。 Do you want some feedback on anything？ Anything like that？
    I'm here。 Thank you。 I should add。 I would really love if you go out and build
    some documentation to send me a message。 or share the GitHub repository with me。
    I would love to see it。
  prefs: []
  type: TYPE_NORMAL
- en: I would love to see what's happening and see all the cool things that you can
    build。 Thanks。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3b9b1da3134251233edb777a8f445166_11.png)'
  prefs: []
  type: TYPE_IMG
- en: '[SIDE CONVERSATION]。'
  prefs: []
  type: TYPE_NORMAL
