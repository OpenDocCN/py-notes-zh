- en: P44：Talk - Jessica Temporal_ Let's talk about JWT - VikingDen7 - BV1f8411Y7cP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P44：讨论 - 杰西卡·特波拉_ 让我们谈谈JWT - VikingDen7 - BV1f8411Y7cP
- en: I'm super happy to be here。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我非常高兴能在这里。
- en: '![](img/f356ac2853ed923b3e15746d71ff0c34_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f356ac2853ed923b3e15746d71ff0c34_1.png)'
- en: '![](img/f356ac2853ed923b3e15746d71ff0c34_2.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f356ac2853ed923b3e15746d71ff0c34_2.png)'
- en: And in case you don't know me yet， let me introduce myself。 Hi， I'm Jess and
    Peral。 Well， Jessica。 but you can call me Jess。 My pronouns are she and her。 and
    I work as a senior developer advocate at ROT Zero。 If you don't know what ROT
    Zero is。 not a problem， we are an identity platform， so we。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还不认识我，让我自我介绍一下。嗨，我是Jess和Peral。实际上，我是杰西卡，但你可以叫我Jess。我的代词是她和她。我在ROT Zero担任高级开发者倡导者。如果你不知道ROT
    Zero是什么，没关系，我们是一个身份平台，所以我们。
- en: make it as easy as possible for you to implement authentication on your applications
    so that。 you can focus on the fun stuff that you want to do for your users， right？
    We are going to do that。 I'm also an instructor at Data Bootcamp and McKinsey
    Learning。 I'm Brazilian and I have the first podcast about data science in Brazil
    called Pizza， Judas。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 让你的应用程序的身份验证尽可能简单，这样你就可以专注于为用户做有趣的事情，对吗？我们将做到这一点。我还是Data Bootcamp和McKinsey Learning的讲师。我是巴西人，我有一个关于数据科学的第一个播客，叫做Pizza，Judas。
- en: My last project that I just created is called Gitfishes and is a collection
    of Git study， cards。 If you don't know what I'm doing， check it out。 Also you
    may find me on most social networks under the handle of Justin Peral。 so if you，
    are shy and you want to ask questions right here， you can find me on Twitter later。
    Cool。 but enough about me。 And a little disclaimer before we get started。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我最近创建的项目叫Gitfishes，是一个Git学习卡片的集合。如果你不知道我在做什么，可以看看。此外，你可以在大多数社交网络上找到我，用户名是Justin
    Peral，所以如果你害羞，想问问题，可以在Twitter上找到我。酷，但关于我就说这么多。在开始之前有个小声明。
- en: So I come from Brazil and I know for a fact that most countries that don't speak
    English。 as a first language prefer to call Jason Webtokans JWT。 But if you come
    from an English-to-speak country， you might hear the word "chat。"。 So I'm going
    to be using those two terms along the presentation， so just get used to that。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我来自巴西，我知道大多数不讲英语作为第一语言的国家更喜欢称呼Jason Webtokans为JWT。但是，如果你来自一个说英语的国家，你可能会听到“chat”这个词。因此，我将在整个演示中使用这两个术语，所以请习惯一下。
- en: It's a little weird， I might be honest。 The first time I ever heard about this，
    I was like， "Oh。 interesting。 Something new。"， But anyways， you're going to get
    used to it along this presentation。 So it is impossible to start talking about
    Jason Webtokans without mentioning the amazing。 effort there was made to create
    a collection of standards and specifications that is known。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我必须诚实地说，这有点奇怪。我第一次听说这个时，我想，“哦，有趣，新的东西。”不过，无论如何，在这个演示过程中你会习惯它。所以谈论Jason Webtokans时，不提到创建一系列标准和规范所付出的努力是不可能的。
- en: as the Jose specification。 Jose stands for Jason Object Signing and Encryption。
    and it brings light to many things that we， need to work with Jason Webtokans
    and other objects that we might need while working on。 the web。 So part of the
    Jose specification is the IFC。 the request for comments 7519 that is commonly，
    known as the JWT specification。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Jose规范。Jose代表Jason对象签名和加密，它为我们需要处理Jason Webtokans和其他在网络上工作时可能需要的对象带来了许多启示。因此，Jose规范的一部分是IFC，即通常被称为JWT规范的7519号请求评论。
- en: And that's going to be our main focus for today。 Let's discuss it。 So a JWT
    or a Jason Webtokan usually is a standardized string that represents some information。
    So it conveys some meaning depending on context。 But let's take a closer look。
    So we have three words。 Jason， which means how are we going to structure the information
    that we want to pass from。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是我们今天的主要重点。让我们讨论一下。因此，JWT或Jason Webtokan通常是一个标准化的字符串，代表一些信息。它根据上下文传达某种含义。但让我们更仔细地看看。所以我们有三个词。Jason，意味着我们要如何构建要传递的信息。
- en: 1。8 to 1。 The web is the part where everything happens， where we make this information
    go from one。 point to another。 And the curious thing is it is a very space-constranded
    environment。 So we need to be mindful of the information we are carrying along
    these points。 And the last part。 the token， as a friend of mine likes to say，
    it usually is a unique。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 1。8到1。网络是所有事情发生的地方，我们在这里将信息从一个点传递到另一个点。奇妙的是，这是一个空间受限的环境。因此，我们需要注意我们在这些点上传递的信息。最后一部分，令牌，正如我的朋友所说，通常是唯一的。
- en: identifier that conveys some meaning。 So if you never seen a Jason Webtokan
    before。 for those that are new to it， I introduce you， to your first Jason Webtokan。
    At a first glance。 this gigantic string looks like a random sequence of characters
    and numbers。 but actually it has a structure。 So usually a Jason Webtokan has
    three parts。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 识别符传达了一些意义。如果你从未见过 Jason Webtokan，对于那些新接触它的人，我向你介绍你的第一个 Jason Webtokan。乍一看，这个巨大的字符串看起来像是一串随机的字符和数字，但实际上它有一个结构。因此，通常一个
    Jason Webtokan 有三个部分。
- en: The header that's the beginning of my string， the payload that is right in the
    middle is。 also known as the body。 And this signature is the last part。 one of
    the most coolest ones if I do say so myself。 So the header。 you usually have the
    information about the token。 So what token it is， the token ID。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 头部是我字符串的开始，有效载荷就在中间，也被称为主体。最后部分是签名。如果我说这其中一个是最酷的部分，那也是没错的。头部通常包含有关令牌的信息，比如令牌是什么，令牌
    ID。
- en: and what type of algorithm was used for signing the， token。 It is a Jason object。
    and if you're a Pythonista， you probably know that it looks like a dictionary，
    right？
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 以及用于签名令牌的算法类型。这是一个 Jason 对象。如果你是 Pythonista，你可能知道它看起来像一个字典，对吧？
- en: And this Jason object is then turning into a base 64 string so that we can make
    the first。 part of our token。 Then we have the payload。 And the payload carries
    information about a given resource。 In a logging scenario， this means resource
    is my user。 So for example。 here I have information about me in a scenario that
    I was picturing it。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然后这个 Jason 对象被转换为一个 base 64 字符串，以便我们可以构建令牌的第一部分。接着是有效载荷。有效载荷携带关于给定资源的信息。在日志记录场景中，这意味着资源就是我的用户。因此，例如，在这里我有关于我的信息，场景是我在想象中的情况。
- en: So I have the name of the user。 I have what it prefers to be called。 I have
    the sub。 which is the subject of the token。 And in this case， it would be the
    user ID and so on。 The cool thing about the payload is that it also has the information
    about when the token， expires。 So you also have that in there。 It is one of the
    steps that you do for verifying a token。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我有用户的名字。我有他们希望被称为的名字。我有 sub，这是令牌的主题。在这种情况下，它将是用户 ID 等等。有效载荷的一个酷点是它也包含令牌何时过期的信息。因此你也会在这里找到这一点。这是验证令牌时所做的步骤之一。
- en: It is also basic， for encoded。 And you can take that and decode it anywhere。
    So there is one very important thing about the payload that they have there because
    they。 are a little bit different from the signature。 It is that each key value
    pair here is what we call claims。 And there are actually three types of claims。
    So the first type of claims are the reserved claims。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 它也是基本的，经过编码的。你可以在任何地方对其进行解码。因此，有一个关于有效载荷非常重要的事情，因为它们与签名有些不同。这里的每个键值对被称为声明。实际上有三种类型的声明。第一类声明是保留声明。
- en: These claims came from the job specification。 So they are very important because
    these are the claims like the expiration date where。 you can check if a token
    is expired or not。 They have information on who issued that token。 And my info，
    this is just an example。 And the second type we have are the public claims。 They
    are standardized in our way by IANA， one of the organizations on the internet。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这些声明来自于职位说明，因此它们非常重要，因为这些声明如过期日期，您可以检查令牌是否已过期。它们包含有关谁发放该令牌的信息。而我的信息只是一个例子。我们第二类是公共声明。它们在我们的方式中由
    IANA 标准化，IANA 是互联网组织之一。
- en: And the public claims are made to carry the most common information we usually
    share when。 using a token。 So for example， if you were to give the information
    of the first name of the user and the last。 name， IANA has a standard that says，
    oh， we are not going to call it first name。 We are going to call it given name。
    And we are not going to call it last name。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 公共声明用于携带我们通常在使用令牌时共享的最常见信息。例如，如果你要提供用户的名字和姓氏的信息，IANA 有一个标准说，哦，我们不会称其为名字。我们将称其为给定名。我们不会称其为姓氏。
- en: but we are going to call family name and so， on。 There is a long list。 The idea
    is to provide a way for interoperability between systems to happen。 So everybody
    would be speaking， well， the same language。 And the last type of claims that we
    have are the private claims。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 但是我们将称之为姓氏等等。这里有一长串。这个想法是提供一种系统之间互操作的方式。因此每个人都会说相同的语言。我们最后一类声明是私有声明。
- en: And they are the coolest because the private claims are supposed to be anything
    that you， want。 anything that your systems need for properly functioning。 So as
    long as you keep a valid JSON object， you can put anything there， anything really。
    But there is a caveat。 First， the more information you put on the JSON I've token。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 它们是最酷的，因为私有声明可以是你想要的任何内容。任何你的系统正常运行所需的内容。所以只要你保持有效的 JSON 对象，你可以在其中放置任何内容，真的可以。但有一个警告。首先，你在
    JSON 令牌中放入的信息越多。
- en: the bigger the output string， you're going to have to pass along in the request
    that you make。 So be mindful of the data you put in there。 Keep only the relevant
    data is a general advice。 The second one is because both of the header and the
    payload are only base 64 encoded， we。 don't put sensitive data in the token。 Well，
    because anybody that has an internet connection could Google up how to decode
    a。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 输出字符串越大，你在请求中传递的内容就越多。所以要注意你放入的数据。一般建议是只保留相关数据。第二种是因为头部和有效载荷仅是 Base 64 编码，我们。不要在令牌中放敏感数据。因为任何有互联网连接的人都可以谷歌如何解码。
- en: base 64 string。 It doesn't even have to code。 And they could get a hold of that
    data。 So we don't want that to happen。 We don't want the data to be publicly available
    if it is sensitive。 Now you know about the header and the payload。 Let's talk
    about the signature。 And the signature is really special because the signature
    takes the header and the payload。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Base 64 字符串。它甚至不需要编码。他们可以获取到这些数据。所以我们不想让这种情况发生。如果数据敏感，我们不希望它公开可用。现在你知道了头部和有效载荷。让我们谈谈签名。签名非常特别，因为签名需要头部和有效载荷。
- en: to happen。 And depending on the algorithm， a secret or eight。 And the interesting
    thing is right here I have a symmetrical algorithm that's HMAC， to 156。 It only
    takes a secret。 But you may notice that my secrets is your 256-bit secret。 Not
    that safe。 In real life you would have something like this。 A random string that
    is generated has a lot of characters to make everybody's lives a。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要发生什么。根据算法，可能是一个秘密或八个。而有趣的是，我这里有一个对称算法是 HMAC，至 156。它只需要一个秘密。但你可能会注意到，我的秘密是你的
    256 位秘密。并不安全。在现实生活中，你会有这样的东西。一串随机生成的字符串，包含很多字符，以便让每个人的生活更。
- en: little bit safer。 So we take the header and the payload together with the secret
    and a key for signing the token。 Now speaking of algorithms， we have two types。
    The first one takes the secret。 is the first one is the symmetrical algorithm。
    And you can think of a secret。 You don't want to share that with everybody， right？
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 更安全一点。所以我们将头部和有效载荷与秘密和签名令牌的密钥一起使用。谈到算法，我们有两种类型。第一种使用秘密。第一种是对称算法。你可以把它想象成一个秘密。你不想和每个人分享，对吧？
- en: So the secret is surely between the party that signs the token and the party
    that needs。 to verify the token。 But there is a second type of algorithms。 That's
    the one that I like the most。 The asymmetrical ones。 Because the asymmetrical
    algorithms takes a pair of two keys。 For one for signing， the private key and
    one for verifying the token。 The public key。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 所以秘密肯定在签署令牌的一方和需要验证令牌的一方之间。但还有第二种算法。这是我最喜欢的类型。非对称算法。因为非对称算法使用一对密钥。一个用于签名，即私钥，另一个用于验证令牌，即公钥。
- en: And you can keep the private key safe and secure and don't have to share it
    with anyone。 and you shouldn't。 And you can publish the public key well so that
    anybody could verify the token that。 you signed to make sure that it was really
    you。 If you were implementing on web application for example。 and if you were
    using R0 for example， R0 would create the tokens for you and you could get the
    public key from a well-known。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以保持私钥安全，不必与任何人分享。你不应该分享。你可以公开公钥，以便任何人都可以验证你签署的令牌，以确保真的是你。如果你在实施 Web 应用程序，例如，如果你使用
    R0，R0 会为你创建令牌，你可以从一个众所周知的地方获得公钥。
- en: end point so that you could validate that the token came from R0。 You could
    also validate whether or not this token was tampered with。 Because the signature
    allows us to do that。 Because the only person that should be able to sign the
    token is the person that is holding。 the secret or the private key。 You can obtain
    your data a little bit safer。 Now speaking of keys。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 端点，这样你就可以验证令牌是否来自 R0。你还可以验证这个令牌是否被篡改。因为签名允许我们做到这一点。因为唯一能够签署令牌的人是持有秘密或私钥的人。你可以让你的数据更安全。现在谈谈密钥。
- en: there is a format for you to share your keys alone。 And if you are following
    open-d。 So it has a bunch of information there because key pairs are bound by
    mathematical properties。 that you don't need to know if you don't want to or if
    you don't want to interested in。 cryptography。 So well， it is up to you。 And most
    of the packages and libraries that we use today。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种格式可以让你单独分享密钥。如果你遵循开放的 D。它包含很多信息，因为密钥对是由数学属性绑定的。如果你不想知道或者对加密不感兴趣，你就不需要知道这些。所以，这完全取决于你。我们今天使用的大多数包和库。
- en: they support getting this key， from this end point so that you can actually
    use it without having to know what each of。 this part means。 But there are two
    important things that you need to notice here。 We know what algorithm usually
    this key is used for。 And we know the key ID because you can have more than one
    public key for users depending。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 它们支持从这个端点获取密钥，以便你实际上可以使用它，而无需知道这部分每个部分的含义。但这里有两件重要的事情你需要注意。我们知道这个密钥通常用于什么算法。我们也知道密钥
    ID，因为你可能有多个公共密钥，具体取决于用户。
- en: on how your systems are set up。 And let's see some code， right？ Because I like
    to code in Python。 don't you？ Well， there are a few libraries that you can use
    to handle JWTs in Python。 My favorite one is PyJWT。 I'm a little biased。 And it
    does all the cool stuff。 So the first thing you want to do is install PyJWT with
    a cryptography dependency on your。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 关于你的系统是如何设置的。让我们看看一些代码，对吧？因为我喜欢用 Python 编码，你呢？好吧，你可以使用几个库来处理 Python 中的 JWT。我最喜欢的是
    PyJWT。我有点偏心。它能做所有很酷的事情。所以你要做的第一件事是安装带有加密依赖的 PyJWT。
- en: Python environment。 And then you can just import JWT on your Python console
    and give it a token。 And it is going to do its magic for us。 So the first thing
    I'm going to do is actually import my JWT module。 After that， I can copy the token，
    put in a variable for me to use as a string。 And then the easiest part comes。
    We call the JWT。code method。 And you pass it on the token。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Python 环境。然后你可以在 Python 控制台中导入 JWT，并给它一个令牌。它将为我们施展魔法。所以我首先要做的就是导入我的 JWT 模块。之后，我可以复制令牌，将其放入一个变量中以便作为字符串使用。接下来是最简单的部分。我们调用
    JWT。code 方法，并传递令牌。
- en: the secrets， and the algorithms。 Now， these are the things that you know the
    secrets and you know the algorithms。 Once the code method does its magic， you
    are going to be able to retrieve the payload of， a token。 That means the verification
    process was well done， was successful。 And of course。 now I know every little
    thing that leads to know about this token。 I know the secrets。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 秘密和算法。现在，这些是你知道的秘密和算法。一旦代码方法施展其魔法，你将能够检索到令牌的有效载荷。这意味着验证过程已成功完成，当然，现在我知道有关这个令牌的每一个细节。我知道秘密。
- en: I know the algorithms。 And once I pass it along to the method， I can see the
    resulting there。 And it comes as a dictionary。 So you can save that into a variable
    and use that on your applications whichever way you。 want。 But let's say， for
    example， that somebody told you the secrets， but they forgot to tell。 which algorithm
    was used for the token。 So that is the way actually you can find that out。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道算法。一旦我将其传递给方法，我可以看到结果以字典形式呈现。所以你可以将其保存到变量中，并以任何你想要的方式在应用程序中使用它。但假设，例如，有人告诉你秘密，但他们忘记告诉你使用了哪个算法。这实际上是你可以找到的方法。
- en: And it's using the method get unverified header。 It also gives back a dictionary。
    So I did the same process。 I imported JWT。 I put my token in there。 And then I
    use the method get unverified header pass along the token。 I do a lot of typos
    when I'm coding。 And then I can get the header。 After that。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 并且它使用的方法 get unverified header。它也返回一个字典。所以我做了相同的过程。我导入了 JWT。我把我的令牌放在那里。然后我使用方法
    get unverified header 传递令牌。我在编码时经常犯很多拼写错误。然后我可以获取头部。之后。
- en: I can see the header。 It is also a dictionary。 So I can put that into a variable
    so that I can use on my code。 So you don't have to actually know beforehand what
    was the algorithm used。 And then I put that header data because， well， what better
    name。 And then I call again JWT。decode pass along the token pass along the key。
    Well， in this case。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以看到头部。它也是一个字典。所以我可以把它放入一个变量中，以便在我的代码中使用。所以你实际上不需要提前知道使用的是什么算法。然后我把头部数据放进去，因为，嗯，没什么更好的名字。然后我再次调用
    JWT。decode，传递令牌和密钥。好吧，在这种情况下。
- en: a secret because the algorithm is still HS 256。 And please don't use that secret。
    It's not the good one。 And then pass along the algorithms in the format of accessing
    the dictionary data。 And there you go。 After that， we are going to be able to
    get once again my dictionary of the payload。 This means that everything was successful
    on verifying the token。 Now let's see。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一个秘密，因为算法仍然是 HS 256。请不要使用这个秘密。这不是一个好的选择。然后将算法以访问字典数据的格式传递。就这样。在那之后，我们将能够再次获取我的有效载荷字典。这意味着令牌验证成功。现在我们来看看。
- en: You are not successful。 Something goes wrong。 What should you do？ Well， I have
    an answer for that。 JWT， PyTWT actually gives you all the exceptions it raises
    when something goes wrong。 So if。 for example， you get an expire signature， it
    will show you an expire signature。 And you being the good Python instead of the
    good developer that you are， you are going。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不成功，出现了问题，你该怎么办？好吧，我对此有答案。JWT，PyJWT 实际上会给你所有在出错时抛出的异常。所以，如果，例如，你收到一个过期的签名，它会显示过期的签名。而你作为优秀的
    Python 开发者，将会…
- en: to want to try and use that exception to treat it， to maybe log the error。 So
    I did that try except when my coding， the try， then did I accept？
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 想尝试使用那个异常来处理它，可能记录错误。所以我在编码时做了那个 try except，首先是 try，然后是 accept？
- en: I know this is a possible error。 I put error in there。 And then I can use that
    information to log what went wrong because well， you want to。 keep track of these
    things， right？ Now there I'm just printing so you might fill up that because it's
    just an example。 When in my systems I would be logging it out。 And then I can
    use a string that I know and I can find that information on my logs。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道这可能是一个错误。我把错误放在里面。然后我可以使用这些信息来记录出了什么问题，因为，你想要保持追踪这些事情，对吗？现在我只是打印出来，所以你可能会觉得这很冗长，因为这只是一个例子。在我的系统中，我会将其记录下来。然后我可以使用一个我知道的字符串，找到我日志中的信息。
- en: And there you go。 After I run that， I'm able to see that， well。 it didn't move
    up in my face anymore。 The last part I want to show you in code is that is a possibility
    that you are not using。 a symmetrical algorithm like the examples I just showed
    you。 So you can either request a key or you can load the key yourself from your
    machine。 In this case。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。在我运行之后，我能够看到，嗯，它不再出现在我面前了。我想在代码中展示的最后一部分是，你可能没有使用我刚刚展示的对称算法。因此，你可以请求一个密钥，或者从你的机器上自己加载密钥。在这种情况下。
- en: this example talking that I have， I created it using an SSH key so I can， load
    that in using PyGwT。 And after I load that in， I can use it with read because
    I want a string of it。 And then I can use the serialization module of PyGwT to
    load any type of key that you might， have。 For example， this is an SSH one but
    you're going to see that we have other methods in， there。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在我谈到的这个例子中，我是用 SSH 密钥创建的，所以我可以使用 PyJWT 加载它。在我加载之后，我可以使用 read，因为我想要它的字符串。然后我可以使用
    PyJWT 的序列化模块来加载你可能拥有的任何类型的密钥。例如，这是一个 SSH 密钥，但你会看到我们还有其他方法。
- en: Like for example， the PIM type of keys。 And I'm going to load my SSH public
    key because I want to verify the token。 I pass it along as a byte string so I
    encode it。 And then I can use that back again with my deco method。 Now keep in
    mind if you are using your service as out zero as an example， you would have to。
    make a request for the well known end point to get the key and you need the well
    known。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 比如说，PIM 类型的密钥。我将加载我的 SSH 公钥，因为我想要验证令牌。我将其作为字节字符串传递，所以我进行了编码。然后我可以使用我的解码方法再次使用它。现在请记住，如果你使用的是像
    Auth0 这样的服务，你需要请求一个已知的结束点以获取密钥，而你需要那个已知的。
- en: end point and the key ID for that。 And that is our way to do that。 I linked
    that information in the description of this slide。 This is going to be available
    to you so you can check it out。 And then again。 I put along the algorithm that
    I'm using。 And if everything goes well。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 结束点和关键 ID 就是这个。我们就是这样做的。我在这个幻灯片的描述中链接了该信息。这将对你开放，所以你可以查看。然后再次，我放上了我正在使用的算法。如果一切顺利。
- en: you should be able to see the payload data。 There you go。 Awesome。 So now you're
    wondering， okay。 I know everything that is to know about JWT's。 I know how they
    came to life。 I know what the payload and the header are。 I know that I have a
    lot of algorithms that I can use。 Two types of them。 I know I have claims and
    so on。 Where do I find JWT's in the wild？
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能够看到有效载荷数据。好了。太棒了。那么现在你在想，好吧。我知道关于 JWT 的一切。我知道它们是如何被创建的。我知道有效载荷和头部是什么。我知道我有很多可以使用的算法。它们有两种类型。我知道我有声明等等。我在哪里可以找到外面的
    JWT？
- en: Where do they live？ How do they feed？ So the first time I think of JWT's。 and
    the first time that I actually saw one was actually， making requests to protected
    APIs。 So when you are talking about protected APIs， you're going to think about
    access tokens。 So let's say you want to make a request to a protected API， you
    need an access token。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 它们存在哪里？它们是如何工作的？我第一次想到 JWT，第一次实际上看到一个，是在向受保护的 API 发出请求时。因此，当你谈论受保护的 API 时，你会想到访问令牌。那么，假设你想向一个受保护的
    API 发出请求，你需要一个访问令牌。
- en: to access the protected routes。 So the access token is going to have all of
    the information that you need for dealing。 with that API。 Now， access tokens doesn't
    necessarily need to be JWT's。 but there is a new IFC in the， block that came out
    last year。 It was authored by Vittario Betache。 a zero-spitzpo architect that
    outlines how JWT as an access， token should behave。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 访问受保护的路由。因此，访问令牌将包含你处理该 API 所需的所有信息。现在，访问令牌不一定需要是 JWT，但去年出现了一种新的 IFC。它是由 Vittorio
    Betache 创作的，他是一位零知识架构师，概述了 JWT 作为访问令牌应如何表现。
- en: So that information needs to have how the information must be structured and
    so on。 It's a very interesting read。 If you are curious， you should check it out。
    The other type of JWT's you may find the wild are the ID tokens， and they are
    the coolest。 in the world。 Because they carry information after the user did their
    logging， for example。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这些信息需要有如何构建信息的结构等等。这是一本非常有趣的读物。如果你感兴趣，可以去看看。你可能在外面发现的另一种 JWT 是 ID 令牌，它们是最酷的。因为它们在用户登录后携带信息，例如。
- en: So that way your front end doesn't have to make an extra request to get， for
    example。 the user profile。 It is going to be able to have that information in
    there。 Also。 because we're talking about tokens， you may have heard of refresh
    tokens。 You fresh tokens are not JWT's， that's why I'm not going to be speaking
    about it。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这样前端就不需要额外请求来获取，例如用户资料。它将能够在其中包含该信息。此外，因为我们在谈论令牌，你可能听说过刷新令牌。你知道刷新令牌不是 JWT，这就是为什么我不打算谈论它。
- en: Maybe in a new talk。 So now that you know how you can use that， JWT's， how they
    work。 how they come to life， how you can structure the information， you may be
    wondering， "Well。 this seems a little， bit dangerous。 There's going to be information
    in there。 How do I。 I don't know， be safer with it？"， Well， I have a few tips
    for you。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 也许在一次新的讨论中。那么现在你知道如何使用 JWT，它们是如何工作的，它们是如何被创建的，以及你如何构建信息，你可能会想，“好吧，这似乎有点危险。里面会有信息。我该如何，我不知道，才能更安全地处理它？”好吧，我有一些小贴士给你。
- en: So don't store your JWT's in local storage。 That's a bad idea because it opens
    you up for a type of attack known as XSS attack。 And we don't want to do that。
    Because once JWT's are out there， you cannot call them back。 It is a hassle。 So
    don't start that in local storage。 If you need to start somewhere for verification
    process， you may do it in memory。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 所以不要将你的 JWT 存储在本地存储中。这是个坏主意，因为这会让你暴露于一种称为 XSS 攻击的攻击中。我们不想这样。因为一旦 JWT 被泄露，就无法收回。这会很麻烦。所以不要在本地存储中开始。如果你需要在验证过程中开始某个地方，可以在内存中进行。
- en: That's the best idea。 The other tip is we don't verify JWT's in the front end。
    As well。 let's say you have a JWT that was signed using a symmetrical algorithm。
    You would need to have the key phrase for translating the token for verifying
    the signature。 And we don't want to have that in the front end because anybody
    could go inspect the element。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这是个好主意。另一个提示是，我们不在前端验证 JWT。比如说你有一个使用对称算法签名的 JWT。你需要拥有用于转换令牌以验证签名的密钥短语。我们不希望将其放在前端，因为任何人都可以去检查元素。
- en: on your page and get that information。 And we don't want to do that。 The last
    one。 and I cannot stress this enough， me being an ex-data scientist， well， it's。
    your data science at heart， don't put sensitive data in the payload of your token。
    It's a bad idea because once again， anybody can inspect your web application and
    get。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的页面上获取这些信息。而我们不想这样做。最后一点，我无法强调这一点，我作为一名前数据科学家，嗯，核心是你的数据科学，不要将敏感数据放入令牌的有效负载中。这是个坏主意，因为一旦再次，任何人都可以检查你的网页应用程序并获取。
- en: a hold of that token。 And then your sensitive data is going to be out there。
    So it's not a good idea to put that in the token。 Finally。 I want to give you
    some tools to help you out。 Because I know JWT's may be hard。 I made this talk
    thinking of me a few years back that I wanted this content and I didn't， find
    any。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 拿到那个令牌。那么你的敏感数据将会泄露。所以把这些放进令牌里不是个好主意。最后，我想给你一些工具来帮助你。因为我知道JWT可能很复杂。我做这个演讲时，想着几年前的我想要这个内容但没有找到任何。
- en: I had to figure out by myself。 So the first one I'm going to tell you is JWT。io。
    This was made by OutZero。 It's going to help you debug your access tokens。 And
    it's going to make your life easier。 You can check out writing browser the information
    of your token。 Now be mindful while you're facing the token because if it is a
    real production token， it's。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我不得不自己去摸索。所以我第一个要告诉你的是JWT.io。这是OutZero制作的。它将帮助你调试你的访问令牌，并让你的生活更轻松。你可以在浏览器中查看你的令牌信息。现在在查看令牌时要小心，因为如果它是真正的生产令牌，这。
- en: not a good idea。 But JWT。io is a safe environment where you can check out your
    token if you need to。 And we don't start the tokens for ourselves。 So it's safer。
    The other one is you may need more information about JWT's because you are very
    curious about， it。 So we actually made a handbook with a few examples and use
    cases of JWT's and I encourage。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 并不是个好主意。但JWT.io是一个安全的环境，如果需要，你可以在这里查看你的令牌。而我们并不为自己生成令牌，所以更安全。另一个是你可能需要更多关于JWT的信息，因为你对此非常好奇。所以我们实际上制作了一本手册，包含一些JWT的示例和用例，我鼓励。
- en: '![](img/f356ac2853ed923b3e15746d71ff0c34_4.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f356ac2853ed923b3e15746d71ff0c34_4.png)'
- en: you to read it。 And that was it。 I don't know if you have time for my questions。
    but you may find me on， again， on most social， networks under the handle JAS。
    And my slides are on that link， as I。com/JWT， if you want to check out all the
    links。 That's it。 [APPLAUSE]， We don't take questions as part of the presentation。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你去阅读它。这就是我所说的。我不知道你是否有时间问我问题，但你可以在大多数社交网络上找到我，用户名是JAS。我的幻灯片在那个链接上，as I.com/JWT，如果你想查看所有链接。就是这样。[鼓掌]，我们在演讲中不接受提问。
- en: but please come forward and ask Jessica directly， if you have any questions
    or just by the--。 \>\> A zero booth。 We own the line 600。 Thank you。 \>\> Thank
    you。 \>\> See you。 [APPLAUSE]， [APPLAUSE]。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有任何问题，请直接向杰西卡询问，或者在--。>> A zero展位。我们位于600线。谢谢。>> 谢谢。>> 再见。[鼓掌]，[鼓掌]。
- en: '![](img/f356ac2853ed923b3e15746d71ff0c34_6.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f356ac2853ed923b3e15746d71ff0c34_6.png)'
