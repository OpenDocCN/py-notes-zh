- en: P54：Talk - Mario Corchero_ Finding penguins with a snake  Linux features for
    a Pytho - VikingDen7 - BV1f8411Y7cP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P54：演讲 - 马里奥·科尔切罗_ 用蛇寻找企鹅  Linux特性在一个Python中的应用 - VikingDen7 - BV1f8411Y7cP
- en: \>\> Thank you。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: \>\> 谢谢。
- en: '![](img/0870c5fab9e6528463b84ff932c421ce_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0870c5fab9e6528463b84ff932c421ce_1.png)'
- en: '![](img/0870c5fab9e6528463b84ff932c421ce_2.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0870c5fab9e6528463b84ff932c421ce_2.png)'
- en: Hello everyone。 My name is Mario。 I want to make sure you're in the right room。
    This is not the pattern matching talk。 That's in the room。 I'm surprised to see
    many people here。 You still have time to go to the other one。 Well， as I was saying，
    my name is Mario。 I work at Bloomberg。 I want to speak today about basically how
    to explore some Linux features from Python。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 大家好，我的名字是马里奥。我想确保你在正确的房间。这不是模式匹配的演讲。那个在旁边的房间。我很惊讶看到这么多人在这里。你们还有时间去另一个房间。好吧，正如我所说，我的名字是马里奥。我在彭博工作。今天我想谈谈如何从Python探索一些Linux特性。
- en: The talk could have been just named that。 But it's so about the clickbait， right？
    After the talk。 I'm going to be around。 I'm one of these people that love to get
    stopped in the hallway and chat about anything。 There are a lot of topics you
    can speak with me about that doesn't have to be necessarily， Python。 Hopefully，
    I will get to meet and share some time together。 So as I was saying。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 演讲本可以就这样命名。但这更像是为了吸引眼球，对吧？演讲结束后，我会在附近。我是那种喜欢在走廊被人拦住聊天的人。你可以与我讨论许多话题，不一定要是Python。希望我能见到你们，一起分享一些时间。正如我所说。
- en: we're going to speak about Linux and Python and we'll see some basic Linux。
    concepts hopefully through APIs that you already know。 The objective of this talk
    is that you will get to hopefully know a little bit more of。 Linux through an
    environment that you're comfortable with。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论Linux和Python，并希望通过你们已经了解的API看到一些基本的Linux概念。本次演讲的目标是让你对Linux有更深入的了解，环境也是你熟悉的。
- en: I think we don't have time for questions at the end， but I'll be at the hallway。
    First of all。 Linux or Python， you might be wondering what does Python build against。
    There is a put here to URLs that you can check that will help you out to figure
    out whether。 the platform you're working on is supported at Python。 On the second
    link。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我想我们在最后没有时间回答问题，但我会在走廊上。首先，关于Linux或Python，你可能想知道Python是基于什么构建的。这里有两个URL供你检查，帮助你确定你正在使用的平台是否支持Python。在第二个链接中。
- en: there's a pipe that defines what that supported means。 There are situations
    where a release may be blocked based on issues in that platform。 And there are
    some others where these are most best efforts。 There is also the Python build
    bots where it's basically the farm that's building CPython。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 有一条管道定义了“支持”的含义。有些情况下，发布可能因为该平台的问题而被阻止。而在其他情况下，这些则是尽力而为。此外，还有Python构建机器人，基本上是构建CPython的农场。
- en: against multiple platforms every day。 There is even a watch with a really cool
    shield。 It's kind of like a really slight group。 You have some people that belong
    to that here in the talk。 But basically， there are people that are making sure
    that CPython continues to build and to。 run in multiple platforms whenever there's
    a new change that's made in the source code。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 每天都有多个平台的对比。甚至还有一款带有非常酷炫护盾的手表。它有点像一个非常小的群体。在这里有一些人属于这个群体。但基本上，有人确保CPython在多个平台上持续构建和运行，无论源代码有任何新变化。
- en: Additionally， you should be aware that CPython release only releases pre-built
    interpreters。 from macOS and Windows。 And what that means is that if you are using
    CPython in Linux in any of this distribution。 you are basically using something
    that's built from source。 You will need everything is built from source， but you
    will need to build it on your own。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你应该知道CPython只发布预构建的解释器，来自macOS和Windows。这意味着如果你在Linux的任何发行版上使用CPython，你基本上是在使用从源代码构建的东西。你需要所有东西都是从源代码构建，但你需要自己构建它。
- en: Or in some cases， for example， you're using Ubuntu or something like that， there
    will。 be some package manager that does that for you。 But it's not the Python
    release managers that are doing that。 It's some other third party。 So getting
    into the meet。 I'm going to speak through multiple modules that allow you to。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 或者在某些情况下，例如你使用Ubuntu或类似的系统，会有一些包管理器为你处理这些。但这并不是Python发布管理者在做的，而是一些第三方。所以开始吧。我将通过多个模块进行讲解，帮助你。
- en: interact with APIs that are at the end providing use services that belong to
    the OS。 And before we start into that， there's something I like to tell you。 Because
    I find， like。 I work with a lot of Python developers and sometimes I find that。
    people don't know about many of the modules that are part of the Sunday library。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 与 API 交互，最终提供属于操作系统的服务。在我们开始之前，有些事情我想告诉你。因为我发现，像我与很多 Python 开发者合作时，常常会发现大家对许多标准库中的模块并不了解。
- en: And we are proud to say that our language comes with batteries included， but
    we never。 get to know about all the batteries that include。 So here。 I'm basically
    distancing some of the modules that allow you to interact with， the OS。 And I'm
    sure that many people here in the audience have not seen some of them。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们自豪地说我们的语言自带电池，但我们从未真正了解过所有包含的电池。所以在这里，我基本上是在讲一些允许你与操作系统交互的模块。我相信在场的许多人没有见过其中的一些。
- en: And a module of course， I'm placing many people don't know about。 And it's，
    in my opinion。 quite handy。 It's a file CMP。 That basically allows you to compare
    if two files are equal or even compared to directories。 It's super cool。 And I'm
    sure that many of you have written that code on your own to compare it to directories。
    so file， isn't it？ So you know， if you have the time after this talk or after
    Python or whatever。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，有个模块，我放置的许多人可能不知道。并且在我看来，这非常方便。那是一个文件 CMP。基本上可以比较两个文件是否相等，甚至可以比较目录。这非常酷。我相信你们中的许多人都写过自己的代码来比较目录。是的，文件，对吧？所以你知道，如果在这个演讲之后或
    Python 或其他什么之后有时间。
- en: you can， there， is a page in the C Python documentation that lists all the modules
    in the standard library。 Just go through it。 I'm sure that you'll learn some new，
    cool module。 So we couldn't speak about Linux and Python without speaking about
    processes。 So a really big introduction when we're writing a program， all we're
    doing is basically creating。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以，在那里，C Python 文档中有一页列出了标准库中的所有模块。只需浏览一下。我相信你会学到一些新的、很酷的模块。所以我们不能谈论 Linux
    和 Python 而不谈论进程。当我们编写程序时，实际上我们所做的就是创建。
- en: instructions， right？ And then those instructions define a program when it's
    in disk and you're going to move。 it into memory。 And that creates a process in
    some way。 The process is made of those instructions that we wrote together with
    some state。 There is some memory around it。 If you have my experience with it。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 指令，对吧？然后这些指令在磁盘上定义了一个程序，而你将把它移入内存。这以某种方式创建了一个进程。这个进程由我们一起写的指令和一些状态组成。周围有一些内存。如果你有我的经验的话。
- en: I recommend that you read some information around the memory， layout of a process。
    I promise you。 you're going to be fascinated。 And basically， once you have that
    in memory。 the DOS through this scheduler will prioritize， what the instructions
    are being executed。 And that's cool。 But how do we create a process in Python，
    right？ So if you haven't seen it before。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议你阅读一些有关进程内存布局的信息。我向你保证，你会感到着迷。基本上，一旦你在内存中有了这些，DOS 通过这个调度器将优先考虑执行的指令。这很酷。但我们如何在
    Python 中创建一个进程，对吧？所以如果你之前没见过。
- en: oh， no， the slides are cut。 So is there the video-- the media people-- is there
    any way I can， like。 make the-- ah， don't worry。 There is a part here in the corner
    that is going to put on all the slides。 all the policies， lights afterwards。 But
    there is a main command for each of the slides that I'm putting that allows you
    to。 go deeper if you want。 But I'll just say that。 That's a pity。 So well， fork。
    Through the iOS module。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，不，幻灯片被切掉了。那么视频呢——媒体人员——有没有办法让我，比如。别担心。这里角落有个部分会放出所有幻灯片。所有的政策，之后的灯光。但是每一张幻灯片都有一个主命令，我放置的那个命令可以让你深入探讨。如果你想的话。我只想说，这真是可惜。那么，好吧，fork。通过
    iOS 模块。
- en: you will be able to run this。 It's called fork。 And what that allows you to
    do is basically get the current program and create a clone。 of-- on its own。 And
    that's going to be a child process。 This is kind of like the most-- about the
    way to create new processes on Linux。 You can see that what the API allows you
    is you call OS。fork。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你将能够运行这个。它叫做 fork。它允许你基本上获取当前程序并创建一个克隆。作为自己的。这将是一个子进程。这就像是在 Linux 上创建新进程的最重要的方法。你可以看到
    API 允许你调用 OS.fork。
- en: And that's going to give you a return code。 The return code is going to be zero
    in the case of the child。 And it's going to be the PID of the parent-- sorry，
    the PID of the child in the case of， the parent。 This is really handy way to just
    allow you to run some coding parallel， right？
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给你一个返回代码。在子进程的情况下，返回代码将为零。而在父进程的情况下，返回代码将是子进程的PID。这是一种非常方便的方法，可以让你并行运行一些代码，对吧？
- en: Here you can see how in this example we are basically starting a program， right？
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，你可以看到我们基本上是在启动一个程序，对吧？
- en: Then we're going to call in fork。 And those two things are going to be executed
    in parallel。 The child process is going to run the first section of the if。 And
    the parent process is going to run the second part。 When I say that when you run
    fork。 the process is duplicated， you might be thinking that， wow， that has to
    be really expensive， right？
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将调用fork。这两个操作将会并行执行。子进程将运行if的第一部分，而父进程将运行第二部分。当我说你运行fork时，进程会被复制，你可能会想，这样做肯定非常昂贵，对吧？
- en: And there are many optimizations to make sure that that's not the case。 Good
    example is that。 for example， on the next， there's a comp-- what's called copy，
    or write。 And what that means is that when you're actually fork-in， you are not
    copying the whole thing。 You are only going to start to copy that part of memory
    when you modify them。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 其实有很多优化措施来确保情况并非如此。一个很好的例子是，例如，在接下来的过程中，有一个被称为copy或write的操作。这意味着当你实际调用fork时，并不会复制整个进程。你只会在修改那部分内存时才开始复制。
- en: Which is really handy if you think about， for example， these instructions and
    all the code。 that are there， which is not going to be changed。 And I also wanted
    to mention here。 which you can find in the man page if you read that。 And I really
    recommend that you run man fork if you ever have to interact with any of this。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你考虑一下这些指令和所有的代码，它们不会被更改，那真是非常方便。我也想在这里提到这一点，如果你阅读手册页，你会发现。我真的推荐你运行man fork，如果你需要与这些进行任何交互的话。
- en: is that threats are not copied。 When you run fork。 only the threat that's executing
    that is going to be the one that's， going to be cloned。 Again。 don't be afraid
    of the Linux manual。 I promise you， it's really nice and easy to read。 especially
    when you know what the thing， is doing。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 线程不会被复制。当你运行fork时，只有正在执行的那个线程会被克隆。再说一次，不要害怕Linux手册。我向你保证，它真的很好读，特别是当你知道这个东西在做什么的时候。
- en: So it's a pity that we cannot see here in the slides。 But there at the top，
    it says man fork。 The second thing I want to speak about， you can speak about
    fork without exec， is the exec， API。 This is going to allow you to interact--
    well， there are multiple functions you can see-- you。 can find in the OS documentation
    of Python the different functions that allows you to interact。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 所以很遗憾我们在幻灯片中看不到这一点。但在顶部，它写着man fork。我想谈的第二件事是，你可以在不使用exec的情况下讨论fork，那就是exec
    API。这将允许你进行交互——实际上有多个函数，你可以在Python的OS文档中找到，它们允许你进行交互。
- en: with execs in different ways because you might want to pass different-- like，
    basically， the。 API just changes how you can pass parameters and some other things。
    So for example。 the path environment where a variable is going to be used to find
    the， command。 But basically。 what this is going to do is it's going to replace
    the current process with。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 通过exec以不同的方式，因为你可能想传递不同的——基本上，API只是改变了你传递参数和其他一些事情的方式。例如，路径环境变量将用于查找命令。但基本上，这将把当前进程替换为。
- en: the one that you pass it here。 So here we're just saying， like。 this program
    is just importing OS and then it's saying， okay， replace myself with this new
    program。 And that's going to execute Python 3。9 and it's going to execute that。
    You can realize that line number 6 is never going to be executed because you're
    replacing。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你在这里传递的那个。所以在这里我们只是说，这个程序只是在导入OS，然后它说，好的，用这个新程序替换我自己。这将执行Python 3.9并运行它。你会发现第6行永远不会被执行，因为你正在替换它。
- en: the whole program and therefore the instructions of the previous program that
    no longer is。 16 that process。 At the top there， you can see a new reference which
    is man exec。 Okay。 Something else that might be handy when you are doing fork
    and exec is that you can register。 at fork handlers。 What this allows you to do
    is to execute code before you fork or after you fork。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 整个程序，因此之前程序的指令不再是。16这个进程。在顶部，你可以看到一个新的引用，即man exec。好的。当你进行fork和exec时，另一个可能方便的事情是你可以注册。在fork处理程序。这样你可以在fork之前或fork之后执行代码。
- en: And you can customize that in both in the parent and in the child。 Python allows
    you to do this really nicely through this OS register at fork。 You can basically
    pass function there with what you want to execute。 Okay， so you might wondering。
    okay， I'm not going to use any of this。 Why are you speaking to me about it？ Well。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在父进程和子进程中自定义这一点。Python通过这个OS在fork时注册的方式非常好地允许你做到这一点。你基本上可以传递你想执行的函数。好的，所以你可能会想，好的，我不会使用这些。你为什么要跟我说这些呢？好吧。
- en: have you used a process？ If you have ever used a process to run anything like
    this。 this is a code example taken from， this subprocess documentation， you are
    indeed using this。 This is the source code behind subprocess， so you can see there，
    I'm not lying to you。 And here is basically doing fork and exec。 Something similar
    to how I say。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你使用过进程吗？如果你曾经使用过进程来运行类似的东西。这是一个从subprocess文档中提取的代码示例，你确实在使用这个。这是subprocess背后的源代码，所以你可以看到，我不是在骗你。这里基本上是在做fork和exec。类似于我所说的。
- en: go and read the different modules that they have in the， standard library。 There
    are some modules that are really easy to read and understand what's going on。
    So I would encourage you as well to go and read the source code of some modules
    because。 then you can understand what's actually happening behind。 In this case，
    indeed。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 去阅读标准库中不同模块的内容。有些模块真的很容易阅读和理解正在发生什么。所以我也鼓励你去阅读一些模块的源代码，因为那样你可以理解背后实际发生的事情。在这种情况下，确实如此。
- en: it's just calling fork and exec。 And you can see here how it's the same structure
    that we saw before。 where it's just calling， fork， getting the PID of the child，
    right？
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是调用fork和exec。你可以在这里看到我们之前看到的相同结构，它只是调用fork，获取子进程的PID，对吧？
- en: And here it's checking if the PID is zero， that means that we are in the child。
    So it's just。 it means that we are in the parent， so we are just returning。 Otherwise
    here you have the code for the child。 You can see here again the code to the after
    fork in the child。 There is also a new other section in the code that does the
    after fork of the parent。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里检查PID是否为零，这意味着我们处于子进程中。所以这只是。这意味着我们在父进程中，因此我们只是返回。否则，这里你有子进程的代码。你可以再次看到子进程中的fork后的代码。代码中还有一个新部分处理父进程的fork之后。
- en: but I didn't include it in this slide。 Similar to how such process just do fork
    and exec。 multi-processed in， that's something， really similar。 So believe it
    or not。 you have been using this all the time。 I'm not only on Python， of course。
    Some more things。 If we start to speak about files， something I love also to show
    some people is how you， can just。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 但我没有把它包含在这个幻灯片中。类似于这样的进程只是做fork和exec。在多进程中，这实际上非常相似。所以信不信由你，你一直在使用这个。当然，我不仅是在谈论Python。还有更多的事情。如果我们开始谈论文件，我也很喜欢向一些人展示的是你可以简单地。
- en: you know， you probably know that your process is always writing to standard，
    output， right？
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道，你可能知道你的进程始终写入标准输出，对吧？
- en: And it's written from standard。 Those are just normal files。 They are really
    not text files。 but those are files that you can even open on your own。 Here you
    can see， for example。 you can just open a STD out on a pen to it and read from，
    STD in。 Something to mention here that I'm not catching some people is you can
    see here how we write。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这段文字是从标准写的。这些只是普通文件。它们其实并不是文本文件，但这些文件你甚至可以自己打开。在这里你可以看到，例如，你可以在一个笔上打开STD输出并从STD输入读取。这里需要提到的是，我并没有捕捉到某些人，你可以看到我们是如何写的。
- en: Hello Picon at Solid City， but only the first line is actually printed before
    we reread， STD in。 They wonder why that's happening in the sense of like why do
    we see Hello Python， we have。 to present there and then the other line appears
    when in the code we can see that he's。 writing twice to STD out and then reading
    from STD in。 That's because the output is being buffered。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: “Hello Picon在Solid City”，但实际上只有第一行在我们重新读取STD之前被打印出来。他们想知道为什么会这样，为什么我们看到“Hello
    Python”，我们必须在那呈现，然后在代码中我们可以看到他正向STD out写入两次，然后从STD in读取。这是因为输出正在被缓冲。
- en: I'm sure that many of you have， you know， love to live cowboy lives and have
    removed your。 USBs taking windows without extracting the device， but that's actually
    the reason why。 it's happening。 Because the Python or the OS， depending on their
    multiple layers。 will be buffering the output， that you write to a file or to
    a media or anything like that。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信你们中的许多人都喜欢过着牛仔生活，并在不拔掉设备的情况下移除了你的USB，但这实际上就是事情发生的原因。因为Python或操作系统，取决于它们的多层结构，会缓冲你写入文件或任何媒体的输出。
- en: So you need to make sure that those are buffered before you close。 If you want
    to go a little bit further and see what's actually STD out because you might。
    wonder anything， hey， this is just a file。 How come that I can have multiple processes
    writing to it and they are not colliding。 right？ I can have multiple terminal
    screens and they are not interacting with each other。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你需要确保在关闭之前那些是被缓冲的。如果你想进一步了解什么是STD out，因为你可能会想，“嘿，这只是一个文件。怎么可能有多个进程同时写入而不会冲突呢？”对吧？我可以有多个终端窗口，但它们不会互相影响。
- en: How does this work？ So what's actually happening is that STD out in STD just
    point to this like prok self。 If you haven't ever worked a little bit through
    prok， I encourage you to do it as well。 You can find all the information about
    the process there。 And what's actually happening is that's basically just pointing
    to a file description of your。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这个是怎么运作的？实际上，STD中的STD只是指向这个像是prok self的东西。如果你以前没有稍微研究过prok，我鼓励你去试试。你可以在那找到关于这个过程的所有信息。实际上发生的事情基本上就是指向你的文件描述符。
- en: process。 And that's actually， and I think I have time and that's actually， I'm
    going to show you。 what actually happens there。 And that then is pointing you
    to your terminal。 So for example。 here if you see prok self live demo， whoo， FD1，
    that's actually just a， same link to my terminal。 You can see here if I run TTY
    that matches。 And what that means is that basically STD out is being pointed to
    that file descriptor。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 进程。实际上，我认为我还有时间，我会向你展示。实际上发生了什么。这指向你的终端。例如，在这里，如果你看到prok self的实时演示，哇，FD1，这实际上只是一个指向我终端的链接。你可以在这里看到，如果我运行TTY，它是匹配的。这意味着基本上STD
    out是指向那个文件描述符。
- en: and then that file descriptor is pointed to my terminal。 But this is as fun
    as you can just take this and write things here。 You can write hello picon from
    here。 And that totally works。 It's just the file。 You can even write from a different
    terminal。 And that will work。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然后那个文件描述符指向我的终端。但这同样有趣的是，你可以直接在这里写东西。你可以从这里写“hello picon”。这完全有效。这只是一个文件。你甚至可以从另一个终端写入，这也会有效。
- en: And of course you can do exactly the same thing from picon。 You can see it's
    here。 You can even cut it。 You can even read from it if you want。 And then fun
    things start to happen。 Like for example， if you write here， both of them are
    running and you'll see it in both， places。 It's at the end the API you're working
    with is just a file descriptor。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你也可以从picon做完全相同的事情。你可以在这里看到。你甚至可以剪切它。如果你想的话，你甚至可以从中读取。然后有趣的事情开始发生。例如，如果你在这里写，两个进程都在运行，你会在两个地方都看到它。最终你使用的API只是一个文件描述符。
- en: So you can just work with it as with any other file descriptor。 Really cool
    stuff。 You can， yeah。 that's continually because I'm actually running out of time。
    Similar to how you can open and read files， you can also read about the metadata
    from， Python。 There's this that command in Linux and you have this that module
    in Python that allows。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你可以像处理任何其他文件描述符一样与它一起工作。真的很酷。你可以，嗯。那是不断的，因为我实际上时间不够了。类似于如何打开和读取文件，你也可以从Python读取元数据。Linux中有这个命令，而在Python中你有这个模块可以实现。
- en: you to resolve that。 Okay。 How am I doing with time？ So next thing is the locale
    module。 Again。 you can read man set locale and that will allow you to learn a
    little bit more on。 the Linux man pages about how the locale works。 But this allows
    you to handle all kind of like cultural specificities of your code。 Here I'm going
    to put in an example of how you for example can use locale to parse that。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: string for 43， 210 into a float。 And you can see that you get different results
    whether you're using the US locale or the。 Spanish locales。 All programs start
    with what's called like the legacy C locale。 But you can change that once you
    start by changing the locale here。 Probably when you are working with like local
    specific programs， you're using more high-level。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: modules。 But it's always good to know what's behind the hoods on this basically
    what allows you。 is to read that information from the OS。 If you wanted to add
    more locales。 what you need to do is basically install the interiors。 some language
    pack and that will give you that。 Okay。 So time。 This is topic I love。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: If you might be wondering， "What's so hard about time？ Why do I need the OS
    to give time？"。 To give you the time。 Well， the thing is time is not hopefully
    this is not new to you。 But time is a complex concept to it's just hard to know
    what time is this。 How crazy it sounds。 But the thing is like the in Python， the
    time is being provided by the OS。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: And the OS actually works with some hard work code which is just using Quartz
    because that。 provides， that gives you something that gives you a periodic event
    that you can check and， then the。 you know， your PC is going to check is going
    to be able to track how seconds pass， by using Quartz。 And then your OS will be
    able to read that and will combine that with the time from all。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: the PCs which is being given to you via NTP。 At the end， the time is just giving
    to you。 is actually being provided by some atomic， clocks that you don't have
    to worry about。 But it's good to know that whenever you are asking Python for
    what time is it， all this。 is happening。 And the reason why I'm saying that is
    because you might start to build some assumptions around。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: it that you should not。 Like for example， that the time is monotonic and extending。
    So that's something you can actually not rely on time。 So yeah。 like this basically
    allows us to call to the OS and get the time that it is。 And you might wondering，
    yeah， but I never use time。time。 I use daytime。 Well， if you read the code。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: it's actually the same thing。 All time in Python is actually being provided
    by the OS by just calling time。time。time。 Here is the underscontang which is the
    extension that's actually calling them to the OS。 You cannot see the main pages
    here but here actually it says "man and TPD"。 And it allows you to know how this
    protocol that synchronizes your time with all the PCs， work。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Because probably many of you here will have a watch。 And it's important to realize
    that your watch will have a different time from my watch。 And even if we were
    to synchronize them right now after a day or a month or a year because。 your watch
    is probably based on words or it's mechanical， it will lose synchronization。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这里的许多人可能都有手表。重要的是要意识到你的手表的时间和我的手表的时间不同。即使我们现在同步它们，经过一天、一个月或一年后，由于你的手表可能是基于机械原理，它会失去同步。
- en: with each other and you need to synchronize them from time to time to make sure
    that you。 are following at the same time。 So you get all of this for free in Python
    because it's just asking the OS to give you。 the time。 And in case you wonder
    because you have seen this YouTube channel， a very test， I call。 like "oh， how
    can I handle lib seconds？"， Well， the thing is like the OS is giving you the time
    in what's called Unix time and that's。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 彼此之间，你需要不时同步它们，以确保你们同时跟进。所以在Python中，你可以免费获得这些，因为它只是请求操作系统给你时间。而如果你想知道，因为你见过这个YouTube频道，一个很简单的测试，我称之为“哦，我该如何处理lib秒？”。
- en: not included lib seconds so if the OS does not know about lib seconds， Python
    cannot know。 about lib seconds。 Okay， so let's go with signals。 So signals are
    just so far interrupt to notify a process of an important event。 There are many
    events that your processor might want to know about and the OS can pass that。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，问题是操作系统给你的时间是所谓的Unix时间，而这不包括lib秒，所以如果操作系统不知道lib秒，Python也无法了解lib秒。好的，让我们来谈谈信号。信号只是中断，通知进程发生重要事件。
- en: to them。 You can also just call kill and basically pass a signal to your program。
    There are usually signals that you can customize yourself and then there are signals
    to tell。 the process to interrupt itself or there are signals that surprise many
    people which is。 the seek pipe。 What that means is that you saw how before we
    saw， you know， like there is STD out。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以直接调用kill，基本上给你的程序传递一个信号。通常有一些信号你可以自定义，然后还有一些信号是告诉进程中断自己，或者有些信号会让很多人感到惊讶，那就是寻址管道。这意味着你之前看到的STD输出。
- en: STD， out and STD in。 When you in Linux when you have a command and then you
    put like the pipe symbol and another。 command， what actually happening there is
    that the OS is mapping the STD out of your first。 command to the STD and to the
    first one。 So if one of them， there is no file there really， right？
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: STD，输出和STD输入。在Linux中，当你有一个命令，然后用管道符号连接另一个命令时，实际上发生的是操作系统将你的第一个命令的STD输出映射到第一个命令的STD输入。所以如果其中一个命令没有文件，那就真的没有。
- en: So what's happening is that when one of those processes die， the pipe is broken
    because one。 it's not connected anymore。 So that's the OS is going to notify you
    via that pipe broken signal。 Something where you might have seen signals well
    if you are running web applications or。 really common practice is to basically
    handle the seek interrupt as a way to have a way to。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 发生的事情是，当其中一个进程终止时，管道被破坏，因为它不再连接。因此，操作系统会通过这个管道破坏信号通知你。如果你运行的是Web应用程序，处理寻址中断的常见做法是基本上有一种方法来处理。
- en: tell the process like hey I want you to stop because I'm running or start the
    machine or。 whatever so you can customize what to do with SIGINT and basically
    clean up your process。 before exiting and if they don't exit then you can just
    run SIGGL which no one can overwrite。 and it will just kill your process in a
    nice way。 And how is all of this handling Python？
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 告诉进程，“嘿，我希望你停止，因为我正在运行或启动机器”，或者无论如何，你都可以自定义SIGINT的处理方式，基本上在退出之前清理你的进程。如果它们不退出，那么你可以运行SIGKILL，这个信号是无法被覆盖的，它会优雅地终止你的进程。那么这一切在Python中是如何处理的呢？
- en: Well you can call the signal module and here you have an example of how to register
    a signal。 This might cause you nightmare because you might have realized that
    now any instruction。 in your Python program can run any kind of， can raise any
    kind of exception。 Please don't start to capture serial division errors around
    time。sleep。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你的处理器可能想要知道很多事件，操作系统可以传递这些事件。你可以调用信号模块，这里有一个注册信号的示例。这可能会让你感到困扰，因为你可能意识到，现在你Python程序中的任何指令都可能引发任何类型的异常。请不要开始在time.sleep周围捕获串行除零错误。
- en: So here you can see how to register a handler for any signal and something to
    be aware is。 how does Python handle those signals， right？ Because signals are
    done on a lower level。 So what's actually happening is that Python will always
    pass those signals and call the。 signal handlers in the main thread。 And the same
    way that signals are handled in the main thread。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里你可以看到如何为任何信号注册处理程序，需要注意的是，Python如何处理这些信号，对吧？因为信号是在较低级别上进行的。实际上，Python将始终传递这些信号并在主线程中调用信号处理程序。信号在主线程中的处理方式是相同的。
- en: signal needs to be registered， in the main thread。 You cannot register a signal
    in any other thread。 Something that Python will do by default for you is translate
    SIGINT to a keyboard interrupt。 exception and SIGPIPE to a broken pipe error exception。
    If for a reason you wanted to overwrite SIGFALT and some other signals that won't
    work as。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 信号需要在主线程中注册。你不能在其他线程中注册信号。Python默认为你做的事情是将SIGINT转换为键盘中断异常，将SIGPIPE转换为破损管道错误异常。如果出于某种原因你想重写SIGFALT和其他一些信号，这将无法实现。
- en: you expect in Python because at the end they're going to be passed again to
    the C level and。 your program will not be heavily expected。 So you have another
    module in the standard library called fold handler that will allow。 you to do
    that。 Okay， so name pipes。 I don't know why I love this。 They are a really simple
    way to have interprocess communication。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你在Python中期望的，因为最终它们将再次传递到C级，你的程序不会受到重大的影响。所以你在标准库中有另一个模块叫做fold handler，可以让你做到这一点。好吧，命名管道，我不知道为什么我喜欢这个。它们是实现进程间通信的简单方法。
- en: What this allows you to do is you can have a file where you can have two， well
    a file。 where you can have two process connect and pass information from one to
    another。 Is you need directional？ And here you have an example on how to do that。
    Something to note is that you need to have both sides connected and otherwise
    they will。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这使你可以有一个文件，在这个文件中，两个进程可以连接并传递信息。你需要方向性吗？这里有一个关于如何做到这一点的示例。需要注意的是，两个端都需要连接，否则它们将默认阻塞。
- en: by default block on it。 So that's why here you see some APH related to how to
    connect with a block and things like。 that。 And basically， yeah， you cannot see
    the main page there but you can read MAM FIFO and you。 will get more information
    about that。 If you want to use name pipes。 go and read that because there will
    be some things that， surprise you。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这就是为什么你在这里看到一些与如何连接有关的APF（进程间通信）内容。基本上，是的，你不能在那看到主页面，但你可以阅读MAM FIFO，你将获得更多相关信息。如果你想使用命名管道，去阅读它，因为其中会有一些事情让你感到惊讶。
- en: Something I like to do when I'm using name pipes as well is on the reader process
    I like。 to have as well like an open file descriptor with a write permission。
    That's a way to unplug myself if I have some kind of multi threading application。
    But if you like this you would love unique domain sockets。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢在使用命名管道时，在读取进程上也有一个带写权限的打开文件描述符。这是一种在多线程应用中让自己“拔掉插头”的方式。但如果你喜欢这个，你一定会爱上独特的域套接字。
- en: So what this allows you to do is similar you have kind of like a file that allows
    you to。 have two process communicate with each other but here you have a bidirectional
    channel。 So that means that you'll need to use send and reg V。 But this allows
    you to have basically。 a communication between two process similar to how you
    can use a socket to communicate with。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这允许你拥有一个文件，让两个进程互相通信，但这里你有一个双向通道。这意味着你需要使用发送和接收。这基本上允许你在两个进程之间进行通信，类似于使用套接字进行通信。
- en: a process in a different host。 You can use you to need the myself to communicate
    with a process in the same host。 Something that's amazing about this is that because
    it's a file you can control permissions。 like who can read and who can write just
    with file permissions which I think it's beautiful。 Okay。 so if you want to do
    this and you want to combine it with fork and exec here we have。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用自己来与同主机中的进程通信。这一点非常惊人，因为它是一个文件，你可以通过文件权限控制权限，比如谁可以读取和写入，我觉得这很美妙。如果你想这样做，并且想将其与fork和exec结合，这里我们有。
- en: an example that's kind of like full end to end。 So here you can see how you
    can use socket socket per which is another function that you。 have in the standard
    library and that's going to give you basically two variables that you。 can use
    to communicate between each other。 So here you can see that we call socket per
    and then we have the call to fork and so now。 you have to know， okay so I have
    now two programs running through this， right？
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一个例子有点像完整的端到端。所以在这里你可以看到如何使用`socket`，这是标准库中另一个你拥有的函数，它基本上会给你两个变量，可以互相通信。所以在这里你可以看到我们调用了`socket`，然后有了`fork`的调用，所以现在你需要知道，好的，现在我有两个程序在运行，对吧？
- en: And we can see that in the child we can use this like child socket to send information。
    to the parent and the other way around which is super easy way to use information
    from。 a process to another。 If you wonder what is all of these useful for that
    allows you to then create this is。 the sponsor slide。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，在子进程中，我们可以使用这个子套接字向父进程发送信息，反之亦然，这是一种超级简单的方式来使用信息从一个进程到另一个。如果你想知道这些有什么用，它允许你创建这个赞助幻灯片。
- en: '![](img/0870c5fab9e6528463b84ff932c421ce_4.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0870c5fab9e6528463b84ff932c421ce_4.png)'
- en: This allows you then to create products like main rate。 So if you haven't heard
    about main rate it's a new memory profile that we built。 And the reason why I'm
    including here is because if you like to know more about like some Linux。 picture
    I would really recommend that you read through the source code。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这使你能够创建像`main rate`这样的产品。如果你还没听说过`main rate`，那是我们构建的一个新的内存配置文件。我之所以在这里提到它，是因为如果你想了解一些Linux的细节，我真的推荐你阅读源代码。
- en: It has not only some advanced and beautiful concepts but it's really well to
    comment it。 and we have actually got some really cool comments from people about
    how well I'm fine is to。 read the source code。 I promise really。 Basically， have
    a look through it。 I'm not one of these like fanboys that will just like。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 它不仅有一些高级而美丽的概念，而且注释得很好。实际上我们收到了很多关于源代码易读性的很酷的评论。我保证，真的。基本上，浏览一下。我并不是那种只会盲目追随的人。
- en: publish a tool like with flags and t-shirts and everything。 Don't trust that
    kind of people， okay？
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '发布一个工具，比如带有旗帜和T恤的一切。不要相信那种人，好的？ '
- en: But if you have the time I would really recommend that you have a look at it
    totally objective。 okay？ And yeah， check it out because you have many many concerns
    that you might like that are。 related to this presentation as well。 And that's
    all I have。 [APPLAUSE]。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果你有时间，我真的推荐你完全客观地看一下。好吧？是的，看看它，因为你可能会喜欢很多与这个演示相关的问题。这就是我所拥有的。[掌声]
- en: '![](img/0870c5fab9e6528463b84ff932c421ce_6.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0870c5fab9e6528463b84ff932c421ce_6.png)'
