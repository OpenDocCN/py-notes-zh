- en: P38：Talk - Jeremiah Paige_ Intro to Introspection - VikingDen7 - BV1f8411Y7cP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P38：讲座 - 杰里米亚·佩奇_反射简介 - VikingDen7 - BV1f8411Y7cP
- en: \>\> Hello， everyone。 Let us give a warm welcome to Mr。 Jeremiah， who is going
    to speak on。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '>> 大家好。让我们热烈欢迎杰里米亚先生，他将进行发言。'
- en: '![](img/2ab6e816597749c43b9dfc25876e6523_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ab6e816597749c43b9dfc25876e6523_1.png)'
- en: '![](img/2ab6e816597749c43b9dfc25876e6523_2.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ab6e816597749c43b9dfc25876e6523_2.png)'
- en: introduction to introspection。 [ Applause ]， \>\> Good afternoon。 Thank you，
    everyone。 for coming out to this final talk of a very long， PyCon day。 I am Jeremiah
    Page。 and today we're going to get a little intro to introspection。 So quickly。
    if you don't know introspection， it's basically the ability for code to look，
    at itself。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 反射简介。[掌声]， >> 下午好。感谢大家来参加这个漫长的PyCon日子的最后一场讲座。我是杰里米亚·佩奇，今天我们将进行一次反射的简单介绍。快速来说，如果你不知道反射，它基本上是代码查看自身的能力。
- en: So we're going to take a little journey today to see how we can maybe figure。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 所以今天我们将进行一次小旅程，看看我们如何也许能够找出。
- en: '![](img/2ab6e816597749c43b9dfc25876e6523_4.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ab6e816597749c43b9dfc25876e6523_4.png)'
- en: out what the interpreter sees when it's running our code ourselves and have
    access to that。 same information。 PyCon is not new to introspection。 It's always
    had strong capabilities for this。 Currently， it's about 70 built-in functions，
    and today we're going to use 15 of them just to look。 at code and decide to pull
    out information from it。 Some of this information is hidden。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 了解解释器在运行我们的代码时所看到的内容，并获得相同的信息。PyCon对于反射并不陌生。它一直具有强大的能力。目前，有大约70个内置函数，今天我们将使用其中15个仅用于查看代码并决定提取信息。其中一些信息是隐藏的。
- en: Some of it's magic， but none of it is meant to be， secret。 Python is not trying
    to keep it away from you。 It's just trying to keep it out。 of your way as you
    code。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 其中有些是魔法，但没有什么是秘密。Python并不是想要隐瞒这些内容。它只是想在你编码时将这些内容放到一边。
- en: '![](img/2ab6e816597749c43b9dfc25876e6523_6.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ab6e816597749c43b9dfc25876e6523_6.png)'
- en: So where do we start if we want to know something more about one of our objects？
    Well， we could。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 那么如果我们想了解更多关于我们对象的内容，我们该从哪里开始呢？好吧，我们可以。
- en: '![](img/2ab6e816597749c43b9dfc25876e6523_8.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ab6e816597749c43b9dfc25876e6523_8.png)'
- en: start， especially from the interactive shell， with a simple call to help。 We
    can just say， help。 It will help us， help us a function， so we can call it for
    more help。 We can even。 call for help about help， and we'll learn more about help
    than we'd ever want to know。 If we wanted to learn about something maybe a little
    more interesting， we could maybe。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是从交互式外壳开始，简单地调用help。我们只需说，help。它会帮助我们，帮助我们一个函数，以便我们可以调用它以获取更多帮助。我们甚至可以请求关于help的帮助，我们将学到比我们想知道的更多的信息。如果我们想了解一些可能更有趣的东西，我们可以。
- en: just hit that tab key on our interactive shell and find this weird name， pickle。
    What's up。 with pickle？ If we ask for help， help will tell us a lot。 Pages and
    pages。 It will fill。 our terminal and scroll off more than I can fit on several
    slides。 Everything we could。 ever want to know of how to use the pickle module
    as we're running Python。 But if we break， it down。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 只需在我们的交互式外壳中按下Tab键，就能找到这个奇怪的名字pickle。pickle怎么了？如果我们请求帮助，帮助会告诉我们很多内容。成页的内容。它会填满我们的终端，滚动到我在几张幻灯片上放不下的内容。关于如何在运行Python时使用pickle模块的所有信息。但如果我们将其拆分。
- en: it's pretty straightforward。 It starts by telling us about the object。 We actually，
    pass to help。 What is pickle？ It's a module。 Its name is pickle， which seems pretty
    obvious。 but it gets this right even if you use an alias。 And it has a doc string，
    which should。 help us in implementing making use of this module。 Once we get past
    the opening， help。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这很简单。它首先告诉我们关于对象的内容。实际上，我们是传递帮助。什么是pickle？这是一个模块。它的名字是pickle，这看起来很明显。但即使你使用别名，它也能正确处理。它还有一个文档字符串，这应该能帮助我们在实现时利用这个模块。一旦我们过去开头，就可以得到帮助。
- en: is going to detail all the classes defined in the module。 It's going to give
    a quick。 hierarchy of how they relate to each other in inheritance and to other
    objects in Python。 And then for each one of these classes， help is going to list
    them with their full definition。 Every method that's attached to them whether
    directly or through inheritance， it's going。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 将详细介绍模块中定义的所有类。它将快速展示这些类在继承和与Python中其他对象的关系的层次结构。然后，对于这些类中的每一个，帮助将列出它们的完整定义。每个与之直接或通过继承附加的方法都将被列出。
- en: to tell us which ones are static， which ones are class methods， which ones are
    instance， methods。 It knows all of this。 And once it's done going through all
    the classes， help is。 then going to show us all the top level functions in the
    module。 Again， it's going to show us。 the name of the functions and the signature
    so we know how to call them。 And it's going。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 告诉我们哪些是静态的，哪些是类方法，哪些是实例方法。它知道所有这些。一旦它完成对所有类的处理，帮助将显示模块中的所有顶级函数。再次，它将显示函数的名称和签名，以便我们知道如何调用它们。并且它将。
- en: to give us the doc string。 Once it gets through the functions， there's a few
    more bits of。 there's a few other names at the top of the picomodule that aren't
    either classes or functions。 So for each of these， it's going to show us their
    names and their values。 These are in。 picomod series of constants that uses for
    the serialization。 And at the very end is。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 给我们提供文档字符串。一旦它通过函数，就有一些其他在 picomodule 顶部的名称，这些名称既不是类也不是函数。对于这些名称，它将显示它们的名称和值。这些是在
    picomod 中使用的一系列常量，用于序列化。而在最后的是。
- en: the file which tells you where did this code actually come out of。 So that's
    all very helpful。 information。 When we quit help， it returns us to the interactive
    shell and we're back where。 we were with our code。 So we'll try and capture that
    information and use it to make some intelligent。 decisions in our program。 Except
    help doesn't return anything。 It doesn't leave anything。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 文件告诉你这段代码实际上来自哪里。这些都是非常有用的信息。当我们退出帮助时，它将我们返回到交互式外壳，回到我们代码所在的位置。因此我们会尝试捕获这些信息，并用它来做出一些智能的决策在我们的程序中。除了帮助不返回任何东西。它不留下任何东西。
- en: on the screen。 When you're done with help， there's nothing left that your program
    can。 find and make any sort of decisions about。 All that very valuable information
    went into。 our eyeballs but unless we're going to copy it or memorize it， it's
    no use to the program。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成帮助时，你的程序就无法找到并做出任何决策。所有这些非常有价值的信息都进入了我们的眼球，但除非我们要复制它或记住它，否则对程序毫无用处。
- en: '![](img/2ab6e816597749c43b9dfc25876e6523_10.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ab6e816597749c43b9dfc25876e6523_10.png)'
- en: So we're going to need to go and find this information somewhere else。 We're
    going to。 go exploring the object model in Python a little bit and find some of
    the Python or some of。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们需要去别处寻找这些信息。我们将稍微探索一下 Python 中的对象模型，并找到一些 Python 或者一些。
- en: '![](img/2ab6e816597749c43b9dfc25876e6523_12.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ab6e816597749c43b9dfc25876e6523_12.png)'
- en: the magic that's in there。 Before we go and find the magic， a little definition
    of what， magic is。 magic in Python is a common way to refer to special methods
    which are also called。 Dunders which is any name and language that both starts
    and ends with a double underscore。 If any name both starts with a double underscore，
    it's reserved by the interpreter even if it's。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在那里有魔法。在我们寻找魔法之前，先定义一下什么是魔法。Python 中的魔法是指特殊方法，这些方法也被称为 Dunders，任何以双下划线开头和结尾的名称都是如此。如果任何名称以双下划线开头，它是由解释器保留的，即使它在屏幕上。
- en: not being used right now。 It's where the interpreter puts all the data and needs
    to run your program。 and keep it out of your way as you're doing your normal job。
    But because it's the only。 place the interpreter has to put its own information。
    it's a great place to look for more information， about running code。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 目前没有被使用。这里是解释器放置所有数据以运行你的程序的地方，并在你正常工作时将其隔离。但因为这是解释器放置自己信息的唯一地方，查看更多关于运行代码的信息是个好地方。
- en: So if we're not going to use the built-in help， is there something， else we
    could use？ Well。 there's another built-in function that we've probably all used
    to。 debug a program which is just print the thing。 Print can take any random object
    and throw。 you a representation of it。 And this works because string actually
    calls a built-in stir。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果我们不打算使用内置的帮助，还有其他可以使用的东西吗？好吧，还有另一个我们可能都用过的内置函数，用于调试程序，就是打印东西。Print 可以接受任何随机对象并给出它的表示。这之所以有效，是因为字符串实际上调用了内置的
    stir。
- en: function on all its arguments which in turn calls our first magic method， DunderStir。
    So。 for any objects you want to print， that object is actually asked to execute
    its DunderStir。 method to give back a string and that's what's displayed to the
    screen。 So we can print a， module。 pickle and it'll tell us its type， its name
    and its file location just like help， is able to do。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对所有参数的函数，依次调用我们的第一个魔法方法，双下划线字符串。因此，对于任何你想要打印的对象，该对象实际上被要求执行其双下划线字符串方法以返回一个字符串，这就是显示在屏幕上的内容。因此，我们可以打印一个模块，pickle，它会告诉我们它的类型、名称和文件位置，就像帮助能够做到的那样。
- en: But since we're on the interactive shell， we could just print the name and type，
    the name instead。 Same data comes out。 This is not because the REPL or the interactive
    shell， prints this object。 It actually uses a different built-in function called
    repper。 Repper looks， the same on the surface。 It takes a random object and returns
    a string to display for， it。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 但是由于我们在交互式shell中，我们可以只打印名称和类型，名称而不是其他。相同的数据输出。这并不是因为REPL或交互式shell打印该对象。它实际上使用了一种不同的内置函数，称为repr。repr在表面上看起来是相同的。它接受一个随机对象并返回一个字符串以显示。
- en: But it has a different mirroring magic method under repper。 In many cases it
    defaults。 to the same string but it can be different than what print， than what
    stir puts out。 And so。 if you're typing a program on the interactive shell and
    you're typing names and then you。 go and make a program that just prints the same
    names， you can get very different output。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 但它在不同的镜像魔法方法下有不同的表示。在许多情况下，它默认与同一字符串相同，但可能与打印和字符串输出的结果不同。因此，如果你在交互式shell中输入程序并输入名称，然后你去制作一个只打印相同名称的程序，你可能会得到非常不同的输出。
- en: on your terminal。 And since both repper and stir can be written by magic methods，
    this。 information that we want， this type and name， aren't completely dependable。
    So we're going。 to go even deeper into the object model and go to the source of
    where did help know where。 these things were and where did string know where they
    were when it used them。 So if we。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的终端上。由于repr和str都可以通过魔法方法编写，因此我们想要的信息，即类型和名称，并不完全可靠。所以我们将更深入地探讨对象模型，追溯帮助是如何知道这些东西的位置，以及字符串在使用它们时是如何知道它们的位置的。因此，如果我们…
- en: go back to the help output， all this information that helped tell us about Pickle
    exists in。 the object。 We just have to go find it。 So we're going to look at some
    dunder attributes。 and recreate this entire text output。 So the type， it knew，
    it helped me that this was a。 module without us telling it。 It stored in the object's
    dunder class。 The name， the canonical。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 回到帮助输出，所有关于Pickle的信息都存在于对象中。我们只需要去查找它。所以我们将查看一些双下划线属性，并重现整个文本输出。因此，类型是它知道的，帮助我了解这是一个模块，而不需要我们告诉它。它存储在对象的双下划线类中。名称是规范的。
- en: name was defined with， is in dunder name。 It's doc string， it stored in dunder
    doc and。 the file it was created by lives in dunder file。 This is part of the
    object model。 After。 help was done with the actual object we passed it， it then
    showed us all the classes。 So。 for any class we want help on， we can find the
    same information inside the class object。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 名称在双下划线名称中定义。它的文档字符串存储在双下划线文档中。创建它的文件位于双下划线文件中。这是对象模型的一部分。在我们与实际对象完成帮助后，我们将其传递，然后它向我们展示了所有类。因此，对于任何我们想要帮助的类，我们可以在类对象内部找到相同的信息。
- en: Its type is in dunder class。 Its name is in dunder name。 Its doc string is in
    dunder， doc。 Now classes don't have files because they belong to modules。 So there's
    no dunder。 file but there's a dunder module。 If we were to go look up that module，
    it would have a。 dunder file and so on。 And then the unique thing to classes is
    that they have inheritance。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 它的类型在双下划线类中。它的名称在双下划线名称中。它的文档字符串在双下划线文档中。现在类没有文件，因为它们属于模块。所以没有双下划线文件，但有双下划线模块。如果我们去查找该模块，它将有一个双下划线文件，等等。类的独特之处在于它们具有继承。
- en: which modules don't。 So we can find the direct parentage of this class through
    dunder bases。 And the method resolution order is also in the MRO。 It's not shown
    by help because it。 thinks for classes simple， it's not very interesting。 After
    it was done with all the， classes。 it then shows all the functions。 There's some
    repetition here。 The type is in， dunder class。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 模块不会如此。因此，我们可以通过双下划线基类找到这个类的直接父类。方法解析顺序也在MRO中。帮助没有显示它，因为它认为对于类而言很简单，不太有趣。在处理完所有类后，它会显示所有函数。这有些重复。类型在双下划线类中。
- en: The name is in dunder name。 The doc string is in dunder doc。 And again， functions。
    belong to modules。 At this point there's only one thing that's unique to a function。
    which is its signature。 How do we actually know how to call this thing at runtime？
    At。 this point you might think there's a dunder signature and we're done。 We've
    finished recreating。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 名称在dunder name中。文档字符串在dunder doc中。而且，函数属于模块。在这一点上，只有一个东西是函数独有的，那就是它的签名。我们如何在运行时知道如何调用这个东西？在这一点上，你可能认为有一个dunder签名，然后我们就完成了。我们已经完成了重新创建。
- en: help。 But in this case it's much more complex。 Python needs to dispatch calls
    to your function。 many， many times during execution， maybe millions of times。
    It wants to be very efficient about。 this。 And the way we write this code is not
    very parsable on the machine。 So we're going。 to have to dig a little extra deep
    to recreate this。 A function， if it's not， a function call。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 帮助。但在这种情况下，它复杂得多。Python需要在执行期间多次调用你的函数，也许是数百万次。它希望在这方面非常高效。而我们编写的代码在机器上不是很易于解析。因此，我们将需要更深入地挖掘以重新创建这一点。如果它不是函数调用。
- en: if it's not empty has parameters。 And those parameters have names。 So that is
    found in。 the dunder code attribute， which is the object representing your code
    compiled for the interpreter。 And inside there is a lot of stuff， but there's
    one very attribute called covar names。 This。 stores all the names of the attributes
    for your function call。 It's actually pretty complex。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不为空，则有参数。这些参数有名称。这些信息在dunder代码属性中找到，它是代表你为解释器编译的代码的对象。里面有很多内容，但有一个非常重要的属性叫做covar
    names。它存储了你函数调用的所有属性名称。实际上，这相当复杂。
- en: It tells you which ones are positional only， which ones can be passed by position
    or keyword。 argument， which ones can only be passed by keyword argument。 But essentially
    it's all。 there if we go and look for it。 After you know how many variables the
    function accepts， we。 want to know which if any of them have defaults and what
    those default values are。 So that。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 它告诉你哪些参数是仅位置参数，哪些参数可以通过位置或关键字传递，哪些只能通过关键字参数传递。但本质上，所有这些内容都在那里，只要我们去寻找。在你知道函数接受多少个变量后，我们想知道它们中是否有默认值，以及这些默认值是什么。
- en: will go back to the loads object and look in standard defaults。 Except for this
    function。 we're going to look in a dunder keywords defaults。 There's two locations
    and you're going to。 have to look in both。 And finally， some of you might have
    noticed we're no longer looking。 at help for the picomodule。 We're looking at
    help for tomolib。 Because this function has， something。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将回到loads对象，查看标准默认值。除了这个函数，我们还要查看dunder关键字默认值。有两个位置，你需要在这两个地方进行查看。最后，有些人可能注意到我们不再查看picomodule的帮助，而是在查看tomolib的帮助。因为这个函数有一些。
- en: nothing in the picomod library does， which are annotations。 This function has
    a。 return annotation and type annotations。 We can pull those out of the objects
    dunder annotations。 So with this we're able to get back all the information help
    had， but in a way we can actually。 store in variables。 But that was kind of a
    lot of rummaging through the object model and having。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: picomod库中没有任何东西，注解就是其中之一。这个函数有返回注解和类型注解。我们可以从对象的dunder注解中提取这些信息。通过这样，我们能够找回帮助中包含的所有信息，但以一种我们实际上可以存储在变量中的方式。但这确实需要在对象模型中进行大量翻找。
- en: to go pretty deep。 And maybe it looks kind of ugly。 Maybe you're hoping there
    is a better。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要深入探讨。也许看起来有点复杂。也许你希望有更好的方法。
- en: '![](img/2ab6e816597749c43b9dfc25876e6523_14.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ab6e816597749c43b9dfc25876e6523_14.png)'
- en: way。 Well， because this is Python， there's not only a better way， but it exists
    in the。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，因为这是Python，不仅存在更好的方法，而且它就在这里。
- en: '![](img/2ab6e816597749c43b9dfc25876e6523_16.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ab6e816597749c43b9dfc25876e6523_16.png)'
- en: standard library。 The inspect module is a module designed to inspect running
    code。 Rather than。 trying to access any of these magic attributes on objects you're
    holding， you can just pass。 the object to a corresponding inspect function。 And
    they're much safer。 They work on more types。 You don't have to do any kind of
    special casing and they cover many more cases。 Each one of。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 标准库。inspect模块是一个旨在检查正在运行的代码的模块。与其尝试访问你所持对象上的任何这些魔法属性，不如将对象传递给相应的inspect函数。这样做更加安全，适用于更多类型。你不必进行任何特殊处理，它们涵盖了更多的情况。每一个。
- en: these functions that can take an object is really a question we're asking of
    something。 we're holding onto。 We want to ask an object， what is your doc string？
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这些可以接受对象的函数实际上是我们对手中某个东西提出的问题。我们想问一个对象，你的文档字符串是什么？
- en: Maybe find more documentation， about it。 Or what file were you to find in？
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 也许找到更多关于它的文档。或者你要在哪个文件中找到它？
- en: What you ask it through inspect will be able， to tell us for any kind of object，
    not just modules。 But some questions are a little nonsense。 We can't ask the number
    one what its signature is。 It doesn't have a signature and it's never， going to
    have a signature。 So some of these questions are a little unsafe and they'll raise。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`inspect`你问它的内容，可以告诉我们任何类型的对象，而不仅仅是模块。但有些问题有点无厘头。我们不能问数字一它的签名是什么。它没有签名，永远不会有签名。所以这些问题中的一些是有点不安全的，它们会引发错误。
- en: exceptions even using the inspect module。 So we know how to ask the questions
    but maybe。 rather than just wrapping all these questions in some very broad try
    accepts， we could be。 a little more specific of when we ask them。 We could know
    that， do that if we knew what。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 异常，甚至使用`inspect`模块。所以我们知道如何提出问题，但也许，不只是将所有这些问题包裹在一些非常广泛的`try`和`except`中，我们可以在询问时更加具体。如果我们知道怎么做。
- en: '![](img/2ab6e816597749c43b9dfc25876e6523_18.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ab6e816597749c43b9dfc25876e6523_18.png)'
- en: the heck the object was before we started asking questions。 So only functions
    are going。 to have signatures but integers aren't。 Maybe we want to know where
    a module came from but。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始提问之前，搞清楚对象到底是什么。因此，只有函数会有签名，而整数不会。也许我们想知道一个模块来自哪里，但。
- en: '![](img/2ab6e816597749c43b9dfc25876e6523_20.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ab6e816597749c43b9dfc25876e6523_20.png)'
- en: maybe we don't care for some string。 So there's some built in functions to help
    with this。 There's the type， very basic。 You pass an object and it tells you the
    type。 But unlike。 all the other questions we've been asking of our object so far，
    type is a question you。 will always get an answer to in Python。 Not something
    you can save many objects in a dynamic language。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 也许我们对某些字符串不感兴趣。所以有一些内置函数可以帮助我们。`type`，非常基础。你传递一个对象，它会告诉你类型。但不同于到目前为止我们对对象提出的所有其他问题，`type`是一个你在Python中总会得到答案的问题。这并不是你可以在动态语言中保存许多对象的事情。
- en: but there's because Python is an object oriented language and everything's an
    object。 Everything。 has a type。 So if you ask what the type of picolas it says
    it's the class module because。 everything is an object under the covers of Python。
    Even modules are just classes。 A little。 dressed up。 There's only one other question
    that's always safe to ask of anything in Python。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 但是因为Python是一个面向对象的语言，一切都是对象。每个对象都有一个类型。所以如果你问`picolas`的类型，它会说是类模块，因为在Python的底层，一切都是对象。甚至模块也只是类，只是稍微装饰了一下。还有一个在Python中总是安全询问的其他问题。
- en: and expect an answer and that's what is your ID。 Not nearly as interesting as
    what is your。 type but you will always get a unique answer per object。 Everything
    else is kind of up。 for grabs if it actually exists on the object。 Another great
    built in function is callable。 So things that are callable have a signature and
    we probably want to call them before investigating。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 并期待一个答案，那就是你的ID是什么。这并没有`type`那么有趣，但你每个对象总会得到一个唯一的答案。其他的则有点随意，取决于对象上是否实际存在。另一个很棒的内置函数是`callable`。可调用的东西都有一个签名，我们可能希望在调查之前先调用它们。
- en: them further。 If they're not callable then they're probably a value that we
    should start。 poking at right now。 But what things are callable？ Type could tell
    us this if we really wanted。 to go through trouble of it but there's more than
    one thing that's callable。 Not just functions。 but classes and instances of classes
    under certain circumstances and generators are callable。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步了解它们。如果它们不可调用，那它们可能是一个我们现在应该开始探究的值。那么，哪些东西是可调用的呢？如果我们真的想去麻烦一下，`type`可以告诉我们，但可调用的东西不止一个。不仅仅是函数，还有类和在特定情况下的类实例，以及生成器都是可调用的。
- en: but not everything。 So this is just a quick answer to know whether you should
    go looking。 for a signature or not。 And there's also the instance and sub class
    built-ins to know if。 something you're holding has a class and it's inheritance
    tree。 These are over rideable。 by magic methods in much the same way that print
    and repper were。 Now you might wonder。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 但并不是所有的。这只是一个快速的回答，以帮助你判断是否应该去寻找一个签名。还有实例和子类内置函数，可以知道你手中的某个东西是否有一个类及其继承树。这些都可以通过魔法方法进行重写，和`print`和`repr`的方式类似。现在你可能会想。
- en: why Python allows classes to override their definition of inheritance at runtime
    why Python。 just doesn't reach into the definition of the class。 There's a very
    useful implementation。 of this in the standard library。 The abstract base classes
    module or the ABC is a collection。 of classes that represent interfaces expected
    across different parts of Python。 So there's。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么 Python 允许类在运行时覆盖其继承定义，为什么 Python 不会直接访问类的定义。在标准库中有一个非常有用的实现。抽象基类模块或 ABC
    是一组表示 Python 不同部分所期望接口的类。
- en: the iterable protocol for things that can be looped over the sequence protocol
    for things。 that can be walked and indexed by number。 There's a mapping protocol
    which are things。 that can give you values based on keys rather than attributes。
    And Python has concrete implementations， of each of these types。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 可迭代协议用于可以循环的东西，序列协议用于可以按数字遍历和索引的东西。有一个映射协议，允许基于键而非属性提供值的东西。而 Python 对这些类型都有具体实现。
- en: There's lists and ranges and dicks but you can make your own。 and they work
    perfectly well in just about any Python code without having to inherit from。 a
    list or a deck。 You just have to have the right shape of a class。 So if you ask
    is。 instance list you'll know whether it's sub classes list or not but you won't
    necessarily。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 有列表、范围和字典，但你可以创建自己的，它们在几乎所有 Python 代码中都能很好地工作，而不必从列表或字典中继承。你只需要拥有正确形状的类。因此，如果你问是否是实例列表，你将知道它是否是列表的子类，但你不一定。
- en: know if it's indexable。 But if you ask the abstract base class sequence is this
    thing。 like sequence it will say yeah that thing quacks like a list even if it
    doesn't inherit。 from list or the ABC sequence。 So it'll give you the right answer
    you know that this thing。 can be used for looping or for key access。 So with that
    we know when to ask our questions。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 知道它是否可以索引。但如果你问抽象基类序列这个东西。像序列一样，它会说是的，那东西就像一个列表，即使它并不从列表或 ABC 序列继承。因此，它会给你正确的答案，你知道这个东西可以用于循环或键访问。因此，通过这一点我们知道什么时候该提出问题。
- en: and we know how to ask our questions we've pretty much recreated all that help
    could。 do for us except for one thing which is that when we ask help about the
    pickle module help。 told us about pickle was docstring was what file it came out
    of but also went through。 and told us every class that was defined under pickle
    and for every class it told us every。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道如何提出问题，我们几乎重建了帮助能为我们做的所有事情，除了一个，就是当我们询问关于 pickle 模块的帮助时，帮助告诉我们的 pickle 的文档字符串是它来自哪个文件，但也遍历了所有在
    pickle 下定义的类，并且对于每个类，它告诉我们每个。
- en: method that was defined on that class even though we had no idea what any of
    those names， were。 So how did help even know what the heck it was calling for
    help。 In our original example。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们对那些名字毫无概念，仍然在该类上定义了方法。那么，帮助到底是如何知道它在调用什么的呢？在我们最初的示例中。
- en: '![](img/2ab6e816597749c43b9dfc25876e6523_22.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ab6e816597749c43b9dfc25876e6523_22.png)'
- en: we just typed out help and we hit tab because we were in the actor shell and
    we got this。 weird name pickle so we tried but in a run program you can't just
    hit tab to get some。 new variable names。 So there's going to be some more built-in
    functions to help with this。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需输入帮助并按下 tab，因为我们在演员 shell 中，这样我们得到了这个奇怪的名称 pickle，所以我们尝试，但在运行程序时，你不能仅仅按
    tab 来获取一些新的变量名。因此，将会有一些内置函数来帮助实现这一点。
- en: '![](img/2ab6e816597749c43b9dfc25876e6523_24.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ab6e816597749c43b9dfc25876e6523_24.png)'
- en: First up VARS is going to return a mapping of names two values for the object
    you pass。 in so you pass it an object it tells you the names that are attributes
    and what their values。 are currently。 If you pass no arguments you get the same
    for the local scope。 VARS actually。 provides access to the magic attribute dict
    which is a private dictionary that actually。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，VARS 将返回你传递的对象的名称到值的映射。你传递一个对象，它会告诉你属性的名称及其当前值。如果不传递参数，则会返回本地作用域的相同内容。VARS
    实际上提供了对魔术属性 dict 的访问，这是一个实际支持 Python 中对象属性访问的私有字典。
- en: is what supports attribute access on objects in Python。 So VARS is very literal
    you ask。 it what are the variables for this object and it tells you but it doesn't
    try to tell。 you anything that would resolve for a dot name look up。 So Python
    won't just stop at looking。 in the dict of an object when you're trying to attribute
    access。 If it doesn't find it。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 所以 VARS 非常字面，你询问它这个对象的变量是什么，它会告诉你，但它不会试图告诉你任何关于点名查找的解析内容。因此，当你尝试访问属性时，Python
    不会仅仅停留在查找对象的字典中。如果找不到。
- en: there it might go looking elsewhere。 If it's not in locals maybe it'll try the
    outer scope。 and it's not there maybe it'll try globals。 If it's not in this class
    maybe it'll try。 the parents and that could work。 VARS won't do that it's very
    literal and it just tells。 you the objects that the names that would definitely
    resolve for a certain object。 Some。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不存在，它可能会去别处查找。如果在局部中找不到，它可能会尝试外部作用域。如果那里也没有，它可能会尝试全局作用域。如果在这个类中找不到，它可能会尝试父类，这可能会奏效。VARS不会这样做，它非常字面，只会告诉你某个对象会确切解析的名称。
- en: helpers for VARS there's also locals and globals which provide the same thing
    dictionary。 mapping for the local scope or the global scope。 But if these aren't
    enough there's， der。 Der tries to be very helpful。 Instead of returning a mapping
    it's returning just a。 list of names but it does it's very best to walk the inheritance
    tree of a class to look。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: VARS的助手，还有locals和globals，它们提供相同的字典映射，用于局部作用域或全局作用域。但如果这些还不够，der会尝试非常有帮助。它不是返回映射，而是返回一个名称列表，但它会尽力遍历一个类的继承树进行查找。
- en: in the class of an instance for you and find all the names that would resolve
    if you actually。 try to go and find them。 And it's supported by a magic method
    under der。 So it doesn't。 get everything it's really hard to get everything in
    a dynamic language but it tries really hard。 and it gets there most of the time。
    And our favorite new standard library module inspect。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在实例的类中查找所有会解析的名称。如果你真的去尝试找到它们，这都是通过一个魔法方法支持的。因此，它并不会获取所有内容，在动态语言中，获取所有内容真的很困难，但它会尽力而为，而且大部分时候都能做到。而我们最喜欢的新标准库模块是inspect。
- en: also has a solution to this problem。 If you pass an object to get members it
    will kind。 of do the best of both worlds it will turn you names and their current
    values both for。 the current object and for other names that would resolve for
    instance through inheritance。 But it's not a built-in and also it doesn't work
    with no arguments so it doesn't work。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这也有解决这个问题的方法。如果你将一个对象传递给get members，它会尽力结合两者的优点，返回你名称及其当前值，这些值既适用于当前对象，也适用于通过继承解析的其他名称。但这不是内置的，也不支持无参数调用，所以它无法工作。
- en: on locals or global scope。 Two more built-in functions has added get adder。
    These are no。 use if you don't know what you're asking about because you have
    to pass the name you're checking。 But they're the most precise because they go
    through all the same steps that a dot attribute。 access goes through。 If you ask
    the question is this exist on this object you will get the。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 关于局部或全局作用域，还有两个内置函数增加了get adder。如果你不知道自己在询问什么，它们是没有用的，因为你必须传递你正在检查的名称。但它们是最精确的，因为它们会经历与点属性访问相同的步骤。如果你问这个对象上是否存在这个，您将会得到结果。
- en: real definitive answer。 So I hope that you realize that Python is not really
    trying to。 keep anything secret from you。 The only reason these magic methods
    are hidden is to stay out。 of your way and so that you don't accidentally use
    them in your day-to-day programming。 There's。 no real risk in looking at them。
    If you're really afraid just when you're in the interactive。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 真实的明确答案。所以我希望你意识到，Python并不是在对你隐瞒什么。这些魔法方法被隐藏的唯一原因是为了不妨碍你，让你在日常编程中不会意外使用它们。查看它们并没有真正的风险。如果你真的害怕，就在交互式环境中查看它们。
- en: interpreter not a mission critical application just look at it。 There's no harm
    you can even。 change it you're not going to bring down your computer you're not
    going to kill Python。 And I hope you go out of here and are not afraid to ask
    questions of your objects。 Thanks。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 解释器不是关键任务应用程序，只需查看它。没有任何害处，你甚至可以更改它，你不会让计算机崩溃，也不会杀死Python。我希望你能走出这里，不要害怕询问你的对象。谢谢。
- en: '![](img/2ab6e816597749c43b9dfc25876e6523_26.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ab6e816597749c43b9dfc25876e6523_26.png)'
- en: for your coming。 Thanks a lot for the great presentation。 Any questions？ Yes。
    See one？
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢你的到来。非常感谢精彩的演讲。有任何问题吗？是的，看到一个？
- en: The question was why would you want override is subclass and is instance。 And
    I was trying。 to answer that with the ABC module。 So in the ABC module there is
    several classes but one。 of them is for instance sequence。 And sequence when is
    asked if it is a super class or super。 instance of an object doesn't look in the
    inheritance tree it looks for certain methods。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 问题是，为什么你想要覆盖子类和实例。我试图用ABC模块回答这个问题。在ABC模块中有几个类，其中一个是序列。当被询问是否是某个对象的超类或超实例时，序列不会查看继承树，而是寻找某些方法。
- en: that would be used by protocols in Python on the specific object。 So for sequence
    it doesn't。 look if list is in the inheritance tree it goes and checks if under
    index which is the。 special magic method as called when you square brackets is
    implemented for that class because。 that's all that's required for indexing and
    a few others。 So it looks for inheritance。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这将由Python中的协议在特定对象上使用。因此，对于序列来说，它并不……查看列表是否在继承树中，它会检查是否在索引下，这是当你为该类实现方括号时调用的特殊魔法方法，因为这就是索引所需的一切，还有其他一些方法。因此，它会查找继承。
- en: through ways other than the bases which we saw at the very beginning。 Any other
    questions？
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 通过我们一开始看到的基础以外的方式。还有其他问题吗？
- en: Thank you all for coming out and enjoy your night。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢大家的到来，祝你们晚上愉快。
- en: '![](img/2ab6e816597749c43b9dfc25876e6523_28.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ab6e816597749c43b9dfc25876e6523_28.png)'
