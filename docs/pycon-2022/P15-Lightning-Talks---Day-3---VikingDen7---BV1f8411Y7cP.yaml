- en: P15：Lightning Talks - Day 3 - VikingDen7 - BV1f8411Y7cP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P15：闪电演讲 - 第三天 - VikingDen7 - BV1f8411Y7cP
- en: \>\> Hey， everybody。 Good morning。 It's 8 a。m。 And what does that mean？ Do you
    know what。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: \>\> 嘿，大家好。早上好。现在是早上8点。这意味着什么？你知道这意味着什么吗？
- en: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_1.png)'
- en: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_2.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_2.png)'
- en: that means？ \>\> I don't know。 What does it mean， Dustin？
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: \>\> 我不知道。这意味着什么，达斯汀？
- en: \>\> I think it means we should start lightning， dogs。 Okay。 So first up， we
    have Pandy。 Who's。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: \>\> 我认为这意味着我们应该开始闪电，狗。好的。那么首先，我们有Pandy。谁是。
- en: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_4.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_4.png)'
- en: going to talk to us about？ I can't see the slide。 How to write a test case，
    of course。 My name is Pandy Knight and I'm the automation panda。 I'm a developer
    advocate at Apple tools。 and director of test automation university。 Today， I'm
    going to show you a simple but powerful。 technique for writing test cases like
    a pro。 First， let's define testing。 Testing is interaction。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 会告诉我们什么？我看不到幻灯片。如何编写测试用例，当然。我的名字是Pandy Knight，我是自动化熊猫。我是Apple工具的开发者倡导者，也是测试自动化大学的主任。今天，我将向您展示一种简单但强大的技术，以专业的方式编写测试用例。首先，让我们定义测试。测试是交互。
- en: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_6.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_6.png)'
- en: plus verification。 That's it。 You do something and you make sure it works。 A
    test case is。 a procedure for making those interactions and verifications。 There
    are several kinds of。 tests like unit tests， integration tests or end-to-end tests。
    But all functional tests。 do the same basic thing。 They try something and report
    pass or fail。 That's how testing。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 加上验证。就是这样。你做某事，然后确保它有效。测试用例是进行这些交互和验证的过程。有几种测试类型，如单元测试、集成测试或端到端测试。但所有功能测试都做同样的基本事情。它们尝试某事并报告通过或失败。这就是测试。
- en: keeps us safe。 Testing provides an empirical feedback loop for development。
    With tests。 we know when things break。 Without tests， coding can be dangerous。
    The last thing we want to。 deploy are big old bugs。 So， if we intend to spend
    time writing tests， how can we write， good tests？
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 测试确保我们的安全。测试为开发提供了一个经验反馈循环。有了测试，我们知道何时出现问题。没有测试，编码可能是危险的。我们最不希望部署的是大旧错误。因此，如果我们打算花时间编写测试，我们该如何编写好的测试呢？
- en: There's a simple but powerful pattern I like to follow。 Arrange， act， assert。
    Arrange， act。 assert is a great way to structure your test cases。 It prescribes
    an order of operations。 First。 arrange inputs and targets。 Arrange steps should
    set up the test case。 Does the。 test require any objects or special settings？
    Does it need to prep a database？ Does it need。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢遵循一个简单但强大的模式。安排-行为-断言。安排-行为-断言是结构化测试用例的好方法。它规定了操作顺序。首先，安排输入和目标。安排步骤应设置测试用例。测试是否需要任何对象或特殊设置？是否需要准备数据库？是否需要。
- en: to log into a web app？ Handle all these operations at the start of the test。
    Second， act on the。 target behavior。 Act steps should cover the main thing to
    be tested。 This could be calling。 a function or method， calling a REST API or
    interacting with a web page or anything else。 you need to do。 Keep actions focused
    on the target behavior。 Third， assert expected outcomes。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如何登录一个网络应用？在测试开始时处理所有这些操作。其次，针对目标行为进行操作。操作步骤应覆盖主要测试内容。这可能是调用函数或方法，调用REST API或与网页交互或其他任何需要进行的操作。保持操作集中于目标行为。第三，验证预期结果。
- en: Act steps should elicit some sort of response。 Assert steps verify the goodness
    or badness。 of that response。 Sometimes assertions are as simple as checking numbers
    or string values。 but other times they may require checking multiple facets of
    a system or using something。 like visual snapshots。 Assertions will ultimately
    determine if the test passes or fails。 You。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 行为步骤应该引发某种反应。断言步骤验证该反应的好坏。有时断言简单得只需检查数字或字符串值，但有时可能需要检查系统的多个方面或使用一些像视觉快照的东西。断言最终将决定测试是通过还是失败。你。
- en: may have seen a range act assert in a different way。 Gherkins given when then
    format from。 BDD is the same thing as a range act assert just with different words。
    So here's a basic。 unit test for Python's absolute value function。 I wrote this
    using PyTest。 This test may seem。 trivial， but we can use it to illustrate our
    pattern。 The arrange step creates a variable。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 可能以不同方式看到范围-行为-断言。给定的Gherkin的“当-然后-那”格式与范围-行为-断言相同，只是用不同的词。因此，这里是一个用于Python绝对值函数的基本单元测试。我使用PyTest编写了这个测试。这个测试可能看起来微不足道，但我们可以用它来说明我们的模式。安排步骤创建一个变量。
- en: named negative for testing。 The act step calls the abs function using the negative
    variable。 and stores the return value in a variable named answer。 And the assert
    step verifies that。 answer is a positive value。 I like to write comments to noting
    each phase of the test case， as well。 Let's kick it up a notch with a more complicated
    test。 The example test -- this。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个被称为“负数”的测试。动作步骤调用了abs函数，使用负数变量，并将返回值存储在一个名为answer的变量中。断言步骤验证answer是一个正值。我也喜欢写注释来记录测试用例的每个阶段。让我们用一个更复杂的测试提升一下难度。这个示例测试——这个。
- en: example test -- the DuckDuckGo instant answer API using the requests package
    that I'm sure。 many of you have used。 The arrange step forms an endpoint URL for
    searching for Python programming。 Notice the base URL and query parameters。 The
    act steps call the API using the URL with requests。 and then parse the response
    body from JSON into a Python dictionary。 The assert steps。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 示例测试——使用requests包的DuckDuckGo即时答案API，我相信许多人都用过。安排步骤形成一个用于搜索Python编程的端点URL。注意基本URL和查询参数。动作步骤使用requests通过该URL调用API，然后将响应主体从JSON解析为Python字典。断言步骤。
- en: then verify the HTTP status code was 200， meaning okay or success。 And the word
    Python。 appears somewhere in the response's abstract text。 We can clearly see
    that a range act。 to serve works for both unit tests and feature tests。 So why
    should we use a range act to， serve？
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然后验证HTTP状态码为200，表示正常或成功。而单词Python出现在响应的摘要文本中。我们可以清楚地看到，范围操作在单元测试和功能测试中都适用。那么，为什么我们应该使用范围操作来服务呢？
- en: It makes each test focus on an individual behavior independently。 If a test
    fails， you'll。 know the reason clearly。 Remember， simple is better than complex。
    So thank you for listening。 to my lightning talk。 Again， I'm the automation panda。
    If you want to learn more about testing。 and automation， check out test automation
    university。 We've got about 70 courses for free。 And I'll。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 每个测试都独立关注一个个体行为。如果测试失败，你会清楚地知道原因。记住，简单胜于复杂。所以感谢你倾听我的闪电演讲。再次，我是自动化熊猫。如果你想了解更多关于测试和自动化的内容，可以查看测试自动化大学。我们有大约70门免费课程。我将会。
- en: see you today at 145 for my talk managing the test data nightmare。 Thank you。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 今天下午1:45见，听我的演讲《管理测试数据噩梦》。谢谢。
- en: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_8.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_8.png)'
- en: '[ Applause ]， \>\> Excellent。 Thank you so much。 Up next we have Shreya。'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[掌声]， >> 非常好。非常感谢。接下来是Shreya。'
- en: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_10.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_10.png)'
- en: \>\> Thank you。 Hi everyone。 I'm Shreya and I'm a product manager at Microsoft。
    Today。 I'm going to talk to you all about computational thinking and the potential
    effects of incorporating。 it into school curriculums。 So when I was in the fourth
    grade， I had to figure out what。 day it would be 100 days from Tuesday。 So to
    come up with my answer， I wrote on a page。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '>> 谢谢。大家好。我是Shreya，我是微软的产品经理。今天，我将和大家谈谈计算思维及其纳入学校课程的潜在影响。当我在四年级时，我需要计算从星期二起的100天后是星期几。为了得出我的答案，我在一页纸上写下。'
- en: the day's Sunday， Monday， Tuesday， Wednesday and so on until I filled a whole
    sheet of paper。 and then I counted from one to 100。 And I did this about three
    times because I really。 really wanted to make sure that I got the right answer。
    In contrast， today， if I find myself。 repeating the same task even once， I think
    to myself， you know， there must be a better， way。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 那天是星期日、星期一、星期二、星期三，依此类推，直到我填满整张纸。然后我从1数到100。我这样做了大约三次，因为我真的非常想确保我得到了正确的答案。相反，今天，如果我发现自己重复同样的任务，即使是一次，我会想，肯定有更好的方法。
- en: Like I could probably automate this or something could be different here to
    make。 this a more streamlined workflow。 But this kind of reasoning can also be
    classified as。 pattern recognition and this reasoning should be taught to students
    in all disciplines across。 all curriculums because it can really change the way
    we solve and analyze problems。 So what。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我可能可以自动化这个，或者这里可以做一些不同的事情，使这个工作流程更加高效。但这种推理也可以归类为模式识别，这种推理应该在所有学科的学生中教授，因为它可以真正改变我们解决和分析问题的方式。那么。
- en: is computational thinking？ The way I like to think about computational thinking
    is that。 it's computer science concepts at their very core。 So it's the ideas
    behind inventing effective。 solutions but with no regards to the syntax or the
    structure of writing the actual code。 So thinking contains four main components。
    Decomposition， pattern recognition， abstraction。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是计算思维？我喜欢将计算思维理解为计算机科学概念的核心。因此，它是创造有效解决方案背后的理念，但不考虑实际编写代码的语法或结构。计算思维包含四个主要组件：分解、模式识别、抽象。
- en: and algorithm design。 These concepts directly play a role in computer science
    but they also。 have a lot of value across all other disciplines as well as real
    world scenarios。 So when each。 of you got here to this convention center at some
    point or another， it's probably likely。 that you had to go out of your way to
    find a room for a talk。 For me to find this room。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以及算法设计。这些概念直接在计算机科学中发挥作用，但它们在所有其他学科以及现实世界的场景中也有很大价值。因此，当你们每个人来到这个会议中心时，在某个时刻或另一个时刻，你们可能都不得不特意去寻找一个讲座的房间。对于我来说，找到这个房间。
- en: I went through the following steps。 First， I looked around， are there any signs
    to the。 room and if so perfect， I found it。 And if not， I picked a random direction
    to walk in and。 went back to stop one。 And I kept repeating this process over
    and over again until I found。 the room。 So what I want to explain here is that
    without even knowing it， without even。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我经历了以下步骤。首先，我环顾四周，看看房间里是否有任何指示，如果有，那就太好了，我找到了。如果没有，我就随机选择一个方向走，然后回到第一站。我不断重复这个过程，直到我找到了房间。所以我想解释的是，甚至在不知道的情况下，甚至在没有意识到的情况下。
- en: thinking about it， I was using decomposition for so many different scenarios
    this weekend。 by calling out my thought process， I can now optimize for better
    results and also carry。 over this logic to other aspects of my life。 So you might
    be thinking now why focus on computational。 thinking， right？ Why don't we just
    teach everyone how to code especially because we've had really。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 想到这一点，这个周末我在许多不同的场景中使用了分解法。通过阐明我的思维过程，我现在可以优化以获得更好的结果，并且将这种逻辑延伸到我生活的其他方面。所以你可能会想，为什么要关注计算思维，对吧？为什么我们不教每个人如何编程，尤其是因为我们看到很多年轻学生能够成功掌握它。
- en: good results with Python which is an excellent introductory language and we've
    seen how young。 students are able to successfully pick it up。 So I really want
    to emphasize that my proposition。 is not that we replace teaching code with teaching
    computational thinking。 Rather， I feel that。 computational thinking is a really
    solid precursor before we teach coding。 And I feel like given。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Python取得良好的结果，它是一种优秀的入门语言，我们已经看到年轻学生能够成功掌握。因此，我想强调我的建议不是用教授计算思维来替代教授编码。相反，我认为计算思维在教授编码之前是一个非常稳固的前奏。我感觉考虑到。
- en: the educational resource constraints that do exist across the world and they
    do contribute。 to the barrier in entry when it comes to development， I think computational
    thinking is a great way。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 世界各地确实存在的教育资源限制确实对发展构成了障碍，我认为计算思维是一个很好的方法。
- en: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_12.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_12.png)'
- en: to start。 Especially because we don't have to make a new class for computational
    thinking。 So it's not like you're adding a subject to coursework and nothing like
    that。 It's really。 actually just adding material to existing curriculums and reframing
    different conversations。 to make them more computational thinking base。 So when
    I talked about finding the room earlier。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 开始。尤其是因为我们不需要为计算思维开设一门新课。所以这并不是说你在课程中添加一个科目，完全不是。这实际上只是向现有课程添加材料，并重新框定不同的对话，使其更具计算思维基础。因此，当我早些时候谈到找到房间时。
- en: this weekend or this week， all of you probably thought， well yeah， I did that
    too， right？
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这个周末或这个星期，你们所有人可能都想，嗯，是的，我也这样做过，对吧？
- en: I somehow found the rooms that I went to。 And my point is you didn't do anything
    new because。 I talked about that。 It's just that you looked at it in a different
    way。 You framed how maybe。 you see that same problem。 So in that same theme， I
    feel that computational thinking should。 really lie beneath lesson plans and change
    the perspective in which the next generations。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我不知怎么的找到了我去的房间。我的观点是你并没有做任何新事物，因为我谈论过这个。只是你以不同的方式看待它。你框定了或许你如何看待同样的问题。因此，在同样的主题下，我认为计算思维应该真正融入课程计划，改变下一代的视角。
- en: can solve and analyze problems。 As you go on for the rest of the day and perhaps
    the rest。 of the week， I encourage you to think about what medial tasks that you're
    completing and。 what if any component of computational thinking they might fall
    into。 With that， thank you。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 可以解决和分析问题。在接下来的日子里，我鼓励你思考你完成的中介任务，以及它们是否与计算思维的某个组成部分相关。谢谢。
- en: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_14.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_14.png)'
- en: all so much for listening。 If you want to discuss further or have any questions，
    please。 feel free to reach out to me。 Thank you。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 非常感谢大家的聆听。如果你想进一步讨论或有任何问题，请随时与我联系。谢谢。
- en: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_16.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_16.png)'
- en: All right。 Next up， we have Patrick who's going to talk to us about latest。cat。
    Okay。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，接下来是 Patrick，他将和我们谈谈 latest.cat。好的。
- en: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_18.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_18.png)'
- en: let's see what it is。 Let's talk about getting around applause。 Hello， everyone。
    Today I wanted to show you a tool that's been building for a couple of。 weeks
    and I never showed anyone to be honest， but I think it's quite useful。 So my issue。
    was that every time I wanted to install the latest version of Python or the latest
    version， of 3。7。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它是什么。让我们谈谈获取掌声。大家好。今天我想展示一个我几周来构建的工具，老实说我从未向任何人展示过，但我认为它相当有用。我的问题是，每次我想安装最新版本的
    Python 或最新的 3.7 版本时。
- en: I was having to go to Python。org， then try to find it maybe in the homepage，
    then。 you had to find a couple of steps to go and just find the version and then
    putting into。 your favorite tool for installing Python。 So I built this tool that's
    called latest。cat。 where you can write the software name， which works with a couple
    of languages at the moment。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我之前需要去 Python.org，然后在主页上寻找，接着需要经历几个步骤找到版本，然后把它放入你喜欢的安装 Python 的工具。所以我创建了一个叫
    latest.cat 的工具，你可以在这里输入软件名称，目前支持几种语言。
- en: but can improve。 So you type it and then it gives you the， basically a delete
    version。 for the Python that you want to check and it should work also for 3。6，
    but that works。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 但可以改进。所以你输入它，然后它会给你你想要检查的 Python 的基本删除版本，应该也适用于 3.6，但那也可以。
- en: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_20.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_20.png)'
- en: on command line。 I'm going to show you an example now。 So， you know， make this
    quick。 demo here that you can use it using Kerbs。 So you can do Kerls-s Python
    and then it loads。 the latest by the version。 Also works with other tools like
    Node。js and it also works。 for some reason with SSH， which I think is quite cool。
    It was just fun to do。 There's。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令行上。我现在要给你展示一个示例。所以，你知道，做一个快速的演示，你可以使用 Kerls。你可以输入 Kerls-s Python，然后它会加载最新的版本。也支持其他工具，比如
    Node.js，奇怪的是它也能用于 SSH，这我觉得很酷。做这个挺有趣的。
- en: going to be a demo for that in a second。 This is probably useless， but it was
    fun to， do。 Yeah。 and hopefully it's going to be useful for any of you。 It's open
    source so you can。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 等一下会有这个的演示。这可能没什么用，但做这个挺有趣的。希望对你们中的任何人都有帮助。它是开源的，你可以。
- en: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_22.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_22.png)'
- en: add additional languages by going here。 Software， software， YAML， it works with
    Python， PHP， Rust。 and other things。 And yeah， if you need something like this，
    if you need other tools， you just。 send a request and happy to merge it。 Yeah，
    and that's me。 That's not my cat， but this。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里添加其他语言。软件，软件，YAML，支持 Python，PHP，Rust 和其他一些东西。如果你需要这样的工具，或者需要其他工具，只需发送请求，我很乐意合并。是的，这就是我。这不是我的猫，但这是。
- en: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_24.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_24.png)'
- en: is my cat。 Thank you。 [ Applause ]。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 是我的猫。谢谢。[掌声]。
- en: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_26.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_26.png)'
- en: I am a huge cat person， so that makes me very happy。 Up next we have Ray。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我是个超级爱猫的人，这让我非常开心。接下来是 Ray。
- en: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_28.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_28.png)'
- en: Hi， I'm Ray from Data Science Rebalanced。 We make data science tutorials to
    help bridge。 the gap between academia and industry。 Today we'll talk about behavior-driven
    machine learning。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 嗨，我是来自 Data Science Rebalanced 的 Ray。我们制作数据科学教程，以帮助弥合学术界和行业之间的差距。今天我们将讨论行为驱动的机器学习。
- en: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_30.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_30.png)'
- en: So let's say you want to build a machine learning model。 You're going to need
    some data， push。 it through a training pipeline， and ultimately end up with model
    parameters。 So how was I。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想建立一个机器学习模型。你需要一些数据，将其推送通过训练流程，最终得到模型参数。那么我当时是怎么做的呢？
- en: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_32.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_32.png)'
- en: taught to do this in school？ I was usually given a data set。 Let's call it a
    binary classification。 The two colors here represent the two classes。 And I would
    be taught to use all of the data。 available。 Split it into a train test split。
    But not all data is actually equal。 If I look。 at this data set， some of this
    data is more important than the rest。 This data in particular。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在学校教我这样做？我通常会得到一个数据集。我们称之为二元分类。这两个颜色代表两个类别。我会被教导使用所有可用的数据。将其拆分为训练集和测试集。但并不是所有数据都是平等的。如果我查看这个数据集，其中一些数据比其他数据更重要。尤其是这部分数据。
- en: So how would I do it now that I'm in an industry？ Well。 I would think of my
    data set as a collection， of behaviors。 and I want to iteratively find all of
    the behaviors that are important from， my data set。 If I look at this data set，
    you might think， well， just take a random sample。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我现在在行业中会如何处理呢？我会将我的数据集视为一种行为的集合。我想要迭代地从我的数据集中找到所有重要的行为。如果我查看这个数据集，你可能会认为，嗯，随机抽样一下就行。
- en: but there's an issue with random sampling。 It actually can lead to increased
    bias。 For， example。 if I have a certain portion of my space where there's a dense
    amount of data， points。 if I randomly sample， that portion of the space will be
    overrepresented， therefore， producing bias。 As such， I actually want to take a
    clustering approach and then randomly， sample， let's say。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 但随机抽样存在一个问题。它实际上可能导致偏见增加。例如。如果我在某个空间的特定部分有密集的数据点。如果我随机抽样，该空间的那部分将被过度代表，从而产生偏见。因此，我实际上想采用聚类方法，然后随机抽样，假设。
- en: three data points from each one of my clusters。 Represented by the。 three green
    dots in each cluster here。 Those green dots represent my initial training set。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 每个聚类中各取三个数据点。由这三个绿色点表示。这些绿色点代表我的初始训练集。
- en: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_34.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_34.png)'
- en: that I build a model with。 Now， if my model is represented by this red line，
    my model。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我构建的模型。如果我的模型由这条红线表示，那么我的模型。
- en: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_36.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_36.png)'
- en: thinks everything above the line should be a blue dot and everything below it
    should。 be an orange dot。 But clearly， it's got a few things off。 So how do I
    correct this？ Well。 that red line also happens to be the area where my model is
    confused。 In binary， classification。 this would be a 50% confidence score。 And
    so I want to select items that are。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 认为线上的所有东西应该是蓝点，而线下的应该是橙点。但显然，它有一些错误。那么我该如何纠正呢？这条红线也恰好是我的模型困惑的区域。在二元分类中，这将是50%的置信度分数。所以我想选择那些项目。
- en: around that 50% confidence score and add them to my original green dot training
    set。 So。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在大约50%的置信度分数附近添加它们到我原来的绿色点训练集中。
- en: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_38.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_38.png)'
- en: now I have a larger data set， slightly larger， and I build a new model。 I go
    from my first。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我有了一个稍微更大的数据集，我构建了一个新模型。我从我的第一个。
- en: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_40.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_40.png)'
- en: model to my second model。 That's a little bit better。 But I can repeat this
    process again。 with my second model， grabbing data points near 50% confidence，
    slapping them into a training。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 模型转到我的第二个模型。那稍微好一点。但我可以再次重复这个过程。用我的第二个模型，抓取接近50%置信度的数据点，放入训练中。
- en: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_42.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_42.png)'
- en: set and going ahead and going from my second model onto a third model。 But what
    does this。 actually mean in the real world？ I'm probably going to actually run
    this process about 100。 times every time adding extra data onto my data set。 And
    what each dot represents is。 a newly trained model。 So my performance metric will
    improve。 And at some point， it。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 设置并继续从我的第二个模型转到第三个模型。但这在现实中实际意味着什么？我可能会实际运行这个过程大约100次，每次在我的数据集中添加额外的数据。每个点代表的是一个新训练的模型。因此我的性能指标会提高。在某个时刻，它。
- en: will actually top out。 And after that， as I add more data， I'm actually going
    to get。 worse performing models。 So what does this end up buying us？ A few things。
    First， if I。 have a labeled data set， I can actually build the best model possible，
    which probably isn't。 the one that uses all of my data。 If I have an unlabeled
    data set， I can save a lot of。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上会达到顶峰。之后，随着我添加更多数据，我的模型表现会变得更差。那么这到底给我们带来了什么呢？有几点。首先，如果我有一个带标签的数据集，我实际上可以构建出最佳模型，而这可能并不是使用我所有数据的模型。如果我有一个无标签的数据集，我可以节省很多。
- en: time in labeling because I don't need to label the entire data set。 And as we
    discussed， already。 I can reduce the bias in the model with this approach。 If
    you're interested in， this topic。 in academia， it's often referred to as active
    learning。 There's a wonderful。 book called Human in the Loop Machine Learning
    by Robert Monarch。 And if you're interested。
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在标记方面节省时间，因为我不需要标记整个数据集。正如我们已经讨论过的，我可以通过这种方法减少模型中的偏差。如果你对这个话题感兴趣，在学术界，通常称之为主动学习。有一本很棒的书叫《人机协作的机器学习》，作者是Robert
    Monarch。如果你有兴趣。
- en: in any other data science content， please reach out to Data Science Rebalanced。
    We have。 a link tree。 We teach all kinds of courses on Skillshare and provide
    medium articles。 So reach out at any time。 Thank you so much for your time。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在任何其他数据科学内容方面有需求，请联系Data Science Rebalanced。我们有一个链接树。我们在Skillshare上提供各种课程，并撰写Medium文章。所以随时联系。非常感谢你的时间。
- en: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_44.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_44.png)'
- en: Awesome。 Thank you， Ray。 And next up， we have a gear who's going to talk to
    us about reading。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了。谢谢你，Ray。接下来，我们有一个叫Gear的人，他将与我们谈论阅读。
- en: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_46.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_46.png)'
- en: peps， right？ Oh， I see it now。 Reading peps。 Let's give him a round of applause。
    Yeah。 Thank you so much。 And my name is Geir Ani。 I work with real Python， creating
    content， there。 And now I want to talk to you about the joy of reading peps。 So
    I suppose one of。 the things you hear quite early in your Python journey is the
    PEP8 document。 But the PEP。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: peps，对吗？哦，我现在明白了。阅读peps。让我们给他鼓掌。谢谢你。我叫Geir Ani。我在real Python工作，创建内容。现在我想跟你谈谈阅读peps的乐趣。所以我想，你在Python旅程的早期会听到PEP8文档。但PEP。
- en: part of this is often not really explained。 So what are these peps？ They are
    Python enhancement。 proposals。 And these are actually fairly technical documents
    that are specifications for how。 Python should work， new features of Python， and
    also how the process is the governance。 of Python is implemented。 Really technical
    stuff that really needs to go into the details to。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分通常没有很好地解释。那么这些peps是什么呢？它们是Python增强提案。这些实际上是相当技术性的文档，是关于Python如何工作的规范、新特性以及Python治理过程的实现。真的很技术性的东西，确实需要深入细节。
- en: show off all kind of edge cases that you have with them。 One of the things I
    really like。 about reading peps is that they're also historical notes that they
    show how the language has。 evolved over time。 They often capture some of the discussions
    that were made before introducing。 a feature and also some of the decisions and
    especially also which things were left out。
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 展示了你在使用它们时遇到的各种边缘案例。我非常喜欢阅读peps的一点是，它们也是历史记录，展示了语言如何随着时间演变。它们通常捕捉到在引入特性之前的一些讨论，以及一些决定，尤其是哪些内容被排除在外。
- en: of the peps。 It's been available online essentially all the time and it's also
    on GitHub。 And that's， a nice place to go back and look at history of this。 But
    in February this year。 they redesigned， the web page and now launched peps。python。org。
    And we can have a quick look at this。 So it's， this very nice page。 And if you
    just go to peps。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: peps。它几乎一直在线上可用，并且也在GitHub上。这是一个很好的地方，可以回顾这一历史。但在今年二月，他们重新设计了网页，现在推出了peps.python.org。我们可以快速浏览一下。所以，这是一个非常不错的页面。如果你直接访问peps。
- en: python。org， it comes to the index of all the peps。 And we can kind of scroll
    down and see that there's a lot of documentation here。 The pep， 8 that you may
    have heard about is here， the style guide for Python guide。 And this is。 definitely
    one of the more readable peps that really goes into some of the more ways that。
    we read that we should write Python to make it Python-ic。 What I've also done
    since I've。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: python.org，来查看所有peps的索引。我们可以向下滚动，看到这里有很多文档。你可能听说过的PEP 8在这里，这是Python的风格指南。这绝对是可读性较强的peps之一，详细讲解了我们应该如何书写Python，使其具有Python风格。自从我开始以来，我还做了很多。
- en: been reading quite a lot of these when I'm creating tutorials， I've also created
    a small。 Python package called pep docs。 And this provides the pep command which
    makes it easier to just。 download these peps。 So if I go into a terminal like
    this， I can also just type pep 8 and， we see。 okay， something happened here at
    least。 So let me just pipe this into less。 And we。
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建教程时我已经读了很多这些，我还创建了一个名为 pep docs 的小 Python 包。它提供了 pep 命令，使下载这些 peps 变得更容易。所以如果我在终端中输入，就可以直接键入
    pep 8，我们看到，好吧，至少这里发生了一些事情。那么让我把这个管道输出到 less。我们。
- en: can see that this is the same document that we saw。 So here we have the same
    introduction。 of these kind of things。 But now I have it in a terminal so I can
    start to play with things。 in the terminal。 Additionally， there's a few more things
    I can do here。 So if I look at， the help。 we can see that I can also actually
    open this webpage quite easily just by typing。
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 可以看到这是我们看到的相同文档。所以这里我们有相同的介绍。这些东西。但现在我在终端中有它，所以我可以开始在终端中玩这些东西。此外，这里还有更多我可以做的事情。所以如果我查看帮助，我们可以看到我也可以很容易地打开这个网页，只需键入。
- en: minus w with peps up。 So if I don't want to go to the browser and actually play
    around， with this。 I can also convert this to markdown。 So the format of peps
    is that they're in rest， format。 restricted text。 But sometimes markdown is easier
    to work with for many tools。 So for， instance。 now I open a different pep。 This
    is pep 13 about how the language is governed。
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 减去 w 和 peps 的影响。所以如果我不想去浏览器里实际玩这个，我也可以把它转换成 Markdown。因此，peps 的格式是它们处于休息格式，限制文本。但有时候，Markdown
    对许多工具来说更容易使用。所以，例如，现在我打开一个不同的 pep。这是 pep 13，关于语言是如何管理的。
- en: It talks about the steering console which we'll also get to see afterwards。
    But I can。 now also then save this to a file。 Now I have it here。 And I can for
    instance use the nice。 rich project to just look at this。 Let's see， page usually。
    And we have a much more nicely。 formatted markdown here。 So yeah。 Thank you， Rich。
    And also I can then use something like。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 它讨论了我们随后也将看到的指导控制台。但我现在也可以将其保存到文件中。现在我在这里。我可以例如使用漂亮的 Rich 项目来查看这个。让我们看看，页面通常。我们在这里有格式更好的
    Markdown。所以是的。谢谢你，Rich。我还可以使用一些。
- en: let's say pen。 Let's see， we need the markdown。 Pen doc to convert this directly
    to PDF。 So。 if I now do pep 657， PDF。 I now have， let's see， PDF file of this。
    So I can read this nicely。 like this。 And one of the cool things with the peps
    is that they have， as I mentioned。 this discussion about how the features are
    implemented。 So if I go to the motivation。
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们需要 markdown。pen doc 来直接转换为 PDF。因此。如果我现在执行 pep 657，PDF。我现在有，让我看看，这个 PDF 文件。因此我可以很好地阅读。就这样。peps
    的一个有趣之处在于，正如我提到的，它们有关于功能实现的讨论。所以如果我去看动机。
- en: I can see why was this feature included。 And some of the more interesting discussions
    are。 within the rejected ideas what things were not included and why were they
    rejected from， the peps。 Okay。 So just to sum up a little bit， peps， they're fantastic
    to read。 If you。 want to figure out why some features are designed as they are，
    peps are not tutorials。
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以看到为什么这个功能被包含。一些更有趣的讨论是在被拒绝的想法中，哪些东西没有被包含以及为什么它们被拒绝出 peps。好的。总结一下，peps 是很棒的阅读。如果你想搞清楚为什么某些功能被设计成这样，peps
    不是教程。
- en: That there are a few exceptions to this。 Peps 636 is a great tutorial on the
    pattern matching。 thing。 But there are usually better ways if you're looking to
    learn how to use a feature。 Then you should go out and look for the tutorials。
    But in general， peps are fun to read。 So， yeah。 thank you so much。 And this is
    me。 Thanks。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些例外。pep 636 是一个关于模式匹配的很棒教程。但通常如果你想学习如何使用某个功能，通常会有更好的方法。你应该出去寻找教程。但一般来说，peps
    是很有趣的阅读。所以，是的。非常感谢。这是我。谢谢。
- en: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_48.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_48.png)'
- en: Awesome。 Thank you so much for that。 Up next we have Jonathan。
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了。非常感谢。接下来是 Jonathan。
- en: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_50.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_50.png)'
- en: Hello。 So I'm Jonathan。 I like to build fun things。 Not all of those things
    are useful。 This talk will be about a fun thing。 I don't know if it's going to
    be useful。 So many of。 us use pip。 I don't know if everyone knows， but apparently
    pip is also a back-on-em for。 pip installs packages。 Which got me thinking what
    exactly is a package？ I mean， we know。
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你好。我是乔纳森。我喜欢构建有趣的东西。并不是所有这些东西都是有用的。这个讲座将是关于一个有趣的事情。我不知道它是否有用。所以我们许多人使用 pip。我不知道每个人是否都知道，但显然
    pip 也是 pip installs packages 的后端。这让我思考，究竟什么是一个包？我的意思是，我们知道。
- en: of source distributions。 We know of wheels。 If we've been around a while， maybe
    we've。 heard of eggs。 But I was out of talk yesterday， I think。 And they mentioned
    that you can put。 a command line tool inside of a package。 And it was a compiled
    binary。 It was clang format。 So we can put command line tools。 So I thought， well，
    how about C Python？ Could we put that。
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 关于源分发，我们知道 wheel。如果我们在这方面待了一段时间，也许我们听说过 eggs。但我昨天没有参加讲座，我想。提到你可以将命令行工具放在包内。那是一个编译的二进制文件。是
    clang format。所以我们可以放命令行工具。我想，那么，C Python 呢？我们能放进去吗？
- en: in a package？ Specifically， could we put that in a wheel？ In which case then
    pip wouldn't。 be pip install packages。 It would be pip install Python。 So we're
    going to do a demo。 I want。 to say that there's no shenanigans here。 This is actually
    like， okay， there's a little shenanigans。 But only because I didn't want to rely
    on the conference Wi-Fi。 And nobody wanted to see。
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个包里？具体来说，我们能把它放在一个轮子里吗？那么 pip 就不再是 pip install packages，而是 pip install Python。因此我们将进行一个演示。我想说这里没有花招。实际上，好的，有一点花招，但只是因为我不想依赖会议的
    Wi-Fi，而没有人想看到。
- en: something download for two minutes。 But you can follow along。 You have to be
    on Linux。
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 下载可能要两分钟。但你可以跟着。你必须在 Linux 上。
- en: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_52.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_52.png)'
- en: I just thought of this yesterday， so I didn't have time to build everything。
    So let's go。 to a terminal。 So this is the Python 3。7 slim image。 So we have Python。
    It's an older version。 We can't use the walrus operator。 So let's just pip install。
    Unfortunately， someone's already。 taken the name C Python。 And Python is like
    locked。 You can't give it。 So I said， give， me Python。
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我昨天刚想到这个，所以我没有时间构建所有东西。让我们去终端。这是 Python 3.7 slim 镜像。所以我们有 Python。它是一个旧版本。我们不能使用海象运算符。所以让我们只是
    pip install。不幸的是，已经有人取了 C Python 这个名字。Python 是锁定的。你不能给它。因此我说，给我 Python。
- en: give me Python。 And we're going to want a version that is， let's say， compatible，
    with 3。9。0。 So this is going to be used to cache wheel。 It would download， but
    it takes。 like two minutes to download。 So nobody wants to see that。 This is a
    real wheel。 It's many。 Linux 2014。 It actually passes the many Linux 14 standard。
    It's run through audit wheel。 That said。
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 给我 Python。我们需要一个版本，可以说是兼容 3.9.0 的版本。所以这将用于缓存 wheel。它会下载，但大约需要两分钟，所以没有人想看到这个。这是一个真正的
    wheel。它是 many Linux 2014。它实际上通过了 many Linux 14 标准。经过审计 wheel。
- en: it does vendor a whole bunch of shared libraries。 And this could be done for。
    other operating systems。 Unfortunately， this is the boring part。 What do we all
    sit and wait。 for pip to unzip things and install a whole lot of files？ And we
    also see that I'm running。 this route。 I'm sorry。 YOLO。 So now， of course， we
    have Python now 3912。 But we're not going。
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 它确实提供了一堆共享库。这也可以用于其他操作系统。不幸的是，这是无聊的部分。我们大家都坐着等 pip 解压缩东西并安装很多文件吗？而且我们还看到我正在运行这个路由。抱歉。YOLO。所以现在，我们有
    Python 3912。但我们不去。
- en: to call it Python 39 because that might shadow your system Python。 So it's going
    to be gm。 for give me Python 39。 It works。 You can do things it has shared libraries。
    So what？ So。
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们称之为 Python 39，因为那可能会遮盖你的系统 Python。所以将会是 gm，代表给我 Python 39。它有效。你可以做事情，它有共享库。那么呢？所以。
- en: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_54.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_54.png)'
- en: we installed C Python by pip。 Of course， could we install packages in that pip
    as well？ Like。 could we do Python inside Python？ So that's right。 So we need to
    do gm Python。 We're going。
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过 pip 安装了 C Python。当然，我们能在那个 pip 中安装包吗？比如说，我们能在 Python 内部再用 Python 吗？没错。所以我们需要做
    gm Python。我们要。
- en: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_56.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_56.png)'
- en: to run pip and we're going to install give me Python。 So this will work。 It
    takes a while。 And oh。 I need to say install。 Yes， that would be helpful。 So this
    will go in fetch Python， 310。 It's going to take a while。 So I'm going to skip
    over to this one that already has， this installed。 Unfortunately， you don't get
    a command line shell。 Because this is inside， another Python。
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行 pip，我们将安装 Python。这将需要一些时间。哦，我需要说安装。是的，这会很有帮助。所以这将去获取 Python 310。这将需要一些时间。我将跳到已经安装的这个上。不幸的是，你无法获得命令行
    shell。因为这是在另一个 Python 里面。
- en: it doesn't work。 But we can just run the module。 And now we have free， time。
    Thank you。 Oh。 that's it。 All right。 That is awesome。 I'm waiting for the inevitable。
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 它不起作用。但是我们可以运行模块。现在我们有空闲时间。谢谢你。哦。就这样。好了。太棒了。我在等待不可避免的事情。
- en: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_58.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_58.png)'
- en: future when just everything is on pipe。 Yeah， it's going to be great。 All right。
    Next up。
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 将来当一切都在管道上时。是的，这将会很棒。好了，接下来。
- en: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_60.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_60.png)'
- en: we have Yella talking to us about PEP 688。 Let's give them a round of applause。
    Good morning。 I'm Yella Selsda。 I'm the Python core developer interested in static
    typing。 And I'm here today。 to talk about the buffer protocol。 The buffer protocol
    is a way for type in C to allow access。 to the raw bytes inside the representation。
    Like you can use the bytes objects and not， by array。
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有 Yella 跟我们讲 PEP 688。让我们为他们鼓掌。早上好。我是 Yella Selsda。我是对静态类型感兴趣的 Python 核心开发者。我今天来这里讲解缓冲协议。缓冲协议是一种让
    C 中的类型能够访问表示内的原始字节的方式。就像你可以使用字节对象，而不是数组。
- en: but not for example string， which isn't a raw array of bytes under the hood。
    But I told you I'm interested in typing。 So when I write a function like this，
    I want。 to put type annotations。 And the problem here is I don't have anything
    to put in this question， box。 There's no way in Python right now to say any buffer
    type。 So I want to fix that。
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 但不是例如字符串，它在底层并不是一个原始的字节数组。但是我告诉你我对类型感兴趣。所以当我写这样的函数时，我想添加类型注释。而这里的问题是我没有任何东西可以放在这个问题框中。现在在
    Python 中没有办法说任何缓冲类型。所以我想修复这个问题。
- en: And I wrote a PEP for it， PEP 688。 And the first version that I wrote， which
    is now up。 on the PEP's website， adds this new buffer type that you can -- that's
    implemented in， C。 It has a subclass implementation that just checks whether the
    buffer protocol is implemented。 So you can check that the bytes are where the
    object is a buffer。 A non-py array is a buffer。
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我为此写了一份 PEP，PEP 688。我写的第一个版本，现在已经在 PEP 的网站上，添加了这个新的缓冲区类型，你可以在 C 中实现。它有一个子类实现，只是检查缓冲协议是否被实现。所以你可以检查字节是否是缓冲区对象。非
    Py 数组是缓冲区。
- en: A string object is not a buffer。 And it works fine for the function that I showed。
    But there's。 a problem。 What if I want something more than just the buffer protocol？
    Like I want to also。 have a buffer that provides a length， which is a pretty common
    thing to have for a buffer。 because inherently it's a collection of bytes。 So
    it has a length。 But in a type system， there's。
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串对象不是缓冲区。它在我展示的函数中工作得很好。但是有一个问题。如果我想要的不仅仅是缓冲协议？比如我还想要一个提供长度的缓冲区，这是缓冲区中相当常见的特性。因为从本质上讲，它是一个字节集合。所以它有一个长度。但是在类型系统中，有。
- en: no way to say you want both a concrete class like buffer is right now， but also
    a protocol。 like sized。 So I have another problem。 I still can't write the types
    that I want to write。 And I don't know how to fix that yet。 So I'm going to show
    some ideas。 And I would like。 to hear from people who have feedback on these what
    they think the right solution is。 The。
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 没有办法同时说你想要一个像当前的 buffer 这样的具体类，但也想要一个协议，比如 sized。所以我还有另一个问题。我仍然无法写出我想写的类型。我还不知道如何解决这个问题。所以我将展示一些想法。我希望听到有反馈的人对这些想法的看法，看看他们认为正确的解决方案是什么。
- en: one thing I thought of is to actually make it possible to implement a buffer
    protocol。 in Python by adding a dunder buffer methods that you could just implement
    in your own， types too。 The next thing about is that PyPy actually has the same
    thing already。 I guess。 they need that because in PyPy everything is Python。 So
    you have to implement this in， Python。
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我想到的一件事是实际上可以通过添加 dunder buffer 方法来实现缓冲协议。在 Python 中，你也可以在自己的类型中实现。接下来的事情是 PyPy
    实际上已经有了同样的东西。我想，他们需要这样做，因为在 PyPy 中一切都是 Python。所以你必须在 Python 中实现这一点。
- en: Those are nice that it's useful outside of static typing potentially。 But it's
    also。 a lot more complicated than adding support for typing because it changes
    the runtime。 representation of buffer types。 And in the C protocol， there's this
    slot for releasing， a buffer。 And I don't know how I would represent that in Python。
    So it's also a simpler idea。
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这些在静态类型外部也可能很有用。但这也比为类型添加支持要复杂得多，因为它改变了缓冲类型的运行时表示。在C协议中，有一个释放缓冲区的插槽。我不知道如何在Python中表示这一点。因此，这也是一个更简单的想法。
- en: You could just add a dunder buffer for these types。 You set it to true if it's
    a buffer。 And if it's not a buffer， it's not there。 It's a lot simpler。 But it
    doesn't really feel。 like other dunder attributes because there's nothing else
    that really works this way。 It。 also makes it pretty easy for types to rely about
    being buffers， which I don't like。 So， yeah。
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以为这些类型添加一个dunder buffer。如果它是一个缓冲区，就把它设置为true。如果不是缓冲区，它就不存在。这简单多了。但它确实感觉不像其他dunder属性，因为没有其他东西真的这样工作。这也使得类型在依赖于缓冲区时变得相当容易，但我不喜欢。所以，是的。
- en: if you have any feedback on which of those approaches would work well， I'd love，
    to hear about it。 Come thank me during the rest of the conference or talk about
    the。 discussion of Python or just email me。 Thank you。
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对哪些方法有效有任何反馈，我很想听听。在会议的其余时间来感谢我或讨论Python，或者直接给我发邮件。谢谢。
- en: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_62.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_62.png)'
- en: Excellent。 And up next we have Nick。
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒。接下来是Nick。
- en: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_64.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_64.png)'
- en: All right。 Good morning， PyCon。 So today I'm going to be talking about post-pandemic
    meetup。 and an organizer's dilemma。 So my name is Nick Mo。 I am the Clypy meetup
    organizer。 So that's。 a Cleveland fight。 Yes， thank you。 Cleveland Python meetup
    group。 And I work as a data scientist。 at Trimble Transportation。 You can see
    my little logo at the top left corner。 All right。
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。早上好，PyCon。今天我将谈论后疫情时代的聚会和组织者的困境。我叫Nick Mo，是Clypy聚会的组织者。是的，感谢。克利夫兰Python聚会小组。我在Trimble
    Transportation工作，担任数据科学家。你可以在左上角看到我的小标志。好的。
- en: So the last Clypy meetup was two years ago， March 9， 2020。 I have a little picture
    here。 It was an amazing day， full with pizza， laughs， and so the occasional doesn't
    really have。 a dongle here。 That was the occasional thing。 But as you all will
    know， the pandemic has。 changed everything。 So what has happened since then？ We
    had to go virtual， right？ And everybody。
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一次Clypy聚会是在两年前，2020年3月9日。我这里有一张小照片。那是美好的一天，满是披萨、笑声，还有偶尔缺少的东西。那是偶尔的事情。但正如大家所知，疫情改变了一切。那么，自那以后发生了什么？我们不得不转向虚拟，没错？大家。
- en: was like virtual meetings。 Oh， yay。 So there was a lot of uncertainty about
    that。 So how。 did this affect us？ As I said， once we shared the news with the
    community， they were like， yes。 meetings， no one said that。 So there was this
    dilemma of how can we get them engaged， with them？
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 就像虚拟会议。哦，太好了。因此，对于这一点存在很多不确定性。那么这对我们有何影响？正如我所说，当我们与社区分享消息时，他们就像，好的。会议，没有人这么说。因此，如何让他们参与进来就是一个困境。
- en: So as I said， there was a lot of uncertainty。 Clypy seemed to last people think。
    about the pandemic was going on。 There are so many things going。 There was so
    much uncertainty。 about what was going on in the world。 Figuring out a way to
    engage with the community was， tricky。 How did the best way to get them excited
    about going back to virtual meetings。
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我所说，存在很多不确定性。Clypy似乎是人们在疫情期间思考的最后一件事。有很多事情正在发生，世界上发生了很多不确定的事情。找到与社区互动的方式非常棘手。如何让他们重新对虚拟会议感到兴奋呢？
- en: after being in countless meetings at work all day？ Finding people to give talks
    you would。 think would be easier。 It's a virtual meeting。 Less pressure in person。
    No， it's not as easy。 And overall， personally， for me as one of the core organizers，
    it was pretty taxing having。 to deal with my life work and worrying about how
    to get our community back together。 It's。
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在工作中开了无数次会议后？找到人来做演讲，你可能会认为会更容易。是虚拟会议。面对面压力小。不，这并不那么简单。总的来说，作为核心组织者之一，这让我非常疲惫，需要处理生活和工作，还要担心如何让我们的社区重新聚集。
- en: still strong。 So how did Clypy fare throughout the pandemic？ Well， I think we
    crushed it， right？
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然强劲。那么Clypy在疫情期间表现如何？我认为我们做得很好，对吧？
- en: We've had 21 very successful virtual meetups since our last in-person meeting。
    What。 does it mean for the last two years， 2020， 2021， we've had a virtual meetup
    every second。 Monday of the month。 Nonstop。 The community has been amazing and
    the turnout has been super。 encouraging。 Honestly， there are days where I felt
    like we had to cancel it because I。
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 自从我们上一次面对面的会议以来，我们已经举行了 21 次非常成功的虚拟会议。过去两年，也就是 2020 年和 2021 年，我们每个月的第二个星期一都有虚拟会议。不间断。社区非常棒，出席人数也让人感到非常鼓舞。老实说，有些时候我觉得我们必须取消，因为我。
- en: don't know what to do。 But you can see here a couple of pictures we have here
    about all。 our virtual meetups。 So it was really encouraging and really wonderful。
    I loved it。 So what's the。 goal for 2022？ In-person Clypy meetups again。 That's
    the goal for 2022。 And thanks to my， company。 Trimble， they are going to be sponsoring
    us and giving us a venue and feeding us too。
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 不知道该怎么办。但你可以在这里看到几张关于我们所有虚拟会议的照片。所以这真的让人鼓舞，也非常美好。我很喜欢。那么 2022 年的目标是什么？再次举行面对面的
    Clypy 会议。这是 2022 年的目标。感谢我的公司 Trimble，他们将赞助我们，提供场地，还给我们提供食物。
- en: So we're really excited about that。 So if you're in Cleveland， please come to
    Clypy every。 second Monday of the month。 You can see our next one is on May 9th。
    So if you're in the。 Cleveland area， please come by。 You can see that that's our
    Twitter handle and that's。 my Twitter handle at Spirix on Twitter。 Thank you so
    much。 Thank you， Clypy。 If you guys。
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对此感到非常兴奋。如果你在克利夫兰，请在每个月的第二个星期一来参加 Clypy。你可以看到我们的下一个会议是 5 月 9 日。如果你在克利夫兰地区，请过来。你可以看到我们的
    Twitter 账号，以及我的 Twitter 账号在 Twitter 上是 @Spirix。非常感谢你。谢谢，Clypy。如果你们。
- en: are watching this， I love you guys so much。 Thank you， PyCon。 All right。 Have
    a nice day。
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你们在观看这个，我非常爱你们。谢谢，PyCon。好的。祝你们有美好的一天。
- en: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_66.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_66.png)'
- en: Awesome。 And next up， we're going to hear from Dustin about what is it going
    to be about？
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了。接下来，我们将听到达斯汀的分享，关于这将是什么？
- en: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_68.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_68.png)'
- en: Next up， we have Parade of Regional Conferences。 So I'm going to ask the organizers
    to come。 over here by the side。 So we're going to go through just some excitingly
    upcoming recent。 and regional conferences that are going to be happening in the
    next year。 So if you like， PyCon。 maybe there's a conference happening near you。
    And let's see where's Chuk？ All right。
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有地区会议的游行。所以我要请组织者过来这里。这次我们将讨论即将在明年举办的一些令人兴奋的最近和地区会议。所以如果你喜欢 PyCon，也许附近会有一个会议。我们看看
    Chuk 在哪里？好吧。
- en: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_70.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_70.png)'
- en: Let's give all the regional conferences a round of applause and they're going
    to tell。 you why you should come。 You know， Europe Python。 So yeah， Europe Python
    is in July。 I would say that the best PyCon， in Europe will be Europe Python。
    The second one will be maybe Python Italy。 So yeah， so。
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为所有地区会议鼓掌，他们将告诉你为什么你应该来。你知道，欧洲的 Python。没错，欧洲的 Python 在七月。我会说，欧洲最好的 PyCon
    将是欧洲的 Python。第二个可能是 Python 意大利。所以，是的。
- en: it's like very similar format who really enjoy PyCon here this week。 So yeah，
    first seminar。 we also have tutorial， we have conference talk for three days and
    then we will have， sprint。 So also we have Pieday the track for those data folks。
    You would find something。 that you like there。 And also we have a lot of Guinness。
    I think that would be the main， difference。
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这很像这个星期的 PyCon，非常相似的格式。所以是的，第一个研讨会。我们还有教程，我们有三天的会议演讲，然后我们将有 Sprint。所以我们也有针对数据人员的
    Pieday 主题。你会在这里找到你喜欢的东西。而且我们还有很多 Guinness。我想这将是主要的区别。
- en: So if you really like PyCon， you really want to have another week-long conference。
    at maybe somewhere closer or further， I don't know。 Then yeah， please come。 So
    yeah。 I think。 that's it。
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果你真的喜欢 PyCon，想要再来一次为期一周的会议，在某个更近或更远的地方，我不知道。那么，是的，请来。所以，是的。我想，这就是了。
- en: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_72.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_72.png)'
- en: Hi。 My name is Phoebe Polk and I'm here to invite you to join me and many other
    Python。 people in beautiful Mission Bay， San Francisco on Saturday， September
    10th。 It is a one day。 outdoor Python conference in the park。 Tickets are on sale
    now at our website， Pieday。com。 Call for proposals are open。 Please submit a talk
    before June 3rd and I hope to see you。
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 嗨，我是Phoebe Polk，邀请你和我以及其他许多Python爱好者于9月10日（星期六）在旧金山美丽的使命湾加入我们。这是一次为期一天的户外Python会议。门票现已在我们的网站Pieday.com上发售。征集提案现已开放。请在6月3日之前提交演讲，希望能很快见到你。
- en: again very soon at Pieday。 Thank you。 [Applause]， Hi。 I'm Yoshida。 And I'm Pieday。
    We are co-vastier of PyCon JP 2022 from Japan。 PyCon JP is our largest， conference
    in Japan。 This year， PyCon JP will be hearing mid-ox over。 SFP application will，
    be start next Monday。 9th of May。 You can also make a talk online。 The sponsor
    application， will be start also this month。
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 再次感谢。谢谢。[掌声]，嗨，我是吉田。我是Pieday。我们是来自日本的PyCon JP 2022的联合主持人。PyCon JP是我们在日本最大的会议。今年，PyCon
    JP将听取中间的内容。SFP申请将在下周一，即5月9日开始。你也可以在线演讲。赞助商申请也将在本月开始。
- en: You can appeal to some users with the largest PyCon in Japan。 We will inform
    you of the latest。 information on our world。 Twitter and Facebook。 Home or information，
    please visit 2022。pycon。JP。 Please join us。 [Applause]， Thanks， Dan。 I'm the only
    one from Taiwan as far as I know in this conference。 If you're， by chance also
    from Taiwan， please contact me in this last night's conference。 Taiwan。
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以吸引一些用户参加日本最大的PyCon。我们将通过我们的Twitter和Facebook提供最新信息。有关信息，请访问2022.pycon.JP。请加入我们。[掌声]，谢谢，Dan。就我所知，我是这次会议中唯一来自台湾的人。如果你也恰好来自台湾，请在昨晚的会议中联系我。台湾。
- en: is hosting the PyCon JP this year， 2022， September， 3rd and 4th。 It's unfortunately。
    a virtual conference because we still have very strict travel restrictions。 Comfort
    proposal。 unfortunately has ended。 If you have a road proposal， I hope you get
    selected。 I don't。 make that decision， so good luck。 Also call for sponsors。 Obviously。
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 今年，2022年9月3日和4日，我们将举办PyCon JP。不幸的是，由于旅行限制，我们将举行线上会议。舒适的提案已经结束。如果你有路演提案，希望能被选中。我无法做出这个决定，所以祝你好运。此外，我们也在寻找赞助商。显然。
- en: we are representing the talent group in Asia and， APEC area。 so you have access
    to the best talent in the world。 Takes a long time。 Now。 right now it's early
    bird。 I think there are some late bird and， some corporate selections。 Please
    come join us online。 Thank you。 [Applause]。
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在代表亚洲和亚太地区的人才团队，因此你可以接触到全球最优秀的人才。需要很长时间。现在。此刻是早鸟票。我想还有一些晚鸟票和一些企业选择。请在线加入我们。谢谢。[掌声]
- en: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_74.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81685ba2cde9e59d0e4c1c3f0714159b_74.png)'
- en: Hello everyone。 I'm Patrick。 I just wanted to invite you to PyCon JP this is
    going to be。 next month in Florence。 It's going to be really nice。 We have also
    key noters。 We have a。 Python track。 We have a web track and lots of interesting
    social events。 If you cannot， join。 I know it's in a month， we also have an online
    version which is going to be free。
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 大家好，我是Patrick。我想邀请你参加下个月在佛罗伦萨举行的PyCon JP。这将会非常精彩。我们还有主旨发言人。我们有一个Python分会，还有一个网页分会和许多有趣的社交活动。如果你不能参加。我知道是在一个月之后，我们还有一个免费的线上版本。
- en: which is probably announced out soon。 Thank you。 Hope to see you。 [Applause]，
    Good morning。 We are here to invite you to go to Python Brazil this year。 It will
    be between。 2017 and 23 October in my house in Amazon， first zone。 We will see
    talks in Portuguese， and Spanish。 round tables， sprints， tutorial， lightning talks，
    open space， job fairs。 All。
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能会很快公布。谢谢。希望能见到你。[掌声]，早上好。我们在此邀请你参加今年的巴西Python大会。会议将在2017年10月23日之间在我位于亚马逊的家中举行。我们将进行葡萄牙语和西班牙语的演讲、圆桌讨论、编程冲刺、教程、闪电演讲和招聘会。所有的活动。
- en: activities have signal language during -- have signal language。 It will be online
    in personal。 events and they use a key space。 We are also going to have the Brazil
    conference。 We always have every year during the Python， Brazil。 I would like
    to invite every pilot to go to。 I hope I can see you there this， year。 Thank you。
    [Applause]， [ Applause ]。
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 活动将提供手语服务。它将在个人活动中进行在线交流，并使用一个关键空间。我们还将举办巴西会议。每年我们都会在巴西Python大会期间举行。我想邀请每位参与者前往。希望能在今年见到你。谢谢。[掌声]，[掌声]
