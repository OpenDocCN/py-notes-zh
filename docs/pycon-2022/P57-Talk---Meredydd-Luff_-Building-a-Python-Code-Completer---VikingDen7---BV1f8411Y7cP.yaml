- en: P57：Talk - Meredydd Luff_ Building a Python Code Completer - VikingDen7 - BV1f8411Y7cP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P57：演讲 - Meredydd Luff_ 构建一个 Python 代码补全器 - VikingDen7 - BV1f8411Y7cP
- en: Hello and welcome back。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 你好，欢迎回来。
- en: '![](img/d12cab4ccfc4304f1aba514a1562280c_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d12cab4ccfc4304f1aba514a1562280c_1.png)'
- en: '![](img/d12cab4ccfc4304f1aba514a1562280c_2.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d12cab4ccfc4304f1aba514a1562280c_2.png)'
- en: This will be， I guess， one of the final sessions here before the plenary session。
    So thank you for sticking around and I think you'll find it worth it here。 So。
    Loretta Fluff is here and going to be speaking about building a Python code completer。
    Let's give them a big hand， please。 All right， thank you very much。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我想这将是大会全体会议之前的最后一场会议之一。所以感谢你们的坚持，我相信你们会觉得这是值得的。因此，Loretta Fluff 在这里，将会谈论构建一个
    Python 代码补全器。请大家热烈欢迎他们。好的，非常感谢。
- en: My name is Merrudiv and I am here to talk today about code completion。 So code
    completion is that little pop-up box you get in your editor， offering to auto-complete。
    your variable names， your identifiers， anything else in your code。 And I got interested
    in code completion when I had to build a completer myself。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我叫 Meredydd，今天我在这里谈论代码补全。所以代码补全是你在编辑器中获得的那个小弹出框，提供自动完成你的变量名、标识符和代码中的其他内容。我对代码补全产生兴趣是因为我必须自己构建一个补全器。
- en: And it turns out that code completion is really awesome。 It's one of these amazing
    things in computing that feels like absolute magic when you are。 using it and
    it's actually incredibly simple at its core。 So today we're going to be talking
    about why code completion is important to us as developers。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，代码补全真的很棒。这是计算机中的一种神奇功能，当你使用它时，感觉像是绝对的魔法，而它的核心实际上非常简单。因此，今天我们将讨论代码补全对我们作为开发者的重要性。
- en: We're going to talk about how it works and how it might be simpler than you
    might think。 And to show how simple it is， I am going to build a code completer
    live on this stage。 in a little over five minutes after which we can talk about
    the hard parts。 The things I'll need to do to take something I can build in five
    minutes and turn it into。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论它是如何工作的，以及它可能比你想象的更简单。为了展示它有多简单，我将在这个舞台上现场构建一个代码补全器，时间略超过五分钟，然后我们可以讨论更复杂的部分。我需要做的事情是将我能在五分钟内构建的东西转变为。
- en: something we can ship to a working developer。 But first。 let's talk about why
    code completion is really important。 So it gives us a bunch of stuff。 For starters，
    it gives us discoverability。 So we use a huge number of libraries and modules
    in our code and code completion lets us discover。 what APIs are available in our
    code editor without having to page over to the documentation。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将其交付给一个有效的开发者。但首先，让我们谈谈为什么代码补全真的很重要。因此，它为我们提供了很多东西。首先，它提供了可发现性。我们在代码中使用了大量库和模块，代码补全让我们能够发现代码编辑器中可用的
    API，而无需翻阅文档。
- en: It gives us speed because we can type a few characters and hit the tab key rather
    than。 taking the time to spell initialization correctly for the fifth time dysfunction。
    It gives us confidence that what we're doing is right because there are whole
    classes of。 bugs we can spot and fix or avoid entirely because the code completer
    warned us。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 它为我们提供了速度，因为我们只需输入几个字符并按下 Tab 键，而不是花时间第五次正确拼写初始化。它让我们对所做的事情有信心，因为有整类错误我们可以发现、修复或完全避免，因为代码补全工具提醒了我们。
- en: And for all these reasons， it feels good to use。 It lets us stay in that flow
    state that as programmers is where we want to be。 So code completion is a pretty
    essential part of any modern developer workflow。 But why did I end up building
    one of these beasts myself？ Well。 this is because I am one of the original creators
    of Anvil， which is a framework for。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 因为所有这些原因，使用起来感觉很好。它让我们保持在程序员想要的流动状态中。因此，代码补全是任何现代开发者工作流程中一个相当重要的部分。但是我为什么会自己构建这样一个工具呢？因为我是
    Anvil 的原始创建者之一，这是一个完全用 Python 构建全栈 web 应用程序的框架。
- en: building full stack web applications entirely in Python。 So that's Python running
    in the web browser， Python running on the server， even a Python。 user interface
    toolkit。 And more to the point， we have an online editor for apps built with this
    framework。 with a， drag and drop designer for building your user interface， but
    also an online code editor。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这是 Python 在网络浏览器中运行，Python 在服务器上运行，甚至是一个 Python 用户界面工具包。更重要的是，我们为使用这个框架构建的应用程序提供了一个在线编辑器，配备了一个拖放设计器来构建用户界面，还有一个在线代码编辑器。
- en: for writing the Python code that will run in the web browser to drive that user
    interface。 as well as the code that will run on the server setting up a built-in
    database， and of course。 a built-in hosting platform， so you don't need to know
    about DevOps or JavaScript or HTML。 You can build and deploy a web application，
    even if all you know is a bit of Python。 Now obviously。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 用于编写将在网络浏览器中运行的Python代码以驱动用户界面，以及将在服务器上运行的代码，用于设置内置数据库，当然还有一个内置的托管平台，因此你无需了解DevOps、JavaScript或HTML。你可以构建并部署一个网络应用程序，即使你只了解一些Python。现在显然。
- en: to pull this off， we need good code completion。 And there are some off-the-shelf
    code completion systems。 but we had a couple of specific requirements。 One is
    that this is a full stack framework。 so I'll complete a need to know about some，
    stuff outside your code。 It needs to know about what components are -- what UI
    components are on your web page。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现这一点，我们需要良好的代码补全。而市面上有一些现成的代码补全系统，但我们有几个特定的要求。其一是这是一个全栈框架。因此，补全功能需要了解一些代码以外的内容。它需要知道你网页上的组件——即UI组件。
- en: It needs to know about the schema of your built-in database， and okay， we could
    have hacked。 that in。 But the real kicker is that this is an online editor in
    the browser。 And when a programmer is typing， there is just not a lot of time
    between keystrokes。 You do not have 300 milliseconds to send your code to the
    server， run it through a completion。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 它需要了解你内置数据库的架构，好的，我们可以进行一些黑客操作。但真正的问题是这是一个在浏览器中的在线编辑器。当程序员正在输入时，按键之间的时间并不多。你没有300毫秒的时间将代码发送到服务器，进行补全。
- en: engine and send the results back。 So we ended up building our own。 and that
    is how I ended up on the journey that I'm sharing， with you today。 So if we are
    building a code completer， what is our goal？ Well， we are here to answer one question。
    and that is what is the programmer going to type， next。 And to do that。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 引擎并返回结果。所以我们最终构建了自己的。这就是我今天与你分享的旅程的起点。那么，如果我们要构建一个代码补全器，我们的目标是什么呢？好吧，我们在这里要回答一个问题，那就是程序员接下来要输入什么。为此。
- en: we need to understand the program that they are writing。 And to understand how
    we do that。 I'm going to have to take a brief tour into how Python， compiles our
    code。 So when you run a Python program， the Python interpreter reads your 。py
    file and follows。 the instructions contained within。 Now it does not actually
    seek through your file byte by byte reading each statement as。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要理解他们正在编写的程序。为了理解我们如何做到这一点，我将简要介绍Python如何编译我们的代码。所以当你运行一个Python程序时，Python解释器会读取你的.py文件并遵循其中的指令。现在，它并不是逐字逐句地查找你的文件。
- en: it executes it。 That would be a very inefficient way to run your code。 So instead
    it does something called parsing， where it reads all of your source up front。
    and then turns it into a more tractable representation。 So it feeds this text
    to a bit of code called a parser， which will then generate something。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 它执行代码。这将是运行你的代码的一种非常低效的方式。因此，它做了一种称为解析的事情，它会提前读取你的所有源代码，然后将其转换为更易于处理的表示。因此，它将这段文本提供给一个称为解析器的代码，该解析器然后生成某些东西。
- en: called an abstract syntax tree。 Here's one。 So this is another representation
    of the same code。 It's a set of objects， and it's much easier to work with。 You
    can see we've got a function definition。 It's got a name。 It's got some arguments。
    It's got a body that's a list of statements。 The first statement is an assignment。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 被称为抽象语法树。这里是一个。所以这是相同代码的另一种表示方式。它是一组对象，处理起来简单得多。你可以看到我们有一个函数定义。它有一个名称，有一些参数，还有一个主体，是一个语句列表。第一个语句是一个赋值。
- en: It's assigning to a variable named message。 It's assigning a string value。 Hello
    world。 And then we've got a function call that's calling a function named alert
    with one argument。 and that is the variable named message。 And this is much， much
    easier to work with from code。 It's just a bunch of objects you can walk over
    it。 You could walk over it， execute it directly。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 它正在将一个名为message的变量赋值。它赋值一个字符串值。Hello world。然后我们有一个函数调用，它调用一个名为alert的函数，并带有一个参数，即名为message的变量。这从代码的角度来看更容易处理。这只是一堆对象，你可以遍历它。你可以遍历它，直接执行它。
- en: You can generate byte code。 You can do all sorts of stuff。 Now， as an aside。
    parsing is actually really， really cool。 That parser wasn't even written by a
    human being。 Instead。 if you go to the Python documentation， you will find something
    called a grammar file。 And that is a textual description of the syntax of the
    Python language。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以生成字节码，做各种各样的事情。顺便说一下，解析实际上是非常非常酷的。这个解析器甚至不是由人类编写的。相反，如果你查看Python文档，你会找到一个称为语法文件的东西。那是Python语言语法的文本描述。
- en: So here's how it describes an if statement。 So it defines an if statement as
    the word if followed by an expression followed by a colon。 and then a block of
    code and then either an elif statement or an elsplock or nothing at， all。 Those
    square brackets mean the elsplock is optional。 And likewise。 an elif statement
    is the word elif， then an expression， then a colon， then， a block。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这里描述了一个if语句。它将if语句定义为单词if后面跟着一个表达式，后面跟着冒号，然后是一段代码，接着是一个elif语句、一个elsplock或什么都没有。方括号意味着elsplock是可选的。同样，elif语句是单词elif，后面跟着一个表达式，再跟着冒号，最后是一段代码。
- en: then another elif statement or maybe an elsplock or nothing at all。 And if you
    look through the grammar file， there are pages and pages of this stuff defining。
    every piece of syntax that could go into a valid Python program。 And what you
    can do is you can feed this textual description into something called a parser。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是另一个elif语句，或者可能是一个elsplock，或者根本什么都没有。如果你查看语法文件，会看到许多页面的内容，定义了每一个可以进入有效Python程序的语法部分。你可以将这个文本描述输入到称为解析器的东西中。
- en: generator and it will output code for a parser。 And remember。 the parser is
    the program that takes our source code and produces an abstract， syntax tree。
    So we're reading in a text file and spitting out code for a program that will
    read in a。 text file and spit out an abstract syntax tree。 It's all very meta
    and it's enough to give you a little bit of a headache。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 生成器并且它将输出用于解析器的代码。请记住，解析器是处理我们源代码并生成抽象语法树的程序。所以我们正在读取一个文本文件，并输出一个程序的代码，这个程序会读取一个文本文件并生成抽象语法树。这一切都是非常元的，足以让你有点头疼。
- en: But fortunately， as Python programmers， we don't have to engage with all this
    complexity。 because the parser functionality is exposed to us out of the box as
    part of Python's standard。 library using the AST module。 So this is a module you
    can import and then you can call AST。parse。 You can feed it a string of Python
    code and it will give you an abstract syntax tree。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，作为Python程序员，我们不需要面对这些复杂性，因为解析器功能作为Python标准库的一部分默认对我们开放，使用AST模块。这个模块可以导入，然后你可以调用AST.parse。你可以输入一段Python代码的字符串，它会给你一个抽象语法树。
- en: You can print it out。 It looks a bit like this。 You can see we've got a very
    small Python module here with a body with one statement。 That statement is an
    assignment。 Its target is the variable named x and the value we're assigning is
    the constant value 42。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将其打印出来。看起来像这样。你可以看到这里有一个非常小的Python模块，主体中有一个语句。该语句是一个赋值，目标是名为x的变量，赋值为常量42。
- en: And this is， yeah， this is a set of objects。 It's much easier to work with。
    It's all extremely cool。 But I'm pretty sure I was supposed to be talking about
    code completion somewhere in， here。 Fortunately， parsing is our magic bullet for
    code completion because if you are building。 a code completer， you are facing
    a half written program with a cursor somewhere in the middle。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个对象集。使用起来简单得多，极其酷炫。但我确定我本该在这里谈论代码补全。幸运的是，解析是代码补全的魔法子弹，因为如果你正在构建一个代码补全器，你正面临一个未完成的程序，光标在中间的某处。
- en: of it。 And it's your job to answer the question， what the program is going to
    type next。 And to do this， you need to understand what's going on in the program
    around where the cursor。 is to work out what the valid next moves might be。 And
    this is a pretty daunting task。 If you're looking at this as a set of text， you
    might want to examine byte by byte。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你的工作，回答程序接下来会输入什么。为此，你需要理解光标周围程序发生了什么，以确定有效的下一步是什么。这是一个相当艰巨的任务。如果你将其视为一组文本，可能希望逐字检查。
- en: But if we have a parser and we can convert it into a more tractable format，
    well， now。 we're cooking on gas。 So what we can do is we can replace this cursor
    with a special symbol and feed this to a parser。 And now we have an AST representing
    that code。 And somewhere in that AST is our cursor symbol。 And now we can walk
    through these objects。 We have a predigested idea of what the code is doing。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果我们有一个解析器，可以将其转换为更易处理的格式，那么。我们就有了突破。因此我们可以用一个特殊符号替换这个光标，并将其传递给解析器。现在我们有了一个表示那段代码的AST。在这个AST的某个地方就是我们的光标符号。现在我们可以遍历这些对象。我们已经有了对代码正在做什么的初步理解。
- en: We can build up a representation of what's going on。 So that by the time we
    encounter the cursor。 we know what's going on and we can offer the， programmer
    contextually appropriate completions。 So we could say， well， here we've got a
    function definition。 Okay， so we've got some arguments。 So we have the local variable
    self and event tags。 We know they exist。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以构建一个关于发生了什么的表示。这样，当我们遇到光标时，我们知道发生了什么，并且可以为程序员提供上下文适当的补全。所以我们可以说，好的，这里我们有一个函数定义。好的，我们有一些参数。我们有局部变量self和event标签。我们知道它们存在。
- en: We've seen an assignment to the variable message， so we know the variable message
    exists。 We've got a function called arguments。 Oh， there's our cursor。 Well。 I
    guess we might want to offer those local variables as code completion options。
    So that's how it works in theory。 So let's build one。 So here I have， open in
    the Anvil editor。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到对变量message的赋值，因此我们知道变量message存在。我们有一个名为arguments的函数。哦，这就是我们的光标。好吧。我想我们可能想将这些局部变量作为代码补全选项提供。这就是理论上的工作原理。那么我们来构建一个。这里我在Anvil编辑器中打开它。
- en: I have a running web application right over， here。 So this is using the code
    mirror， code editor。 And every time I trigger the code completion in this editor，
    it's going to call this complete。 function。 And whatever it returns， it's going
    to offer me as code completion options。 So if I trigger it here， I am going to
    get some text because that's what was hard coded。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我有一个正在运行的Web应用程序，就在这里。因此这是使用code mirror代码编辑器。每当我在这个编辑器中触发代码补全时，它会调用这个complete函数。无论它返回什么，它都会作为代码补全选项提供给我。所以如果我在这里触发它，我会得到一些文本，因为那是硬编码的内容。
- en: And if we look at our print output， we can see we've got the source code here
    with the。 cursor symbol where that cursor was。 So we know what we want to do next。
    We want to parse this。 Let's go and have some syntax tree by calling ast。parse
    on that text。 Let's dump that out onto standard output。 Now let's restart this
    and write it again。 Okay。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看打印输出，我们可以看到这里有源代码，光标符号在光标所在的位置。所以我们知道接下来要做什么。我们想解析这个。让我们通过调用ast.parse来处理那段文本。然后将其输出到标准输出。现在让我们重新启动并再次编写。好的。
- en: let's trigger our code completion。 And in the app console， we can see， oh。 rather
    poorly formatted AST。 Let's use a new option from Python 3。9。 And now we can get
    a nicely indented AST。 And see。 we can see we've got a module with a body with
    an assignment to the variable x。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们触发代码补全。在应用程序控制台中，我们可以看到，哦。格式不太好的AST。让我们使用Python 3.9的新选项。现在我们可以获得一个缩进良好的AST。我们可以看到，我们有一个模块，里面有一个赋值给变量x的主体。
- en: and then assignment to the variable y and then assignment to the variable z
    and its value。 is our cursor symbol。 So we can just walk through the statements
    in this module and build up a representation。 of what variables are hanging around。
    We want to keep a set of what variables are in scope to build that up。 So we're
    going to start that。 There's going to be a set of strings with the variable names。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然后赋值给变量y，再然后赋值给变量z，它的值是我们的光标符号。所以我们可以逐步遍历该模块中的语句，构建出一个表示当前作用域中存在的变量。我们想保留一组当前作用域内的变量名，所以我们将开始这项工作。这将是一个包含变量名的字符串集合。
- en: And then we go just for the free statements in the body of that module object。
    Now we only really care about these assign statements。 So we'll go if the type
    or if that statement is AST assign。 Then now we have a couple of things to do。
    The first thing is that we now know that this variable exists because it's been
    assigned。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们就为该模块对象的主体中的三个语句而去。现在我们只关心这些赋值语句。因此，如果类型是AST赋值语句，那么我们现在有几件事情要做。第一件事是我们现在知道这个变量存在，因为它已经被赋值。
- en: to。 So we， let's get the name of that variable。 See， targets。 First target。
    We're not dealing with multiple targets。 No tuple destructuring in this demo。
    Grab its ID。 Okay。 and now we can just take the scope and we can add that variable
    name to the set。 of variables we know exists。 Okay， now the second thing we want
    to do is check if we hit the cursor。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们获取该变量的名称。看，目标。第一个目标。我们不处理多个目标。在这个演示中没有元组解构。获取它的ID。好的。现在我们可以把范围拿出来，并将那个变量名称添加到我们知道存在的变量集合中。好的，现在我们要做的第二件事是检查是否碰到了光标。
- en: So let's check the value if the type of the value of this assignment is a name
    object。 And the ID is this cursor symbol。 Then we've just hit the cursor。 We want
    to offer code completion。 Now we already have a set of all the variables that
    are in scope right now。 So that makes a perfectly valid list of completions。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们检查一下这个赋值的值的类型是否是名称对象。如果ID是这个光标符号。那么我们刚刚碰到了光标。我们希望提供代码补全。现在我们已经有了一组当前范围内的所有变量。这使得补全列表完全有效。
- en: Let's just make a sorted list of everything that is currently in scope at the
    moment we。 hit the cursor。 And then instead of our hard coded list， we can return
    that。 And of course。 if we don't hit the cursor， this will raise an exception。
    So let's have a fail safe。 Set that to an empty list。 Okay， if we go here and
    we trigger the completed here。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为当前在光标处的所有内容制作一个排序列表。然后我们可以返回那个，而不是我们硬编码的列表。当然，如果我们没有碰到光标，这将引发异常。所以让我们有一个安全保护，将其设置为空列表。好的，如果我们到这里并在这里触发补全。
- en: we will be offered those variables。 So we have just built a code completer that
    passes our code。 walks through it， builds up， a representation of what's going
    on。 and then offers us contextually appropriate completions。 And that was barely
    10 lines of code。 Let's get a little bit more fancy。 Let's talk about functions。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将提供那些变量。因此，我们刚刚构建了一个代码补全器，它通过我们的代码进行处理，遍历它，建立一个正在发生的情况的表示，然后为我们提供上下文适当的补全。这仅仅是10行代码。让我们让它更花哨一点。让我们谈谈函数。
- en: So I've got a function here that's got two arguments， foo and bar。 And if I
    do an auto-completion inside this function， well， now I'm inside the scope of。
    this function。 I have access to those global variables， but I also have a couple
    of new variables。 foo， and bar， because those were arguments to my function。 Of
    course。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我这里有一个函数，有两个参数，foo和bar。如果我在这个函数内部进行自动补全，嗯，现在我在这个函数的范围内。我可以访问这些全局变量，但我也有几个新变量。foo和bar，因为它们是我函数的参数。当然。
- en: if I trigger the completion now， I will see absolutely nothing at all because。
    our completer doesn't know about function definitions。 So let's go look through
    the AST and work out what's going on。 So this module body has an assignment to
    X as an assignment to Y and it's got a function。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我现在触发补全，我将完全看不到任何东西，因为我们的补全器不知道函数定义。因此让我们查看AST并弄清楚发生了什么。因此，这个模块主体有一个对X的赋值作为对Y的赋值，并且它有一个函数。
- en: definition。 Okay， paid it。 We've got some arguments。 We've got a name and we've
    got a body。 There we go。 And here， of course， we have an assignment to Z and we've
    got our cursor。 So we just want to walk that body like we've walked the function
    body。 Now， of course。 that means this is going to have to be recursive。 So let's
    factor this out into a recursive function。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 定义。好的，粘贴。我们有一些参数。我们有一个名称，还有一个主体。这里，我们当然有对Z的赋值，我们有我们的光标。因此我们只想像走过函数主体那样遍历该主体。当然。这意味着这将是递归的。因此让我们将其抽象为一个递归函数。
- en: So some tree， some scope。 And then if， oh， LF， type of statement is a function
    def， then， well。 we want to recursively， walk that statement's body。 Let's start
    with the scope we've already got。 Okay， now we're doing this recursively。 We can't
    just return the completions。 We're going to have to make that a global variable
    because we don't know where we're。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 所以一些树，一些范围。然后如果，哦，LF，语句类型是函数定义，那么，我们希望递归地遍历该语句的主体。让我们从已经得到的范围开始。好的，现在我们在递归地进行。我们不能仅仅返回补全。我们必须把它设为全局变量，因为我们不知道我们会在哪里。
- en: going to find them。 So let's initialize them a global scale， global scope。 And
    then when we complete， we just walk the body of the tree， our initial syntax tree。
    using that initial scope and return whatever completions we happen to hit along
    the way。 Let's run our code。 So now if we complete inside this function。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将找到它们。所以让我们在全局范围内初始化它们，然后当我们完成时，我们只需遍历树的主体，即我们的初始语法树，使用该初始范围并返回我们在过程中碰到的任何补全。让我们运行代码。因此现在如果我们在这个函数内部进行补全。
- en: we are being offered those variables。 Okay， so our complete now knows how to
    walk inside function definitions。 We're getting somewhere， but it still doesn't
    know that we're in a new scope now。 We've got some different variables if our
    cursor is here than if our cursor was outside。 So let's go model that。 So when
    we hit a function definition。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在处理这些变量。好的，现在我们的补全工具知道如何在函数定义内行走。我们在进展，但它仍然不知道我们现在在一个新的作用域中。如果我们的光标在这里，与在外部时所拥有的变量是不同的。所以让我们来建模一下。当我们碰到一个函数定义时。
- en: we create a new scope to represent what's going on inside， the function。 Of
    course。 it's going to start out with all the variables that already existed in
    the， parent scope。 And then we want to add all that function's arguments to it。
    So again， let's look at the AST。 we've got these args object。 So for arg in statement。args。args。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个新的作用域来表示函数内部发生的事情。当然，它会从父作用域中已经存在的所有变量开始。然后我们想把这个函数的所有参数添加进去。所以再看一下AST，我们有这些args对象。所以对于arg
    in statement.args.args。
- en: we add the argument name to the scope because that's， now variable that's in
    scope。 And then when we walk the body， we walk it in this new scope。 So now if
    we run this。 if we trigger our completion here， oops， we will explode。 Line 26，
    oh yes， new scope。at。 coding live on stage。 It's full of pitfalls。 All right。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将参数名称添加到作用域，因为那现在是一个在作用域内的变量。然后当我们遍历函数体时，我们在这个新作用域内遍历。所以现在如果我们运行这个。如果我们在这里触发补全，哎呀，我们会出错。第26行，哦，是的，新作用域。在舞台上实时编码，充满了陷阱。好吧。
- en: we have a code completer that passes our code， walks through it， builds up a
    representation。 of what's going on。 It understands that inside a function you're
    in a different scope to outside a function。 and it's offering us those foo and
    bar as completions。 But if we complete outside。 you see it's only offering us
    our global variables because it。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个代码补全工具，它处理我们的代码，遍历它，建立一个正在发生的事情的表示。它理解在函数内部你处于一个不同的作用域，而在函数外部是另一回事。它为我们提供了foo和bar作为补全。但是如果我们在外部补全，你会发现它只提供我们的全局变量，因为它。
- en: knows we're not in a scope where those are valid options。 So we have built a
    completer。 it passes our code， it walks through our AST， it builds up。 a representation
    of what's going on and offers suggestions that are contextually appropriate。 to
    where the cursor is。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 它知道我们不在一个这些选项有效的作用域中。所以我们构建了一个补全工具。它处理我们的代码，遍历我们的AST，建立一个正在发生的事情的表示，并提供与光标所在位置上下文相关的建议。
- en: '![](img/d12cab4ccfc4304f1aba514a1562280c_4.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d12cab4ccfc4304f1aba514a1562280c_4.png)'
- en: Pretty cool， right？ That was pretty simple。 What's next？ Well。 there are some
    pretty straightforward extensions we might make。 For one thing。 we might want
    to teach it about some more syntax。 Right now。 our completer only understands
    assigned statements and function definitions。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 很酷，对吧？这很简单。接下来是什么呢？好吧，我们可能会进行一些相当直接的扩展。首先，我们可能想教它更多的语法。现在，我们的补全工具只理解赋值语句和函数定义。
- en: We'd probably want to teach it about if statements and while loops and arithmetic
    operators and。 the rest of Python syntax。 We could make it track types。 So it's
    actually quite handy to know not just that a variable exists but what type it。
    is so we could have our completer notice that hey， there is a person class here
    and Alice。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能想教它关于if语句、while循环和算术运算符，以及Python语法的其他部分。我们可以让它跟踪类型。因此，知道一个变量不仅存在而且是什么类型是相当方便的，所以我们可以让我们的补全工具注意到，嘿，这里有一个person类和Alice。
- en: is an instance of person。 So if I type Alice dot， it could say did you mean
    Alice dot name？
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 是一个person的实例。所以如果我输入Alice.，它可以说“你是指Alice.name吗？”
- en: We could give help with function arguments。 We could notice that the cursor
    is inside the arguments to a function call and we could。 pop up some helpful information
    about what arguments that function takes and so on and， so forth。 I mean， I'm
    not actually going to implement any of these， we'd be here all day but we。 wouldn't
    be here much longer than that because these are all pretty straightforward extensions。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以提供函数参数的帮助。我们可以注意到光标在函数调用的参数内，我们可以弹出一些有用的信息，关于这个函数需要什么参数等等。我是说，我实际上不会实现这些，我们会在这里呆上一整天，但我们不会在这里呆太久，因为这些都是相当简单的扩展。
- en: to what we've already set up。 Unfortunately， it's a bit more complicated than
    that and the main and biggest source。 of complication in code completing a Python
    program is that it is mathematically impossible。 to know in advance what a program
    is going to do before you execute it。 And in a languages dynamic is Python that
    means we don't know for sure what functions。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这与我们已经设定的内容相关。不幸的是，这比那复杂一些，完成Python程序代码的主要和最大复杂来源是，在执行之前，数学上是不可能知道程序将要做什么的。在动态语言Python中，这意味着我们不能确定会得到哪些函数。
- en: are going to be defined。 We don't don't know what variables will be valid。 We
    don't know what attributes some module we import is going to have。 So we have
    to approximate。 we have to guess， we have to cheat。 And that's okay because building
    a code completer is a little bit like building the graphics。 to a computer game。
    You don't need perfect physical accuracy。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 将要被定义。我们不知道哪些变量是有效的。我们也不知道我们导入的某些模块将会有哪些属性。因此，我们必须近似，我们必须猜测，我们必须作弊。这没关系，因为构建代码补全器有点像构建计算机游戏的图形。你不需要完美的物理准确性。
- en: You need to keep the human in front of the computer happy。 Here's an example
    of where we might want to cheat so backward references。 This is a perfectly reasonable
    Python program。 It has a function。 doubles everything in a list of numbers with
    this twice function。 And if I'm editing this code。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要让坐在电脑前的人满意。这是一个我们可能想要作弊的例子，因此需要向后引用。这是一个完全合理的Python程序。它有一个函数，使用`twice`函数将列表中的每个数字翻倍。如果我正在编辑这段代码。
- en: I might reasonably expect code completion。 Unfortunately。 the cursor is up here
    and if we are scanning this AST from top to bottom。 then at the point where we
    hit the cursor， we haven't even seen the twice function。 We have no idea it exists。
    So what can we do？ Well， we can cheat。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以合理地期待代码补全。不幸的是，光标在这里，如果我们从上到下扫描这个AST，那么在光标所在的位置，我们甚至还没有看到`twice`函数。我们不知道它的存在。那么我们该怎么办？好吧，我们可以作弊。
- en: We can remember that the cursor was inside the double all function and then
    carry on scanning。 the rest of our module and then go back afterwards and rescan
    that function now that we know。 what's going on in our program。 Is it a cheap
    dirty trick？ Yes。 Does it produce surprisingly good order completion？ Also yes。
    Cheating works。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以记住光标在`double all`函数内，然后继续扫描我们模块的其余部分，然后在知道我们程序的情况后再回去重新扫描该函数。这是一个便宜又肮脏的把戏吗？是的。这会产生惊人的良好顺序补全吗？也是的。作弊有效。
- en: What about invalid code？ Here is a bigger challenge。 So very often if you are
    in the middle of editing a program， your program is not going。 to be syntactically
    valid。 So this is a very common situation。 You're editing on line three。 but line
    two has a syntax error。 And unfortunately， if you feed an invalid program to AST。parse。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 那么无效代码呢？这是一个更大的挑战。所以，如果你正在编辑一个程序，你的程序往往不会是语法上有效的。这是一种非常常见的情况。你在第三行编辑，但第二行有语法错误。不幸的是，如果你将无效程序传递给`AST.parse`。
- en: you're going to get a syntax， error exception raised and that means you're not
    going to get an AST。 Now this is enough information to display a nifty red line
    and say hey， syntax error， on line two。 you might want to go sort that out。 But
    we'd still actually like to provide a little bit more help with the editing that's。
    going on on line three。 So there are a couple of approaches you can take here。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你会遇到一个语法错误异常，这意味着你不会得到一个AST。现在，这足以显示一条漂亮的红线，并说“嘿，第二行有语法错误。你可能想去解决一下。”但我们仍然希望为第三行的编辑提供更多帮助。所以你可以采取几种方法。
- en: You could use some filthy， filthy hacks。 You could notice the syntax error and
    then try and massage that program text into something。 that will parse。 Or you
    can use a parser with error recovery。 Now the idea behind error recovery is that
    you can feed the parser a program that has。 a syntax error in it。 And it will
    still produce a partial AST。 Now of course。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用一些肮脏的黑科技。你可以注意到语法错误，然后尝试将程序文本调整为可以解析的内容。或者你可以使用具有错误恢复功能的解析器。错误恢复的想法是，你可以将一个有语法错误的程序传递给解析器。它仍然会生成一个部分AST。当然。
- en: this is syntactically invalid program。 Somewhere in here， it's going to throw
    its hands up， go。 "Ugh， syntax error， I don't know， what's going on。"， But with
    luck， this approximation。 because it is an approximation， will be good enough。
    that you can still walk over it and learn some things about the program。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个语法上无效的程序。 在这里的某个地方，它会抛弃双手，说：“唉，语法错误，我不知道发生了什么。” 但幸运的是，这个近似值，因为它是一个近似值，将足够好。
    这样你仍然可以遍历它，并学习一些关于程序的东西。
- en: And hopefully what you learn is enough to provide good autocompletion。 Now as
    I've said before。 Python's AST module does not do error recovery。 But that's all
    right。 There are some alternative parses you can use。 So jdai is actually a full-fledged
    code completion system for Python。 Or there are alternative standalone parses
    like tree sitter and laser and so on。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你学到的东西足以提供良好的自动补全。 如我之前所说，Python 的 AST 模块不支持错误恢复。 但这没关系，你可以使用一些替代解析器。 所以 jdai
    实际上是一个完善的 Python 代码补全系统。 或者还有像 tree sitter 和 laser 这样的独立解析器。
- en: And actually the anvil editor I've been showing you doesn't use any of these。
    Because when you write programs in anvil， you write Python code that runs in the
    web browser。 we already make really heavy use of the sculpt Python to JavaScript
    compiler。 And so we use sculpt's parser to do our code completion。 Unfortunate
    consequence。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我给你展示的 anvil 编辑器并没有使用这些。 因为当你在 anvil 中编写程序时，你编写的是在网络浏览器中运行的 Python 代码。 我们已经非常依赖
    sculpt 的 Python 到 JavaScript 编译器。 所以我们使用 sculpt 的解析器来进行代码补全。 不幸的后果。
- en: sculpt's parser does not， is not good at error recovery。 So we lean quite heavily
    on those filthy hacks I was talking about earlier。 But I am one of the sculpt
    maintainers， we are rebuilding the sculpt's parser。 It will be good at error recovery，
    I promise。 Watch this space。 Okay。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: sculpt 的解析器不擅长错误恢复。 所以我们在很大程度上依赖我之前提到的那些肮脏技巧。 但我是 sculpt 的维护者之一，我们正在重建 sculpt
    的解析器。 我保证它会擅长错误恢复。 请关注这个动态。 好的。
- en: let's finish up with something a little bit more philosophical。 Let's talk about
    types。 So we already know that keeping track of the type of variables is useful
    in a code， completer。 So we can say hey Alice is an instance of person。 And that
    means that it has a name attribute。 But what exactly is a type？ Well， as working
    Python programmers。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以一些更哲学的话题来结束。 让我们谈谈类型。 我们已经知道，跟踪变量的类型在代码补全中是有用的。 所以我们可以说，嘿，Alice 是一个 person
    的实例。 这意味着它有一个 name 属性。 但是，类型究竟是什么呢？ 嗯，作为 Python 程序员。
- en: you might say to me the type of an object is it's class， dummy。 It's what I
    get if I call the type function on it。 Or you might say it's what the type annotations
    say， yes， okay， whatever。 As code completion authors， it's actually much more
    useful to think of the academic definition。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会对我说，一个对象的类型就是它的类，傻瓜。 如果我在它上面调用 type 函数，我会得到什么。 或者你可能会说，它就是类型注释所说的，没错，好的，无所谓。
    作为代码补全的作者，实际上考虑学术定义更有用。
- en: of a type， which is to say anything we know in advance about a value。 So here，
    sure。 we know that we got the value of the variable Alice by calling the person，
    constructor。 And we know that the person constructor when it's called returns
    is something that has a。 name attribute。 So yeah， fair game， use it in your code
    completion。 But what about these values？
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 类型是指我们预先知道的任何关于值的信息。 所以在这里，当然。 我们知道通过调用 person 构造函数得到了变量 Alice 的值。 我们知道 person
    构造函数在调用时返回的是有一个 name 属性的东西。 所以，是的，可以用在你的代码补全中。 但是这些值呢？
- en: They both have identical types as far as the interpreters concerned。 They are
    both instances of the dict class。 But they have some crucial differences that
    might be useful to the programmer。 If you're using one of these things， we might
    want to offer completions for what items to， look up。 So it's perfectly valid
    for our code completers to treat these two values as having different。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 从解释器的角度来看，它们的类型是完全相同的。 它们都是 dict 类的实例。 但它们之间有一些对程序员可能有用的关键差异。 如果你使用其中一个，我们可能想提供对要查找的项目的补全。
    所以我们的代码补全器将这两个值视为具有不同类型是完全有效的。
- en: types。 Perfectly fine。 Now， why am I banging on about this？
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: types。 完全没问题。 现在，我为什么要一直强调这个呢？
- en: Because I'm a web guy and the web sucks at this。 All the time we write code
    that hits some remote API。 gets back a blob of JSON and then， tries to look something
    up in the middle。 And of course。 our code completer doesn't stand a chance。 It
    has no idea what's on the other end of that HTTP request or what type of data
    it's。 going to return。 Now in AMBL， we deal with this by using function calls
    to go from the client to the server。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我是一名网页开发人员，而网页在这方面表现不佳。我们总是写代码来调用某个远程API，返回一大堆JSON，然后尝试在中间查找某些内容。当然，我们的代码补全器毫无机会。它不知道该HTTP请求的另一端是什么，或将返回什么类型的数据。现在在AMBL中，我们通过使用函数调用来处理客户端与服务器之间的通信。
- en: And because it's a full stack framework， the code completer knows about that
    server function。 It knows what type get user returns so we can provide useful
    code completion in client， code。 But for traditional web development， we're writing
    two completely different programs that。 know almost nothing about each other。
    And we get no code completion on our application's main data model。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 由于它是一个全栈框架，代码补全器了解该服务器功能。它知道`get user`返回的类型，因此我们可以在客户端提供有用的代码补全。但是对于传统的网页开发，我们正在编写两个几乎互不相识的完全不同程序。我们的应用程序的主要数据模型没有任何代码补全。
- en: It's bonkers。 Now good news is that things are getting better with projects
    like OpenAPI that allow。 a server to specify what type of data will be received
    and transmitted for a particular， URL。 Unfortunately， this being the web platform
    we have chosen something with maximum complexity。 you can write out an extremely
    long YAML file describing the types of your HTTP endpoint。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这真是疯狂。好消息是，随着像OpenAPI这样的项目，事情正在变得更好，允许服务器指定特定URL将接收和传输的数据类型。不幸的是，作为我们选择的网络平台，它具有最大的复杂性。你可以写出一个非常长的YAML文件来描述你的HTTP端点类型。
- en: or you can use a whole bunch of automation， which means more build chain for
    you， I know。 you love it。 You can write your code in fast API， then automate the
    extraction of an open API specification。 from that and then automate the ingestion
    of that into swagger so that you generate an。 up to gate client library and then
    automate the ingestion of that and make sure it lands。
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你可以使用一整套自动化，这意味着你会有更多的构建链，我知道。你喜欢这个。你可以在FastAPI中编写代码，然后自动提取开放API规范，再将其自动导入Swagger，以生成一个最新的客户端库，然后确保它能够成功导入。
- en: in your Webpack build config correctly。 But at least things are getting better。
    Slowly。 And now I'm really on my hobby haul， so it's probably time for me to wrap
    this up。 Today we have learned that code completion isn't magic。 It's so simple
    you have seen me build a code complete alive on this stage。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的Webpack构建配置中正确配置。但至少事情正在变得更好。慢慢来。现在我真的在追求我的爱好，可能是时候结束这个了。今天我们了解到代码补全并不是魔法。它是如此简单，你看到我在这个舞台上实时构建一个代码补全器。
- en: We have learned that code completers cheat。 And that's okay because our only
    job is to keep the programmer happy。 We've learned that parsing is awesome and
    so is working in a programming language where。 that functionality is available
    at our fingertips as part of the standard library。 And I hope we've learned that
    the web needs better code completion。 Come on folks， it's 2022。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们了解到代码补全器是靠作弊的。这没关系，因为我们唯一的工作就是让程序员快乐。我们了解到解析是很棒的，能够在标准库中使用这种功能的编程语言同样如此。我希望我们认识到网络需要更好的代码补全。来吧，大家，现在是2022年。
- en: sort yourselves out。 I have been ready to love this has been building a Python
    code completer。 Thank you very much。 [APPLAUSE]。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 自己整理好。我一直准备好去爱这个构建Python代码补全器的过程。非常感谢。[掌声]。
- en: '![](img/d12cab4ccfc4304f1aba514a1562280c_6.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d12cab4ccfc4304f1aba514a1562280c_6.png)'
