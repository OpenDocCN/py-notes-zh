- en: P18：Talk - Ajinkya Rajput_Ashish Bijlani_Bad actors vs our community_ detecting
    soft - VikingDen7 - BV1f8411Y7cP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P18：演讲 - Ajinkya Rajput_Ashish Bijlani_坏演员与我们的社区_检测软 - VikingDen7 - BV1f8411Y7cP
- en: \>\> Hello， everyone。 Welcome to our next talk， Bad Actors versus our community，
    detecting。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '>> 大家好，欢迎来到我们的下一个演讲，坏演员与我们的社区，检测。'
- en: '![](img/1c830cfea4f636b74aedbc781bb97c6a_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1c830cfea4f636b74aedbc781bb97c6a_1.png)'
- en: software supply chain attacks on the Python ecosystem。 Please welcome Ajish
    Bizlani。 [Applause] Thank you and welcome。 Thank you for attending my talk。 This
    is on supply chain， attacks。 So let's get started。 I'm Ajish。 I hold a PhD from
    Georgia Tech in cybersecurity。 And this is where you can reach me。 I work at Oscillate。
    I'm a research scientist and。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 生态系统中进行软件供应链攻击。请欢迎 Ajish Bizlani。[掌声] 谢谢你，欢迎来到我的演讲。今天的主题是供应链攻击。让我们开始吧。我是
    Ajish，拥有乔治亚理工学院的网络安全博士学位。这是你可以联系我的地方。我在 Oscillate 工作，是一名研究科学家。
- en: we are developing tools to detect software supply chain attacks。 So open source
    software。 is the de facto standard way of building digital apps and services today。
    Modern open source。 software is distributed as packages on package managers。 Examples
    of package managers include。 NPM and PIPI。 For example， PIPI hosts over 300，000
    Python packages and they receive millions。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在开发工具来检测软件供应链攻击。因此，开源软件是今天构建数字应用和服务的事实标准。现代开源软件作为软件包在包管理器上分发。包管理器的例子包括 NPM
    和 PIPI。例如，PIPI 托管超过 300,000 个 Python 包，每天下载量达到数百万。
- en: of daily downloads。 So anybody can publish their package on these package managers。
    They make。 it super easy。 They ship a command line tool that you can use to publish
    your package。 Frictionless。 single command publishing。 However， this limited security
    betting。 What does that mean？ That。 means the software that we use on our server，
    desktops， laptops， other devices is written。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，任何人都可以在这些包管理器上发布他们的软件包。这非常简单。他们提供了一个命令行工具，可以用来发布你的包。无摩擦的单命令发布。然而，这有限的安全性保障。那意味着什么呢？这意味着我们在服务器、桌面、笔记本电脑和其他设备上使用的软件是由。
- en: by unknown volunteers which we blindly trust。 And bad actors exploit exactly
    this trust。 And this is evident from several past incidents。 According to recent
    study， the supply chain。 attacks have tripled in 2021 alone。 And these attacks
    have been carried out on all ecosystems。 NPM。 PIPI， no ecosystem has been spared。
    So what are these supply chain attacks？ So attackers。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 由我们盲目信任的未知志愿者发布的恶意软件。而坏演员正是利用了这种信任。这从多个过去的事件中得到了明显的证明。根据最近的研究，2021 年的供应链攻击数量增加了三倍。这些攻击发生在所有生态系统中，NPM、PIPI，没有一个生态系统能幸免。那么这些供应链攻击是什么呢？攻击者。
- en: target less secure packages or the weak links in your supply chain and they
    inject malware。 in the supply chain by publishing malicious packages。 Unlike vulnerabilities，
    malware is。 intentionally harmful。 It's not an accidental programming bug in a
    benign code。 It is purposefully。 harmful。 For example， a back door that is installed
    immediately upon package installation and that。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '目标是更不安全的软件包或供应链中的薄弱环节，他们通过发布恶意软件包在供应链中注入恶意软件。与漏洞不同，恶意软件是故意有害的。它不是善意代码中的意外编程错误。它是有意而为的有害。例如，安装后立即在软件包安装中安装的后门。 '
- en: steals your SSH keys or Bitcoin wallet addresses。 Such attacks pose direct and
    dangerous threats。 because the same malware can be adopted by millions of devices。
    And yeah， like I said， it has a。 big blast radius。 So what are these techniques？
    So attackers used to publish malware。 So one。 such technique is typo squatting。
    So under typo squatting， attackers publish packages with similar。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 窃取你的 SSH 密钥或比特币钱包地址。这类攻击直接且危险，因为同样的恶意软件可以被数百万设备采用。正如我所说，它有着巨大的爆炸半径。那么这些技术是什么呢？攻击者过去通常会发布恶意软件。一个这样的技术就是拼写错误投机。攻击者发布与现有流行软件包相似的名称，以利用开发者的经验不足或粗心来供应恶意软件。
- en: names to existing popular packages and exploit inexperienced or carelessness
    of developers to。 supply malware。 For example， a name typo during a package installation
    can end up in malware。 In the slide here， we have shown a couple of examples。
    For example， a color rammer impersonates。 a popular package called rammer。 And
    if you make a typo， then you can end up installing。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在软件包安装过程中出现的名称拼写错误可能导致安装恶意软件。在这里的幻灯片中，我们展示了一些例子。例如，一个名为 color rammer 的恶意软件伪装成一个流行的软件包
    rammer。如果你打错了字，那么你可能会安装。
- en: malware on your machine。 So let's take a case study and let's dive deeper into
    what these。 malicious packages are。 So let's take MITM proxy to as an example。
    It personates a popular。 package called MITM proxy。 As you can see， the project
    description is exactly the same。 And。 some of the stats are the same as the original
    package。 So an inexperienced developer may mistake。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件会在你的机器上。因此，让我们进行一个案例研究，更深入地探讨这些恶意包是什么。让我们以MITM代理为例。它冒充了一个名为MITM代理的流行包。正如你所看到的，项目描述完全相同。并且一些统计数据与原始包相同。因此，一个缺乏经验的开发者可能会误以为。
- en: this package as an upgraded version of MITM proxy and download it。 But if you
    look at the， code。 what this package does is it removes some of the safeguards。
    So anyone on the same。 network can execute code on your machine with a single
    HTTP request。 Social engineering。 is another technique that attackers use to do
    maintainers and inject malware。 NPM package。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这个包作为MITM代理的升级版被下载。但是如果你查看代码，这个包所做的就是移除一些保护措施。因此，任何在同一网络上的人都可以通过一个HTTP请求在你的机器上执行代码。社交工程是攻击者用来进行维护和注入恶意软件的另一种技术。NPM包。
- en: event stream is a good example。 Here the attacker first gained trust by posing
    as a benign contributor。 and contributing useful features。 And later he asked
    to maintain the package event stream。 And after gaining the contributor privileges，
    the attacker published malicious code that。 searched for bitcoin addresses。 The
    developer of the package in maintenance mode actually。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: event stream是一个好的例子。这里攻击者首先通过伪装成良性贡献者来获得信任，并贡献了有用的功能。后来他要求维护event stream包。在获得贡献者权限后，攻击者发布了恶意代码，搜索比特币地址。这个包的维护者实际上。
- en: trusted because the attacker was supposedly benign and he contributed popular
    or good features。 So this package is a good example because it receives millions
    of weekly downloads。 Another。 technique that attackers use is dependency confusion。
    So enterprises use internal mirrors。 of package managers。 For example， there will
    be an internal mirror of pipeline that is synced。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 因为攻击者被认为是良性的，并且他贡献了流行或优秀的功能，所以这个包是一个好的例子，因为它每周接收数百万次下载。攻击者使用的另一种技术是依赖混淆。企业使用内部镜像的包管理器。例如，管道会有一个与外部包管理器同步的内部镜像。
- en: with the external package managers as needed。 And the technique exploits the
    default behavior。 of this artifact to always use the higher version of the package
    is available externally。 So what can attacker do？ An attacker can go through manifest
    file available publicly， find。 out what packages are being used for example at
    Microsoft or other enterprise。 And they can。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术利用了该工件的默认行为，总是使用外部可用的更高版本的包。那么攻击者可以做什么呢？攻击者可以通过公开可用的清单文件，找出例如在微软或其他企业中使用的包。
- en: publish higher malicious versions of the same package。 And as a result the artifact
    will。 now install the external malicious package and the malware will be in their
    apps and services。 There have also been cases of account hijacking to inject malware
    in open source packages。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 他们可以发布同一包的更高恶意版本。因此，结果是这个工件现在会安装外部的恶意包，恶意软件会出现在他们的应用和服务中。也发生过账户劫持以在开源包中注入恶意软件的案例。
- en: '![](img/1c830cfea4f636b74aedbc781bb97c6a_3.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1c830cfea4f636b74aedbc781bb97c6a_3.png)'
- en: A popular example is UAParser。js。 It's a JavaScript package with 8 million weekly
    downloads。 The。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一个流行的例子是UAParser.js。它是一个每周下载量达到800万的JavaScript包。
- en: '![](img/1c830cfea4f636b74aedbc781bb97c6a_5.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1c830cfea4f636b74aedbc781bb97c6a_5.png)'
- en: package is actually used in apps and websites to discover the type of device
    or browser。 the person is using from user agent data。 The attacker here hijacked
    the account and published。 malicious version of this popular package。 Let's look
    at another case study。 So this。 is a Python package that we found and we reported
    to the pipeline admins in January。 We found。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这个包实际上用于应用和网站，以便根据用户代理数据发现用户正在使用的设备或浏览器类型。这里的攻击者劫持了账户并发布了这个流行包的恶意版本。让我们看看另一个案例研究。因此，这个是我们在一月份发现并报告给管道管理员的Python包。
- en: that this package downloads a malicious payload from the URL and executes the
    code by spawning。 subprocesses。 And we saw that the email address on this package
    was invalid and that's why。 we looked into this and also we analyzed the APIs。
    So I'll get to that briefly。 So how。 do we defend against such attacks？ Well security
    is a shared responsibility and as a community。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个包从URL下载恶意有效负载并通过生成子进程执行代码。我们看到这个包上的电子邮件地址无效，这就是我们研究这个问题并分析API的原因。因此，我会简要介绍一下。我们如何防御这类攻击？安全是共同责任，作为一个社区。
- en: we must all do our part。 For example， maintainers and package managers can adopt
    two-factor。 authentication to protect against account hijacking。 Package names
    coping can also reduce the risk。 of type of squatting attacks。 However， these
    measures fall short because as we have seen。 with the recent protest where a disk-controlled
    developer can sabotage their own package and。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须各尽其责。例如，维护者和包管理器可以采用**双因素身份验证**来防止账户劫持。包名的应对也可以降低这类**占用攻击**的风险。然而，这些措施仍显不足，因为我们已经看到，最近的抗议中，某个磁盘控制的开发者可以破坏他们自己的包。
- en: inject malware。 So developers must use a zero-trust approach。 They must thoroughly。
    vet code and behavior of every package， every dependency they use。 Easier said
    than done。 This is because manual vetting is infeasible as packages may have hundreds
    of dependencies。 include direct and transitive。 This slide shows dependency of
    PyTorch， popular Python package。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 注入恶意软件。因此，开发者必须采取零信任方法。他们必须彻底审核他们使用的每个包和每个依赖的代码和行为。这说起来容易做起来难，因为手动审核不可行，因为包可能有数百个依赖，包括直接和间接的。这个幻灯片展示了流行的Python包**PyTorch**的依赖。
- en: By the way， this graph only shows transitive dependencies that are at a distance
    of two。 or less from PyTorch。 So as seen from this graph， PyTorch includes several
    dependencies。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一下，这个图表仅显示与**PyTorch**相距两层或更近的传递依赖关系。从这个图表中可以看出，**PyTorch**包含几个依赖。
- en: '![](img/1c830cfea4f636b74aedbc781bb97c6a_7.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1c830cfea4f636b74aedbc781bb97c6a_7.png)'
- en: and manually analyzing each one would be tedious and error-prone。 We can use
    tools。 However。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 手动分析每个包将是繁琐且容易出错的。我们可以使用工具。然而。
- en: '![](img/1c830cfea4f636b74aedbc781bb97c6a_9.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1c830cfea4f636b74aedbc781bb97c6a_9.png)'
- en: existing tools only report known CVs， publicly known CVs in NVD or other public
    database。 For example， sneak advisor reports no vulnerability with clearingly
    malicious packages here。 So this， is an example package， maybe uploaded by a security
    researcher that says this is an example。 package to demonstrate a malicious code
    inside and sneak advisor reports no security risks。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现有工具仅报告已知的**CV**，即在**NVD**或其他公共数据库中公开已知的**CV**。例如，**Sneak Advisor**在此报告没有恶意包的漏洞。因此，这是一个示例包，可能由安全研究人员上传，声称这是一个示例包，用于演示恶意代码内部，而**Sneak
    Advisor**报告没有安全风险。
- en: If you delve deeper， you'll see that this package generates and executes malicious
    code。 at runtime that reads your SSH keys。 How about stats？ Can we rely on stats
    like GitHub。 downloads or stars or forks？ Well， such stats are attacker-controlled。
    Attacker bot can easily。 manipulate downloads or forks。 And more important， there's
    no verification of package proven。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你深入了解，就会发现这个包在运行时生成并执行恶意代码，读取你的`SSH`密钥。统计数据呢？我们能依赖像GitHub的下载、星标或分支这样的统计数据吗？实际上，这些统计数据都是攻击者控制的，攻击者的机器人可以轻易操控下载或分支。而更重要的是，包的来源没有验证。
- en: and source proven and so it may point to a popular package on GitHub。 For example，
    this。 slide shows starjacking where an attacker can easily track users by pointing
    to a popular。 source on GitHub。 So this points to a sample Python project。 It
    has over 4000 stars and。 over 1500 forks。 No verification， like I said， no verification
    is done for the source super。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 来源经过验证，因此它可能指向GitHub上的一个流行包。例如，这个幻灯片展示了星标劫持，其中攻击者可以通过指向GitHub上的一个流行源来轻易追踪用户。这指向一个示例Python项目，拥有超过4000个星标和超过1500个分支。正如我所说，来源没有经过验证。
- en: by package managers。 Therefore， blindly trusting such a vanity stats would be
    naive。 So package is our solution。 We are developing an automated tool to vet
    packages that you， adopt。 So we take a zero trust approach。 We vet every API，
    we vet multiple attributes， of packages。 multiple risky code， as well as metadata
    attributes。 And we provide actionable， security insights。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 由包管理器管理。因此，盲目信任这种虚荣统计数据将是天真的。因此，包是我们的解决方案。我们正在开发一个自动化工具来审核你所采用的包。因此，我们采取零信任的方法。我们审核每个API，审核包的多个属性，多个风险代码，以及元数据属性。并提供可操作的安全洞察。
- en: For example， we test for weak links by checking is the package old， or abandoned。
    The abandoned packages or old packages may not receive security fixes。 So， they
    must be avoided。 Does the package read or send your data over the network？ As
    we have， seen from the example malware。 malicious packages， usually they read
    files， they try to steal， your sensitive data。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们通过检查包是否旧或被弃用来测试弱链接。被弃用或旧的包可能不会收到安全修复。因此，必须避免使用这些包。这个包是否读取或发送你的数据到网络？正如我们在示例恶意软件中看到的，恶意包通常会读取文件，试图窃取你的敏感数据。
- en: which will be in file， and they send this to a remote server。 So a。 package
    that's reading and sending data or remote server is phishing， must be thoroughly，
    checked。 And finally， is the source repo publicly available？ Because if it is
    available， we can。 go and check the source code and we be sure that the package
    indeed contains the code。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数据将存储在文件中，并发送到远程服务器。因此，一个读取和发送数据到远程服务器的包就是钓鱼包，必须经过彻底检查。最后，源代码仓库是否公开可用？因为如果它可用，我们可以去检查源代码，确保这个包确实包含代码。
- en: that is displayed on public source repo。 So package is a command line tool。
    And you can。 customize it to a threat model。 For example， if you think that two
    factor authentication。 may not be risky for you， if you perceive as lack of two
    factor authentication is not risky。 you can turn off that alert and minimize noise。
    So how does it work？ We use static analysis。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这些在公共源代码仓库上显示。因此这个包是一个命令行工具。你可以根据威胁模型进行自定义。例如，如果你认为双重身份验证对你来说风险不大，如果你认为缺少双重身份验证不构成风险，你可以关闭那个警报并减少噪音。那么它是如何工作的？我们使用静态分析。
- en: Specifically， we look at APIs that are being used by packages。 These APIs are
    provided。 by the language ecosystem or the operating system。 And malware has to
    go through these。 APIs if they want to execute any sensitive functionality or
    get access to any sensitive， data。 For example， if they want to read files， they'll
    have to call open read/write file system， APIs。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我们查看包使用的API。这些API是由语言生态系统或操作系统提供的。恶意软件必须通过这些API，如果它们想执行任何敏感功能或访问任何敏感数据。例如，如果它们想读取文件，就必须调用打开、读取/写入文件系统的API。
- en: If they want to send data， they need to call these socket APIs and if they want。
    to generate code at runtime， downloading malicious package or malicious payload
    at runtime and。 execute them， they have to use exact or eval or for。 So we track
    these APIs and depending。 on your threat model， we provide alerts to you。 We also
    look at metadata analysis。 For， example。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它们想发送数据，需要调用这些套接字API，如果它们想在运行时生成代码，下载恶意包或恶意负载并执行它们，就必须使用exact、eval或for。因此，我们跟踪这些API，并根据你的威胁模型，向你提供警报。我们还查看元数据分析。例如。
- en: we look at a mentor email。 Is it valid or not？ Involent email suggests no factor，
    authentication。 We check for abandoned packages because they don't receive security
    fixes。 We check for public source repo for code verification。 And we do some type
    of scoring。 detection based on name similarity。 So time for some action。 All right。
    Let me demo the tool to you。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们查看一个导师邮件。它是否有效？无效的邮件表明没有因素，认证。我们检查被弃用的包，因为它们不会收到安全修复。我们检查公共源代码仓库以进行代码验证。我们还进行某种类型的评分，基于名称相似度的检测。所以是时候采取行动了。好的。让我向你演示这个工具。
- en: So this is the source code。 It's hosted on GitHub， and we'll get to that。 Let's
    try to get a package here。 Does anybody have a popular， package that they want
    to get？
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这是源代码。它托管在GitHub上，我们会谈到这个。我们来试着获取一个包。有没有人有想要获取的热门包？
- en: Twisted。 Pwist。 Is that correct？ All right。 Some errors。 Work in front of us。
    We are fixing it。 But it did analyze the version。 It found version， 2240。 It checked
    the author。 It checked the email。 It checked the read me。 The version， is only
    19 days old。 The repo is found。 It looks good。 Home page is also found。 It looks，
    like it's reachable。 No CV is found。 It's good。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 扭曲。Pwist。是这样吗？好的。一些错误。我们面前的工作正在修复中。但是它确实分析了版本，找到了版本2240。它检查了作者，检查了邮件，检查了自述文件。这个版本只有19天。找到了仓库，看起来不错。主页也找到了，看起来可达。没有发现CV。这很好。
- en: And it downloads the package and it， carried out API analysis by fail。 We can
    try with some other package。 This will be fixed。 But it did say that one risk
    found。 So the home page is non-existent。 It looks like。 And， we can check that
    later。 Let me -- What's that？ \>\> Pip audit。 \>\> Pip audit。 All right。 \>\>
    Pip audit。 \>\> Okay。 \>\> One page。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 它下载了包，并通过失败进行了API分析。我们可以尝试其他一些包。这将被修复。但确实表示发现了一个风险。因此主页是不存在的。看起来是这样的。我们可以稍后检查。让我
    - 那是什么？ \>\> Pip audit。 \>\> Pip audit。好的。 \>\> Pip audit。 \>\> 好的。 \>\> 一页。
- en: \>\> Pip。 \>\> All right。 So the author is a trail of bits。 32 days old。 Read
    me。 \>\> Repos found。 Home page also points to the same repo。 No CV is found。
    And three risks。 So it generates new code at one time。 Perhaps it's supposed to。
    But you can check that by。 going to these -- so no line number was provided for
    this。 This will be fixed in new versions。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: \>\> Pip。 \>\> 好的。作者是一个bits的痕迹。32天前的更新。阅读我。 \>\> 找到的存储库。主页也指向同一个存储库。没有发现CV。还有三个风险。因此它一次生成新的代码。也许这应该是。你可以通过去这些地方来检查
    - 所以没有提供行号。这个将在新版本中修复。
- en: But it also reads directories and files。 And you can go to these files at these
    line number。 and test。 And you can see a lot of this is in test suite。 So that
    can be ignored。 But it's。 good to know what the package is doing。 All right。 So
    the source code of package is hosted on GitHub under oscillate ink。 And as you
    can， see。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 但它也读取目录和文件。你可以在这些行号的文件中查看并测试。你会看到很多内容在测试套件中。因此可以忽略。但了解包在做什么是好的。好的。所以包的源代码托管在GitHub下的oscillate
    ink上。如你所见。
- en: it's a standalone command tool to open source software packages for risky attributes。
    that make them vulnerable to supply chain attacks。 And like you saw， it takes
    two arguments。 The name of the registry package manager and the name of the package。
    And we have already。 seen the output。 But this only supports Python 2。7 and only
    tested on Linux。 So it will download。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个独立的命令行工具，用于开源软件包的风险属性。使它们容易受到供应链攻击。正如你所看到的，它需要两个参数。注册表包管理器的名称和包的名称。我们已经看过输出。但这只支持Python
    2.7，并且仅在Linux上测试。因此它将下载。
- en: package metadata from registry using these APIs。 And also download the package
    itself。 the tarball from registry using APIs。 And it performs API analysis using
    static code analysis。 It checks for vulnerabilities using OSB database。 And how
    do you customize this？ So suppose you。 okay， so we flag inactive or unmaintained
    packages that no longer receive security fixes。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 从注册表使用这些API获取包的元数据。并且也下载包本身。使用API从注册表获取的tarball。它通过静态代码分析执行API分析。它使用OSB数据库检查漏洞。那么你如何自定义这个呢？假设你可以。好的，我们标记不活跃或未维护的包，这些包不再接收安全修复。
- en: But if that's not a problem for you， what you can do is you can go to this file
    threads。csv。 And you can see that we categorize these attributes in four classes，
    malicious， suspicious， which。 is potentially malicious， vulnerable to code exploit，
    includes CVs and a lot of undesirable。 attributes。 So if you don't want alert，
    some alert because of some attribute， you can comment。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这对你来说不是问题，你可以去这个文件threads.csv。你可以看到我们将这些属性分类为四类，恶意、可疑、可能恶意、易受代码利用的漏洞，包括CV和很多不受欢迎的属性。因此，如果你不想因为某些属性而收到警报，你可以注释掉。
- en: that out。 For example， undesirable， old package would be undesirable。 And even
    if that's desirable。 to you， you can comment this out。 And then it will not provide
    all of them。 All right。 Let's continue。 So with this tool， you can write individual
    packages by yourself。 But we actually are building a large-scale waiting infrastructure
    for detecting supply。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，不受欢迎的旧包将被认为是不可取的。即使对你来说是可取的，你也可以将其注释掉。然后它将不会提供所有这些。好的，继续。使用这个工具，你可以自己编写单独的包。但我们实际上正在构建一个大规模的等待基础设施来检测供应。
- en: chain attacks on open-source package managers。 And the service that we have
    created is package。dev。 It's a software service。 It offers better accuracy because
    we have large data set。 The package。 command line tool will operate only on one
    package。 We can download millions of packages。 and test them for any supply chain
    attacks。 So it provides more accuracy。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 针对开源包管理器的链攻击。我们创建的服务是package.dev。这是一项软件服务。它提供更好的准确性，因为我们有大量的数据集。包命令行工具只对一个包操作。我们可以下载数百万个包，并测试它们是否存在供应链攻击。因此它提供了更高的准确性。
- en: So a lot of free reports are available on pre-waded package on the website。
    There's also a command。 line。 It's also a CI/CD plugin to audit pull requests。
    That's also free。 You'll have to。 create an account for that。 And you can review
    security reports。 You can endorse and share。 reports as well。 Let me show that
    to you。 Quickly。 Yeah。 So this is where it's hosted。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 所以在网站上，有很多免费的报告可以在预加载包中获取。还有一个命令行。这也是一个CI/CD插件，用于审核拉取请求。这也是免费的。你需要创建一个账户。你可以查看安全报告。你也可以支持和分享报告。让我快速给你展示一下。是的。这就是它的托管位置。
- en: If you go to your own GitHub， it will point， to package。 There's a CI/CD plugin
    that you can use and audit pull requests。 You can upload， your requirements。txt。
    You can search for packages。 And there's a CI/CD。 All right。 Let's， see some of
    the reports。 So this is a popular Python package。 2。6 million download weekly，
    download。 As you can see。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你去你自己的GitHub，它会指向包。有一个CI/CD插件可以使用并审核拉取请求。你可以上传你的requirements.txt。你可以搜索包。并且有一个CI/CD。好的。让我们看看一些报告。这是一个受欢迎的Python包。每周下载260万次。如你所见。
- en: we provide some stats on this。 So we provide code related stats。 Watch the size
    number of files。 Permissions。 These are important。 So the package would read，
    files and spawn processes。 These are only two are shown here。 But if you go to
    code behavior， you'll see a lot of details。 So it will read files。 It will spawn
    processes。 It will write， the files。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提供一些统计数据。所以我们提供与代码相关的统计数据。关注大小、文件数量、权限。这些都是重要的。因此，包会读取文件并生成进程。这里仅显示了两个。但如果你查看代码行为，你会看到很多细节。所以它会读取文件。它会生成进程。它会写入文件。
- en: It generates code dynamically。 And as you can see， this is being done at installation，
    time。 which is risky。 So you can go to setup。py and you can see that it's reading
    files。 What's reading read me？ So this is OK。 All right。 What is -- so it has
    a package in， out to me。 It will mention a number of files that this package has。
    And provide some popularity， graph。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 它动态生成代码。正如你所看到的，这在安装时完成，这有一定风险。所以你可以查看setup.py，你会看到它在读取文件。读取的是read me？所以这是可以的。好的。那么--它在包中，向我说明。它会提到这个包有多少个文件，并提供一些受欢迎度图表。
- en: And you can see -- okay。 This feature is coming soon。 But you can see this by
    5。30， packages。 Just good。 And this last release was more than 12 months。 So you
    may want to， check that。 All right。 Let's look at BS4。 This is a type of guard
    package。 This is installed。 by the developer of BeautifulSoup so that you don't
    accidentally install a malicious， package。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到--好的。这个功能很快就会推出。但你可以通过5.30包看到这一点。还不错。并且这个最新版本已经超过12个月。所以你可能想检查一下。好的。让我们看看BS4。这是一种保护包。这是由BeautifulSoup的开发者安装的，以防你意外安装恶意包。
- en: So if you go to pipy， you can see that this is a dummy package。 And it's just，
    a placeholder。 And if you look at code behavior， it uses beautiful so which is
    the correct。 package is the dependency。 So if you download BS4 by mistake because
    of -- because of inexperienced。 or you thought that was the correct name， you
    would get beautiful so for package as dependencies。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你去pipy，你会看到这是一个虚拟包。这只是一个占位符。如果你查看代码行为，它使用的是beautiful so，这是正确的包，是依赖项。所以如果你因为经验不足或认为那是正确的名称而错误下载了BS4，你将得到beautiful
    so作为依赖包。
- en: So you are good。 But this is how an attacker can publish a name -- a package
    with the name。 similar to a popular package name。 And you would end up downloading。
    So if you look at。 the number of downloads， this has a huge number of downloads
    for a dummy package。 And how do。 we know this is a dummy package？ It just took
    KB。 And there are only three files。 Only one。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你很好。但这就是攻击者如何发布一个名称类似于流行包名的包。你最终会下载到。如果你查看下载次数，这个虚拟包的下载量非常大。我们怎么知道这是一个虚拟包？它只占用KB。而且只有三个文件。只有一个。
- en: function。 Right？ And one dependency。 So these stats are useful。 PyTorch is another
    one。 This is also a dummy or placeholder package。 You try to install PyTorch。
    All right？ And。 you know that this is a dummy package because just 8。40 bytes。
    Three files， seven functions。 All right。 Looks like it provides some good stats。
    Let's continue。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: function。对吧？还有一个依赖。所以这些统计数据很有用。PyTorch也是其中之一。这也是一个虚拟或占位包。你尝试安装PyTorch。好吧？你知道这是一个虚拟包，因为只有8.40字节。三个文件，七个函数。好的。看起来它提供了一些不错的统计数据。我们继续。
- en: So we did find over 35 malicious packages in January and we reported that to
    pipy。 This。 is -- these are some of the examples that we found。 Let's look at
    them。 So if you go to， pipy。net。 you'll see these malicious packages。 Example
    malicious packages that we reported。 And I think some of them have been taken
    down now。 So let's inspect this particular package。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在1月份发现了超过35个恶意包，并将其报告给pipy。这是——我们发现的一些例子。让我们来看看它们。因此，如果你访问pipy.net，你会看到这些恶意包。我们报告的一些恶意包的例子。我认为其中一些现在已经被下架了。那么，让我们检查一下这个特定的包。
- en: Chris Kean。 So this was uploaded in 2031 September。 And our static analysis
    module flagged this。 as suspicious because it's trying to -- it's trying to spawn
    processes。 It's trying to。 download data from network and read file and all at
    installation time， which is pretty， risky。 So we looked into this and we found
    that this package is indeed malicious。 I think。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Chris Kean。这是2023年9月上传的。我们的静态分析模块将其标记为可疑，因为它试图——它试图生成进程。它试图从网络下载数据并在安装时读取文件，这非常风险。因此我们对此进行了调查，发现这个包确实是恶意的。我认为。
- en: if you scroll down， you'll see what this package does。 This package will do
    different things。 for different operating systems。 On Windows， it's -- I think
    it's trying to override explorer。exe。 On Linux does the same thing。 It doesn't
    overwrite explorer。exe because there's no -- but it will。 download the payload
    from this URL。 And it will execute this payload using subprocess。 So。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你向下滚动，你会看到这个包的功能。这个包会根据不同的操作系统执行不同的操作。在Windows上，它——我认为它试图覆盖explorer.exe。在Linux上也是如此。它不会覆盖explorer.exe，因为没有——但它会从这个URL下载有效载荷。然后它会使用子进程执行这个有效载荷。因此。
- en: we detected this。 All right。 We saw some of the findings。 And this was it。 Thank
    you so。 much for attending the talk。 The source code of the package is hosted
    on GitHub and we have。 millions of pre-voted packages， reports available for free
    at package。f。 And this is powered。 by Ocelight。 Thank you。 [ Applause ]， [ Silence
    ]。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们检测到了这一点。好的。我们看到了一些发现。这就是结果。非常感谢大家参加这个演讲。该包的源代码托管在GitHub上，我们有数百万个预投票的包，报告可以在package.f上免费获取。这是由Ocelight提供支持。谢谢。[掌声]，[安静]。
- en: '![](img/1c830cfea4f636b74aedbc781bb97c6a_11.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1c830cfea4f636b74aedbc781bb97c6a_11.png)'
