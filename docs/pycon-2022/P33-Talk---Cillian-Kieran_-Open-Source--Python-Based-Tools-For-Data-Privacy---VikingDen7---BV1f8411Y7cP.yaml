- en: P33：Talk - Cillian Kieran_ Open Source, Python Based Tools For Data Privacy
    - VikingDen7 - BV1f8411Y7cP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P33：演讲 - 基里安·基里安_ 开源、基于Python的数据隐私工具 - VikingDen7 - BV1f8411Y7cP
- en: But now we're going to hear about open source Python based tools for data privacy
    by Killian。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 但现在我们要听关于基于Python的开源数据隐私工具的基里安。
- en: '![](img/073d92407af662755b1b14a4c1e30940_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/073d92407af662755b1b14a4c1e30940_1.png)'
- en: Kieran。 Thank you so much， Mason。 Thank you all for having me。 I'm going to
    try and get through a huge amount in 30 minutes。 So I apologize if I speak very。
    very quickly。 All of the documentation， all of the repos I'm going to use for
    this are publicly available。 and there are links to everything。 So if you're trying
    to furiously keep up。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 基里安，非常感谢你，梅森。感谢大家邀请我。我会尽量在30分钟内讲完大量内容。所以如果我说得很快，我先道歉。所有的文档和我将要使用的库都是公开可用的，并且都有链接。如果你试图拼命跟上。
- en: please don't try and just listen， I guess。 So very quickly， I'm Killian Kieran。
    I'm the founder and CEO of Efica。 We're a data privacy engineering company。 I'll
    explain what that is in a moment more substantively。 I'm here specifically to
    talk to you about a handful of things that we do。 So very quickly。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 请不要只是尝试听我说话。我是基里安·基里安，我是Efica的创始人兼首席执行官。我们是一家数据隐私工程公司。我稍后会更详细地解释这是什么。我今天特意来跟你们谈谈我们做的几件事情。
- en: we have this sort of thesis about privacy we call privacy as code。 I'm going
    to explain what that is very quickly。 Then an overview of feeders， so what that
    is。 And then show you examples of privacy as code using feeders， which is an open
    source。 privacy engineering platform。 So it really is information dense。 I apologize
    in advance。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个关于隐私的论点，称为“隐私即代码”。我会很快解释这是什么。然后是对“供给者”的概述，也就是它是什么。接着展示使用“供给者”的隐私即代码的示例，这是一个开源的隐私工程平台。所以信息非常密集，提前道歉。
- en: I wanted to squeeze as much in for you guys as possible。 So this might seem
    obvious， but at Efica。 we're about 35 or 40 people and we believe privacy， is
    a fundamental human right。 Everybody in this audience is probably going to agree
    to that。 Privacy is a fundamental human right。 But it turns out it's really， really
    complicated， particularly for engineers。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我想尽量为你们提供更多信息。这可能看起来显而易见，但在Efica，我们大约有35到40人，我们相信隐私是基本人权。这里的每个人可能都同意这一点。隐私是基本人权。但事实证明，对于工程师来说，这真的非常复杂。
- en: It's a difficult thing to do well。 So we care about it， but it's difficult。
    You see today in most businesses， not everyone， but most businesses， it happens
    after you ship。 software， right？ So you ship an application and then you have
    to address privacy problems because you've。 collected some data， right， in production。
    You've got human beings information in it。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一件很难做好事情。所以我们很关心这个，但这很困难。你会看到，现在大多数企业，虽然不是所有，但大多数企业，隐私问题发生在你发布软件之后。你发布一个应用程序，然后不得不解决隐私问题，因为你已经在生产中收集了一些数据。你有个人信息在里面。
- en: Now you've got a privacy risk。 And it becomes a pain for developers and for
    lawyers。 Often it's a pain for developers from lawyers， right？ Like that's the
    reality of it。 And it's things like you might have heard of like data discovery，
    data annotation， data， mapping。 privacy reviews， risk reviews， consent， rights
    propagation。 Et cetera。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有了隐私风险。这对开发者和律师来说都是个麻烦。对开发者来说，往往是律师带来的麻烦，对吧？这就是现实。而且有些事情你可能听说过，比如数据发现、数据标注、数据映射、隐私审查、风险审查、同意、权利传播等。
- en: All of these are the complicated legal concepts。 Now。 the cause of a lot of
    this are reasonably new or relatively new legal regulations like。 the GDPR in
    Europe， the CCPR in California， the LGPD in Brazil， the People Act in China。 There
    are many， many privacy regulations， right？ You're not expected to know the acronyms。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都是复杂的法律概念。很多问题的根源是相对新的法律法规，比如欧洲的GDPR、加州的CCPR、巴西的LGPD和中国的《个人信息保护法》。有很多隐私法规，对吧？你不需要知道这些缩写。
- en: You're engineers。 That's the point。 The idea behind a lot of these though is
    privacy by design。 Now if you're not familiar with privacy by design， that's an
    entirely different topic。 that we won't have time to cover today。 There are seven
    principles in privacy by design。 But the TLDR is essentially how do you make privacy
    a design consideration in technical。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你们是工程师。这就是重点。许多想法的背后是“隐私设计”。如果你对“隐私设计”不熟悉，那是一个完全不同的话题，今天我们没有时间讨论。隐私设计有七个原则。但总的来说，如何在技术中将隐私作为设计考虑因素。
- en: implementation？ Like so how do you do it sooner？ How do you make sure that you
    don't ship a product having not thought about privacy？
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 实施？那么你如何更快地做到这一点？你如何确保在没有考虑隐私的情况下不会交付产品？
- en: These are some of the acronyms and definitions that exist in the world of privacy，
    right？
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是隐私领域中存在的一些缩略词和定义，对吧？
- en: They're pretty complicated。 Anyone here know what a DPIA is？ You don't have
    to answer。 But like they're examples， right？ That's a data protection impact assessment。
    What it really means in plain English is a privacy review。 We create the risk
    of the code that we're writing to make sure that we don't compromise。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这些相当复杂。这里有人知道DPIA是什么吗？你不必回答。但像这些是例子，对吧？那是数据保护影响评估。用简单的英语来说，就是隐私审查。我们创建代码的风险，以确保我们不会妥协。
- en: the human rights of the individual's data in the system。 So lots of these complex
    concepts for engineers。 And what we think at Ethica essentially is that tools
    should be built to add privacy。 into software development。 Bit like shift left
    for security， right？ Like not so different。 And we call that privacy as code。
    So this idea that we can provide tools to developers to make it easier to build
    safer。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 个人在系统中数据的人权。这些都是工程师们的一些复杂概念。而我们在Ethica的看法是，工具应该被构建以将隐私纳入软件开发。有点像安全的向左转，对吧？其实没什么不同。我们称之为隐私即代码。所以这个想法是我们可以为开发者提供工具，使得构建更安全的系统变得更容易。
- en: more respectful systems。 And the benefit of this is really obvious。 If you could
    accomplish this。 like future state panacea， right？ You essentially not have to
    think so much about privacy。 not because you as developers， don't care about it，
    but you're busy doing other things， right？
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 更具尊重性的系统。这一点的好处显而易见。如果你能实现这一点。就像未来的灵丹妙药，对吧？你基本上不必过多考虑隐私。并不是因为你作为开发者不关心，而是你忙于做其他事情，对吧？
- en: Like you're trying to ship applications， solve problems。 Privacy is sort of
    a means to an end。 It's an unfunctional requirement almost， right？ And so we think
    of it as a layer of our tech stack。 right？ We've got front end， back end data
    infrastructure， infrastructure is code。 our source control， environments。 We should
    have a layer that deals with privacy。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 比如你试图交付应用程序，解决问题。隐私在某种程度上是达到目的的手段。这几乎是一种非功能性需求，对吧？所以我们把它视为我们的技术栈的一层，对吧？我们有前端、后端数据基础设施、基础设施即代码、我们的源代码控制、环境。我们应该有一层处理隐私。
- en: So that brings us to the project that we've been working on at Ethica for over
    three years。 So the company's about three years old。 And we've been working on
    this project we call FEDES。 FEDES is named after the Roman Goddess of Trust。 We
    think that's apt given all things。 And it does what it says， right？ It's an open
    source developer tool for privacy by design， right？
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这让我们回到了在Ethica工作超过三年的项目上。公司大约成立三年。我们正在进行的这个项目被称为FEDES。FEDES以罗马信任女神命名。考虑到所有情况，我们认为这个名称非常合适。它的确实现了它所说的，对吧？这是一款旨在隐私设计的开源开发者工具，对吧？
- en: In any tech stack。 Now it happens to be built in Python and that's why we're
    here。 Everything we do is built in Python。 And the intention of this is to help
    developers and engineers of all kinds。 right？ So we're going to have to take a
    look at the software product， data engineers， to more。 easily comply with regulations。
    So sort of remove the cognitive load so you don't have to think about these issues
    and。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何技术栈中。现在它恰好是用Python构建的，这就是我们在这里的原因。我们所做的一切都是用Python构建的。这个的目的是帮助各种开发者和工程师，对吧？所以我们需要查看软件产品、数据工程师，以便更容易遵守法规。这样就可以减轻认知负担，让你不必思考这些问题。
- en: ensure that you're building safe systems for everybody。 So this is a very， very
    dense slide。 We'll try and explain it very simply。 The left side you've got code
    management environments， right？
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你正在为每个人构建安全系统。所以这是一个非常非常密集的幻灯片。我们会尽量简单地解释它。在左侧你有代码管理环境，对吧？
- en: The sort of software development lifecycle where we design， implement， test
    and eventually。 ship stuff。 On the right side you've got your runtime environments，
    right？
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种软件开发生命周期，我们设计、实施、测试并最终交付产品。在右侧是你的运行环境，对吧？
- en: So production infrastructure。 The types of questions that the laws ask us to
    answer are things like on the left。 Well， how can we prevent risk when we're building
    our products， right？
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 所以生产基础设施。法律要求我们回答的一些问题是左侧的内容。嗯，我们在构建产品时如何防止风险，对吧？
- en: Like how do we prevent ourselves from accidentally using phone numbers that
    were collected for。 security and exposing them in APIs for developers， for games？
    That's a real example， right？
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 比如我们如何防止自己意外使用为安全目的收集的电话号码，并在 API 中暴露给开发者和游戏？这是真实的例子，对吧？
- en: That's why Facebook got fined $5 billion for doing that。 Meta， I guess。 Runtime。
    production environment。 Questions like how do we dynamically define and enforce
    a user's rights？
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么 Facebook 因此被罚款 50 亿美元。Meta，我想是这样。运行时。生产环境。问题是我们如何动态定义和执行用户的权限？
- en: And what do we mean here， right？ The GDPR and the CPRA and the LGPD。 they provide
    human beings all of us in the room and everybody， with rights。 Like I can be deleted
    from a system and developers need to be able to assure that we can guarantee。
    that we can consistently delete someone from an entire distributed data infrastructure。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 那我们在这里的意思是什么？GDPR、CPRA 和 LGPD。它们为在场的每一个人提供了权利。比如我可以从系统中被删除，开发者需要能够确保我们可以保证。我们可以始终从整个分布式数据基础设施中删除某人。
- en: And that could be petabytes， right？ So code management environment is how do
    we prevent risk？
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是 PB 级别的，对吧？所以代码管理环境是我们如何防止风险？
- en: Runtime is how do we ensure we afford a user or a human their rights？
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时是我们如何确保用户或人类享有他们的权利？
- en: So we have tools in Fidez that solve these problems。 Fidez control is on the
    left and we'll talk about that in a moment。 Fidez ops is on the right for the
    runtime。 So the way to think about Fidez and I know I'm going fast when I'm trying
    to cover a。 lot of grand， I haven't even got to the live demo where I fall flat
    in my face。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们在 Fidez 中有工具可以解决这些问题。Fidez 控制在左边，我们稍后会讨论这个。Fidez 操作在右边，用于运行时。因此，理解 Fidez
    的方式，我知道我说得很快，因为我试图覆盖很多内容，我甚至还没有开始进行现场演示，可能会跌个跟头。
- en: So the core of Fidez is the language。 Fidez Lang， and I'll show you that in
    a moment。 Think of it as a lightweight description language for privacy and I'll
    sort of elaborate what。 that means in a second。 And again， we've got two applications
    or tools that sit on top of the language。 Fidez control， which I mentioned is
    a server that runs in the software development lifecycle。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 所以 Fidez 的核心是语言。Fidez Lang，我稍后会向你展示。把它看作是一种轻量级的隐私描述语言，我会在一会儿详细阐述这意味着什么。而且，再次强调，我们有两个工具或应用程序位于语言之上。Fidez
    控制，我提到过，这是一个在软件开发生命周期中运行的服务器。
- en: effectively。 It does a few other nifty things， but think of it that way。 Fidez
    ops is a containerized application that allows you to execute and manage tasks。
    on behalf of users' rights。 Okay。 So a little bit more about the language。 This
    is very hard to see on screen。 So if you are sitting at a computer， I'd encourage
    you to。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 有效地。它还做一些其他精巧的事情，但可以这样理解。Fidez ops 是一个容器化应用，允许你代表用户的权限执行和管理任务。好的。那么关于语言，再多说一点。这在屏幕上很难看清。因此，如果你坐在电脑前，我鼓励你。
- en: let me get rid of that。 I'd encourage you to go to FID。ES/taxonomy and you can
    explore the taxonomy in the open， source docs directly。 But so it's a description
    language。 When we say like a description。 we mean lightweight in the way the Terraform
    is， right？ So Terraform describes infrastructure。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我把那个去掉。我鼓励你访问 FID.ES/taxonomy，你可以直接在开放源代码文档中探索分类法。但这是一种描述语言。当我们说“描述”时，我们的意思是像
    Terraform 一样轻量级，对吧？因此，Terraform 描述基础设施。
- en: Fidez describes privacy characteristics。 So its intention is to ensure that
    engineer developers doesn't need to know a whole lot。 about privacy。 You can describe
    the personal data or behaviors of your systems data such that you can then。 enforce
    policy or mitigate risk。 So we don't need to know about privacy。 We just need
    to be able to describe what our system is doing and Fidez takes care of， the rest。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Fidez 描述隐私特征。因此，它的目的是确保工程师开发者不需要了解太多关于隐私的内容。你可以描述你的系统数据的个人数据或行为，以便你可以然后执行政策或降低风险。所以我们不需要了解隐私。我们只需要能够描述我们的系统在做什么，而
    Fidez 负责其余的。
- en: So let's talk about the sort of four components of the core taxonomy in a little
    bit more detail。 They're what we call data categories， right？ So they're the what。
    like the what type of data am I processing？ So as an email addresses， behavioral
    information。 what kind of information am I dealing with？ Then you have a data
    subject， right？ That's the who。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们更详细地谈谈核心分类法的四个组成部分。它们被称为数据类别，对吧？所以它们是“什么”。比如，我正在处理什么类型的数据？像电子邮件地址、行为信息。我在处理什么样的信息？然后你有数据主体，对吧？那就是“谁”。
- en: So who owns the information？ Now ownership is a sort of tricky concept in privacy，
    right？
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 那么谁拥有这些信息？所有权在隐私中是一个相当棘手的概念，对吧？
- en: Because an owner in this context is from whom the data came， right？ So an individual
    like Mason。 for example， right？ As an owner could also be somebody that has collected
    it as a legal right of ownership。 Here we're talking about the human being behind
    the information， right？ Then you get data uses。 So think of that like what we're
    using the information for。 Are we personalizing our system？ Are we。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 因为在这个上下文中，所有者是数据来源的人，对吧？所以像梅森这样的个体，例如，作为所有者，也可以是合法拥有它的人。在这里，我们讨论的是信息背后的人，对吧？然后你会有数据用途。可以把它想象成我们使用这些信息的目的。我们是在个性化我们的系统吗？我们是。
- en: you know， doing advertising？ What are we doing with that data？ And finally data
    qualifiers。 So think of a qualifier in Fidez as a way of declaring how identifiable
    an individual is。 in a given data set。 So someone might be fully identified， right？
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道，做广告吗？我们用这些数据做什么？最后是数据限定符。因此，把 Fidez 中的限定符视为声明个体在特定数据集中可识别程度的一种方式。这样某个人可能是完全可识别的，对吧？
- en: That is to say you've got fully identifiable data。 You might have partially
    setonomized or setonomized and unlinked data。 You might have aggregated and partially
    anonymized data。 And all of these create a different risk of reidentification
    in a data set。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，你有完全可识别的数据。你可能有部分去标识化或去标识化且未关联的数据。你可能还有聚合和部分匿名化的数据。而所有这些都会在数据集中产生不同的再识别风险。
- en: Now what's important to understand is with these four very simple concepts，
    data categories。 data subjects， data uses and data qualifiers， you can essentially
    model most of the， let's。 call it data and privacy characteristics of a system。
    And that's the purpose of this， right？
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，重要的是理解这四个非常简单的概念：数据类别、数据主体、数据用途和数据限定符。你可以基本上建模大多数，姑且称之为数据和隐私的特征。这就是这个目的，对吧？
- en: Do it very， very simply。 So again， if you want to explore the taxonomy more，
    you can do that online。 The one thing I would notice it ships with the taxonomy
    that we've built over the last。 three years working with standards for the GDPR，
    the CPRA， LGPD， also ISO-19944， which。 is the ISO standard related to cloud service
    provider data flows essentially。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以非常非常简单的方式进行。所以，如果你想进一步探索分类法，可以在线进行。我想提到的是，它配备了我们在过去三年与 GDPR、CPRA、LGPD 以及与云服务提供商数据流相关的
    ISO-19944 标准合作所构建的分类法。
- en: So it models against all of the complex regulations that you'd need to consider
    if you think。 about privacy。 You can extend it。 So most of the business users
    that use our open source tools have extended it for their。 specific uses。 And
    we can talk about that afterwards。 So then we get into how you actually declare。
    like how you write this stuff。 It's pretty simple。 Like I mentioned。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 它对你在考虑隐私时需要考虑的所有复杂法规进行了建模。你可以进行扩展。因此，使用我们开源工具的大多数商业用户已经根据他们的特定用途进行了扩展。我们可以之后讨论这个。那么我们接下来就进入如何声明的部分，比如你如何编写这些内容。这相当简单，正如我提到的。
- en: it's intentionally lightweight and declarative in style， right？ It's dot notation，
    mostly。 You'll see there's some snake case in there in some places， which is not
    ideal。 We're working on it。 You declared as yannels in your projects。 We're currently
    working on a version that allows you to declare it in line in whatever。 language
    you're working。 Obviously， first-forces Python， then Java and Scala。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 它的风格故意轻量且声明式，对吧？主要是点符号表示法。你会看到有些地方使用了蛇形命名法，这不是理想的。我们正在处理这个。你在项目中声明为 yannels。我们目前正在开发一个版本，让你在你正在使用的任何语言中在线声明。显然，首先是
    Python，然后是 Java 和 Scala。
- en: But so effectively today you declare it in distinct yannel files that you check
    into your， projects。 So if I wanted to describe two types of data I was handling
    just as examples， if I wanted。 to say I was dealing with data that's non-personal，
    right？ It's data related to systems operations。 like a timestamp。 I would simply
    declare it in that way， system dot operations， right？
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 但今天你实际上是在不同的 yannel 文件中声明它们，并将其提交到你的项目中。因此，如果我想举例说明我处理的两种数据类型，如果我想说我处理的是非个人数据，对吧？它是与系统操作相关的数据，比如时间戳。我会这样声明它，system.dot.operations，对吧？
- en: If I wanted to declare that I was dealing with an email address， I would say
    it's user， provided。 identifiable， contact email。 Now it can be very specific，
    it's a very fine-grained。 specific sort of label， like an email address。 Or it
    can be very abstract。 If I， as a developer。 don't really know what I'm dealing
    with， it might be just I know it's， user data。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我想声明我正在处理电子邮件地址，我会说这是用户提供的可识别联系电子邮件。现在它可以非常具体，这是一个非常细致的标签，比如电子邮件地址。或者它可以非常抽象。如果我作为开发者并不真正知道自己在处理什么，它可能只是我知道这是用户数据。
- en: I could just declare it as user data。 So just very conceptually， it's very simple。
    Then we get into feed as primitives， right？ So there are sort of four primitive
    resources that exist in VDES。 There are organizations that are pretty obvious，
    right？
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以将其声明为用户数据。因此，从概念上讲，这非常简单。然后我们进入原语作为基本元素，对吧？在VDES中存在四种基本资源。这些组织是相当明显的，对吧？
- en: So it represents all or part or any of an organization， right？
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 所以它代表了一个组织的全部或部分或任何部分，对吧？
- en: So it could be a company like Acme Inc， or it could be a department in a company。
    It establishes the root of the resource hierarchy。 So what we mean by that is
    they've limited scope。 So if you had two resources within one project or two organizations
    within one project， for。 example， one organization cannot seek out the scope of
    another， right？ They are completely distinct。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以是像Acme Inc这样的公司，或者是公司中的一个部门。它建立了资源层级的根。因此，我们的意思是它们有有限的范围。如果你在一个项目中有两个资源或一个项目中的两个组织，例如，一个组织无法寻求另一个的范围，对吧？它们是完全不同的。
- en: There's no way around that by design。 Then you got systems。 So systems represent
    the privacy properties of a single project or a service or some code。 base or
    an application。 So think of that as describing the behavior of my system。 Again。
    think of that。 That could be a single service。 It could be an entire monolithic
    application。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这是设计上无法避免的。然后你会得到系统。因此，系统代表单个项目或服务或某些代码基础或应用程序的隐私属性。因此，把它看作是描述我的系统的行为。再次思考一下。这可能是一个单一的服务，也可能是一个整个的单体应用程序。
- en: It depends on how coarsely or how narrowly you want to describe a system's behaviors
    or， properties。 So we see a lot of use of this with larger enterprise customer
    users of the open source。 tools and they're describing individual services， right？
    Like right to enter single microservice。 And so it describes the category of data
    you're using and the purpose for which you're， using it。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这取决于你想要多粗略或多狭窄地描述系统的行为或属性。因此，我们看到很多大型企业客户用户在使用开源工具时，描述个别服务，对吧？就像进入单个微服务一样。因此，它描述了你所使用的数据类别以及你使用它的目的。
- en: And then you get data sets。 Now， in most cases， data sets you can think of them
    as re-describing a sort of data source。 Like a database or a data warehouse or
    some other storage system。 More practically data sets in FIDES are designed to
    represent or model anything that might contain。 data。 So a list， a collection，
    an interface， et cetera。 And finally， the policies。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你会得到数据集。现在，在大多数情况下，你可以将数据集视为重新描述某种数据源。就像数据库、数据仓库或其他存储系统。更实际的说，FIDES中的数据集旨在表示或建模可能包含数据的任何事物。因此，一个列表、一个集合、一个接口等等。最后，还有政策。
- en: So think of policies exactly as they sound。 The ability to describe a set of
    rules about your system in code。 So it's like taking the privacy policy of a business
    and converting it into an enforceable。 rule on that system。 And I'll show you
    an example of that in a minute。 We do that by evaluating policies against systems
    and organizational data sets。 Okay？
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，将政策完全按照字面意思理解。描述关于你的系统的规则集的能力。因此，这就像将企业的隐私政策转换为对该系统可执行的规则。我会在稍后给你一个例子。我们通过评估政策与系统和组织数据集之间的关系来做到这一点。好吗？
- en: So what can you do with FIDES？ You do a whole bunch of things。 but the ones
    that we're going to focus on today， you can。 effectively declare what type of
    data you're handling in your application。 You can describe how your system is
    using that data。 And then you can declare what kind of policies you want to enforce，
    right？
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 那么你可以用FIDES做什么？你可以做很多事情，但我们今天要关注的，是你可以有效地声明在应用程序中处理的数据类型。你可以描述你的系统如何使用这些数据。然后你可以声明想要执行的政策类型，对吧？
- en: So I don't want to be able to do these things or I permit these things， for
    example。 There's a bunch of other nifty things。 So again， just a reminder， FIDES
    control。 which is the developer tools for shifting privacy， left。 so making it
    easier for developers to do this。 And then this FIDES ops。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我不想做这些事情，或者我允许这些事情，例如。还有一堆其他很棒的功能。所以再次提醒，FIDES 控制。它是帮助开发者更轻松地进行隐私转移的开发工具。然后是这个
    FIDES ops。
- en: which is that runtime application that allows us to execute tasks， on our systems。
    I'm going to try and show you an example of both。 How are we doing for time？ We're
    good？ Okay。 awesome。 So we've got two use cases。 So the first is policy enforcement
    in development。 Okay？ Now。 here's a really frightening， well， I'll get to that
    very frightening slide in a minute。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这是运行时应用程序，允许我们在系统上执行任务。我会尝试给你展示这两者的示例。我们时间怎么样？可以吗？好的，太棒了。所以我们有两个用例。第一个是在开发中执行政策。好的？现在。这里有一张非常可怕的幻灯片，我稍后会提到。
- en: Just to explain FIDES controls configuration and components for a moment。 It's
    very simple。 You could deploy it in about 10 minutes。 If you grab the FIDES demo
    repo and just run make demo。 it'll be up and running and， you can play with it。
    But there's essentially a FIDES control server backed to， in this case， a Postgres
    database。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 只需简单说明一下，FIDES 控制配置和组件。这非常简单。你可以在大约 10 分钟内部署它。如果你抓取 FIDES 演示库并运行 make demo。它就会启动，你可以进行测试。但是在这种情况下，实际上有一个后台为
    Postgres 数据库支持的 FIDES 控制服务器。
- en: And there are integrations to your CI pipelines。 And there's also a CLI tool
    so you can query it directly。 So at the moment， the web server is essentially
    headless。 There's some basic UIs for reporting。 which I'll show you in a moment。
    But the server essentially maintains the metadata that's checked in and out through
    the CI pipeline。 and evaluates policies。 Right？ So it's a very simple architectural
    model。 To get started。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 还有与 CI 管道的集成。同时也有一个 CLI 工具，可以直接查询。因此，目前，网络服务器实际上是无头的。有一些基本的报告用户界面，我稍后会向你展示。但服务器基本上维护着通过
    CI 管道检查的元数据，并评估政策。对吗？所以这是一个非常简单的架构模型。让我们开始吧。
- en: super simple。 You can declare it in a tunnel file or a bunch of environment
    variables straightforward。 You can see here there's a URL for the database， server，
    et cetera。 If you want to get it set up。 as I mentioned， you can go to FIDES。ES/CTRL
    and the configuration。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 超简单。你可以在隧道文件或一堆环境变量中声明它。你可以看到这里有数据库、服务器等的 URL。如果你想设置，正如我提到的，你可以访问 FIDES.ES/CTRL
    进行配置。
- en: '![](img/073d92407af662755b1b14a4c1e30940_3.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/073d92407af662755b1b14a4c1e30940_3.png)'
- en: documents that are like quick start is just slash config。 So there's a bunch
    of commands and we won't have time to get through them all here。 But I just want
    to draw your attention to four that are particularly interesting。 They're listed
    here alphabetically， but I'm going to reorganize them to explain them。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 类似快速入门的文档只需输入斜杠 config。所以有很多命令，我们在这里没有时间逐一讨论。但我只想引起你对四个特别有趣的命令的注意。它们按字母顺序列出，但我会重新组织它们进行解释。
- en: So the first thing that you can do is actually scan data infrastructure。 So
    you can actually point FIDES control， for example， in AWS environment。 And it
    will return a list of systems that may contain data and generate data set and。
    system files for them。 So you don't have to do that manually。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你可以做的第一件事实际上是扫描数据基础设施。因此，你可以将 FIDES 控制指向 AWS 环境。它会返回可能包含数据的系统列表，并为它们生成数据集和系统文件。所以你不必手动执行这些操作。
- en: You're not manually declaring everything。 It will generate a scanned view of
    your systems。 From there， you can generate a data set。 So you can point it directly
    at a data source。 You can credential it against a Postgres or Redshift。 And it
    will generate a FIDES data set declaration file。 You can then manually annotate
    it， right？
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你不是手动声明一切。它会生成你系统的扫描视图。从那里，你可以生成数据集。所以你可以直接指向数据源。你可以用 Postgres 或 Redshift 进行凭证认证。它会生成一个
    FIDES 数据集声明文件。然后你可以手动注释，对吗？
- en: So you can describe the types of information that are in that data set。 I'm
    going to show you these in a moment。 And then you can evaluate the risk。 So you
    can say， hey。 check this against policies for the organization。 If you want to
    see a full list of the commands。 it's just FIDES/command。 Now， onto the scary
    thing。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你可以描述数据集中的信息类型。我马上就会向你展示这些。然后你可以评估风险。所以你可以说，嘿。将其与组织的政策进行对比。如果你想查看命令的完整列表，只需输入
    FIDES/command。现在，接下来是可怕的事情。
- en: I mentioned we're going to do a policy evaluation。 Some of you may be familiar
    with this because you're in larger organizations。 Some of you less so。 This is
    what privacy laws are all about。 This is NARS。 This is the Keneel。 So the Keneel
    is the French regulator， right？ So if your software is deployed and being used
    by consumers in France。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我提到我们将进行政策评估。你们中的一些人可能熟悉这个，因为你们在较大的组织中工作。你们中的一些人可能不太熟悉。这正是隐私法律的核心。这是NARS。这是Keneel。Keneel是法国的监管机构，对吧？所以如果你的软件在法国被消费者使用。
- en: the French regulator is looking at it to make sure that you're doing these types
    of things。 This thing I'm referring to is a protection impact assessment or。 a
    privacy review if you're not familiar with these particular regulations。 Privacy
    review basically seeks to create like a giant Rube Goldberg machine， right？
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 法国监管机构正在审查这件事，以确保你正在进行这些类型的操作。我所提到的就是保护影响评估，或者如果你对这些特定的法规不熟悉，就是隐私审查。隐私审查基本上旨在创建一个巨大的鲁布·戈德堡机器，对吧？
- en: Tell us what type of data you're handling。 What are you doing with that data
    for what purpose。 with who， like by who the user is data？ What kind of risk does
    it create？
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 告诉我们你正在处理什么类型的数据。你出于什么目的在使用这些数据？与谁有关，比如用户的数据是谁？这会带来什么样的风险？
- en: Is there a risk of compromising the user's rights or security risk？ Evaluate
    that risk， mitigate it。 and generate an audit trail。 Show us that you thoughtfully
    consider the risks to your users， right？
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 是否存在损害用户权利或安全风险的风险？评估这种风险，减轻它，并生成审计轨迹。让我们看看你是多么深思熟虑地考虑了对用户的风险，对吧？
- en: Sort of like what you would do in threat modeling for security， right？
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 有点像你在进行安全威胁建模时所做的，对吧？
- en: Like the same thing but for privacy。 It's pretty complex。 It usually involves
    legal specialists because they understand the privacy stuff。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 就像隐私的同样事物。它非常复杂。通常涉及法律专家，因为他们理解隐私的内容。
- en: '![](img/073d92407af662755b1b14a4c1e30940_5.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/073d92407af662755b1b14a4c1e30940_5.png)'
- en: And engineers because they understand the engineering stuff， right？
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 工程师因为他们理解工程相关的内容，对吧？
- en: So what we wanted to do was make this easy， right？
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要做的就是让这变得简单，对吧？
- en: We wanted to provide tools that allow us to describe or。 declare a policy like
    a thing we want to support in a business or a team。 And then to enforce that so
    we don't have to check it constantly manually。 So in this example we're going
    to declare the type of data we're processing and， storing。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望提供工具，让我们能够描述或声明我们想在业务或团队中支持的政策。然后强制执行它，这样我们就不需要不断手动检查。在这个例子中，我们将声明我们正在处理和存储的数据类型。
- en: We're going to talk about the type of system that we're doing that in。 And we're
    going to check it against a fictional policy and enforce it， okay？
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论我们进行操作的系统类型。并将其与一个虚构的政策进行对比并执行，好的？
- en: And then we're going to maintain an audit trail so we'll be able to see reports
    about that。 So I'm just going to jump out of this document for a second and。 I'm
    now going to attempt to do this live and of course it'll probably break but， we'll
    have it go。 So the first thing we're going to do is just to show you an example
    of the scan command running。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将维护审计轨迹，这样我们就能看到相关报告。因此，我将暂时跳出这个文档。我现在将尝试现场演示，当然它可能会出错，但我们还是要试试。我们要做的第一件事是给你展示一个扫描命令运行的示例。
- en: Basically this is our demo environment。 You can spin these tools up yourself
    very quickly。 I've declared some environment variables just to hide URLs that
    were pointed at。 And basically what I'm going to do here is I'm going to first
    of all， let's see。 run the scanner first， yeah。 So the first thing we're going
    to do here is we're just going to scan AWS infrastructure。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上这是我们的演示环境。你可以很快自己启动这些工具。我已经声明了一些环境变量，以隐藏指向的URLs。基本上，我将首先运行扫描器，是的。所以我们要做的第一件事就是扫描AWS基础设施。
- en: that I've credentialed this to， right？ So it's basically using the fetus control
    server to connect to an AWS environment and。 scan it for resources。 And by this
    we mean sort of anything that may contain data and。 I put that to a yaml file。
    Ignore that。 That's actually not an error， that's a known issue。 Let me see if
    I can make this a little bit clearer。 Okay。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我已将其授权使用，没错？所以基本上是使用胎儿控制服务器连接到AWS环境，并扫描其资源。我们指的是可能包含数据的任何内容。我将其放入yaml文件中。忽略它。那实际上不是错误，而是已知问题。让我看看能否让这一点更清晰。好的。
- en: it's a bit information dense but you'll see what it's returned here is a list
    of systems。 with keys essentially。 If I expand one of these out。 you can see here
    it describes it with a little bit of metadata。 what kind of resource it is and
    then some of the， you know。
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 信息量有点密集，但你会看到这里返回的是一个系统列表，基本上是带有键的。如果我展开其中一个，你可以看到它用一些元数据来描述它，是什么类型的资源，以及一些其他的信息。
- en: ARNS and addresses for this particular retchif cluster in AWS。 So it's generated
    this metadata view。 right？ Essentially metadata map at the very abstract level。
    each of the systems in our distributed infrastructure。 So that's the first step。
    We've just identified systems that need to be understood， okay？
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: ARNS和AWS中特定的retchif集群的地址。因此，它生成了这个元数据视图，对吧？本质上是在非常抽象的层面上展示每个系统在我们分布式基础设施中的元数据映射。这是第一步。我们刚刚识别了需要理解的系统，明白了吗？
- en: The next thing we want to do is actually connect to one of those and。 generate
    a data set that we actually label， okay？ So we want to say what kind of information
    are we handling in these systems？
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来想做的就是实际连接到其中一个，并生成一个我们实际给标签的数据集，好吗？所以我们想说，我们在这些系统中处理什么类型的信息？
- en: So let me， so we'll just do generate。 So here we've got。 you'll see at the top
    half we've just got a yaml file that's empty。 that I'm just using as a destination
    for this essentially。 And here you'll see I'm basically using the generate data
    set command against a database。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我来，我们就生成吧。所以在这里，你会看到上半部分我们有一个空的yaml文件，我基本上把它当作一个目标使用。在这里，你会看到我基本上是在对着一个数据库使用生成数据集命令。
- en: There's a database URL declared， I'm just writing out to this yaml file。 And
    this will take a few seconds to run。 It's actually going to query the ddl and
    like return a data model for it。 Hopefully。 Uncomfortable silence， I know。 There
    we go， okay， phew。 So you'll see here there are four simple databases here。 And
    if I look at one of these。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个数据库URL被声明，我正在写入这个yaml文件。这将需要几秒钟的时间来运行。它实际上会查询ddl并返回一个数据模型。希望如此。不太舒服的沉默，我知道。好吧，终于来了，呼！所以你会看到这里有四个简单的数据库。如果我查看其中一个。
- en: I've got a set of metadata that describes， the database itself and then each
    of the tables that exist here。 And if I expand those out， I can see there's a
    description about what it is。 There's a data qualifier and there's empty data
    categories。 So I don't know what type of data is in here today， right？ Like that's
    not declared。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我有一组元数据，描述了数据库本身以及这里存在的每个表。如果我展开这些内容，我可以看到关于它是什么的描述。有数据限定符，还有空的数据类别。所以我不知道今天这里有什么类型的数据，对吧？这个并没有被声明。
- en: it's not modeled。 I need to label this manually。 So all we've done so far just
    to be clear is scanned for data systems。 generated data sets。 And the next thing
    we're going to do is talk about how we label these。 Now to make this a little
    bit more real， I'm running from that demo project that I， mentioned。 the feed
    is demo repo。 And I'm running this fictional e-commerce system that I'll show
    you very quickly。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这没有被建模。我需要手动给这个打标签。因此，至今为止我们所做的只是扫描数据系统，生成数据集。接下来我们要讨论的是如何给这些打标签。为了让这更真实一些，我正在从我提到的演示项目中运行，数据源是演示仓库。我正在运行这个虚构的电子商务系统，我会很快给你展示。
- en: And it's a thing of beauty。 It has three products， a Postgres database， no images。
    But it's a very simple application。 It's a flask application。 It allows us to
    test the sort of concepts of feeders。 So in this case。 we've got a couple of products，
    we've got some users。
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这是个美丽的东西。它有三个产品，一个Postgres数据库，没有图片。但这是一个非常简单的应用程序。它是一个flask应用程序。它允许我们测试数据源的概念。因此，在这种情况下，我们有几个产品，还有一些用户。
- en: So it means that we have a very simple data model， right？
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们有一个非常简单的数据模型，对吧？
- en: If I go to the Postgres database for this system， you can see here it's got
    a products table。 a purchases table， and a user's table。 And if I expand out the
    user's table for a moment。 you can see it essentially has six columns or six fields
    of information。 I created that timestamp email first name ID， last name and password。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我去查看这个系统的Postgres数据库，你可以看到这里有一个产品表、一个购买表和一个用户表。如果我稍微展开用户表，你会看到它基本上有六列或六个信息字段。我创建了时间戳、电子邮件、名字、ID、姓氏和密码。
- en: Now we look at how these are annotated or declared in feeders， right？
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看这些在数据源中是如何注释或声明的，对吧？
- en: So if I look at the created field， you can see it carries a data categories
    label。 a systems operations data。 It's the type of information it's in here。 It's
    data related to system operations。 If I compare this to email address， I've got
    user provided。 so user provided， identifiable contact email。 As a developer， if
    I don't know the structure of this。
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果我查看创建的字段，你可以看到它带有一个数据类别标签。一个系统操作数据。这是这里面信息的类型。它与系统操作相关的数据。如果我将其与电子邮件地址进行比较，我得到了用户提供的。因此是用户提供的、可识别的联系电子邮件。作为开发者，如果我不知道这个结构。
- en: I can bless you。 I can simply declare it maybe as user data， I might just say
    it's user information。 I could say it's user provided， I know that it's actually
    been provided by the user。 It could have been derived about the user through observation。
    Is it then identifiable？
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以祝福你。我可以简单地声明它可能是用户数据，我可以说它是用户信息。我可以说这是用户提供的，我知道它实际上是由用户提供的。它可能是通过观察得出的关于用户的信息。它是否可以识别？
- en: Is it contact information？ I could just leave it there。 Or I could specify that
    it's email。 Now these are coming from the feeders taxonomy， right？ So these are
    specifically from this taxonomy。 OK。 So I'm declaring the type of information
    I'm handling in my data set。 Now the other side of this is the system。 So it's
    the actual application that's processing information。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 那是联系信息？我可以就这么放着。或者我可以具体说明它是电子邮件。现在这些来自供给者分类法，对吧？所以这些特别来自这个分类法。好的。所以我在我的数据集中声明了我正在处理的信息类型。现在这另一方面是系统。所以这是处理信息的实际应用程序。
- en: So let's take a quick look at that。 So we've got our data set declaration。 got
    our system declaration。 And we can see here that it describes a little bit about
    it。 It's a sample e-commerce application。 It's used for the purpose of simulating
    an e-commerce system。 Now if we expand our privacy declaration， we'll see that
    it says we provide e-commerce capabilities。
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们快速看看这个。所以我们有我们的数据集声明。有我们的系统声明。我们可以在这里看到它描述了一些内容。这是一个示例电子商务应用程序。它用于模拟电子商务系统。现在如果我们扩展我们的隐私声明，我们会看到它说我们提供电子商务能力。
- en: It declares the types of data we're handling。 So in this case。 we're handling
    user provided identifiable data， user derived identifiable data。 and system operations，
    data。 And it's for the purpose， the data uses e-commerce。 We're not advertising。
    We're not selling the data。 We're not doing any behavioral analysis。
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 它声明了我们正在处理的数据类型。所以在这种情况下。我们正在处理用户提供的可识别数据、用户衍生的可识别数据，以及系统操作数据。这是为了使用电子商务数据。我们不是在做广告。我们不在出售数据。我们没有进行任何行为分析。
- en: any machine learning， classification。 We're just providing e-commerce capability。
    And we've got a custom subject type or user type， called a flask customer。 That's
    all it is。 So this declares the purpose of the system。 The other declares the
    type of data we're handling。 Now let's run an evaluation。 So I'm not running a
    CI pipeline here。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 任何机器学习、分类。我们只是在提供电子商务能力。我们有一个自定义主题类型或用户类型，称为Flask客户。就这些。因此这声明了系统的目的。另一个声明了我们正在处理的数据类型。现在让我们进行评估。所以我这里不运行CI管道。
- en: so I'm basically forcing an evaluation with the feeders， control server on my
    CLI。 So we'll just run that very quickly。 That feeders control evaluate。 Now if
    you look carefully here。 this is maybe a little hard， to see。 You'll see that
    what it's done is it's。 grabbed the system resources files， all of the data， uses
    and declarations。
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我基本上是在我的CLI上强制执行与供给者的评估，控制服务器。所以我们很快运行一下。那个供给者控制评估。现在如果你仔细看，这可能有点难以看到。你会看到它所做的是抓取系统资源文件，所有的数据、使用和声明。
- en: And it basically checks it against a policy。 And it says that it's passed。 We
    get all greens。 Everything's good to go。 So code's checked in。 Now let's imagine
    for a moment that I--。 working with a developer on this e-commerce application。
    I actually decide actually what we're handling here， is not going to be an email
    address。
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 它基本上是根据政策进行检查。它说它已通过。我们得到了所有绿色。所有一切都可以进行。所以代码已提交。现在假设我--。与开发者一起在这个电子商务应用程序上工作。我实际上决定我们处理的不是电子邮件地址。
- en: It's actually users provided identifiable health， and medical data。 So this
    email address is actually some kind of health， and medical data。 And now I attempt
    to check it in again。 So it's checking against our policy。 Big red failure message。
    If we look carefully here， the failure。
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上是用户提供的可识别健康和医疗数据。所以这个电子邮件地址实际上是某种健康和医疗数据。现在我试图再次检查它。因此它在检查我们的政策。大红色的失败信息。如果我们仔细看看这里的失败。
- en: is caused by a rule about rejecting， the use of sensitive data。 So it's basically
    said， hey。 we have a policy in this business， that says we reject the use of sensitive
    data。 for any of these purposes。 And you're attempting to do that。 That's a big
    risk for us。 We can't do that。 So how has that actually been generated？ Well，
    let's look at the policy file。
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 是由一条拒绝使用敏感数据的规则引起的。因此，它基本上是说：“嘿，我们在这个业务中有一项政策，拒绝出于任何这些目的使用敏感数据。你正在尝试这样做。这对我们来说是个大风险。我们不能这样做。”那么，实际是如何生成的呢？让我们看看政策文件。
- en: So this policy file written in FEDA， is very， very primitive。 There's two rules。
    One is minimizing the use of identifiable data。 And the other is rejecting the
    use of sensitive data。 So let's look at the rejection one first。 We can see here
    that it's a simple rejection policy。 If any of these categories of data， any of
    these categories， or any of these types。
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 用FEDA编写的这个政策文件非常原始。只有两个规则。一个是最小化可识别数据的使用。另一个是拒绝使用敏感数据。首先让我们看看拒绝的那个。我们可以看到这是一项简单的拒绝政策。如果这些数据类别中的任何一个，或者任何这些类型被拒绝。
- en: biometric children's genetic， political， race， religion， is being， used for
    any of these purposes。 for personalizing， or system， for advertising， for third
    party sharing， for training and AI system。 we don't permit that。 We reject that。
    That code cannot be committed in this organization。 Now that sounds very harsh，
    but the effort here， is to prevent us from failing and then finding。
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 生物识别儿童的基因、政治、种族、宗教，正在用于任何这些目的，进行个性化、广告、第三方共享和训练AI系统。我们不允许这样。我们拒绝这样。这段代码不能在这个组织中被提交。听起来很严格，但这里的努力是为了防止我们失败后再发现。
- en: a risk in production， in addition to which it prevents， the RUGOBER machine
    I mentioned。 hours of paperwork with legal teams to review risk。 So we check it
    in。 We find that there's a failure。 We update something in our code base。 We redoclare
    our YAML file。 and we're good to go。 It gets checked in。 And each of these policies
    is evaluated into an audit trail。
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 生产中的风险，此外它还阻止了我提到的RUGOBER机器。需要与法律团队进行数小时的文书工作以审查风险。因此，我们将其检查。我们发现有故障。我们更新了代码库中的某些内容。我们重新声明我们的YAML文件。然后一切都准备好了。它被检查进来。每一项政策都会被评估成审计跟踪。
- en: So if I look here， we can see the audit trail。 I've been running some fails
    and passes。 throughout the day just to test it。 The most recent one here is this
    violation that。 relates to the use of helping medical data in our e-commerce，
    system。 So we generate an audit trail for these things。 So let's go back to our
    document very quickly。
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果我在这里查看，我们可以看到审计跟踪。我整天都在运行一些失败和通过的测试。这里最新的一个是与我们电子商务系统中使用医疗数据的违规行为有关。因此，我们为这些事情生成审计跟踪。现在让我们快速回到我们的文档。
- en: So what we've done there is essentially， to clear the type of data we're handling。
    what our system is doing， and evaluate the risk related， to policies we have in
    the business。 and generate a report on it。 Very， very quick。 I'm running out of
    time， so I'm going， to go really。 really fast through the last one， I promise。
    So the last use case is programmatic data rights。
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们所做的实际上是清楚我们处理的数据类型。我们的系统正在做什么，并评估与我们业务中政策相关的风险，并对此生成报告。非常，非常快速。我快没时间了，所以我会非常快速地过最后一个，我保证。最后一个用例是程序化数据权利。
- en: So sometimes called subject rights， DSRs， data subject rights requests， et cetera。
    This is an idea that we can say， hey， Google， delete me from your distributed
    systems。 and in Europe， they've got 30 days， to completely new queue from those
    systems。 No soft deletes。 You've got to be gone。 And we can all imagine the engineering
    difficulty， in achieving this。
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 有时被称为数据主体权利请求（DSRs），这是一个我们可以说“嘿，谷歌，从你的分布式系统中删除我”的概念。在欧洲，他们有30天的时间，从那些系统中完全删除。没有软删除。你必须被彻底删除。我们都可以想象实现这一点的工程难度。
- en: The first issue is you don't know where the data is。 So this is what data subject
    access requests。 look like in practice。 They can be submitted by paper， email，
    a phone call。 This is a real one that's been anonymized a little bit。 So this
    is how they arrive in a company。 And then usually what happens is they， go into
    some kind of ticketing system。
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个问题是你不知道数据在哪里。这就是数据主体访问请求在实践中的样子。它们可以通过纸质文件、电子邮件或电话提交。这是一个经过匿名处理的真实请求。这就是它们如何到达公司的方式。然后通常发生的情况是，它们进入某种工单系统。
- en: someone in the legal team may be reviews the risk， or customer support teams
    have been trained。 then they open up a ticket in JIRA， and then that ticket is
    distributed to a bunch of engineers。 to try and go spelunking to find a user's
    data。 The average time here in the US to complete a data subject。 request is 19
    days and it involves 10 people。 So it's like a huge amount of effort。
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 法务团队中的某个人可能会审查风险，或客户支持团队已经过培训。然后他们在JIRA中打开一个工单，这个工单会分发给一堆工程师，试图去探查以找到用户的数据。在美国，完成数据主体请求的平均时间是19天，并涉及10个人。因此，这需要巨大的努力。
- en: So what we've attempted to do with that metadata layer。 that you've just seen
    being generated by the control server。 is leverage that to build a map of where，
    categories of information exist in the organization。 and then process them。 So
    we can create a policy for enforcement。
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们尝试使用你刚刚看到的控制服务器生成的元数据层，利用它来构建一个映射，显示信息类别在组织中存在的位置，然后进行处理。因此，我们可以创建一个执行政策。
- en: and we can retrieve or erase data from those systems， without having to keep
    updating it。 So we have consistency between our CI pipeline， and our production
    data model。 So in this example。 what we're going， to do is we're going to retrieve
    some fictional data。 but our fictional user in this e-commerce system。 We're going
    to look at what that looks like。
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从这些系统中检索或删除数据，而无需不断更新它。因此，我们的CI管道和生产数据模型之间保持一致性。在这个例子中，我们要做的是检索一些虚构数据，但我们的虚构用户在这个电子商务系统中。我们要看看它的样子。
- en: And then we're going to run it again， when we've made some changes to the data
    model。
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将再次运行它，当我们对数据模型进行了一些更改时。
- en: '![](img/073d92407af662755b1b14a4c1e30940_7.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/073d92407af662755b1b14a4c1e30940_7.png)'
- en: So that to be us code。 Actually， not by to be us code。 Let's go to our browser
    for a minute。 So if you recall， we had our fictional e-commerce system。 We've
    got a test user in here called example user。 I think it is。 Let me double check。
    Yeah。 example user。 OK， so we've already got a test user in this system。
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们要转到浏览器，实际上，不是要转到浏览器。让我们看一下我们的虚构电子商务系统。我们这里有一个叫做示例用户的测试用户。我想是的。让我再确认一下。是的，示例用户。好的，所以我们在这个系统中已经有一个测试用户了。
- en: So what I'm going to do is go to the privacy center。 These are all part of the
    open source tools。 So there's a web application that sits on top of the feeders。
    ops tools that you can style whatever you want。 And it allows you to receive and
    process privacy requests。 So in this one， it's simply configured to take an email，
    address。
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我打算去隐私中心。这些都是开源工具的一部分。因此，有一个网络应用程序坐落在 feeders ops 工具之上，你可以根据需要对其进行样式设置。它允许你接收和处理隐私请求。在这个例子中，它简单地配置为接受电子邮件地址。
- en: So I'm going to submit my email address。 There's no validations。 It's very simple。
    You can modify it whatever you want。 And that's submitted to the feeders ops server。
    And there's a UI that sits on top of that from managing， those requests。 So we
    don't have to do this manually。 And it's all API driven。
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我要提交我的电子邮件地址。没有任何验证。这非常简单。你可以随意修改。并且它提交到 feeders ops 服务器上。上面有一个用户界面，用于管理这些请求。因此，我们不必手动执行此操作。一切都由API驱动。
- en: You could ignore the UIs if you wanted to。 We built these to make it easier
    for non-technical users。 So in this case， we'll see that hopefully when it reloads。
    we've got a new privacy request has been submitted。 When we reveal a PII。 we can
    see it's for our example user。 And we're going to approve this request。
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你愿意，可以忽略用户界面。我们构建这些界面是为了方便非技术用户。因此在这种情况下，希望在重新加载时我们能看到有一个新的隐私请求被提交。当我们揭示PII时，可以看到它是针对我们的示例用户。我们将批准这个请求。
- en: And what's going to happen is it's， going to go and retrieve from any of the
    connected systems。 that users data based on the data categories in that policy。
    It's going to write it to a JSON file and dump it in this， directory。 There it
    is。 So what I'm going to do is just open it very quickly。 We'll just try and predify
    it a bit。 OK。
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 发生的事情是，它将从任何连接的系统中检索用户数据，基于该策略中的数据类别。它将把数据写入一个JSON文件，并将其放入这个目录。就是这样。所以我会很快打开它。我们只是尝试让它更易读一点。好的。
- en: there we go。 So if you look carefully at what it's returned， just a blob， of
    JSON。 there's the purchase address used by the user。 There's actually a mail chimp
    we found not only is that the。 user's email address， it's also storing the user's
    physical， address in the mail chimp。 I'm not sure why， but it does。 And some basic
    information about the user in that way。 Now。
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 看吧。所以如果你仔细看看返回的内容，只是一堆JSON。有用户使用的购买地址。实际上，我们发现MailChimp不仅是用户的电子邮件地址，还存储了用户的实际地址在MailChimp中。我不知道为什么，但确实如此。还有一些关于用户的基本信息。现在。
- en: from here， what would normally happen is we continue。 to add through agile development
    in our software development， lifecycle。 We make changes。 The data model adjusts。
    And then we've got to rewrite all of the scripts and tasks。 that are run to retrieve
    user data。 Now this is where feed is control and feed is ops played。
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里开始，通常的情况是我们继续通过敏捷开发在软件开发生命周期中添加。我们做出更改。数据模型调整。然后我们必须重写所有的脚本和任务，以检索用户数据。现在，这就是feed的控制和feed的操作发挥作用的地方。
- en: together。 So for example， if I go back to that Postgres data set I had， and
    let's make this-- well。 we'll return this to contact email。 And let's say that
    systems operations data。 We'll say， well。 actually， this isn't systems operations，
    data。 We're going to say it's user data。 Now。 by doing that， we're declaring this
    personal， information。 So if a privacy request is run。
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 一起。所以例如，如果我回到我之前的Postgres数据集，假设我们将其--好吧。我们将其返回到联系电子邮件。假设这是真正的系统操作数据。我们会说，实际上，这不是系统操作数据。我们要说这是用户数据。现在，通过这样做，我们声明这是个人信息。如果进行隐私请求。
- en: now we would return that， timestamp。 So I've got a watch engine running in the
    background here。 that's monitoring these。 It's a cheat， so I can do this more
    quickly for you。 So I'm going to resubmit that privacy request for this， user。
    [INAUDIBLE]。 We should have a new one come up now。
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将返回那个时间戳。所以我在这里运行一个监控这些的观察引擎。这是个捷径，所以我可以更快地为你做这个。因此，我将重新提交这个用户的隐私请求。[听不清]。我们现在应该有一个新的请求出现。
- en: '![](img/073d92407af662755b1b14a4c1e30940_9.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/073d92407af662755b1b14a4c1e30940_9.png)'
- en: There we go。 There's a new one。 I'm just going to approve this。 And we'll see
    another JSON object it generated。 And if I open this。 we just compare it to our
    first one。 What we'll see is now it's returning some additional data。 about the
    user。 And that is identified as the timestamp information。
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧。又来了一个新对象。我只是要批准这个。我们将看到它生成的另一个JSON对象。如果我打开这个。我们只需将其与第一个进行比较。我们会看到它现在返回了一些关于用户的额外数据。这被识别为时间戳信息。
- en: because that was identified as user information as metadata， in the data model。
    So effectively。 changes in our CI pipeline are now reflected， directly in the
    metadata layer that's。 enforceable for our policies。 So engineers don't have to
    rewrite anything that's。 bulimping in post-grace or redshift， et cetera， to retrieve，
    data。 So what we've done there is。
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这被识别为用户信息的元数据，在数据模型中。所以实际上。我们CI管道中的变化现在直接反映在元数据层，这是可强制执行的，适用于我们的政策。因此，工程师们不必重写任何在post-grace或redshift等中构建的内容，以检索数据。因此，我们所做的是。
- en: consider very simple policy， retrieve a user data， change the data model， and
    then。 reflect that in that production system。 Some of the other things that we're
    working on。 I'll jump forward， are basically about simplifying， privacy。 So we'll
    be releasing our machine learning classifier。 I don't have time， but I was going。
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个非常简单的政策，检索用户数据，改变数据模型，然后。将其反映在生产系统中。我们正在努力的其他一些事情。让我快速讲一下，基本上是关于简化隐私。因此，我们将发布我们的机器学习分类器。我没有时间，但我本来要。
- en: to give you a sneak preview when we've， been working on it for a year。 And it
    automatically labels data sets， with the feeders taxonomy。 We're adding a UI for
    better visualization， for non-technical users。 And then a bunch of features that
    we're building over the next。
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 给你一个预览，我们已经工作了一年。它自动给数据集打上feeders分类法的标签。我们正在添加一个用户界面，以便于非技术用户更好地可视化。然后是我们在接下来的时间里构建的一堆功能。
- en: three years to help alleviate issues like access controls， in production systems。
    So that's it。 right？ What is privacy as code？ We've covered that。 It's an easy
    way to manage privacy in the development， lifecycle。 You can do this with feeders。
    which is free。 And I've shown you a couple of examples。
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 三年时间帮助缓解生产系统中的访问控制问题。所以就是这样，对吧？什么是代码隐私？我们已经覆盖过了。这是一个管理开发生命周期中隐私的简单方式。你可以通过免费的feeders来做到这一点。我给你展示了几个例子。
- en: of how you can check a policy in CI and automated data rights， request。 It's
    free and open source。 so all Python based。 You can get up and running in 15 minutes。
    I'd urge you to go and grab the project。 Or you can join the Slack community and
    learn more about it。 Thank you very much for your time。 I really， really appreciate
    it。
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如何在CI中检查策略和自动化数据权利请求。这是免费的且开源的，所以都是基于Python的。你可以在15分钟内启动并运行。我建议你去获取这个项目。或者你可以加入Slack社区，了解更多信息。非常感谢你的时间。我真的，真的很感激。
- en: '![](img/073d92407af662755b1b14a4c1e30940_11.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/073d92407af662755b1b14a4c1e30940_11.png)'
- en: '[APPLAUSE]， (applause)。'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[掌声]，(掌声)。'
- en: '![](img/073d92407af662755b1b14a4c1e30940_13.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/073d92407af662755b1b14a4c1e30940_13.png)'
