- en: P58：Talk - Miranda Auhl_ Animating NFL play by play data using matplotlib's
    FuncAnim - VikingDen7 - BV1f8411Y7cP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P58：演讲 - Miranda Auhl_ 使用matplotlib的FuncAnim动画NFL逐场数据 - VikingDen7 - BV1f8411Y7cP
- en: All right。 I think we're finally ready to start。 Sorry for the bit of a wait，
    but hopefully。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我想我们终于准备好开始了。抱歉让你们等了一会儿，但希望。
- en: '![](img/ed22573dd2f8cf2a678008c7665fb628_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ed22573dd2f8cf2a678008c7665fb628_1.png)'
- en: we're good to go。 All right。 Let's give Miranda a round of applause， please。
    Thank you。 Hello everyone。 I hope that you were having a wonderful day so far。
    I am super excited to。 be here today。 This is actually my first time speaking
    at a large conference。 So， whoo-hoo。 Yeah。 Thanks for the enthusiasm。 Whoo。 Today
    we're going to be looking at。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们准备好了。好的，请给Miranda热烈的掌声。谢谢。大家好，我希望你们今天过得很好。我非常兴奋今天能在这里。这实际上是我第一次在大型会议上发言。哇，感谢大家的热情。哇。今天我们将要探讨。
- en: animating with funk animation specifically， which is a matte plot lib class。
    So。 a quick intro on myself。 I had a wonderful introduction already， but my name
    is Miranda， All。 I'm a developer advocate at timescale， which timescale is a time
    series database， built on Postgres。 So that's kind of where I'm coming from。 And
    then I included my GitHub。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是与funk动画相关的，这是一个matplotlib的类。所以，关于我自己的简单介绍。我已经有一个很棒的介绍了，但我叫Miranda Auhl。我是timescale的开发者倡导者，timescale是一个基于Postgres的时间序列数据库。这就是我的背景。同时我也附上了我的GitHub。
- en: first because I will be showing some code snippets in the talk today， but I
    won't be。 going into super detail。 So， if you want to make sure that you can see
    all the detail。 that you want in the Python script that I'm going to be walking
    through today， you can。 access it through my GitHub account。 So don't worry if
    you skip something now。 You can look。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，因为我今天的演讲中会展示一些代码片段，但我不会深入细节。所以，如果你想确保能够看到我今天将要讲解的Python脚本中的所有细节，你可以通过我的GitHub账户访问它。所以现在如果你漏掉了什么也不用担心。你可以查看。
- en: at it later or ask me questions also。 And I'll have a link to the exact repository
    at the。 end of the talk as well。 And then that's just my email and also my Twitter
    handle。 So feel。 free to reach out at any time。 So， I want to take you on a journey
    and unfortunately not。 a hobbit's journey because that would be awesome。 But my
    journey from taking a static。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 之后再看或问我问题。我在演讲结束时会提供确切的代码库链接。然后这是我的电子邮件和Twitter账号。所以，随时可以联系我。我想带你们进行一场旅程，不幸的是这不是霍比特人的旅程，因为那会很棒。但这是我将静态数据转化为。
- en: graph and transforming it into a data animation。 And on this journey， we're
    going to walk through。 this is kind of like the setup and the path that we're
    going to be following。 So first。 right before we can really visualize any data，
    we have to understand the data and actually。 grab the data。 You know， important。
    Then we'll look at actually creating a static visualization。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将图表转化为数据动画。在这个过程中，我们将一起走过。这大致是我们将要遵循的设置和路径。所以首先，在我们真正可视化任何数据之前，我们必须理解数据并实际抓取数据。你知道，这很重要。然后我们将看看如何创建一个静态可视化。
- en: And then the last thing that we'll look at is actually transforming that static
    visualization。 into a data animation。 So we start off as you probably could expect
    from the name of this， talk。 We're starting off with NFL and NFL data。 So in 2015，
    the NFL did something really interesting。 They started requiring that every stadium
    have RFID receivers and that every player。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将看看如何将这个静态可视化转化为数据动画。所以我们开始时，你可能可以从这个演讲的名称中猜到。我们从NFL和NFL数据开始。所以在2015年，NFL做了一件非常有趣的事。他们开始要求每个体育场都有RFID接收器，并且每个球员。
- en: have RFID tags in the ball as well。 Actually have RFID tags that track every
    tenth of a。 second all their movement， speed， acceleration， all this stuff。 So
    as you can imagine， we have。 from 2015 to now， the NFL tracking， speed， acceleration，
    all this stuff every tenth of。 second for every player for every single game。
    That is the lot of really cool time series， data。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 球内也有RFID标签。实际上有RFID标签，可以追踪每十毫秒的运动、速度、加速度等等。所以可以想象，从2015年至今，NFL追踪每个球员每场比赛的速度、加速度等数据，每十毫秒记录一次。这是非常酷的时间序列数据。
- en: And what's amazing and blew our minds at time scale was that the NFL actually
    gave。 access to people to access this data for free。 In the same， like I could
    not believe that。 the NFL released free data for anyone to analyze。 All you needed
    to do is have a casual account。 So starting 2020， the NFL started these big data
    ball competitions where they released。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 令人惊讶的是，在时间尺度上震撼我们的是，NFL实际上允许人们免费访问这些数据。同样，我简直不敢相信NFL发布了供任何人分析的免费数据。您所需要做的就是拥有一个普通账户。因此，从2020年开始，NFL开始举办这些大数据球赛，发布。
- en: a subset of this awesome time series tracking data。 And you could download it，
    download the。 CFPs and analyze it。 And specifically in the 2021 big data ball
    competition， they released。 a bunch of the tenth of a second tracking data available
    and with kind of a bend towards。 passing plays specifically。 But it's still， you
    know， they can't release of course all。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这是这个令人惊叹的时间序列跟踪数据的一个子集。您可以下载它，下载CFP并进行分析。特别是在2021年大数据球赛中，他们发布了一大批每十分之一秒的跟踪数据，特别侧重于传球比赛。但是，他们当然不能发布所有数据。
- en: the data because， you know， they don't want to release everything to the public。
    But they。 did release a huge portion。 And so when my team and I found out about
    this， we were like， whoa。 with great time series data comes great responsibility
    to analyze it。 That's how the， saying goes。 right？ Well， we're just going to roll
    with it and say that that's how it， goes now。 So all analysis。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 数据，因为，他们不想向公众发布所有信息。但是，他们确实发布了大量数据。因此，当我的团队和我得知此事时，我们都惊呆了。伟大的时间序列数据带来了分析的重大责任。说法就是这样，对吧？好吧，我们就这样继续吧。所以所有的分析。
- en: right， we saw that data， we knew that we wanted to analyze it。 So the first
    step is actually getting to know the data， right？ And so this is one table that。
    you can access through the 2021 big data ball competition。 So this is the tracking
    table。 which is tracking that tenth of a second kind of IoT readings basically
    of the players， in the ball。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对，我们看到这些数据，我们知道我们想分析它。因此，第一步实际上是了解数据，对吧？这是一张您可以通过2021年大数据球赛访问的表格。这是跟踪表，基本上跟踪球员和球的每十分之一秒的物联网读数。
- en: And this is actually a subset of the columns that you have access to in that，
    competition。 So we see that there's a lot of data here。 And first I want to start
    off。 by just going through each column and just kind of like helping everyone
    to get to know。 the data a little bit。 So first off we have time， which is a timestamp
    column。 And we see。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上是您在比赛中可以访问的列的一个子集。因此，我们看到这里有很多数据。我想首先通过逐列帮助大家更好地了解数据。首先是时间，这是一个时间戳列。我们看到。
- en: that it is incrementing an a tenth of a second time like stamp。 So first we
    see that we have， 14。599， essentially 14。6 in kind of the far left end of the
    timestamp or the right， excuse， me。 And then the next timestamp is 14。7。 So we're
    getting tenth of a second readings， in this data。 So it's really granular。 That's
    super fun。 That means that we could， there's。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个递增的每十分之一秒的时间戳。因此，我们看到在时间戳的左边或右边，我们有14.599，实际上是14.6。然后下一个时间戳是14.7。因此，我们在这些数据中得到了十分之一秒的读数。这真的很细致。这非常有趣。这意味着我们可以，。
- en: a lot of possibility for how you can analyze this data and aggregate it and
    stuff。 And also。 notice that we have a bunch of repeated rows for each timestamp。
    And that's because right， the NFL。 they put RFID tags on all the players and the
    ball。 So each player and the ball is。 going to be taking in a reading for every
    tenth of a second。 Now in this case， since again。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以分析和汇总这些数据的可能性很多。同时请注意，我们对于每个时间戳有很多重复行。这是因为，NFL在所有球员和球上都放置了RFID标签。因此，每个球员和球每十分之一秒都会进行一次读数。在这种情况下，因为。
- en: the NFL can't release all of the data to us。 They did though release for this
    data set all。 the most important players for a specific passing play and the ball
    for tenth of a second。 So。 that's why you see 14 rows here。 So that's 13 of those
    are going to be players， one of。 which is going to be the ball。 So cool beans。
    Next up we have X and Y。 X and Y are columns。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: NFL无法向我们发布所有数据。然而，他们确实为这个数据集发布了所有关于特定传球比赛的重要球员和球的每十分之一秒的数据。因此，您会看到这里有14行数据。13个是球员，其中一个是球。因此，真不错。接下来我们有X和Y。X和Y是列。
- en: that represent X and Y coordinates on a coordinate plane。 The NFL set up the
    field， the football。 field。 So that they could take in basically as an X， Y coordinate
    plane so that you could。 find out the location of any player or the ball at any
    moment in time during any of these， games。 Pretty sweet， right？ And so that's
    really what these X， Y coordinates are。 It's， yards。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 代表坐标平面上的X和Y坐标。NFL设置了球场，足球场。这样他们可以基本上将其视为一个X，Y坐标平面，以便你能够找到在任何时刻任何球员或球的位置。在这些比赛中，这真不错，对吧？所以这实际上就是这些X，Y坐标的含义。它是码数。
- en: it's in yards。 It's saying exactly where that individual or the ball is at any，
    given time。 So then next we have speed which the S is representing the speed of
    the individual。 at that moment in time。 Then we have acceleration is what the
    A stands for。 Game ID which is a。 unique identifier for each game。 Gotta know
    which one is which， you know， good to know。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 它是以码数为单位。它精确地说明了那个个体或球在任何给定时间的位置。然后我们有速度，S代表个体在那个时刻的速度。接下来是加速度，A就是这个意思。比赛ID是每场比赛的唯一标识符。得知道哪一个是哪一个，知道这些是有好处的。
- en: And then this play ID is talking， specifying since this data is kind of bent
    on just showing。 passing plays。 This play ID is a unique identifier for us to
    know within a game a specific passing。 play。 So that's what that play ID is。 And
    then this last column is kind of important。 And what we're gonna dig into a little
    bit more in today's talk， but it's this frame。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然后这个比赛ID在说，指定由于这些数据主要是展示传球比赛。这个比赛ID是我们在比赛中知道特定传球的唯一标识符。这就是这个比赛ID的作用。然后最后一列是相当重要的。在今天的讨论中，我们将深入探讨这一点，但这是这个帧。
- en: And kind of at first glance， you know， it's not super clear what it is。 Essentially
    this。 frame column is taking every tenth of a second and mapping it to an integer
    value。 And it， also。 it's not only just mapping it to an integer value， but it's
    mapping it to an integer value。 that's increasing continuously with time。 So as
    you see right， the 14。599， tenth of a second。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一开始，你知道，这并不特别清楚它是什么。实际上，这个帧列是在将每个十分之一秒映射到一个整数值。而且，它不仅仅是将其映射到一个整数值，而是将其映射到一个随着时间不断增加的整数值。因此，正如你看到的，14.599的十分之一秒。
- en: is mapped to a frame value of one。 And the 14。7 second， tenth of a second is
    mapped to。 a frame value of two。 So we see that as time is increasing， that frame
    value is increasing。 And another note that when we looked at this data more is
    that for every play ID， it will。 count every tenth of a second and map each tenth
    of the second to the frame。 But then as。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 映射到帧值为一。而14.7秒的十分之一秒映射到帧值为二。因此我们看到，随着时间的增加，这个帧值也在增加。还有一个值得注意的地方是，当我们进一步查看这些数据时，对于每个比赛ID，它会计算每个十分之一秒并将其映射到帧上。但是然后随着。
- en: soon as you hit a new play value， so like if we were to go to 76， the frame
    value would。 kind of restart at one。 So essentially we know from this that that
    14。599， tenth of a second。 was the first tenth of a second to occur in the 75th
    play。 And then you know the 14。7。 was the second tenth of a second to occur in
    the 75th play。 So these frame IDs are unique。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你触发一个新的比赛值，比如说如果我们进入76，这个帧值会重新开始计数。因此，我们从中知道14.599的十分之一秒是在第75场比赛中发生的第一个十分之一秒。然后你知道14.7是第75场比赛中发生的第二个十分之一秒。因此，这些帧ID是独特的。
- en: to the play。 Alright， so we get to know our data。 Now right， we can get to the
    fun stuff。 We can actually analyze it。 We can create visualizations。 And so one
    of the visualizations。 that I wanted to know was， well， we have these x， y coordinates。
    Let's actually plot these。 players on a field， right？ That seems kind of fun。
    And we have the information。 Let's， do it。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 到比赛中。好吧，现在我们开始了解我们的数据。现在我们可以进入有趣的部分。我们实际上可以分析它。我们可以创建可视化图表。因此，我想知道的其中一个可视化是，我们有这些x，y坐标。让我们实际上在场地上绘制这些球员，对吧？这听起来挺有趣的。我们有这些信息。来吧，做吧。
- en: So I created a script and I set up my Python script kind of with an argument
    because。 I wanted to focus on one play at a time。 And so I defined the game ID
    that I wanted to look。 at and then the play ID that I wanted to kind of zoom in
    on and graph the data from。 So I。 defined that。 And then I also pull in my data
    from my time scale DB database。 So I'm pulling。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我创建了一个脚本，并且我的Python脚本设置了一个参数，因为我想专注于一次一个的比赛。因此，我定义了我想查看的比赛ID，然后是我想要深入分析并绘制数据的比赛ID。于是我定义了这个。然后我还从我的时间尺度数据库中提取我的数据。因此我在提取。
- en: that data in my Python script for this specific play。 So then I can really dig
    in more and。 analyze it。 So then I have data in my Python script。 What's next？
    Well， if I'm going to。 plot players on a field， I'm going to need a field。 So
    what I did was that I created a。 generate field function， which I could just call
    that and get this awesome field。 So I。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的Python脚本中，这个特定动作的数据。因此我可以深入挖掘并分析它。那么，我在我的Python脚本中有数据。接下来是什么？好吧，如果我要在场地上绘制玩家，我需要一个场地。因此我创建了一个生成场地的函数，我可以直接调用它，得到这个超棒的场地。所以我。
- en: made it so that I kind of like smush all of my matplotlib functions into one
    kind of。 wrap them all up into one function so that I can call that generate field
    and get you。 know the yard lines and the hash marks and all this good stuff。 So
    then， right， we have。 a field but now we need to actually plot the players。 So
    I created another function。 I。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我让所有的matplotlib函数融合在一起，打包成一个函数，这样我可以调用它来生成场地，获取你知道的码线和标记等等。所以，然后，我们有了一个场地，但现在我们需要实际绘制玩家。所以我创建了另一个函数。
- en: created a draw play function。 And this draw play function takes in a value of
    a frame。 So it takes in a frame argument and it's going to draw a play kind of
    plot in a play from。 that frame。 So with the frame value， it represents right
    a moment in time。 So I can put in a moment。 of time and get this plot plotted。
    So with this function， I made it so that I plot， oh。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我创建了一个绘制动作的函数。这个绘制动作函数接受一个帧值。因此它接受一个帧参数，并将在该帧中绘制一个动作图。因此，帧值表示一个时刻。我可以输入一个时刻，并绘制这个图。因此，通过这个函数，我让它绘制，哦。
- en: this is just， you know， showing us the frame value。 So with this plotting function，
    I take。 in that frame value and then I can actually plot the players。 I created
    a legend and I。 also get a title。 So， all right。 So now in order to actually create
    the function and plot it。 on a graph， I made it so that I can just call these
    four lines of code and get， you know。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是，知道吧，给我们展示框架值。所以通过这个绘图函数，我获取了这个框架值，然后实际上可以绘制玩家。我创建了一个图例，并且我还得到了一个标题。所以，好吧。现在为了实际创建函数并在图表上绘制，我让它可以只调用这四行代码，得到，你知道的。
- en: this static plot that I wanted。 And so the first line is a figure。 So I'm creating
    a。 matplotlib figure。 Second line is I generate the field so I produce the field
    on the figure。 Third line is that I'm calling the draw play function for a frame
    ID value of 65。 And then。 the last line is plot show that actually shows us the
    plot in， you know， so that we can see， it。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这个我想要的静态图。所以第一行是一个图形。我正在创建一个matplotlib图形。第二行是我生成场地，因此我在图形上生成场地。第三行是我为帧ID值为65调用绘制动作函数。然后最后一行是绘图显示，实际上给我们展示了这个图，所以我们可以看到它。
- en: So this is the 75th， 10th of a second for this specific play that I'm kind of
    digging。 into for this script。 And so， you know， we see we have home team， away
    team， we have the。 football and like， you know， this is pretty cool。 You know，
    this is an interesting graph。 I can see that like， I see the players on the field，
    but like， you know， is the ball being。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这是我正在深入研究的特定动作的第75秒，10分之一秒。你知道的，我们看到主队、客队，还有足球，像你知道的，这很酷。你知道，这是一个有趣的图。我可以看到场上的玩家，但你知道，球在哪里。
- en: passed right now？ It seems to be kind of floating in air。 No one's really attached
    to it。 So。 really， this static plot， I was like， it's not really doing it for
    me。 And so， I asked。 the question， well， what if I could animate it and actually
    not only just animate the。 players movements as they were going through this play，
    but also see historically where。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在传递过来了吗？它似乎漂浮在空中。没有人真正附着于此。所以，实际上，这个静态图，我觉得，它对我来说并不算太好。因此，我问了一个问题，嗯，如果我可以让它动画化，不仅让玩家在这个动作中移动，还能看到历史上。
- en: they went as they went through the play。 And this is really where funk animation
    comes， into play。 And so， but in order to understand how to use funk animation，
    I really feel that。 you have to understand how animations work in general because
    they play， they tie directly。 together。 So， let's consider a flip book。 So a flip
    book is， you know， traditionally。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 他们在进行这个动作时移动。这就是funk动画发挥作用的地方。但为了理解如何使用funk动画，我觉得你必须理解动画是如何工作的，因为它们直接相连。所以，让我们考虑一个翻书。翻书，通常是这样的。
- en: it's usually a set of static drawings that you flip through really fast to kind
    of give。 this illusion of motion。 And so， that is exactly， I actually created
    a digital flip book with。 my iPad。 And so， I drew a bunch of static images of
    this pink ball。 Okay。 Each one is。 just a static image， you know， cool beans。
    I get this static image。 Awesome。 Well， what's。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 通常是一组快速翻转的静态图像，以给人这种运动的错觉。因此，我实际上用 iPad 创建了一个数字翻页书。我画了一堆粉色小球的静态图像。好吧。每一个都是。仅仅是静态图像，你知道，酷豆。
    我得到了这个静态图像。太棒了。那么，什么是。
- en: super cool is that when you play these static images one after the other in
    like， in sequence。 you get an animation。 Right。 You take these static images，
    you string them together， and。 you get an animation。 And that， folks， is exactly
    how funk animation works。 It's basically。 a fancy digital flip book。 So， how funk
    animation， how the process works is that funk animation。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 超酷的是，当你依次播放这些静态图像时，你会得到动画，对吧？你把这些静态图像串在一起，然后。你得到了动画。这，朋友们，就是 funk 动画的工作原理。它基本上是一个华丽的数字翻页书。那么，funk
    动画的过程是这样的。
- en: takes a static graphing function and it iterates over that function again and
    again。 So it。 produces， you know， the static graphing function produces a graph。
    So funk animation iterates。 over that and it's creating all these static graphs
    which it then kind of puts all together。 plays one after another to create an
    animation。 So， if we're going to use funk animation in。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 取一个静态图形函数，并对该函数进行反复迭代。因此，它会产生，你知道，静态图形函数生成一个图形。所以 funk 动画迭代。它创建了所有这些静态图形，然后将它们合在一起，依次播放以创建动画。因此，如果我们要在。
- en: our code， we got to understand how to use it， right？ So， here， I took this from
    the matplot。 lib documentation and this is a just like all the arguments that
    we would need if we were。 going to use funk animation。 And I highlighted the two
    necessary requirements that you have。 to include when using funk animation。 So，
    the first one is fig。 Fig requires a figure， matplot。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的代码，我们必须了解如何使用它，对吧？所以，这里我从 matplot。lib 文档中提取了这个，这就是我们在使用 funk 动画时需要的所有参数。我强调了在使用
    funk 动画时必须包含的两个必要要求。因此，第一个是 fig。fig 需要一个图形，matplot。
- en: figure object that it can kind of produce this animation on。 And then funk represents。
    a plotting function that matplot， or that funk animation can actually iterate
    on to create。 all those static graphs which it will then， you know， mesh kind
    of weave all together。 Hopefully。 at this point， you're like， wait a minute。 I
    think we have that。 I think we。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图形对象可以生成这种动画。然后，funk 代表一个绘图函数，matplot，或者说 funk 动画实际上可以迭代以创建。所有这些静态图形，然后，你知道，它会将所有图形融合在一起。希望到此为止，你会想，等一下。我觉得我们有那个。我觉得我们。
- en: have these exact two things and we do， in fact， by setting up the static graph
    like this。 we create a figure that's the first line of code that we do。 Cool。
    We got the first requirement。 Awesome。 And then the third line of calls the drawplay
    function。 And we know that drawplay。 function is， in fact， an iterable function。
    And that is because of the frame。 This frame。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们确实有这两样东西，通过这样设置静态图形。我们创建了一个图形，这是我们所做的第一行代码。很酷。我们满足了第一个要求。太棒了。然后第三行调用了 drawplay
    函数。我们知道 drawplay 函数实际上是一个可迭代函数。这一帧。
- en: is directly tied to time。 So， as we iterate over this frame value， you know，
    we're going， you know。 one， two， three， through these integer frame values， right，
    we're actually iterating， over time。 We're looking at the first tenth of the second，
    the second tenth of the second。 and continually on and on and on。 So， when we
    iterate over this frame， we're actually iterating。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 与时间直接相关。因此，当我们对这个帧值进行迭代时，你知道，我们在，知道。一，二，三，遍历这些整数帧值，对吧，我们实际上是在对时间进行迭代。我们在查看第一分之一秒，第二分之一秒。不断地、持续地。
    所以，当我们对这个帧进行迭代时，我们实际上是在迭代。
- en: over time。 And that's exactly what we want to plot， right？ We want to plot the
    players'。 movements on this field over time。 And so， we have the two requirements。
    Well， now the。 next question is， can I just， you know， throw it into the function
    and function and we're， good？
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 随时间推移绘制。这正是我们想要绘制的，对吧？我们想在这个场地上绘制玩家的运动，随着时间推移。因此，我们有两个要求。好吧，现在下一个问题是，我能否直接将它放入函数中，函数就好了？
- en: And the answer is basically yes。 But we need to do just a few quick adjustments。
    to make sure that it works。 So， one thing is that if we were to animate our drawplay
    function。 as it is right now where I， you know， plot the figures on the field，
    create the legend。 create the title， we would get something like this。 Not ideal，
    right？ This is not exactly。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 答案基本上是肯定的。但我们需要做一些快速调整，以确保它能够正常工作。因此，一件事是，如果我们要动画我们的绘制播放函数。就像现在一样，我知道的，在场上绘制图形，创建图例，创建标题，我们会得到这样的结果。不理想，对吧？这并不完全。
- en: what we want。 So， like， the players' movements， that's good， right？ I want to
    see how the players。 are moving over time and I want to keep their historical
    movement in view。 But this legend。 is a problem。 And so， that takes me to wanting
    to talk about these two types of functions。 that you can use when you create your
    iterative function that you're going to insert into。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要的是什么。因此，例如，球员的运动，这很好，对吧？我想看看球员如何随着时间的推移而移动，并且我想保留他们的历史运动。但这个图例是个问题。所以，这让我想谈谈这两种函数类型。当你创建要插入的迭代函数时，你可以使用。
- en: Funk animation。 And that is plotting functions， plotting function types versus
    setting function。 types。 So， plotting function types， I highlighted the three
    functions that I call， the three。 types of functions that I call my iterative
    function， my drawplay function。 And this plot。 function that we're going to look
    at first， that is truly a plotting function。 It's additive。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Funk动画。这是绘图函数，绘图函数类型与设置函数类型。因此，绘图函数类型，我强调了我称之为的三个函数，三种类型的函数，我称之为我的迭代函数，我的绘制播放函数。这个我们将首先查看的绘图函数，确实是一个绘图函数。它是累加的。
- en: Because the animation is continuing， it's adding plots to the animation。 So，
    every time draw。 play is called， this plot function is going to add a new plot
    to the animation。 It's additive。 So。 that's what plotting functions are additive，
    okay？ Saying that a lot。 My apologies。 Just。 remember it now， forever。 So， then
    the next function that we're going to look at is set， title。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 因为动画在继续，它正在向动画中添加图形。因此，每次调用绘制播放时，这个绘图函数将向动画中添加一个新图形。它是累加的。因此，这就是绘图函数的累加特性，好的？说了很多。抱歉。记住这一点，现在，永远。
- en: This function is a setting function。 It's going to replace。 So， plotting function。
    add when you animate， setting functions replace when you animate。 And so， this，
    the title， you know。 it's not really causing a problem。 Probably， you know， every
    time draw play， is called。 it's setting the title。 So， maybe for efficiency sake，
    we might want to move， it out。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数是一个设置函数。它将被替换。因此，绘图函数。在你动画时添加，当你动画时，设置函数会被替换。因此，这个标题，你知道的。它并没有真正造成问题。可能，你知道，每次绘制播放时，都会被调用。它在设置标题。所以，出于效率考虑，我们可能想要把它移出去。
- en: But I'm just going to leave it there for now because it's not causing tons of，
    issues。 But the legend， the last function， this is a problem， right？ This is actually。
    acting as a plotting function， right？ Because it's adding a legend every single
    time the。 draw play function is called。 So， this is a problem， easiest way。 We
    remove it。 And we。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 但我暂时就把它放在那儿，因为它并没有造成很多问题。但是图例，最后一个函数，这是个问题，对吧？这实际上是作为绘图函数在起作用，对吧？因为每次调用绘制播放函数时，它都会添加一个图例。所以，这是个问题，最简单的方法就是删除它。我们。
- en: move it to the generate field function， which only goes once。 So， that just
    makes it easy。 It's an easy way， quick fix to remove that plotting function。 That
    is doing what we don't。 want it to do。 So， then the next caveat you want to make
    sure is that whenever you create。 your iterative function， the value that you
    iterate over or the argument that you iterate。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 将其移到生成字段函数中，这个函数只会执行一次。因此，这使得它很简单。这是一个简单的方法，快速修复，以删除那个我们不想要的绘图函数。因此，接下来的注意事项是，确保每当你创建你的迭代函数时，你迭代的值或你迭代的参数。
- en: over has to be the first argument specified in the definition。 So， for draw
    play， right？
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义中，over必须是第一个指定的参数。因此，对于绘制播放，对吧？
- en: It doesn't matter。 We have only one argument value。 But say that I had two other
    arguments。 in my iterative function， I need to make sure to call frame first and
    then all the other。 arguments after。 So， that's just something that Funke animation
    really looks for。 It。 will not work if you don't put that iterative argument first。
    Okay。 So， now we can actually。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这没关系。我们只有一个参数值。但假设我有两个其他参数。在我的迭代函数中，我需要确保先调用框架，然后再调用其他参数。这就是Funke动画真正关注的内容。如果你不把迭代参数放在第一位，它将无法工作。好的。那么，现在我们实际上可以。
- en: create our animation。 We can transform that static graph into an animation。
    So， here。 is static graph Python code。 And we have Funke animation at the top
    of definition just for。 reference。 So， first off， we need to actually insert Funke
    animation into our code。 Cool， means。 We put it in。 The thing is that Funke animation，
    it needs to store the animation， into a variable。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 创建我们的动画。我们可以将这个静态图表转换为动画。所以，这里是静态图表的 Python 代码。我们在定义的顶部有 Funke 动画，仅供参考。所以，首先，我们需要实际上将
    Funke 动画插入到我们的代码中。很好，意思是我们把它放进来。问题是 Funke 动画需要将动画存储到一个变量中。
- en: And so， in this case， I called my variable anim represents animation。 And then
    it's just one of the requirements with Funke animation。 It has to have somewhere。
    to store the animation。 So， you create that variable。 Next， you have the two required
    arguments。 So。 first， we have fig。 We throw our fig in there and then draw play
    which is the iterative， function。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在这种情况下，我称我的变量 anim 表示动画。然后，这是使用 Funke 动画的一个要求。它必须有某个地方来存储动画。因此，你创建那个变量。接下来，你有两个必需的参数。所以，首先，我们有
    fig。我们把 fig 放进去，然后是绘制播放函数，它是迭代函数。
- en: That's the next required argument。 And we just call the name。 You don't add，
    any of the arguments。 You just call the name of the function and you throw it
    in there。 And then， lastly。 I wanted to also -- oh， sorry， I didn't -- Michael's
    there。 I also。 wanted to specify the frames that Funke animation is going to iterate
    over。 By default， Funke。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这是下一个必需的参数。我们只需调用名称。你不添加任何参数。你只需调用函数的名称并把它放进去。最后。我还想——哦，抱歉，我没有——迈克尔在那儿。我还想指定
    Funke 动画将要迭代的帧。默认情况下，Funke。
- en: animation will iterate starting at an integer value of zero。 And it's going
    to iterate over。 integer value。 So， it goes zero， one， two， you know， on， so on
    and so forth。 In our case， right。 we like the integer value。 We want to iterate
    over an integer value。 But we want。 it to start at one and iterate over the integer
    values。 So， we can actually specify the exact。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 动画将从整数值零开始迭代。它将遍历整数值。所以，它从零开始，一，二，依此类推。在我们的案例中，我们喜欢整数值。我们想要在整数值上迭代。但我们希望它从一开始，并在整数值上迭代。所以，我们实际上可以指定确切的。
- en: range of values we want for animation to iterate on。 And in this case， right，
    I want values。 starting at one， you know， going at -- increasing by one。 And then
    this one 13 is just the max。 value for the frame for this specific play。 So， I
    just put bounds around all the frame， values。 So。 that's where I get that one
    from because we're starting at one。 And it goes， all the way to one 13。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望动画迭代的值范围。在这种情况下，我想要的值是从一开始，你知道，按一的增量增加。然后，这个 13 就是这个特定播放的帧的最大值。所以，我把所有帧值放在边界内。所以，这就是我从哪里得到了，因为我们从一开始。它一直到
    13。
- en: And then friends， well， now we can actually comment out the draw。 play frame
    function that we call up there and the plot show there for the static graph。 We
    can comment that out。 And now put plot show underneath our animation。 And -- oh，
    it doesn't。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然后朋友们，嗯，现在我们实际上可以注释掉上面调用的绘制播放帧函数和静态图表的显示。我们可以把它注释掉。然后把图表显示放在我们的动画下面。哦，等等，它没有。
- en: '![](img/ed22573dd2f8cf2a678008c7665fb628_3.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ed22573dd2f8cf2a678008c7665fb628_3.png)'
- en: get -- okay， that's okay。 Because I have another graph here。 That's okay。 I
    have a -- I have。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，没关系。因为我这里还有另一个图表。没问题。我有一个——我有。
- en: '![](img/ed22573dd2f8cf2a678008c7665fb628_5.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ed22573dd2f8cf2a678008c7665fb628_5.png)'
- en: '![](img/ed22573dd2f8cf2a678008c7665fb628_6.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ed22573dd2f8cf2a678008c7665fb628_6.png)'
- en: a -- a GIF of it。 So， not a problem。 Technical issues， folks。 Gotta love it。
    Okay。 And I。 think I can go to the next slide。 You can just -- yeah。 Okay。 So，
    this is -- this is an。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一个——它的 GIF。所以，没问题。技术问题，伙计们。真让人喜欢。好吧。我觉得我可以去下一张幻灯片。你可以——是的。好吧。这是——这是一个。
- en: '![](img/ed22573dd2f8cf2a678008c7665fb628_8.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ed22573dd2f8cf2a678008c7665fb628_8.png)'
- en: added animation that I -- that I was hopefully going to show after the first
    animation。 But。 what's cool is that I took this static plot and so you can ignore
    the jersey numbers。 Those are jersey numbers that I added。 And， right， this is
    far more interesting。 Now。 we can actually see how this play -- you know， we're
    not getting a snapshot of just seeing。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我添加的动画，我希望在第一个动画之后显示。但有趣的是，我把这个静态图表拿过来了，所以你可以忽略球衣号码。这些是我添加的球衣号码。而且，对，这更加有趣。现在，我们实际上可以看到这个播放——你知道，我们不仅仅是看到一个快照。
- en: you know， the ball floating in space。 Now we actually see the past being thrown。
    This。 person is like just about to score touch on and actually does。 This is super
    fun and way。 more engaging。 And what's cool is that once you have an animation
    like this， you can add。 to it like I did here。 So， in this case， I used a setting
    function， a setting type function。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道的，球漂浮在太空中。现在我们实际上可以看到过去被投掷。这。个人就快要得分了，实际上也得分了。这真是超级有趣，参与感更强。酷的是，一旦你有了这样的动画，你可以像我在这里所做的那样添加内容。因此，在这种情况下，我使用了一个设置函数，一种设置类型的函数。
- en: to add the jersey numbers for each individual so that we know who's， you know，
    getting past。 what or who's， you know， tackling， whoever。 And I also added some
    statistics tables。 And。 you could even add statistics to the individuals if you
    want on the graph。 The possibilities。 are endless。 So how can you use animation？
    Well， as long as you have a figure， you have。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 为每个人添加球衣号码，这样我们就知道谁在过去了什么，或者谁在擒抱谁。我还添加了一些统计表。如果你愿意，也可以在图表上为个人添加统计数据。可能性是无穷无尽的。那么你如何使用动画呢？只要你有一个图形，你就可以。
- en: a matplotlib figure， ooh， and an iterable plotting function， then you can animate
    it。 That's really all you need。 And especially if you have kind of set yourself
    up with avoiding。 kind of the plotting setting type functions and also making
    sure that that iterable frame。 value is the first， like you can animate it。 And
    I hope that you feel encouraged to actually。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一个matplotlib图形，哦，还有一个可迭代的绘图函数，那么你就可以对其进行动画处理。这就是你所需要的一切。尤其是如果你能避免设置类型的绘图函数，并确保可迭代的帧值是第一个，你就可以对其进行动画处理。我希望你能感到鼓舞，实际上去尝试。
- en: try this out in your static plots at home。 And so， folks， that's it。 That's
    pretty much， it。 Here are some resources。 So this first link is a link to my GitHub
    project。 I include。 all of the slides and also the Python script that I ran through
    here。 It's the full script。 So you get all the code that I didn't hear。 The second
    is the CAGG competition link for。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在家里的静态图表中试试这个。因此，各位，这就是全部。这基本上就是这样。以下是一些资源。第一个链接是指向我GitHub项目的链接。我包含了所有幻灯片以及我在这里运行的Python脚本。这是完整的脚本。因此，你可以获得我没有在这里展示的所有代码。第二个是CAGG比赛的链接。
- en: the 2021 CAGGLE competition。 So you can download the data yourself。 All you
    need is a CAGGLE。 account。 And then the third and fourth links are actually the
    first one is a tutorial that。 my team made to help you basically walk you through
    ingesting the data from CAGGLE， putting。 it into a time scale BB database， which
    is basically Postgres。 And then， oh， that's my。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 2021年CAGGLE比赛。因此，你可以自己下载数据。你所需的仅仅是一个CAGGLE账户。然后第三个和第四个链接实际上是第一个是我的团队制作的教程，旨在帮助你基本上通过从CAGGLE获取数据、将其放入一个时间序列BB数据库（基本上是Postgres）来指导你。然后，哦，那是我的。
- en: train of thought。 And then actually analyzing it。 And then the last is just
    a blog post kind。 of diving into other analytics that you could try out。 So that
    is it。 Happy coding friends。 Thank you so much for being so patient with all of
    these technical issues。 And I hope that。 you have a wonderful rest of your day。
    Yes。 Thank you。 If anyone wants stickers from time， scale。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 思路流程。然后实际上进行分析。最后只是一个博客文章，探讨你可以尝试的其他分析。所以就这些。祝大家编码愉快。非常感谢你们在所有技术问题上的耐心。我希望你们今天剩下的时间过得愉快。是的，谢谢。如果有人想要时间的贴纸，欢迎来找我。
- en: come see me or if you have questions。 Also come see me。 So thank you。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有问题，欢迎来找我。所以谢谢。
- en: '![](img/ed22573dd2f8cf2a678008c7665fb628_10.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ed22573dd2f8cf2a678008c7665fb628_10.png)'
- en: (applause)。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: （掌声）。
