- en: P70：Talk - Paul Vincent Craven_ Harvest the power of the GPU for awesome special
    eff - VikingDen7 - BV1f8411Y7cP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P70：演讲 - 保罗·文森特·克雷文_利用GPU的力量实现精彩特效 - VikingDen7 - BV1f8411Y7cP
- en: \>\> Hello， everyone。 Welcome back。 We have a next talk。 Harvest the power of
    GPU for awesome。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: \>\> 大家好，欢迎回来。我们有下一个演讲。利用GPU的力量实现精彩效果。
- en: '![](img/8d33afc8d53ce2b99144b287cee71e89_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8d33afc8d53ce2b99144b287cee71e89_1.png)'
- en: '![](img/8d33afc8d53ce2b99144b287cee71e89_2.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8d33afc8d53ce2b99144b287cee71e89_2.png)'
- en: special effects by Paul Vincent Craven。 Over to you， Paul。 \>\> Thank you。 Hi，
    I'm Paul Craven。 And if you would like to copy， paste any code samples。 if you
    want to refer to stuff later or find additional info that tiny URL that's on the。
    screen will give you a page with all of that。 The goal of this talk is to show
    you how your。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 由保罗·文森特·克雷文制作的特效。接下来由你来，保罗。 \>\> 谢谢。嗨，我是保罗·克雷文。如果你想复制、粘贴任何代码示例，方便以后参考或找到额外的信息，屏幕上那个小网址会提供一个包含所有内容的页面。此次演讲的目的是展示你的。
- en: programs don't have to be limited to just using the CPU。 You can also use your
    graphics card。 known as the GPU to harness and do a lot of really awesome special
    effects。 You can offload。 a lot of graphical work from your CPU to your GPU。 After
    all， you just have thousands of。 processors sitting there waiting for you to give
    them something to do。 This animated cyber。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 程序不必仅限于使用CPU。你也可以使用图形卡，即GPU，来利用并实现许多非常酷的特效。你可以将大量图形工作从CPU卸载到GPU。毕竟，你就有成千上万的处理器在等待你给它们分配任务。这幅动画网络。
- en: image is run completely on the GPU side。 The CPU is doing nothing while it's
    going on。 And in fact。 that glow effect is kind of difficult to do well on a CPU，
    but on the graphics card。 it's made for doing this。 And it's really easy to add
    that glow effect。 So in this talk here， here。 I'll briefly show you some of what
    you can do with the GPU and a little bit of conceptual。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 图像完全在GPU端运行。CPU在这个过程中没有做任何事情。事实上，这种光晕效果在CPU上很难做到好，但在显卡上，它正是为此而设计的。而且添加这种光晕效果非常简单。因此，在本次演讲中，我将简要展示你可以用GPU做的一些事情，以及一些概念上的内容。
- en: information on why we do things a little bit differently if we have to end up
    using the。 GPU as opposed to the CPU。 And I'll also show you how easy it is to
    get started doing this。 yourself。 With less than 50 lines of code， you can get
    started offloading stuff onto the， GPU。 Oh。 and again， on this one， yeah， the
    GPU is doing all the star， flashy animation。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 关于我们为何采用稍微不同的方法，如果必须使用GPU而不是CPU。我还会向你展示如何轻松开始自己进行这项工作。用不到50行代码，你就可以开始将工作卸载到GPU上。哦。再次强调，在这个案例中，GPU负责所有的星星、闪烁动画。
- en: movement and the CPU is not doing a thing at all。 So what more things can you
    do with。 the GPU aside from cool background animations？ If you want to draw graphical
    images on your， screen。 the sprites， the squares， the fundamental building blocks
    of a game， using the GPU is。 much faster than using the CPU。 PiGame， which has
    been around forever， is a classic CPU based。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 移动时，CPU根本没有在做任何事情。那么，除了酷炫的背景动画，你还可以用GPU做些什么呢？如果你想在屏幕上绘制图像，精灵、方块，游戏的基本构件，使用GPU的速度比使用CPU要快得多。PiGame，一个古老的经典CPU库。
- en: library。 And it does really well up to about 2000 or so sprites on the screen。
    Once you。 get beyond 2000 sprites， depending upon your computer and what else
    is going on， your frames。 per second really start stopping off fast。 But if you
    use a GPU based library that offloads。 all that sprites onto the graphics card，
    you can not only do more than like 2000， more than， 14，000。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 库。它确实能够很好地处理大约2000个精灵在屏幕上。一旦超出2000个精灵，根据你的电脑和其他正在进行的操作，你的每秒帧数将会快速下降。但是如果你使用基于GPU的库，将所有精灵卸载到显卡上，你不仅可以处理超过2000个，甚至可以超过14,000个。
- en: but you can even have a million sprites on your screen and have those things
    be rendered。 So it's not just a little bit faster。 It's a whole nother ballgame
    if you end up using。 the graphics card。 You can also create games that aren't
    just with pixels， but you can。 add the glow effect， the flash， all of those particles
    flying out。 All of those are completely。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 但你甚至可以在屏幕上拥有一百万个精灵，并且让这些精灵被渲染。因此，这不仅仅是稍微快一点。如果你使用图形卡，整个游戏的玩法就完全不同。你还可以创建不仅仅是像素的游戏，而是可以添加光晕效果、闪光以及所有飞出的粒子。所有这些都是完全可行的。
- en: done on the graphics card side。 And that leaves the CPU just having to worry
    about the game， logic。 So how do you take calculations that you might have used
    to do with your CPU and。 offload those to your graphics card， the GPU？ Well， unfortunately
    one of the things we。 can't do is the old school way， the CPU way of doing things，
    where it was straight forward。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '那么如何将你可能用CPU进行的计算卸载到显卡，GPU上呢？不幸的是，我们不能采用老派的方法，CPU的那种直接方式。 '
- en: and if you wanted a rectangle， if you wanted an image， you'd just say draw a
    rectangle and。 you'd draw the rectangle。 But that doesn't really allow the graphics
    card to help much。 It's just getting one drawing command at a time。 It's got thousands
    of processors。 And， in fact。 if you do it this way， not only is it not faster，
    it's slower。 So if you're。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要一个矩形，或者想要一幅图像，你只需说“画一个矩形”，然后就会绘制出这个矩形。但这并不真正允许显卡发挥太大作用。它一次只接收到一个绘图命令。它拥有数千个处理器。实际上，如果你这样做，不仅不会更快，反而会更慢。所以如果你。
- en: used to doing things a CPU centric way and you transfer to a library that uses
    the graphics， card。 you might actually find that things run slower until you kind
    of realize how the。 graphics card works。 It's one of the reasons why I kind of
    like teaching students to program。 using more of a graphics card oriented library
    like arcade， just because it gets them in the。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你习惯于CPU中心的方式进行操作，并且转到使用显卡的库，你可能会发现事情运行得更慢，直到你意识到显卡是如何工作的。这也是我喜欢教学生编程的原因之一，使用更偏向显卡的库，如arcade，因为这可以帮助他们更好地理解。
- en: habit of doing things that way from the beginning。 But regardless， it's not
    hard to make the switch。 Really the key thing here is before we start our scene，
    we need to send all the data to。 the graphics card。 And if you've worked with
    any modern games and it's got the little loading。 screen when you're loading up
    a scene， it's got the progress going across， a lot of what。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 从一开始就养成那样做的习惯。不过无论如何，转变并不难。这里的关键在于，在我们开始场景之前，我们需要将所有数据发送到显卡。如果你玩过任何现代游戏，并且在加载场景时出现小加载屏幕，它上面会有进度条，那么很多。
- en: it's doing is dumping data to the graphics card。 The images， the geometry， all
    of that。 So that when you're playing the game at 60 frames per second， instead
    of redrawing every。 image every time， all your CPU has to do is just say， oh，
    that stuff I gave you before。 just draw it。 And then the graphics card that has
    all of that information at once can draw。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 正在做的就是将数据转储到显卡上。图像、几何形状，所有这些。因此，当你以每秒60帧的速度玩游戏时，不需要每次都重绘每一幅图像，你的CPU所需做的只是说，哦，我之前给你的那些东西，就画出来吧。然后显卡可以一次性绘制所有这些信息。
- en: the stuff in parallel。 And that makes it run so much faster。 And it frees up
    the CPU to。 do the game logic。 But this still isn't perfect。 This only offloads
    the drawing。 After all。 what happens if something moves？ Because it's not a very
    exciting game if nothing moves。 And the CPU still has to do the movement。 And
    any updated data that you've got needs to。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在并行处理中的内容。这使得运行速度大大提高。同时它也释放了CPU去处理游戏逻辑。但这仍然不完美。这只是将绘制工作卸载出去。毕竟，如果有什么东西在移动会发生什么呢？如果没有任何东西移动，这个游戏就不太刺激。而CPU仍然需要处理移动和任何更新的数据。
- en: be sent to the graphics card。 And this is still much faster because instead
    of sending。 the image every time， the geometry of the object every time， all you're
    doing is sending， updated x。 y coordinates。 So this is still a definite improvement
    over doing things the， old school way。 But what we really would like to do is
    minimize that amount of data that's。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 被发送到显卡。这仍然快得多，因为与每次发送图像、物体几何形状不同，你所做的只是发送更新后的x、y坐标。所以这在一定程度上比老派方式有了明显的改进。但我们真正希望做的是最小化发送的数据量。
- en: being sent to the graphics card。 And we can do that by upfront not only sending
    data to。 the graphics card， but sending a script。 So we can automate any sort
    of calculation that， we can。 And if we can do that script on the graphics card
    instead， then that stuff that。 our CPU doesn't have to do。 This next simulation
    is an end body simulation。 And it has basically。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 被发送到显卡上。我们可以通过提前发送数据给显卡，不仅发送数据，还发送脚本，来实现这一点。这样我们可以自动化任何我们能进行的计算。如果我们能够在显卡上执行这个脚本，那么这些工作就不再需要CPU去做。这下一个模拟是一个整体模拟，它基本上是在显卡一侧完成的。这使得CPU只需关注游戏逻辑。
- en: 40，000 stars that are going to sort of do their gravitational attraction to
    each other。 So 60 times per second， for each frame， they are calculating the gravitational
    attraction。 to the other 39，990 stars。 Resulting approximately 1。6 billion gravity
    calculations each frame。 or about 100 billion calculations per second。 And this
    is totally doable on a modern graphics， card。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 有40,000颗星星，它们之间会有引力相互作用。因此，每秒60次，每帧都会计算其他39,990颗星星的引力。这大约产生每帧1.6亿次引力计算，或每秒大约1000亿次计算。这在现代显卡上完全可以实现。
- en: It's like 30 frames per second for me because mine's 7 years old and they're
    hard， to get now。 But for a modern graphics card， it looks really， really sharp。
    And by offloading。 those calculations on the graphics card， I mean， there are
    so many processors there。 you can do things that you couldn't even remotely come
    close to on the CPU side。 So how do you。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说大约是每秒30帧，因为我的显卡已经7年了，现在很难找到。不过对于现代显卡来说，画面看起来非常清晰。通过将这些计算转移到显卡上，实际上，那里有很多处理器。你可以做一些在CPU上根本无法接近的事情。那么，如何做到呢？
- en: get started with this？ Well， to get started， what we need to do is learn to
    write a shader。 And we're going to create a Python program that loads a shader
    to the graphics card。 The unfortunate side of things is that shaders aren't written
    in Python， which is sad。 But。 we can control shaders with our Python program。
    We can send the position， the color of our， items。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 开始这个项目吗？好吧，首先我们需要学习如何编写一个着色器。我们将创建一个加载着色器到显卡的Python程序。遗憾的是，着色器并不是用Python编写的，这很可惜。但我们可以用Python程序控制着色器。我们可以发送位置和我们物品的颜色。
- en: and then a shader can take over and do a little mini GLSL， open GL shading language，
    GLSL for short。 And it will run that， in our case， for the example we'll do here，
    for every。 single pixel on the screen。 So if you have an 800 by 600 screen， it'll
    run at about half。 million times。 And for each frame， about 28， 29 million times
    per second， which seems like， a lot。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然后着色器可以接管并执行一个小的GLSL（开放图形库着色语言），简称GLSL。它将在我们的例子中，为屏幕上的每一个像素执行这项任务。如果你的屏幕是800x600，它将大约运行50万次。每帧约为每秒2800万到2900万次，这看起来很多。
- en: and it is， but that's what the graphics card does really well。 The other thing
    is the。 Python Arcade library makes it really easy to create and run shaders。
    And it does so because。 it adopted the shader toy。com framework。 Shader toy。com
    is a cool website on the web。 Well。 most websites are on the web。 Anyway， shader
    toy。com is this website that allows you to。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，显卡在这方面表现得非常好。另一个方面是，Python Arcade库使创建和运行着色器变得非常简单。它之所以能够做到这一点，是因为它采用了shader
    toy.com框架。shader toy.com是一个非常酷的网站。好吧，大多数网站都是在网络上的。总之，shader toy.com是一个允许你...
- en: actually code on your web browser a shader and run it using WebGL。 And it has
    a nice framework。 that takes care of some of that grunt work for you， like the
    resolution of the screen， where the。 mouse is。 All of this stuff is already there
    and available for you。 And this makes writing。 shaders very convenient。 And you
    can take those shaders and pretty much copy， paste them over。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，你可以在你的网络浏览器上编写一个着色器，并使用WebGL运行它。它有一个很好的框架，处理一些繁琐的工作，比如屏幕的分辨率和鼠标的位置。所有这些东西已经为你准备好，这使得编写着色器变得非常方便。你几乎可以复制这些着色器并粘贴到其他地方。
- en: and run them in your Python program。 So to start with and show you how easy
    this is， we're going。 to do a tutorial where you can create a glowy ball that
    you just sort of move around with the mouse。 And the whole glow effect and the
    rendering of this will happen on the graphics card。 And you can。 change the color
    too。 So our first step in doing this is to open up a window。 This has nothing
    to。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 并在你的Python程序中运行它们。首先，让我向你展示这有多简单，我们将进行一个教程，你可以创建一个发光的球体，随着鼠标移动。整个发光效果和渲染都将在显卡上完成。你也可以改变颜色。因此，我们的第一步是打开一个窗口。这与...
- en: do with shaders， but we at least need to get a window that we can render something
    to。 And the。 code to do that is here。 Basically， it， we're going to import the
    arcade library。 And the arcade。 library is going to， you can just do a pip install
    arcade and it'll take care of some of the graphic。 stuff for us。 Then we'll do
    the magic if statement that only runs if we run this script， as opposed。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 与着色器有关，但我们至少需要得到一个可以渲染内容的窗口。而执行这个的代码就在这里。基本上，我们将导入arcade库。你可以通过pip安装arcade，它会为我们处理一些图形相关的内容。接着我们会做一个神奇的if语句，只有在运行这个脚本时才会执行，而不是。
- en: to import it。 The my game instance that we create here will be the window that
    pops up。 And I'll。 talk about that here in a sec， but this pops up a window。 And
    then once we get the window up， we。 need to start our event loop。 The event loop
    responds to keystrokes， mouse， mouse。 that type of thing。 If we didn't have this
    here， then the window would just close because we were done with our program。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 导入它。我们在这里创建的我的游戏实例将是弹出的窗口。我马上会讲到这一点，但这个窗口会弹出。然后一旦我们打开窗口，我们需要启动我们的事件循环。事件循环响应按键、鼠标等输入。如果我们没有这个，那么窗口就会关闭，因为我们已经完成了程序。
- en: So that's what the arcade run does。 It starts up the event loop。 We can take
    our own custom class。 and derive from our arcade window。 And when we derive from
    our arcade window， we get all of the。 grunt work that arcade does for us。 And
    all we need to do is add the extra stuff that we need。 which in this case isn't
    really that much。 In our init， then we are going to simply call the。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这就是arcade运行所做的。它启动了事件循环。我们可以创建自己的自定义类，并从arcade窗口派生。当我们从arcade窗口派生时，我们获得了arcade为我们处理的所有繁琐工作。我们需要做的只是添加我们需要的额外内容，而在这种情况下并不多。在我们的初始化中，我们将简单地调用。
- en: parents init and tell it how big of a window we want。 So if you want different
    window dimensions。 in this case， it's just defaulting to 1920 by 1080。 And the
    next thing that we definitely need。 is to tell it what to draw。 So 60 times per
    second， it's going to call an on draw function。 And we。 need to define what that
    is so that it knows what to draw。 And in this case， we're just going to。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 父级初始化并告诉它我们想要多大尺寸的窗口。因此，如果你想要不同的窗口尺寸，在这种情况下，它默认是1920乘以1080。接下来我们绝对需要的是告诉它要绘制什么。所以每秒60次，它将调用一个绘制函数。我们需要定义这个函数，以便它知道该绘制什么。在这个例子中，我们只是要。
- en: clear the screen just as the window pops up。 This will automatically default
    to black。 And we've。 got a window that pops up onto our screen。 Step two， how
    can we add in the shader？ And we've got a。 window that pops up。 Adding in the
    shader is dead simple。 First off。 we just need to import a shader， toy class。
    This is basically what implements that framework that shader toy。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在窗口弹出时清空屏幕。这将自动默认为黑色。我们有一个窗口弹出到我们的屏幕上。第二步，我们如何添加着色器？我们有一个窗口弹出。添加着色器非常简单。首先，我们只需导入一个着色器玩具类。这基本上实现了着色器玩具的框架。
- en: com has。 And that shader， toy class just needs a couple bits of information
    to get started。 We're going to create a shader from， the file。 And the file name
    where the shader exists。 I just have a circle one glsl。 But you're， doing it what
    the file name is。 And then you need to tell it how big the window is or the area
    that， you are rendering。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机上有。而那个着色器，玩具类只需要几条信息就能开始。我们将从文件中创建一个着色器，而文件名就是着色器所在的文件。我这里有一个circle.glsl。但你需要提供文件名。然后你需要告诉它窗口的大小或你要渲染的区域。
- en: In this case， it's going to be the entire window。 So we just do self。get size。
    which returns the size of the window。 And given these two bits of information，
    I can create my。 shader toy class。 This happens on startup。 And then 60 frames
    per second， rather than clearing the。 screen， we're going to render the shader。
    And there we are。 So two basic things that we're adding。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，它将是整个窗口。因此我们只需调用self.get_size，它会返回窗口的大小。根据这两条信息，我可以创建我的玩具着色器类。这在启动时发生。然后每秒60帧，而不是清空屏幕，我们将渲染着色器。就是这样。因此，我们添加了两个基本内容。
- en: We， create the shader and we render it。 Next up， we're going to write the shader
    in parts that you can kind。 of see the progression of how this works。 I like writing
    everything where I start insanely simple。 and then work up from there。 This shader，
    again， remember， there's going to be a small program that。 runs for every single
    pixel。 The pixel is going to figure out how far am I away from the origin。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建着色器并进行渲染。接下来，我们将把着色器分部分编写，这样你可以看到这个过程的进展。我喜欢从极其简单的地方开始写，然后从那里逐步发展。这个着色器，再次提醒，有一个小程序会为每个像素运行。这个像素将确定我离原点有多远。
- en: coordinate？ That zero， zero coordinate。 If I'm close to the origin， the zero，
    zero。 I'm going to make， myself white。 If I'm not， I'm going to draw black。 And
    furthermore， basically。 this is what it's going， to output。 The origin is in the
    lower left。 You might be familiar。 Some coordinate systems use the， origin in
    the upper left。 In this case。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 坐标？那个零零坐标。如果我靠近原点，即零零坐标。我将使自己变为白色。如果我不是，我将绘制黑色。此外，基本上这就是它的输出。原点位于左下角。你可能熟悉一些坐标系将原点放在左上角。在这种情况下。
- en: we use like standard mathematics where the y goes up and， it's when it's positive。
    The other thing that we're going to do， which most shaders will do， is we're。
    going to normalize the coordinates。 Which just is a really fancy word for saying。
    I'm going to convert， all my coordinates from 0。0 from what they are from like
    0 to 800 or 0 to 1920。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用标准数学，其中y轴向上，当y值为正时。我们要做的另一件事是，正如大多数着色器所做的那样，我们将规范化坐标。这只是一个非常 fancy 的说法，意味着我将把所有坐标从
    0.0 转换，从像 0 到 800 或 0 到 1920。
- en: I'm going to switch， them from that to 0 to 1。0。 Floating point coordinates。
    The reason we do this。 I can then make the window， 4K window。 I can make it a
    small 800 by 600 window。 But after I normalize the coordinates， everything's going
    to come out the same。 So this shader is going to look like this。 And if you are。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我将把它们从 0 转换为 1.0 的浮点坐标。我们这样做的原因是，我可以把窗口做成 4K 窗口。我可以把它做成一个小的 800x600 窗口。但是在我规范化坐标之后，一切都会一样。因此，这个着色器看起来像这样。如果你是。
- en: at all familiar with any of those evil curly brace semicolon languages， it should
    look familiar。 But we won't have to make much of a shader to get our stuff up
    on the screen。 It's going to call。 this main image function for every pixel that
    I've got。 And it's going to take in the coordinate。 that I'm rendering。 So if
    I am currently trying to figure out what should appear at coordinate 800。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对那些邪恶的花括号分号语言有一点了解，那么这应该看起来很熟悉。但是我们不需要编写很多着色器就能把我们的内容显示在屏幕上。它会为我所有的每个像素调用这个主图像函数。它会接受我正在渲染的坐标。因此，如果我当前想弄清楚在坐标800处应该显示什么。
- en: 200， I'm going to get a vector of two elements。 Vector is just a really fancy
    name again for a list。 of stuff。 So a list of two items， an x， y coordinate。 I
    know that this is coming in because it's got an， in keyword on it。 I'm going to
    output what color I want that pixel to be。 And the output is going。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我将得到一个包含两个元素的向量。向量只是一种 fancy 的名称，用于表示一个物品列表。因此，这是一个包含两个项的列表，一个 x 和一个 y 坐标。我知道这是因为它带有一个
    in 关键字。我将输出我希望那个像素的颜色。输出将会是。
- en: to be a vector of four numbers。 You're probably， if you at all have worked with
    web or graphics。 with the red， green， blue， whole framework of how you specify
    colors。 So how much red。 how much green， and how much blue should I have？ Those
    are three elements。 The fourth one is transparency so that， you could layer additional
    renderings on top of each other。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 将是一个包含四个数字的向量。如果你曾经与网页或图形打过交道，你可能熟悉如何指定颜色的红、绿、蓝整个框架。那么我应该有多少红色、多少绿色和多少蓝色呢？这些是三个元素。第四个是透明度，以便你可以将额外的渲染层叠在一起。
- en: So this is the input。 And this is the， output。 It's weird because you are used
    to perhaps using the return statement when you want to return。 something out。
    And instead we simply specify that the out is here by using the out keyword。 So
    that。 is a bit different。 We can normalize a coordinate， convert it to that whole
    1。0 thing going on by。 dividing out by our screen resolution。 So we take the input
    fragment that we got from up here。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这是输入。这是输出。很奇怪，因为你可能习惯于在想返回某样东西时使用 return 语句。相反，我们只是通过使用 out 关键字来指定输出在这里。因此，这有点不同。我们可以规范化一个坐标，通过除以屏幕分辨率将其转换为整个
    1.0 的样子。所以我们从上面获得输入片段。
- en: And we divide that by the resolution of the screen。 We're given that automatically
    by the。 shader toy framework。 And we can divide both the x and the y at the same
    time， which is pretty cool。 because we're working with vectors。 So now I've got
    a normal， it's coordinate and I'm storing it in。 the variable called uv。 And yep，
    there's my normalized coordinates。 Next up。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将其除以屏幕的分辨率。这个值由shader toy框架自动提供。我们可以同时对x和y进行除法，这很酷，因为我们在处理向量。所以现在我得到了一个标准化的坐标，并将其存储在名为uv的变量中。没错，这就是我的标准化坐标。接下来。
- en: I need to figure out how， close I am to the origin， right？
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我需要弄清楚我离原点有多近，对吧？
- en: To know if I'm going to be a black pixel or a white pixel。 And， to do that。
    I need to figure out the distance I am from the origin。 And I can do that with
    a built。 in function called length。 And that built in function length， I just
    pass it in the uv。 Bang。 I've got how long that vector is。 And it basically， which
    is basically how far away I am from the。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要知道我将是黑色像素还是白色像素。为此，我需要计算我与原点的距离。我可以使用一个名为length的内置函数来实现。将uv传递给这个内置函数length。轰，我知道这个向量的长度。基本上，就是我离原点有多远。
- en: origin。 If I'm greater than 0。2 far away， I'm going to make a white pixel。 Otherwise。
    it's going to be， black。 So white， 0， 0， 0。 And black， 1， 1， 1。 The last number
    is our transparency。 We'll just always， be opaque and set that to 1。 Don't forget，
    frag color comes from there。 So I didn't have to define， it because I defined
    it up there。 And as soon as I assign it。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 原点。如果我离原点的距离大于`0.2`，我将生成一个白色像素。否则，它将是黑色。因此，白色是`0, 0, 0`，黑色是`1, 1, 1`。最后一个数字是我们的透明度。我们始终保持不透明，并将其设置为`1`。别忘了，frag
    color来自那里。因此我不必再定义它，因为我在上面已经定义过了。一旦我分配它。
- en: then that's my output value。 Dead simple， not too many lines of code， just like
    17 sitting here。 And I've got comments and spaces。 So let's make this a little
    bit better。 Rather than a blob。 let's do a circle and adjust for aspect， ratio。
    We want this。 We basically need to shift everything over 0。5， right？ Because we're
    at 0， 0。 So 0。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 那就是我的输出值。非常简单，代码行数不多，就像这里的17行。我还有注释和空白。让我们把它变得更好一些。与其说是一个blob，不如说是一个圆，并调整纵横比。我们想要这样。我们基本上需要将一切向右移动`0.5`，对吧？因为我们在`0,
    0`。
- en: 5 will shift it over to the center of the screen。 And then I don't actually
    want to go from， 0 to 1。0 for the height because my window is not perfectly square。
    So I need to adjust for aspect， ratio。 And I can do that。 I can do the shift by
    this line of code where I'm going to create a brand。 new variable called rpo s
    relative position。 And relative to the center of the screen， I am going。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 5将其移动到屏幕中心。然后我实际上不想将高度从`0`变为`1.0`，因为我的窗口并不是完全正方形。所以我需要调整纵横比。我可以通过这行代码来进行移动，创建一个新的变量叫做rpo（相对位置）。相对于屏幕中心，我要。
- en: to take a look at what my current coordinate is。 And I just do that by subtracting
    0。5。 That sort。 of shifted it all over。 And then I adjust for aspect ratio by
    taking that relative y coordinate。 And the aspect ratio is simply how wide the
    screen is divided by how tall the screen is。 I just divide my y coordinate by
    that。 And my circle is now a circle rather than something， oblong。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 查看我当前的坐标。我只需减去`0.5`。这样就移动了位置。然后通过取相对的y坐标来调整纵横比。纵横比简单来说就是屏幕的宽度除以屏幕的高度。我只需将我的y坐标除以这个。现在我的圆是一个圆，而不是某种椭圆。
- en: And you should note that instead of figuring out the length to the origin， I
    am now。 using this relative position。 And that's it。 Now I got a circle that's
    in the middle of the screen。 So circles are boring。 That was like the most work
    you've probably ever gone through to draw a circle。 So how do I get it to actually
    look cool？ I want to add this cool， fadie， glowy ball effect because。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该注意到，现在我不是在计算到原点的长度，而是在使用这个相对位置。就这样。现在我得到了一个在屏幕中央的圆。因此，圆形是无聊的。这可能是你画一个圆时所经历的最多的工作。那么我如何让它看起来酷一些呢？我想添加这个酷炫的，发光的球效果，因为。
- en: I like fade and it's neat。 How do we do this？ Well， this doesn't really complicate
    the code much at。 all。 All I need to do is I'm going to take a base color， which
    in this case， I've got a vector。 three of one， one， one。 That simply is for red，
    green and blue of all red， green and blue。 And it。 gives me a white color。 And
    I'm going to multiply it times the strength value。 So if the strength。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢渐变，它很酷。我们该如何做到这一点呢？好吧，这并不会使代码变得复杂。我要做的就是取一个基础颜色，在这种情况下，我得到了一个三维向量（1, 1, 1），这实际上是红、绿和蓝的值。这样我就得到了白色。我将其乘以强度值。因此，如果强度。
- en: value is one， I'm going to end up with white。 If the strength value is 0。5，
    I'll end up with gray。 zero， I'll end up with black。 So how do I get what the
    strength should be？ All I need to do to get。 a good strength is basically one
    over the distance。 The inverse of the distance gives me a nice looking， fade effect。
    If you're a physics major。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果值为一，我最终会得到白色。如果强度值为0.5，我会得到灰色。如果是零，我会得到黑色。那么我该如何确定强度应该是多少呢？我所需要做的就是基本上是距离的倒数。距离的倒数给我一个很好看的渐变效果。如果你是物理专业。
- en: you'll know it's like one over distance squared。 If you， want to be accurate。
    but I like glowy stuff。 So I'll leave that to you if you want it a little bit
    more， accurate。 But the unfortunate thing is one over distance will always give
    us numbers bigger than。 one or the most part。 It would give us numbers bigger
    than one。 And if I multiply numbers bigger。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你会知道这就像是距离的倒数平方。如果你想要准确一点。但我喜欢发光的东西。所以如果你想要更准确一点，就留给你去做。不过不幸的是，距离的倒数总是会给我们大于一的数字。在大多数情况下，它会给我们大于一的数字。如果我乘以更大的数字。
- en: than one times my white color， I'll end up with a white color of one， one， one，
    one or two， two。 two or three， three， three， which is still white。 And like I'll
    get a whole screen full of white。 I need， to tone this down like a lot。 And I
    do that by multiplying at timescale。 which is just a number， that I trial and
    error type in this number。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我的白色颜色乘以大于一，我最终会得到一个白色的颜色，值为一，一，一，或二，二，二，或三，三，三，这仍然是白色。然后我会得到满屏的白色。我需要将其调暗很多。我通过乘以时间缩放来做到这一点，这只是一个数字，我通过试错来输入这个数字。
- en: type in this number until I get about where I want it to， be。 I use 0。02。 If
    you want a smaller glowy ball， you do 0。01， you just adjust it。 But that's really
    all。 there is to it。 And now I've got a glowy ball on the screen。 I do have step
    six and seven。 which are， detailed online。 But A， I don't have time。 B， this is
    a Python conference。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 输入这个数字，直到我得到大约我想要的值。我使用0.02。如果你想要一个更小的发光球，你可以使用0.01，只需调整一下。但这其实就是全部了。现在我在屏幕上有一个发光球。我确实有第六和第七步，在线有详细说明。但A，我没有时间。B，这是一个Python会议。
- en: not a GLSL conference。 So I， want to get back to the Python stuff。 How do you
    send data from your Python to this shader that I've， got？ And oh， anyway。 after
    I get done， I added a few more steps and the glowy ball looks like this， instead。
    which I like a little bit better。 The still up on screen for that。 I just won't
    go over the。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 不是一个GLSL会议。所以我想回到Python的内容。我该如何将数据从我的Python发送到这个着色器呢？哦，另外。在我完成后，我添加了几个步骤，发光球看起来是这样的，我更喜欢这个一些。这个还在屏幕上，我就不再讨论了。
- en: explanation。 Anyway， so I want to position the glow and I want to be able to
    also configure where。 the color is， what the color is。 So I can do that first
    off by going back to my Python program。 And。 first off， need to figure out where
    do I want the glowy ball？ So I'm going to grab the mouse。 coordinates。 And I grab
    the mouse coordinates this way。 This is how you do it in the arcade library。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 解释一下。无论如何，我想定位发光效果，并且我还想配置颜色的位置。首先，我需要弄清楚我想要发光球的位置。因此，我将获取鼠标坐标。我这样获取鼠标坐标。这是在街机库中实现的方式。
- en: So this gives me a tuple of two values for the x， y where the mouse is。 I also
    want the color。 I'm。 just going to hard code this as a light blue， but you can
    have this change every single frame。 And I convert it to the three floating point
    format that open GL uses。 Then here's the key。 Shader。 toy has a built in dictionary
    that you can use to specify name value pairs to send to your shader。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我就得到了一个包含鼠标位置的x，y的元组。我还想要颜色。我将把这个硬编码为浅蓝色，但你可以让它在每一帧中改变。我将其转换为Open GL使用的三浮点格式。然后这是关键。Shader
    toy有一个内置的字典，你可以用来指定要发送到着色器的名称-值对。
- en: So in this case， I'm setting POS to the position that I just got。 And I'm setting
    color to the。 color that I just got。 And this will go to the shader。 And I pick
    it up in the shader this way。 Up there at the top is a vector two POS， which matches
    the POS that I put here。 And a color that。 matches the color that I put here。
    It's expecting two elements， the x and y。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我将POS设置为我刚刚获得的位置。我将颜色设置为我刚刚获得的颜色。这将传递给着色器。我以这种方式在着色器中获取它。在顶部有一个二元向量POS，它与我在这里放置的POS相匹配，还有一个颜色与我在这里放置的颜色相匹配。它期待两个元素，x和y。
- en: and then three elements， for the color， red， green， and blue。 I'll add the transparency
    later。 And it's got a weird keyword， in front of it called uniform。 And I know
    programmers don't like to wear uniforms。 Well， I shouldn't。 Anyway， I don't。 But
    what this actually means is that this data is going to be the exact。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 然后对于颜色，有三个元素，红色、绿色和蓝色。我稍后会添加透明度。它有一个奇怪的关键词，叫做uniform。我知道程序员不喜欢穿制服。好吧，我不应该穿。不过，我不穿。但这实际上意味着这些数据对每个像素都是完全相同的。
- en: same for every single pixel。 So every single pixel is going to know the same
    position of where。 the center of that glowy ball is and the same color of what
    that glowy ball is supposed to be。 It's not going to change。 Because remember，
    while running is all in parallel， it's just data that's。 going to stay the same
    for everybody。 Okay。 So in order to make use of that， I'm going to normalize。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 所以每个像素都将知道那个发光球的中心位置以及那个发光球应该是什么颜色。这不会改变。因为记住，运行都是并行的，这只是数据，对每个人来说都会保持相同。好的。为了利用这一点，我将进行归一化。
- en: the position of where I want this glowy ball to be。 So I'm going to take that
    POS that I had up there， shove it down here。 and do the same normalization that
    I did with the coordinates of where I'm at， right now。 So I know where the center
    is。 I know where I'm at now。 And they're both normalized。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我将把上面那个POS拿过来，放到这里，并做与我现在的位置坐标相同的归一化。因此我知道中心在哪里。我知道我现在在哪里。这两者都是归一化的。
- en: Then I'm going to take that color that came in。 And instead of multiplying the
    white color。 I'm going to multiply instead times the color that comes in。 So I
    can use any color。 And then finally， I'm going to do a little bit of subtraction
    here。 So I'm going to see how far away， my current normalized position is versus
    where the pixel is and how far away I am from that。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我将采用传入的颜色，而不是乘以白色。我将乘以传入的颜色。这样我就可以使用任何颜色。最后，我将在这里做一点减法。因此，我将查看我当前的归一化位置与像素之间的距离，以及我离我想要的发光球位置有多远。
- en: And then you'll note that， whoops， I don't have an arrow for it， but the R POS
    that I've got right。 here， I end up using that to figure out the length and I
    know how much glow to have。 And that's。 basically it。 So really， in less than
    50 lines of code， especially if you take out the blank lines。 and stuff of Python
    plus the GLS L code， both of about 25 lines， I've written a Python program。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你会注意到，哎呀，我没有箭头，但是我在这里的R POS，最后我使用它来计算长度，我知道应该有多少发光。基本上就是这样。因此，实际上在不到50行代码的情况下，尤其是如果你去掉空行和一些Python以及大约25行的GLSL代码，我写了一个Python程序。
- en: that interfaces with a shader。 And the shaders themselves are not hard to write。
    They're great。 If you're the type of person that really likes to experiment， let's
    change this and see what。 happens and see some results visually， as opposed to
    like numerically。 There's a lot of visual。 feedback and it's one of my favorite
    ways of programming。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这与着色器接口。着色器本身并不难写。它们很棒。如果你是那种喜欢实验的人，那就改变这个，看看会发生什么，并以视觉的方式查看一些结果，而不是像数值一样。这里有很多视觉反馈，这是我最喜欢的编程方式之一。
- en: Additional types of things that you can do， and learning。 If you ever wanted
    to figure out like how to rake ass shadows， so if you're moving。 around and amazed
    and you want to have shadow show where you can't see。 then that is very easy to
    do， with a shader。 And there's some trick to it。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以做的其他类型的事情，以及学习。如果你曾经想弄清楚如何处理阴影，比如当你四处移动时，如果你想让阴影显示在看不见的地方，那么用着色器来做这件事非常简单。这其中有一些技巧。
- en: If you go to the web page， there's a whole tutorial， that takes you through
    how to do that。 If you want to know how to do that whole star field simulation。
    the end body simulation with everything flying around， then there's a tutorial
    also on how to use。 how to do that。 And it's really not that bad to do。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你访问网页，有一个完整的教程，教你如何做到这一点。如果你想知道如何进行整个星空模拟，以及所有物体飞舞的主体模拟，还有一个教程教你如何使用，如何做到这一点。其实并不难。
- en: If you ever wanted to filter things like you can， add。 create a regular game
    and then throw on top of it a filter that makes it look more like a 1980s。 style
    CRT monitor that sort of glowy and separates everything。 That's very doable。 We
    in fact just had somebody a couple days ago read in a video and then use a shader
    to basically。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经想要像这样过滤东西，可以添加。创建一个常规游戏，然后在其上添加一个滤镜，让它看起来更像1980年代风格的CRT显示器，带有光晕效果，并且能够分离一切。这是非常可行的。实际上，我们几天前刚有人在视频中读取，然后使用着色器来基本上。
- en: add a way of effect to the video。 So you're not just limited to like 2D graphics
    like this。 you could， actually write video filters yourself and do the data。 And
    they run so fast on even low-end hardware。 There's also a whole set of OpenGL。
    notes that are available if you want to read a little bit more conceptually as
    far as what's going。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为视频添加效果的方法。因此你不仅仅局限于像这样的2D图形，你实际上可以自己编写视频滤镜并处理数据。而且即使在低端硬件上运行也非常迅速。如果你想更深入地了解正在发生的事情，还有一整套OpenGL的笔记可供阅读。
- en: on。 And if you want to experiment around with this or no more info， shoot me
    a message。 Paul Vincent， Craven。 And if there's one of those sprints as well coming
    up and working with the arcade library。 there's a ton of info available on the
    arcade library and using shaders。 And it's pretty。 I strongly encourage you to
    experiment around and work around with it。 So that's what I've got。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想对此进行实验或者想要更多信息，可以给我发消息。保罗·文森特，克雷文。如果接下来有一个这样的冲刺，也可以与街机库一起合作。关于街机库和使用着色器的信息非常丰富。我强烈鼓励你进行实验，试着与之合作。这就是我所拥有的。
- en: Thank you very much。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 非常感谢。
- en: '![](img/8d33afc8d53ce2b99144b287cee71e89_4.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8d33afc8d53ce2b99144b287cee71e89_4.png)'
