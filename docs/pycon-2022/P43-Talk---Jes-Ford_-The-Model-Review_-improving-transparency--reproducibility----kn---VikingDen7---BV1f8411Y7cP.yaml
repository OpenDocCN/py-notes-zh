- en: P43：Talk - Jes Ford_ The Model Review_ improving transparency, reproducibility,
    & kn - VikingDen7 - BV1f8411Y7cP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P43：演讲 - Jes Ford_ 模型审核_ 提高透明度、可重复性与知识共享 - VikingDen7 - BV1f8411Y7cP
- en: Hello everyone， welcome back。 We have last talk of the day by just fold on the
    model review。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 大家好，欢迎回来。今天的最后一个演讲是由 Jes Ford 进行的，主题是模型审核。
- en: '![](img/da04d5dc8e27514ebcb21ef068c30855_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/da04d5dc8e27514ebcb21ef068c30855_1.png)'
- en: '![](img/da04d5dc8e27514ebcb21ef068c30855_2.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/da04d5dc8e27514ebcb21ef068c30855_2.png)'
- en: improving transparency， reproducibility and knowledge sharing using ML flow。
    Over to you， Jay。 All right。 Thanks everyone for being here。 I know it's not like
    the first time somebody， is subbed。 but I'm so excited to be here in person。 So
    thanks for coming out to the last， session of the day。 I'll be talking about the
    model review with ML flow。 To introduce， myself， I'm Jess。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 ML flow 提高透明度、可重复性和知识共享。接下来是你，Jay。好的。感谢大家的到来。我知道这不是第一次有人替代发言，但我非常兴奋能亲自出席。感谢你们来到今天的最后一个环节。我将讨论使用
    ML flow 的模型审核。自我介绍一下，我是 Jess。
- en: I am a snowboarder first and foremost。 That's the reason I'm currently。 living
    here in Salt Lake City。 It's the reason I did my PhD up in Vancouver， Canada，
    and。 pretty much every other major life decision that I've made。 I'm currently
    working as a。 machine learning engineer at Cash App， which is a part of block，
    which you might know by。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我首先是一个滑雪者。这就是我目前住在盐湖城的原因。这也是我在加拿大温哥华攻读博士学位的原因，以及我做出的几乎所有其他重大人生决定。我目前在 Cash App
    担任机器学习工程师，Cash App 是 Block 的一部分，你可能听说过。
- en: the former name square。 My team works on natural language understanding applications
    in the。 customer support space。 And today， I'm going to tell you why my team decided
    to adopt a。 process for a model review。 I'll explain what that means and introduce
    the primary tool that。 we're using for review， which is ML flow。 The bulk of this
    talk will be an intro to ML flow。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的名称是 square。我的团队专注于客户支持领域的自然语言理解应用。今天，我将告诉你为什么我的团队决定采用一个模型审核的流程。我会解释这意味着什么，并介绍我们用于审核的主要工具，即
    ML flow。这个讲座的主要内容将是对 ML flow 的介绍。
- en: tracking。 And then I'll wrap up by explaining how ML flow is allowing us to
    solve some of。 these problems that I'm going to get into。 All right。 So when I
    joined Cash App about。 a year and a half ago， our team had recently doubled in
    size， and we were increasingly deploying。 more and more models。 But we didn't
    have any great record keeping on exactly what was。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪。然后我将通过解释如何使用 ML flow 来解决我将要讨论的一些问题来结束这一部分。好的。当我大约一年半前加入 Cash App 时，我们的团队刚刚翻倍，且我们越来越多地部署模型。但我们并没有很好地记录到底发生了什么。
- en: in production， how those models had been trained， or just kind of generally
    what tricks or modeling。 approaches were working well in our space。 So what if
    a model needed to be retrained？
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产中，这些模型是如何训练的，或者一般来说，哪些技巧或建模方法在我们的领域中效果很好。那么，如果一个模型需要重新训练呢？
- en: A new team member joined and wanted to build off work that somebody else had
    done。 And。 what was the precision supposed to be on that model before we deployed
    it？ So the answer。 to questions like this would be like， let me see if I can find
    that notebook。 And you， know。 people are pretty good about keeping track of their
    notebooks that they had used。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 一位新团队成员加入，并希望在之前某人所做工作的基础上进行构建。在我们部署之前，那个模型的精确度应该是什么？因此，像这样的问题的答案通常是：让我看看我能否找到那个笔记本。人们通常对自己使用过的笔记本管理得相当不错。
- en: and maybe checking them into GitHub。 But as you can imagine， this is like not
    a robust。 or certainly foolproof way to be keeping track of this kind of stuff。
    So we decided that we。 needed -- we needed to set some goals for like what a new
    process might look like for， us。 Number one， we wanted more transparency， some
    kind of record keeping of exactly what。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 可能还会把它们检查到 GitHub 中。但你可以想象，这并不是一种健壮或绝对可靠的记录这些事情的方式。因此，我们决定需要为新流程设定一些目标。第一，我们希望有更多的透明度，以及对到底发生了什么的某种记录。
- en: we were deploying。 We wanted some reproducibility of past experiments that had
    been done， ease。 of building off of them by other people on the team or even the
    same person later on。 And we wanted a format for knowledge sharing so we could
    actually learn from each other。 and get new people on the team up to speed much
    quicker。 And on top of all of this， we。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在部署时希望实现过去实验的可重复性，便于团队中的其他人或同一人在后续工作的基础上进行构建。我们还希望有一种知识共享的格式，以便我们可以相互学习，让新加入的团队成员更快上手。在这一切之上，我们...
- en: didn't want to add a bunch of manual work to all the other things we needed
    to do。 So。 we wanted to -- whatever we were going to adopt， we wanted to be able
    to automate as。 much of this stuff as we could。 So there's like a comparison here。
    I'm talking about a。 model review。 There's obviously a thing called a code review。
    We review code to get more。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不想在需要做的其他事情上增加大量手动工作。因此，我们希望采用的任何东西，都能尽可能地自动化这些内容。因此，我这里有个比较。我说的是模型审查，显然还有一个称为代码审查的事情。我们审查代码是为了获得更多。
- en: eyes on codes， pot bugs， other issues before we deploy。 Pull requests create
    like a nice。 record of commits to your software and ideally also some documentation
    about decisions that。 you made or trade offs that you considered in your design。
    And they give us this nice。 opportunity for learning from each other。 When you're
    reviewing someone else's code or getting。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署之前，注意代码、发现bug和其他问题。拉取请求为你的软件创建了良好的提交记录，理想情况下也提供了有关你在设计中做出的决策或考虑的权衡的一些文档。这为彼此学习提供了良好的机会。
- en: a review from someone else on your team， this is like a great opportunity to
    learn from， each other。 So there's some parallels here。 And there's some similarities
    between a code。 and a model review in that there's some code。 You've written some
    training script or maybe。 a Jupyter notebook where you've defined some code that
    trains your model。 But that's kind。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 团队中其他人的反馈是一个绝佳的学习机会，彼此之间可以有一些相似之处。代码审查和模型审查之间也有一些相似之处，你可能编写了一些训练脚本或Jupyter笔记本，其中定义了一些训练模型的代码。
- en: of where the similarities end because for a machine learning model， there's
    a whole bunch。 of other contexts that's important beyond just like the Python
    code that you wrote that trains。 the thing。 So namely， what was the model performance？
    You know how well did it do on， your test set。 That's not obviously hard coded
    in your trading script。 What data did。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 相似之处在于，对于机器学习模型，除了你编写的Python代码之外，还有很多其他重要的上下文。因此，模型性能如何？你知道它在测试集上的表现如何。这显然没有硬编码在你的训练脚本中。你使用了什么数据？
- en: you use and what did you do to it？ You might be able to get some of that from
    your trading。 script but there might be some additional context there。 And then
    there's like this whole process。 thing， right？ All the things you tried that didn't
    really work before you got to this。 final model that you like think is really
    great and you want to deploy。 So you know。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你使用了什么，以及你对它做了什么？你可能可以从你的训练脚本中获取一些信息，但可能还存在额外的上下文。此外，还有这个完整的过程，对吗？你尝试过的所有事情，这些在你最终得到你认为非常出色并想要部署的模型之前都没有真正奏效。所以你知道。
- en: for all these reasons， we can't really review a model just by looking at the
    code。 So it。 goes beyond just a code review。 And so this led us to to MLflow，
    which is an open source。 platform for managing the end-to-end machine learning
    life cycle is what it says in their， test。 And MLflow has a few separate components
    under it。 So there is the tracking which is。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些原因，我们不能仅通过查看代码来审查模型。因此，这超出了代码审查的范畴。这促使我们选择了MLflow，这是一个管理端到端机器学习生命周期的开源平台。MLflow有几个独立的组件，其中有跟踪功能。
- en: useful for keeping records of your machine learning experiments。 There's the
    projects。 piece which is a special way to format your code that makes it easy
    to reproduce runs。 And there's a models piece that's a special MLflow way to save
    your model that makes it。 easy to deploy in different deployment situations。 There's
    also a fourth piece that's kind of。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 记录你的机器学习实验是非常有用的。有一个项目部分，这是格式化你的代码的特殊方式，使得重复运行变得简单。还有一个模型部分，这是保存模型的特殊MLflow方式，使其易于在不同的部署场景中部署。还有一个第四部分。
- en: newer that's the model registry that lets you manage the model life cycle。 So
    MLflow。 was really nice because it's pretty language and library agnostic。 It's
    not like tied to。 TensorFlow or any other specific machine learning library。 And
    it's got API for different languages。 I'll be using Python here， but it's pretty
    flexible for different use cases。 And in this， talk。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 更新的模型注册表让你管理模型生命周期。因此，MLflow非常友好，因为它对语言和库没有特定要求。它并不局限于TensorFlow或其他任何特定的机器学习库。它为不同的语言提供了API。我将在这里使用Python，但对于不同的用例，它非常灵活。在这次演讲中。
- en: I'm going to be focusing specifically on the MLflow tracking piece of MLflow。
    So。 tracking lets you easily log pretty much anything that you'd like to keep
    track of。 So。 in the context of machine learning， this is probably your parameters，
    the metrics that。 you care about。 You can track arbitrary things like plots or
    text files or Jupyter notebooks。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我将专注于MLflow的追踪部分。所以追踪可以让你轻松记录几乎任何你想跟踪的内容。在机器学习的背景下，这可能是你关心的参数和指标。你可以跟踪任意的内容，如图表、文本文件或Jupyter笔记本。
- en: which are all random files like that would be considered artifacts in MLflow。
    You might。 want to track the versions of code that you're running and the training
    data that you used。 So you can pip install MLflow to get started。 And I'm going
    to work through a few examples。 starting super small。 So here I'm going to import
    MLflow and I'm going to log a parameter。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是随机文件，会被视为MLflow中的artifacts。你可能想跟踪正在运行的代码版本和所使用的训练数据。因此，你可以使用pip安装MLflow以开始。接下来我会从一些超级简单的例子开始。所以在这里，我将导入MLflow并记录一个参数。
- en: and a metric。 So parameters and metrics are both key value pairs where the value
    is numeric。 and the key is any arbitrary string。 So you can name your parameters
    and metrics anything， you like。 And the first time I log something， what's called
    an MLflow run will be started， automatically。 And I'll show you examples in a
    moment of what that looks like。 But you。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以及一个指标。参数和指标都是键值对，其中值是数字，键是任何任意字符串。因此，你可以随意命名你的参数和指标。第一次记录某些内容时，将自动启动一个称为MLflow运行的过程。我稍后会向你展示这是什么样子。但你。
- en: can think of a run as a group of things that are logged together that makes
    sense as a， group。 And then I'm going to end my run to end that group of things。
    A slightly more。 step up from that would be I'm going to， in this example， I'm
    going to start my run explicitly。 So in the rest of the examples I'll be using
    this context manager framework。 So MLflow， start run。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 可以把一次运行视为一组有意义的记录在一起的内容。然后我将结束我的运行，以结束那组内容。从这一点上稍微提升一下，在这个例子中，我将明确开始我的运行。因此，在接下来的例子中，我将使用这个上下文管理器框架。所以MLflow，开始运行。
- en: I can actually give my run a nice useful name that I can refer to later。 And。
    then just like in the previous example， I'm going to log a parameter and a metric。
    And。 then I'm also going to log an artifact。 So this will be， I'm just going to
    create and。 write to just a silly little like one line file here。 And then I can
    log it using log。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我实际上可以给我的运行一个好用的名字，以便以后引用。然后，就像前面的例子一样，我会记录一个参数和一个指标。然后，我还会记录一个artifact。因此，我将创建并写入一个简单的一行文件。然后我可以使用log进行记录。
- en: artifact and giving it the path to my file。 Okay， so I'm logging some things。
    Where do。 these go and how is that useful？ If you have MLflow installed， you can
    just run MLflow UI。 in your terminal。 And this is going to spin up a little server
    for you。 So we can go to。 that URL that's shown there in the output。 And you would
    see something that looks like， this。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: artifact并给它提供我的文件路径。好的，我正在记录一些东西。这些记录去哪里，有什么用呢？如果你安装了MLflow，你可以在终端运行MLflow UI。这将为你启动一个小服务器。我们可以去输出中显示的那个URL。你会看到类似这样的内容。
- en: So this is the default MLflow experiments page。 And what this gives you is a
    table of。 all of the MLflow runs that you have run。 So at this point， we've got
    two rows in this。 table for the first thing we ran that we didn't explicitly name。
    And then this last run where。 we named it log artifacts。 And you can see here
    there's the metrics and the parameters。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这是默认的MLflow实验页面。这会给你一个表格，列出你进行的所有MLflow运行。因此，目前，我们在这个表格中有两行，分别是我们没有明确命名的第一次运行和最后一次我们命名为log
    artifacts的运行。你可以看到这里有指标和参数。
- en: are kind of shown here at this high level view。 And we can click into one of
    these。 So I'm。 going to click into this log artifacts example and go to the run
    page。 So here we've got our。 log artifacts run and there's some metadata up top。
    So we've got the date that this was， ran。 how long it took， a few other details。
    And then scrolling down we have a section。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这里在高层视图中展示了一些内容。我们可以点击其中一个。所以我将点击这个日志工件示例并转到运行页面。这里我们有我们的日志工件运行，顶部有一些元数据。所以我们有这个运行的日期、花费的时间以及其他一些细节。然后向下滚动，我们有一个部分。
- en: for all of the parameters and all of the metrics that I logged in this case。
    Down under artifacts。 we've got our text file。 And so I can actually click on
    that and see it rendered for me nicely。 in the browser which can be kind of helpful。
    You'll also see here that MLflow is telling。 me the actual path location of this
    artifact。 So when I ran this， I was working in this MLflow。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我在这个案例中记录的所有参数和所有指标。在工件下方，我们有我们的文本文件。所以我实际上可以点击它，在浏览器中以很好的格式呈现出来，这可能会很有帮助。你还会看到MLflow告诉我这个工件的实际路径位置。所以当我运行这个时，我正在这个MLflow中工作。
- en: tutorial directory on my laptop and my home directory。 And an ML runs folder
    was created。 there which is where all of this stuff is being logged by default。
    So by default， if we don't。 do any fancy setup， we're just writing things to our
    local machine。 And so this works well。 if you are working by yourself， you want
    to just get up and running quickly。 But if you're。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我笔记本电脑上的教程目录和我的主目录。并且在这里创建了一个ML运行文件夹，所有的日志默认都记录在这里。因此，默认情况下，如果我们不进行任何复杂的设置，我们只是将内容写入本地机器。这在你独自工作时效果很好，你想快速启动并运行。但是如果你是。
- en: wanting to share links to your runs with your teammates or maybe to have everyone
    write to。 the same experiment so you can compare different models like in a leaderboard
    kind of thing。 you'd want to set up probably a remote tracking server。 And then
    everyone can be logging to。 that location and there's different kinds of back
    end setups that you can make there。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想与队友分享你的运行链接，或者让每个人都写入同一个实验，以便比较不同的模型，比如在排行榜那样的情况，你可能想要设置一个远程跟踪服务器。然后每个人都可以将日志记录到那个位置，并且你可以在那里进行不同类型的后端设置。
- en: So these are just a couple of like many different configurations that are shown
    on the MLflow。 docs page。 So okay， so that's where we're writing to a place。 How
    can we access that？
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是MLflow文档页面上展示的许多不同配置中的几个。那么，好吧，这就是我们写入的位置。我们该如何访问呢？
- en: I showed you already the MLflow tracking UI and that's what I'm going to use
    throughout。 examples in this talk because it makes nice visuals and it's super
    handy。 But you can also。 access all this data programmatically。 So there's an
    API that lets you pull back results。 from your runs。 Alright， so nothing so far
    has been machine learning specific。 You could。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经向你展示了MLflow跟踪UI，这就是我将在本次演讲中使用的示例，因为它提供了良好的可视化效果，非常方便。但是你也可以以编程方式访问所有这些数据。因此，有一个API可以让你从你的运行中提取结果。好的，到目前为止，还没有什么是特定于机器学习的。你可以。
- en: use MLflow tracking to log whatever you like。 But I work on machine learning
    so we're going。 to do a machine learning example。 So in the rest of these examples，
    I'll be using this。 data set called the 20 news group data set。 It's one that
    you can get through SK learn。 It's a whole bunch of text documents discussing
    different topics and I'm just going to use。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 使用MLflow跟踪记录你喜欢的任何内容。但我从事机器学习，所以我们将做一个机器学习示例。在接下来的例子中，我将使用这个名为20新闻组数据集的数据集。这是一个可以通过SK
    learn获取的数据集，它包含大量讨论不同主题的文本文件，我将使用。
- en: two of those topics and we're going to be building binary classifiers to distinguish
    between。 text that is about baseball versus hockey。 In the interest of time， I'm
    not going to。 go through the steps of loading that data up and transforming it。
    But I'll share links， to these。 this notebook if you're interested in how that's
    done。 Alright， so this example。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 两个主题，我们将构建二元分类器来区分关于棒球和冰球的文本。为了节省时间，我不会详细介绍加载数据和转换的步骤。但如果你对怎么做感兴趣，我会分享这些链接到这个笔记本。好的，所以这个示例。
- en: '![](img/da04d5dc8e27514ebcb21ef068c30855_4.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/da04d5dc8e27514ebcb21ef068c30855_4.png)'
- en: looks a little longer。 But most of it is just standard， side kit learn stuff。
    So let me。 walk through what's important here。 So like in the previous example，
    I'm starting my run。 with the context manager and I'm going to name this hockey
    versus baseball because that's。 what we're going to train a model to distinguish
    between。 This top section， I am instantiating。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来有点长。但大部分都是标准的scikit-learn内容。所以让我讲一下这里的重要内容。就像在之前的例子中，我用上下文管理器开始我的运行，我将把这个命名为冰球与棒球，因为这就是我们要训练一个模型来区分的内容。这个顶部部分，我正在实例化。
- en: and fitting a simple logistic regression classifier that I'm going to get predictions。
    for my train and my test set。 And I'm going to make a plot。 So I'm going to plot
    the precision。 recall and I'm just going to save that as a PNG file。 So all of
    that was just normal。 SK learn stuff。 Now we're going to track things。 So here
    are all the MLflow commands that I， ran。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 并且拟合一个简单的逻辑回归分类器，我将为我的训练和测试集获取预测。我将制作一个图表。所以我将绘制精确度、召回率，并将其保存为PNG文件。所以这些都是正常的scikit-learn内容。现在我们要追踪一些事情。这是我运行的所有MLflow命令。
- en: So I'm going to log the parameters that I passed to the model。 I'm going to
    log metrics。 for the training and validation accuracy。 And then I'm going to log
    that， that plot that。 I made as well as this notebook itself that I'm running
    the code from。 So those can both。 be done with log artifact。 And then of course
    I probably want to track that trained model。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我将记录我传递给模型的参数。我将记录训练和验证准确度的指标。然后我将记录我制作的图表以及我运行代码的notebook本身。这两者都可以通过log artifact完成。当然，我可能还想追踪那个训练好的模型。
- en: So that's the final line here。 So let's jump over to the MLflow UI and see what
    that looks， like。 So here's our run page for hockey versus baseball。 I've got
    my parameters。 I've got， metrics。 And then scrolling down， I have the Jupiter
    notebook that I ran this from。 I've， got my plot。 which if I click on it gets
    rendered for me in the browser， which is handy。 And。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这里就是最后一行。那么让我们跳转到MLflow用户界面，看看它是什么样子的。这里是我们关于冰球和棒球的运行页面。我有我的参数。我有指标。然后向下滚动，我有我运行这个的Jupyter
    notebook。我有我的图表。如果我点击它，它会在浏览器中为我渲染，这很方便。
- en: then I have the model。 So there's a folder here。 If I click into that folder，
    this is。 the standard structure that you would see for MLflow models。 So I've
    got the model itself。 which for scikit-learn is this model。pickle file。 I've got
    a conda。yaml and a requirements。text。 And those can be used to recreate the actual
    environment that I train this model in。 And。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我有模型。这有一个文件夹。如果我点击那个文件夹，这是你在MLflow模型中会看到的标准结构。所以我有模型本身，对于scikit-learn来说是这个model.pickle文件。我有一个conda.yaml和一个requirements.txt。这些可以用来重建我训练这个模型时的实际环境。
- en: then there's this ML model file。 That's a special MLflow thing that specifies
    the types of flavors。 that this model is available in。 So this model is available
    in the scikit-learn flavor。 But。 all models in MLflow are also available as a
    Python flavor。 And I'm not going to get。 too much into MLflow models in this talk，
    but I did kind of want to highlight this because。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后有这个ML模型文件。这是一个特殊的MLflow文件，指定了该模型可用的类型。这模型在scikit-learn风格中可用。但是，MLflow中的所有模型也可以作为Python风格使用。在这次演讲中我不会深入探讨MLflow模型，但我确实想强调这一点。
- en: the MLflow UI gives you this really handy little snippet here automatically
    that shows。 you how you could load up your model just from knowing the run ID
    and run inference using。 a built-in Python function in MLflow。 So it gives you
    little snippets here of how you。 could run inference on a Spark or a Pandas data
    frame。 So that's pretty cool， I think。 All right。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow用户界面自动给你这个非常方便的小片段，展示了你如何仅通过知道运行ID来加载模型，并使用MLflow中的内置Python函数进行推断。所以它给你提供了一些小片段，展示你如何在Spark或Pandas数据框上运行推断。我觉得这很酷。好吧。
- en: Scrolling back up to the top of that run， I did want to give a quick shout out。
    to this notes section。 The notes section lets you write arbitrary markdown and
    then have。 that nicely rendered in the UI。 So this is a great place to record
    any extra context。 Notes to yourself， things that weren't recorded automatically
    but are helpful。 Okay。 So moving。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 向上滚动到运行的顶部，我想快速提一下这个备注部分。备注部分允许你写任意的Markdown，并且在用户界面中漂亮地渲染出来。所以这是记录任何额外上下文的好地方。给自己写的备注，自动未记录但有帮助的事项。好吧，继续。
- en: '![](img/da04d5dc8e27514ebcb21ef068c30855_6.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/da04d5dc8e27514ebcb21ef068c30855_6.png)'
- en: on to auto logging。 So in this last example with this machine learning model，
    we trained。 a model and then we manually MLflow tracked each of the things we
    wanted。 So we tracked。 the parameters， we tracked the some metrics that we defined，
    we tracked the plot， but we。 had to add lines for all of that。 MLflow has this
    kind of newer thing called auto logging。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 进入自动日志记录。所以在这个最后的示例中，使用这个机器学习模型，我们训练了一个模型，然后我们手动跟踪了每一个想要的内容。所以我们跟踪了参数，跟踪了一些我们定义的指标，跟踪了图表，但我们必须为所有这些添加代码行。MLflow
    有一个比较新的功能叫自动日志记录。
- en: which is super powerful。 And basically it allows you to use a single line of
    code to。 automatically track a whole bunch of useful stuff relevant to the model
    that you're training。 So supported for all the types of libraries that I've used
    for modeling and a whole， bunch more。 So check out the doc。 If you don't see your
    favorite one here。 But let's see what， that looks like。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这是非常强大的。基本上它允许你用一行代码自动跟踪许多与正在训练的模型相关的有用信息。所以支持我用来建模的所有类型的库，还有更多。如果你在这里没有看到你喜欢的库，看看文档。但让我们看看这是什么样子。
- en: So for another scikit learn example and going super minimal here， I'm。 going
    to import and train a random forest classifier。 So here I'm just adding a single。
    line of code。 MLflow， SKlearn， auto log and then I fit the model and that's it。
    So starting。 super basic， let's see what's available to us from that one line
    in the UI。 So I didn't。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 所以对于另一个 scikit learn 示例，这里我将极简主义，导入并训练一个随机森林分类器。这里我只添加了一行代码。MLflow，SKlearn，自动日志记录，然后我拟合模型，就这样。所以从基础开始，让我们看看从这一行代码在
    UI 中可以获得什么。我没有。
- en: '![](img/da04d5dc8e27514ebcb21ef068c30855_8.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/da04d5dc8e27514ebcb21ef068c30855_8.png)'
- en: name this run。 I get some kind of default run name up top。 But take a look at
    all of。 the things that get recorded for me automatically。 So first of all， this
    was a random forest model。 I pretty much went with the defaults。 I set like the
    number of trees。 But all of the things。 I could have set are being recorded for
    me。 So if I went back and trained another model。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 命名这个运行。我在顶部得到某种默认的运行名称。但看看所有自动记录的内容。所以首先，这是一个随机森林模型。我几乎是采用了默认设置。我设置了树的数量。但所有我可以设置的内容都被记录下来了。所以如果我回去再训练一个模型。
- en: I would still have the comparison here for all of the settings that existed。
    I also get。 a bunch of metrics for free。 So out of the box， I didn't specify any
    but I get accuracy， F1。 precision recall， some others。 And then of course， I get
    my model。 That's important。 And I get some plots for free。 So I get a confusion
    matrix， precision recall curve and。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我仍然会在这里比较所有存在的设置。我也得到了一些免费的指标。所以开箱即用，我没有指定任何，但我得到了准确率、F1、精确度、召回率和其他一些指标。然后当然，我得到了我的模型。这很重要。我还得到了免费的图表。所以我得到了混淆矩阵、精确度召回曲线和。
- en: the ROC curve。 So that all comes for free with that one line。 Let's look at
    a second example。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: ROC 曲线。所以所有这些都是通过这一行代码免费获得的。让我们看看第二个示例。
- en: '![](img/da04d5dc8e27514ebcb21ef068c30855_10.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/da04d5dc8e27514ebcb21ef068c30855_10.png)'
- en: So this time， we'll do a TensorFlow Keras example。 So it's going to look a little
    bit。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这次我们将做一个 TensorFlow Keras 的示例。看起来会稍微复杂一点。
- en: '![](img/da04d5dc8e27514ebcb21ef068c30855_12.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/da04d5dc8e27514ebcb21ef068c30855_12.png)'
- en: longer here。 But the main takeaway is that we've really just got the context
    manager。 here to start our run。 And then we just have this one line of auto logging。
    I'm going to。 name my run sports neural net。 And then I'll parameterize the name
    with a couple of parameters。 that I'm going to use in my model。 So this is just
    -- all the rest of this is a boilerplate。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这里会更长一些。但主要的收获是，我们实际上只需要一个上下文管理器来启动我们的运行。然后我们就有这一行自动日志记录。我将我的运行命名为运动神经网络。然后我会用几个我在模型中使用的参数来参数化这个名字。所以这就是——其余的都是模板代码。
- en: TensorFlow。 So I'm just defining a really simple dense neural network with one
    hidden。 layer of arbitrary size。 And then I set a few things that I need like
    a loss and an optimizer。 matrix。 I'm going to track accuracy and the area under
    the ROC curve。 And then I just。 compile and fit my model for -- I'll train it
    for 40， 40 epochs。 And so TensorFlow does， its thing。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow。所以我只是在定义一个非常简单的稠密神经网络，具有一个任意大小的隐藏层。然后我设置了一些我需要的内容，比如损失和优化器矩阵。我将跟踪准确率和
    ROC 曲线下的面积。然后我只是编译并训练我的模型——我会训练 40 个周期。所以 TensorFlow 会做它的事情。
- en: It spits out all its training logs。 And when it's done， we can jump back over
    to。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 它会输出所有的训练日志。当它完成后，我们可以跳回到。
- en: '![](img/da04d5dc8e27514ebcb21ef068c30855_14.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/da04d5dc8e27514ebcb21ef068c30855_14.png)'
- en: the MLflow tracking UI and see what we get。 So here is my sports neural net，
    32 dimension。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow跟踪UI，看看我们能得到什么。所以这里是我的运动神经网络，32维。
- en: '![](img/da04d5dc8e27514ebcb21ef068c30855_16.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/da04d5dc8e27514ebcb21ef068c30855_16.png)'
- en: and a rate point one model。 And again， similar to SK learn but different parameters
    here。 all of the things I could have set on this TensorFlow model are getting
    recorded for， me。 And I get my area under the ROC curve and my accuracy as well
    as the loss on the。 training and the validation data。 Down under artifacts now，
    for a TensorFlow model， I'm。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 和一个速率点一模型。再一次，类似于SK学习，但这里的参数不同。我可以在这个TensorFlow模型上设置的所有内容都被记录下来。我得到了ROC曲线下面积和准确性，以及训练和验证数据的损失。在工件下面，现在，对于TensorFlow模型，我。
- en: going to get this model summary。text。 So if you worked with TensorFlow， you've
    probably。 seen the model summary you can print is like a nice text description
    of your model。 We。 get TensorBoard logs for free。 That's pretty cool。 And then
    we get the model。 And so this。 looks a little bit more complicated because the
    TensorFlow saved model format involves。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取此模型的摘要文本。如果你使用过TensorFlow，可能已经见过模型摘要，你可以打印出来，这是对你的模型的不错文本描述。我们获得TensorBoard日志，这是很酷的。然后我们得到模型。这看起来有点复杂，因为TensorFlow保存的模型格式涉及。
- en: more stuff than the Sike it learned example I showed previously。 But the basic
    structure。 here is the same。 We've got the actual model。 We have an ML model file
    specifying MLflow， flavors。 And then we have these files that are related to the
    environment that we're running， in。 All right。 And you might have noticed that
    the metrics on these run pages look like， links。 And they are。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 比我之前展示的Sike它学习示例多了更多内容。但基本结构在这里是一样的。我们有实际的模型。我们有一个指定MLflow风格的ML模型文件。然后我们有与我们正在运行的环境相关的这些文件。好的。你可能已经注意到，这些运行页面上的指标看起来像链接，而它们确实是。
- en: So if I click on one of these links， I would be taken to a metrics， page。 So
    here I can select whatever metrics I like for the Y access and plot them as a。
    function of training step or of time。 And I get these nice training curves。 So
    this is。 like a TensorBoard style view that just kind of comes for free in the
    MLflow UI。 And I。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果我点击其中一个链接，我会被带到一个指标页面。在这里，我可以选择我喜欢的Y轴指标，并将其绘制为训练步骤或时间的函数。我得到了这些漂亮的训练曲线。这就像MLflow
    UI中免费提供的TensorBoard样式视图。
- en: '![](img/da04d5dc8e27514ebcb21ef068c30855_18.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/da04d5dc8e27514ebcb21ef068c30855_18.png)'
- en: think is super handy for the work that I do。 Okay。 So everything so far， we've
    been looking。 at one MLflow run at a time， which is cool。 But things become really
    powerful and we want。 to compare different models。 So let's see how we can do
    that。 That last example I showed。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为对于我所做的工作非常方便。好的，到目前为止，我们一直在查看一个MLflow运行，这很酷。但当我们想比较不同模型时，事情就变得非常强大了。那么我们来看看如何做到这一点。我之前展示的最后一个例子。
- en: '![](img/da04d5dc8e27514ebcb21ef068c30855_20.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/da04d5dc8e27514ebcb21ef068c30855_20.png)'
- en: with the sports neural net。 I trained a few different variations of that。 So
    here in my， table。 I've got six different MLflow runs with different hidden dimension
    sizes and。 different learning rates。 And this gives me like a leaderboard style
    view where I can， sort。 So if I care about accuracy， I could do a descending sort
    on this column。 And I。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在运动神经网络中，我训练了几种不同的变体。所以在我的表格中，我有六个不同的MLflow运行，具有不同的隐藏维度大小和不同的学习率。这让我获得了一个排行榜样式的视图，我可以排序。如果我关心准确性，我可以对这一列进行降序排序。
- en: see like my top model on top。 And maybe I want to compare， you know， what was
    the difference。 between these top few models。 I can check these boxes and hit
    the compare button。 And。 this takes me to a view where I have a column for each
    of those three runs I'm comparing。 And I can scroll through the parameters and
    the metrics。 And the flow really nicely just。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 想看看我最顶尖的模型。也许我想比较一下这些顶尖模型之间的区别。我可以勾选这些框，然后点击比较按钮。这将带我到一个视图，其中有我正在比较的三个运行的每一列。我可以滚动查看参数和指标。流程非常顺畅。
- en: highlights for me when things are different。 So I actually don't have to read
    super carefully。 to see what the difference was。 And if I click into one of these
    metrics links here， I'll。 be taken to a view that looks similar to what I just
    showed。 But now instead of comparing。 multiple metrics for one model， I'm comparing
    one metric across several different models。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这让我在事情有所不同时能突出显示。 所以我实际上不需要非常仔细地阅读来了解差异。如果我点击这些指标链接之一，我将进入一个与我刚才展示的视图相似的页面。
    但现在我不是在比较一个模型的多个指标，而是在比较多个不同模型的一个指标。
- en: So here I can see that my， the blue line， the model with the higher learning
    rate converged。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我可以看到，蓝线，学习率较高的模型收敛了。
- en: '![](img/da04d5dc8e27514ebcb21ef068c30855_22.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/da04d5dc8e27514ebcb21ef068c30855_22.png)'
- en: a bit faster than the other models。 All right。 So that is the kind of end of
    the little intro。 to ML flow。 Now I'm going to talk about how we're actually using
    ML flow in a model review， process。 So step one for us was to create and maintain
    some common training infrastructure。 So some code that our whole team can use
    when we're training models that's flexible enough。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 比其他模型稍快。 好吧，这就是关于ML flow的小介绍的结束。 现在我将谈谈我们实际上是如何在模型评审过程中使用ML flow的。 对我们而言，第一步是创建和维护一些共同的训练基础设施。
    这段代码是我们整个团队在训练模型时可以使用的，足够灵活。
- en: for different use cases and works for most of our problems。 Once we have that，
    we can embed。 ML flow tracking throughout that。 And this is important because
    we don't want to have。 to remember to add some ML flow tracking commands。 We don't
    want to be thinking all。 the time about what's important to track。 We want this
    to be taken care of automatically。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 针对不同的用例，适用于我们大部分问题。 一旦我们有了这些，我们可以在整个过程中嵌入ML flow跟踪。 这很重要，因为我们不想记得添加一些ML flow跟踪命令。
    我们不想一直思考哪些是重要的跟踪内容。 我们希望这一切都能自动处理。
- en: And so that's what we do。 This just lives in our code。 And anytime we train
    a model。 we just get all of this stuff recorded。 So we track our training parameters，
    including。 a pointer to the data set that we're using。 We track our metrics that
    our team cares about。 Our environment。 For us， that's our Docker image， the version
    of code that we're using。
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这就是我们所做的。 这一切都保存在我们的代码中。 每当我们训练模型时，我们就会记录所有这些内容。 我们跟踪我们的训练参数，包括指向我们使用的数据集的指针。
    我们跟踪我们团队关心的指标。 我们的环境，对我们来说，是我们的Docker镜像，以及我们使用的代码版本。
- en: and the actual training script or the notebook that we're running from。 And
    of course， we。 save our trained model as well as a few artifacts that we need
    for deployment on our infrastructure。 And then there are some kind of custom plots
    and analyses that we like to do in our team。 that help us understand maybe some
    caveats or things to think about with our model or just。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实际运行的训练脚本或笔记本。 当然，我们会保存训练好的模型以及一些在我们基础设施上部署所需的工件。 然后还有一些我们团队喜欢制作的自定义图表和分析，这帮助我们理解模型的一些陷阱或需要考虑的事项。
- en: for debugging purposes as we're iterating。 We use that note section I mentioned
    for context。 So it's great that we're tracking all these parameters and other
    things automatically。 but there's always other stuff。 There's always other things
    that you want to make a note of。 And so in particular， we write it up a little
    bit about what the business problem is that。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了调试的目的，当我们迭代时，我们使用我提到的备注部分来提供上下文。 所以跟踪所有这些参数和其他事项是很棒的，但总有其他事情需要记录。 特别是，我们写下一些关于业务问题的内容。
- en: we're solving， maybe some notes about things that we tried that didn't work。
    And basically。 anything that you can think of that would be useful to you if you
    were to return to this。 model in like a month or a year when you don't remember
    everything or for someone else on。 your team。 So we follow those steps when we
    have a model that we like。 And then before。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在解决问题时，可能会记录一些我们尝试但没有成功的事项。 基本上，任何你想到的如果你在一个月或一年后回到这个模型时有用的东西，或者对你团队中的其他人有用。
    所以当我们有一个我们喜欢的模型时，我们遵循这些步骤。
- en: we deploy it， we require a model review。 So for us， this looks like sharing
    a link to the。 MLflow run with everyone else on the team。 We select a couple of
    reviewers from the team。 whose job it is to kind of read through that pretty carefully，
    look at the code that's associated。 with it， and then attend a 30 minute meeting
    to discuss， ask questions， maybe make suggestions。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在部署之前需要进行模型审查。因此，对我们来说，这看起来像是与团队中其他人共享MLflow运行的链接。我们从团队中选择几位审查者，他们的工作是仔细阅读相关代码，然后参加一个30分钟的会议来讨论、提问，可能提出建议。
- en: things like that。 So circling back to the goals that we had for model review，
    transparency。 We're achieving this by having shareable links to basically all
    of the details of a model。 that we trained。 Reproducibility is greatly improved
    because now we're recording everything。 that we need to actually recreate a training
    run or to build off a model that some of their。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 类似这样的事情。回到我们对于模型审查的目标，透明度。我们通过拥有可以共享的链接来实现这一点，基本上涵盖了我们训练的模型的所有细节。可重复性得到了极大改善，因为我们现在记录了重现训练过程或基于某个模型进行构建所需的一切。
- en: team member trained。 Knowledge sharing。 This happens both through this review
    process， but。 also just generally it's super nice to be able to send a link to
    an MLflow run to your。 colleague just to kind of discuss things that you're working
    on。 And MLflow is really。 helpful for this because it consolidates all these details
    about the model in one place。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 团队成员经过培训。知识共享。这不仅发生在审查过程中，而且总的来说，能够向同事发送一个MLflow运行的链接，以讨论你正在进行的事情，这真的很不错。而且MLflow对此非常有帮助，因为它将关于模型的所有细节集中在一个地方。
- en: So in summary， MLflow is a really lightweight and powerful way to track machine
    learning。 experiments。 If you're just getting started， auto logging， just like
    a one liner in your。 code can get you a really， really long way。 I only talked
    about MLflow tracking， but you。 should also check out MLflow projects， models
    and model registry， which are pretty cool。
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 总而言之，MLflow是跟踪机器学习实验的一个非常轻量且强大的工具。如果你刚刚开始，自动记录，只需在你的代码中添加一行，就能让你走得很远。我只提到了MLflow的跟踪，但你也应该查看MLflow项目、模型和模型注册，这些都非常酷。
- en: My team is using MLflow tracking to automatically keep records of everything
    that we train and。 review models before we deploy them。 And this review process
    that I've described， this is。 a total work in process。 This is evolving。 If any
    of you have different or similar processes。 in place to achieve these kinds of
    goals， I would really love to talk to you。 So please。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我的团队使用MLflow跟踪自动记录我们训练的所有内容，并在部署之前审核模型。我所描述的这一审查过程仍在进行中，这个过程正在不断演变。如果你们中有人有不同或类似的流程来实现这些目标，我非常想和你们交谈。所以请联系我。
- en: find me afterwards。 I want to hear how other people are managing this kind of
    thing。 Yeah。 this presentation is a Jupyter Notebook。 It's on GitHub at that link。
    If you think that， sounds fun。 you want to use MLflow and train models and stuff
    like that。 My team in particular。 is hiring for machine learning engineers。 Cash
    App in general is hiring all across the， place。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 之后可以找我。我想听听其他人是如何管理这类事情的。是的，这个演示是一个Jupyter Notebook。它在GitHub上的链接。如果你觉得这听起来很有趣，想要使用MLflow并训练模型之类的事情，我的团队特别是在招聘机器学习工程师。Cash
    App在各个方面都在招聘。
- en: growing pretty rapidly。 It's super fun place to work。 I'd recommend you apply。
    And then I guess questions will be outside。 But yeah， please come talk to me。
    And thanks。 for your time。 (applause)， [APPLAUSE]。
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发展得非常迅速。工作环境非常有趣。我建议你申请。然后我想问题将在外面进行。但请过来和我聊聊。感谢你的时间。（掌声），[掌声]。
- en: '![](img/da04d5dc8e27514ebcb21ef068c30855_24.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/da04d5dc8e27514ebcb21ef068c30855_24.png)'
