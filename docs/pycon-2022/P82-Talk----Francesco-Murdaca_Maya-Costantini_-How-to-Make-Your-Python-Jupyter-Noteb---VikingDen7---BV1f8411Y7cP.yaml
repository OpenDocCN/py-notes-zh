- en: P82：Talk. - Francesco Murdaca_Maya Costantini_ How to Make Your Python Jupyter
    Noteb - VikingDen7 - BV1f8411Y7cP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P82：演讲。- Francesco Murdaca_Maya Costantini_ 如何制作你的 Python Jupyter Noteb - VikingDen7
    - BV1f8411Y7cP
- en: The next talk is on how to make your Python， Jupyter Notebook stand alone and
    reproducible。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的演讲是关于如何让你的 Python Jupyter Notebook 独立且可重复的。
- en: '![](img/190d0f30a9873a134f5dbcc699411591_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/190d0f30a9873a134f5dbcc699411591_1.png)'
- en: '![](img/190d0f30a9873a134f5dbcc699411591_2.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/190d0f30a9873a134f5dbcc699411591_2.png)'
- en: to allow other users to replicate your experiments。 And the speaker is Maya
    Costantini。 Thank you。 And as a reminder， the speaker won't be taking questions
    after the talk here。 You can meet her in the hallway。 Thank you。 [APPLAUSE]， Hi。
    Thank you。 Welcome to this talk。 First to begin with， a few birds of help me。
    My name is Maya。 I'm a software engineer at Red Hat。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 让其他用户能够复制你的实验。演讲者是 Maya Costantini。谢谢你。提醒一下，演讲者在此演讲结束后不会接受提问。你可以在走廊里见到她。谢谢。[掌声]，嗨。谢谢。欢迎来到这次演讲。首先开始时，请帮我一把。我叫
    Maya，我是红帽的一名软件工程师。
- en: I'm passionate about Python and open source。 And I come from Paris and France。
    If you want。 you can find me on Twitter and GitHub。 And if you want to have those
    slides available to follow along。 you can scan the secure code right here。 If
    I am here today。 it's to talk to you about a great project I've been working on。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我热爱 Python 和开源。我来自法国巴黎。如果你愿意，可以在 Twitter 和 GitHub 上找到我。如果你想获得这些幻灯片以便跟进，可以扫描这里的二维码。如果我今天在这里，是为了和你们谈谈我一直在进行的一个伟大项目。
- en: at Red Hat for seven months called Tots。 And I want to explain to you how you
    can use it to make your Jupyter Notebook stand。 alone， reproducible， easier to
    maintain， and to share with others。 but also to radically improve the quality
    of your application software stack。 by choosing the best possible dependencies
    for your Notebook。 Before we start。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我在红帽工作了七个月，称之为 Tots。我想向你们解释如何使用它使你的 Jupyter Notebook 独立、可重复、易于维护，并与他人分享，同时也能大幅提高你的应用软件堆栈的质量，通过选择你
    Notebook 的最佳依赖项。在我们开始之前。
- en: I'm curious to know who of you has ever used a Jupyter Notebook。 OK， a lot of
    people。 And who uses this day-to-day for work， for example？ OK， great。 For those
    of you who are not very familiar with Jupyter Notebooks。 I can start with a quick
    introduction。 Jupyter Notebooks is an open source web-based application。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我很好奇你们中有谁使用过 Jupyter Notebook。好的，很多人。那么，谁是每天在工作中使用它的呢？好的，太好了。对于那些不太熟悉 Jupyter
    Notebook 的人，我可以简单介绍一下。Jupyter Notebook 是一个开源的基于网页的应用程序。
- en: that allows you to conduct iterative experiments， and to create documents with
    life codes。 equations， images， graphs， et cetera。 And that supports a wide variety
    of languages over 40。 They provide rich and interactive outputs， and allow you
    to leverage some big data and data exploration tools。 such as the parks， for example。
    As you may know， Jupyter Notebooks are， in fact。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这使你能够进行迭代实验，并创建包含实时代码、方程式、图像、图表等的文档。它支持超过 40 种语言。它们提供丰富且互动的输出，允许你利用一些大数据和数据探索工具，例如
    parks。如你所知，Jupyter Notebook 实际上是。
- en: already quite popular， especially in the Python community。 Data scientists use
    them for things such as visualization， data modeling， data analysis。 and developing
    machine learning models。 They're also used by academics and by Python developers。
    for things such as rapid prototyping and proof of concepts。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 社区中已经相当受欢迎。数据科学家使用它们进行可视化、数据建模、数据分析以及开发机器学习模型。学术界和 Python 开发者也在快速原型制作和概念验证等方面使用它们。
- en: So what is the issue with Python Jupyter Notebooks？ What problems could we be
    trying to solve？
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，Python Jupyter Notebooks 的问题是什么？我们可能要解决什么问题？
- en: To understand that， let me show you an example。 Let's say I'm a data scientist。
    and I want to create， for example， a computer vision application。 And to do so。
    I would like to install the OpenCV library in my notebook。 To install OpenCV。
    I will run the following command in my notebook， which is pip install OpenCV Python
    to get the OpenCV Python package。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解这一点，让我给你们举个例子。假设我是一名数据科学家，我想创建一个计算机视觉应用程序。为此，我希望在我的 Notebook 中安装 OpenCV
    库。要安装 OpenCV，我将在我的 Notebook 中运行以下命令，即 pip install OpenCV Python，以获取 OpenCV Python
    包。
- en: OK。 But what exactly is OpenCV Python？ OpenCV Python is a direct dependency
    of my application。 And with this direct dependency come all the dependencies，
    like， for example， NumPy。 the dependency of my dependency， which makes it a trendative
    dependency。 So far。 I have run pip install OpenCV Python。 I got OpenCV Python
    and NumPy。 But did I forget something？
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧。那OpenCV Python究竟是什么？OpenCV Python是我应用的直接依赖项。这个直接依赖项带来了所有其他依赖项，例如NumPy，作为我的依赖项的依赖项，使其成为传递依赖项。到目前为止，我运行了`pip
    install OpenCV Python`。我得到了OpenCV Python和NumPy。但我是不是忘了什么？
- en: What about versions？ Maybe I would like to install some specific versions of
    my dependencies。 Well。 last time I checked， OpenCV Python had over 60 releases，
    and NumPy is something like 80。 And if you take a look here at the release history
    for a package like NumPy。 if you look at the dates， you will see that releases
    happen approximately， every month。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 版本呢？也许我想安装某些特定版本的依赖项。好吧。上次我检查时，OpenCV Python有超过60个版本，而NumPy大约有80个。如果你查看像NumPy这样的软件包的发布历史，看看日期，你会发现发布大约每月进行一次。
- en: which is very frequent。 So this means one thing。 It means that if today I start
    developing my notebook by running pip install。 for example， NumPy， I just start
    to install NumPy in my notebook。 And that I run this notebook once again in one
    month without specifying， any version either。 I will probably not have the same
    version of NumPy installed in my notebook。 So this is an issue。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常频繁。这意味着一件事。如果今天我通过运行`pip install`开始开发我的笔记本，例如，NumPy，我只是开始在我的笔记本中安装NumPy。如果我一个月后再次运行这个笔记本而不指定任何版本，我很可能不会在我的笔记本中安装相同版本的NumPy。这是一个问题。
- en: of course。 And also， what about hashes？ Hashes are a way to guarantee the provenance
    of a package。 And to make sure that an artifact that you use in your application。
    has to be installed from a trusted source of your choice， like， for example， in
    index。 Specifying hashes to identify the provenance of your dependencies。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当然。还有，哈希呢？哈希是一种确保软件包来源的方法。并且确保你在应用中使用的工件必须从你选择的可信来源安装，比如说，在索引中。指定哈希以识别依赖项的来源。
- en: is essentially if you want to share your notebook application， in a more secure
    and reliable manner。 and allow users to install packages from the same sources
    as you did。 But also。 what about the Python interpreter version？ Every Python
    interpreter version is different。 And your notebook will not necessarily be compatible
    with all Python versions。 So this is an issue。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，如果你想以更安全可靠的方式分享你的笔记本应用，并允许用户从与你相同的来源安装软件包。但还有，Python解释器版本呢？每个Python解释器版本都是不同的。你的笔记本不一定与所有Python版本兼容。这是一个问题。
- en: for example， if you're not， developing your notebook using Python 3。8s。 and
    you shared with someone who uses Python 3。10， maybe this person will not be able
    to run it properly。 So we have issues with versions， with hashes， with Python
    interpreter versions。 But can we think of something more？ In fact， a Python application
    is composed of many layers。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你不是用Python 3.8开发你的笔记本，而是与一个使用Python 3.10的人共享，可能这个人无法正确运行。所以我们在版本、哈希和Python解释器版本上都有问题。但我们能想出更多吗？实际上，一个Python应用是由许多层组成的。
- en: And each one of these layers has a power to potentially break your code。 On
    the top layer。 you have your Python application codes。 And this is really the
    only layer you really have some control on。 For example， if your code is broken，
    you can still have a fix for it。 and propagate this fix to other users。 And they
    will be able to run the code as well。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 而这些层中的每一层都有潜在破坏你代码的能力。在最上层，你有你的Python应用代码。这实际上是你唯一能真正控制的层。例如，如果你的代码出现问题，你仍然可以修复它，并将这个修复传播给其他用户。他们也能运行这段代码。
- en: But below this layer， as we saw earlier， you also have Python direct dependencies。
    transitive dependencies， the Python interpreter you use。 But also other things
    such as native dependencies， like JLIP-C or CUDA， for example。 You have also the
    operating system you use to develop your application。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 但在这个层次之下，正如我们之前所见，你还有Python的直接依赖项，传递依赖项，以及你使用的Python解释器。但还有其他东西，比如原生依赖项，例如JLIP-C或CUDA等等。你还有用于开发应用的操作系统。
- en: with different kernel modules。 And finally， on the bottom layer， you have the
    hardware。 with different CPU and GPU architectures。 This is why using the simple
    PIP command to install your dependencies。 will not help you achieve the goal of
    reproducibility， you would like to have for your notebook。 So to summarize， if
    you do something like this， which is PIP install。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: your dependency without specifying， any version of hashes。 it will not guarantee
    any reproducibility， for your notebook。 And maybe you would think of doing something
    like that， which is specifying a list of requirements。 either manifest files such
    as requirements。txt。 But here again。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: you don't have any information about versions， of hashes used。 So this will
    not work and not guarantee either any reproducibility， for your Jupyter notebook。
    My point is Jupyter notebooks are by default not standalone。 You can share a Jupyter
    notebook with someone else。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: It considers that it will run on a different machine， with different dependency
    versions。 and using a different Python version。 In fact， dependency management
    in Jupyter notebooks。 but constraints are the other of the notebooks， to provide
    a decoupled manifest file。 like a requirement， that texts or a PIP file that luck，
    along with a notebook。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: so that the notebook users can install the exact same software。 stack that you
    use to develop the notebook。 Dependencies are also a problem when。 you want to
    containerize your notebook。 If you run， for example。 to ship your notebook into
    your container， and share it with someone else， you。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: have them to make sure that your Docker file or container file。 would be able
    to adjust the dependencies accordingly。 And finally。 the consumers that receive
    a shared notebook， also have to set up manual is correct environments。 which，
    can be difficult if no manifest file， or in any information regarding the environments
    in which。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: the author or developed a notebook is provided with it。 And this is often the
    case with shared Jupyter notebooks。 To summarize what would be the difficulties，
    this creates for both others and consumers。 they should both create an environment
    to run the notebook， in， ideally。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: a virtual one that would not， be polluted by any dependencies。 They will have
    to install the dependencies， to create a kernel， and update it every time。 they
    have a new dependency。 And in addition to that， the author， had to maintain a
    requirement file。 to allow others to get the exact same dependencies， that the
    notebooks was developed with。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: What we are looking for is a solution， that would have authors keep their dependencies。
    and manifest files up to dates and thus achieve， a reproducibility of their notebook。
    So earlier I introduced you project。tots。 So now I will see how that can actually。
    help you manage dependencies in your notebook， and get an optimal set of dependencies
    for your application。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: First， the three words about tots。 So the main goal of tots is to help developers
    and data。 scientists create and maintain healthy Python applications。 This project
    was started in 2018 at Red's Head Office of CTO。 and now it is maintained by a
    team of 10 engineers， and has had over 50 contributors。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，关于 tots 的三句话。tots 的主要目标是帮助开发者和数据科学家创建和维护健康的 Python 应用程序。这个项目于 2018 年在 Red
    的首席技术官办公室启动，现在由一个由 10 名工程师组成的团队维护，并且有超过 50 名贡献者。
- en: That is a cloud-based recommendation， engine for Python application， which。
    is able to solve dependencies through their optimal versions， using machine learning。
    Of course。 tot is an open source project。 So you can contribute， of course， if
    you want to。 and involve yourself in the TAT community， and share your ideas with
    us。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个基于云的 Python 应用程序推荐引擎，能够通过其最佳版本解决依赖关系，使用机器学习。当然，tot 是一个开源项目。所以如果你想的话，你可以贡献，也可以参与
    TAT 社区，和我们分享你的想法。
- en: What tot does is that it provides an extension， to manage dependencies in Jupyter
    Notebooks。 Jupyter Notebook extension。 So Jupyter Notebook， if you know。 is an
    interactive and extensible web interface， to work with Jupyter Notebooks。 That
    extension for Jupyter Notebook， is called Jupyter Note Requirements。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: tot 提供了一个扩展，用于管理 Jupyter Notebook 中的依赖关系。Jupyter Notebook 扩展。所以 Jupyter Notebook，如果你知道的话，是一个互动且可扩展的网页界面，用于处理
    Jupyter Notebook。这个 Jupyter Notebook 的扩展称为 Jupyter Note Requirements。
- en: And it allows you to manage your net dependencies。 without even leaving it by
    storing all of the necessary。 dependency information directly in the Notebook
    metadata。 You can provide an optimized environment。 unique to each Notebook by
    solving dependencies， using the policy resolution and giant。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 它允许你管理你的网络依赖关系，甚至不需要离开它，通过直接将所有必要的依赖信息存储在 Notebook 元数据中。你可以通过使用策略解析和 giant，提供一个独特的优化环境，适用于每个
    Notebook。
- en: So let's see what the user interface of Jupyter， Lab requirements looks like。
    So when you work with Jupyter Notebook， you have your Jupyter Notebook open。 and
    typically it looks like this。 And if you have Jupyter Lab requirements enabled，
    on Jupyter Lab。 you will see this button called， manage dependencies。 So if you
    click on this button。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 Jupyter Lab requirements 的用户界面是什么样的。当你使用 Jupyter Notebook 时，你会打开 Jupyter
    Notebook，通常它看起来是这样的。如果你在 Jupyter Lab 上启用了 Jupyter Lab requirements，你会看到一个名为“管理依赖”的按钮。所以如果你点击这个按钮。
- en: you will have this menu， where you will be able to add your dependencies with
    a button。 In this not before example， we import tensorflow and numpy。 And I want
    to say that--。 I want tensorflow， for example， in version 2。2。0， and numpy in
    a range of version from 1。0。0 to the latest， version possible。 So I will put the
    state of packages and constraints in the UI。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你将会有这个菜单，可以通过一个按钮添加你的依赖关系。在这个例子中，我们导入了 tensorflow 和 numpy。我想说的是——我想要 tensorflow，例如，版本为
    2.2.0，而 numpy 的版本范围是从 1.0.0 到最新的可用版本。所以我将把包的状态和约束放在用户界面中。
- en: and save those dependencies。 Now I will have this menu， where I will be able
    to choose。 a resolution and giant。 So you can use the dot resolution and giant。
    Or you can use p-pen of also。 which， is used as a backup to Tarte。 You can also
    choose if you have the dot resolution。 and giant recommendation type。 And we'll
    see later exactly what it is。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 并保存这些依赖关系。现在我将有这个菜单，在这里我将能够选择一个解析和 giant。所以你可以使用 dot 解析和 giant，或者你也可以使用 p-pen，这被用作
    Tarte 的备份。你还可以选择是否有 dot 解析和 giant 推荐类型。我们稍后将确切了解它是什么。
- en: But now we'll say that we want our dependencies to be， resolved to the latest
    possible versions。 And finally， you have this section， with information about
    your environment， which is automatically。 filled by the extension。 But if you
    want to， you can also modify it by hand。 So here， for example。 I developed my
    notebook using， 5。3。8 in a row， eight environments OS。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 但是现在我们要说的是，我们希望我们的依赖关系能够解析到最新的版本。最后，你会看到这个部分，其中包含关于你的环境的信息，这些信息会自动由扩展填充。但如果你想的话，也可以手动修改。所以这里，例如，我在八个不同的环境中使用
    5.3.8 开发了我的笔记本。
- en: So now that everything is specified， we are conducting dots back in for advice。
    which takes typically， a few seconds or minutes。 And dots back in is going to
    compute。 this fully pinned-out software stack here， with the latest possible versions
    I was specified。 And send it back to us in the form of a log file。 Now that we
    received the fully pinned-out software stack。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在一切都已指定，我们正在进行回传以获取建议。通常只需几秒钟或几分钟。回传将计算这个完全锁定的软件堆栈，使用我指定的最新版本，并以日志文件的形式发送回来。现在我们已经收到完全锁定的软件堆栈。
- en: we are installing these requirements， in virtual environments。 And this is done
    with a tool called MicroPIPEV。 And this tool has been developed within Project
    TOTS。 to install dependencies。 And it can sort of wrap around PIP。 to convert
    requirements to text or PIPEV or poetry， like files， for example。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在虚拟环境中安装这些需求。这是通过一个叫做MicroPIPEV的工具完成的。这个工具是在TOTS项目中开发的，用于安装依赖关系。它可以包裹PIP，将需求转换为文本或PIPEV或诗歌等文件。
- en: into a PIP tools compatible outputs。 So now we have our requirements locked
    and saved。 They are installed。 We also created a new kernel。 And we can simply
    click to start working on our notebook。 Everything is installed and ready to use。
    On the right side of your UI。 you will normally see an option to have the notebook
    metadata， which is a JSON file。 And here。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 转换为与PIP工具兼容的输出。现在我们的需求已经锁定并保存，它们已被安装。我们还创建了一个新的内核。我们可以简单地点击开始在笔记本上工作。一切都已安装并准备好使用。在你UI的右侧，你通常会看到一个选项，查看笔记本的元数据，这是一个JSON文件。在这里。
- en: as I said earlier， you will be able to see， that your dependencies， I just specified
    them。 So with the right versions， have been locked directly， in the notebook metadata。
    And if you scroll down， you normally， will see also your whole software stack。
    with our direct and transitive dependencies， and the corresponding hashes they
    have。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我之前所说，你将能看到你的依赖关系，我刚刚指定了它们。所以使用正确的版本，已经直接锁定在笔记本的元数据中。如果你向下滚动，通常会看到你整个软件堆栈，包括我们的直接和传递依赖关系，以及它们相应的哈希值。
- en: So everything has been saved there。 It's directly in the notebook。 You can also
    have access TOTS recommendation， using Horace Magic commands。 So maybe if you
    knew a bit high-pight， then you're already familiar with Magic commands。 But if
    not。 it's OK。 So these commands basically allow you to do the same， but directly
    in the notebook cells。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 所以一切都已保存在那里，直接在笔记本中。你还可以通过Horace Magic命令访问TOTS的推荐。所以如果你稍微了解高亮，那么你对Magic命令应该已经熟悉。但如果没有，也没关系。这些命令基本上允许你直接在笔记本单元中执行相同的操作。
- en: to speed up the development of your notebook。 So this is an example of the commands。
    that helps you lock your dependencies and outputs。 But you can also perform the
    those actions。 which are checking notebook metadata about dependencies， with Horace
    Check。 But also converting pip commands to Horace commands， to allow more reproducibility。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 加速你的笔记本开发。这是一个命令示例，帮助你锁定你的依赖关系并输出。但你也可以执行那些操作，即检查笔记本关于依赖关系的元数据，使用Horace Check。同时将pip命令转换为Horace命令，以允许更好的可复现性。
- en: You can also discover dependencies already， existing in your notebook and create
    automatically a pip file。 and do a lot of other actions such as adding， or removing
    requirements in your pip file also。 If you take a look at the output for Horace
    Check， for example， for checking for dependencies。 you will have the following
    table， with information about your projects， about the advisor ID。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以发现已经存在于你的笔记本中的依赖关系，并自动创建一个pip文件。并进行许多其他操作，例如在你的pip文件中添加或移除需求。如果你查看Horace
    Check的输出，例如用于检查依赖关系，你会看到以下表格，包含关于你的项目和顾问ID的信息。
- en: or the advisor ID you sent to TOTS。 But also， for example， here I let this warning。
    which tells you that you forgot to set a kernel。 So it will warn you that you
    have to run Horace。 at kernel to set a kernel for your notebook， before performing
    this action。 If you want to install and run JupyterLab requirements。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 或你发送给TOTS的顾问ID。但例如，这里我留下这个警告，告诉你你忘记设置内核。因此，它会警告你在执行此操作之前，你必须运行Horace来设置笔记本的内核。如果你想安装和运行JupyterLab的需求。
- en: you can get this extension from the Python package index。 by API by running
    pip install JupyterLab requirements， on your machine。 And if you want to use this
    extension， you can do so by running the JupyterLab command。 to open a local JupyterLab
    instance。 And if you have JupyterLab requirements enabled。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在你的机器上运行 pip install JupyterLab requirements，从 Python 包索引中获取这个扩展。如果你想使用这个扩展，可以通过运行
    JupyterLab 命令来打开本地的 JupyterLab 实例。如果你启用了 JupyterLab requirements。
- en: you will be able to run it as we so just now。 And now what about containerized
    notebooks？
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你将能够像我们刚才所做的那样运行它。那么容器化笔记本呢？
- en: Does any of your work with containers？ OK， let's have a few people。 So besides
    this extension for JupyterLab， we started this also possible to manage dependencies。
    in containerized Jupyter notebooks using source to image。 Source to image is also
    known as 2i。 It's a tool for building reproducible images。 And it produces images
    which are already。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否有使用容器的工作？好的，让我们看看几个人。所以除了这个 JupyterLab 的扩展，我们还开始了管理容器化 Jupyter 笔记本中的依赖关系，这也变得可能，使用源到镜像。源到镜像也被称为
    2i。它是一个构建可重复镜像的工具。它生成的镜像已经。
- en: to run by injecting an application source code， into a container image。 which
    assembles it into a new image。 And that provides minimal Jupyter notebooks container，
    images。 which can be built on OpenShift， which， just had a distribution of Kubernetes。
    to manage dependencies using touch recommendation。 But also。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将应用程序源代码注入到容器镜像中运行。它将其组装成一个新镜像，并提供最小的 Jupyter 笔记本容器镜像，这些镜像可以在 OpenShift 上构建，OpenShift
    刚好有一个 Kubernetes 的分发来使用触摸推荐管理依赖关系。但也可以。
- en: container images for other types of application， by extending the functionality
    of some base。 to i Python images to use touch services。 Now that we have seen
    a few ways to manage dependencies。 in JupyterLab notebooks and to get an appropriate
    software， stack using Tuts。 you might be wondering， well， how does that work？
    How is this recommendation computed exactly？
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 针对其他类型应用程序的容器镜像，通过扩展一些基础功能来创建，以便在 Python 镜像中使用触摸服务。现在我们已经看到了一些在 JupyterLab 笔记本中管理依赖关系的方法，以及使用
    Tuts 获取合适的软件堆栈。你可能会想，嗯，这究竟是如何工作的？这个推荐是如何计算出来的？
- en: So that's what we will see。 The core component behind Tuts recommendation， is
    called the resolver。 And the philosophy behind the resolver， is to recommend the
    greatest and not the latest possible versions。 for your dependencies。 When you
    install dependencies using P or P Pen， or similar resolver。 the resolver process，
    uses a backtracking algorithm， which will systematically。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这就是我们将要看到的。Tuts 推荐背后的核心组件称为解析器。解析器背后的哲学是推荐最大的，而不是最新的可能版本。对于你的依赖关系。当你使用 P 或
    P Pen 或类似的解析器安装依赖关系时，解析过程使用的是回溯算法，这将系统地。
- en: solve your dependencies to the latest possible versions。 However。 this is not
    the case with Tuts resolver， which uses reinforcement learning。 solve dependencies
    in the cloud， therefore using， resources from a cluster and not from the user's
    local machine。 Tuts resolver has five different recommendation types。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的依赖关系解决到尽可能最新的版本。然而，这在 Tuts 解析器中并不适用，后者使用强化学习。在云中解决依赖关系，因此使用来自集群的资源，而不是用户本地计算机的资源。Tuts
    解析器有五种不同的推荐类型。
- en: which can adapt the dependency resolution process， to user specific needs。 Of
    course。 the resolver can solve dependencies， to the latest possible versions。
    But for example。 it is also possible to configure the resolver， to get the most
    secure possible software stack。 The security recommendation type is particularly
    useful。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以调整依赖解析过程，以满足用户的特定需求。当然，解析器可以解决依赖关系，以尽可能最新的版本。但是，例如，配置解析器以获得最安全的软件堆栈也是可能的。安全推荐类型尤其有用。
- en: if you want to manage dependencies in applications。 which are deployed in the
    projection environment， for example。 because the associated set of dependencies，
    will contain only versions that are free of non-vunderebilities。 But for users
    developing programs， where the focus might be on performance， for example。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想管理在投影环境中部署的应用程序的依赖关系，例如，因为相关的依赖集合将仅包含没有非脆弱性（non-vulnerabilities）的版本。但是对于那些开发程序的用户，重点可能在于性能，例如。
- en: the resolver can be adjusted to performance recommendation。 type to get dependency
    versions which will， maximize the performance of an application according。 to
    a user's hardware and software environments。 An example of how we evaluate the
    performance of libraries。 by performing benchmarks between different versions，
    by using those versions of libraries。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 解析器可以根据性能推荐类型进行调整，以获取最大化应用性能的依赖版本，依据用户的硬件和软件环境。我们通过在不同版本之间进行基准测试，使用这些版本的库，来评估库的性能。
- en: in different kind of performance scripts。 For example， it can be metrics， multiplication。
    convolutional filters， or any kind， of heavily computational operations。 And then
    we can compare the speed， for example， of execution for different versions of。
    I don't know， tensor flow if you're using for metrics， multiplication。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在不同类型的性能脚本中。例如，它可以是度量、乘法、卷积滤波器，或任何重计算操作。然后我们可以比较不同版本的执行速度，比如，如果你使用度量乘法的 TensorFlow。
- en: The recommendation type for TOTS can also be set to stable。 If you want to get
    the most stable versions of packages， or to testing if you want to run。 software
    that can possibly be unstable。 This recommendation type testing is more suitable。
    for experimenting because all the recommendation type can。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: TOTS 的推荐类型也可以设置为稳定。如果你想获取包的最稳定版本，或是想运行可能不稳定的软件，可以选择测试推荐类型。这种测试推荐类型更适合实验，因为所有推荐类型都可以。
- en: be more strict and not resolve any dependencies in this case。 That collects
    a set of requirements。 and constraints about dependencies as well as， a recommendation
    type for the resolution。 and also information about the user's environments。 such
    as the operating system and Python version used。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，它将更严格，不解析任何依赖。收集一组关于依赖的要求和约束，以及解析的推荐类型，同时提供关于用户环境的信息，比如所用的操作系统和 Python
    版本。
- en: But also if the application uses a base container image， to run， has good at
    configured or what。 type of hardware is present， and it sends back， this information
    to a component that we call the advisor。 The advisor is responsible for computing，
    the optimal application software stack。 It uses a knowledge database containing
    information， about dependencies and it dynamically。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果应用程序使用基础容器镜像运行，配置良好，或者存在什么类型的硬件，它会将这些信息发送回一个我们称之为顾问的组件。顾问负责计算最优的应用软件栈。它使用包含关于依赖信息的知识数据库，并且动态。
- en: constructs a resolution pipeline which， is made of different type of customizable
    pipeline units。 The pipeline units makes the resolution process， optimized for
    each application and its runtime environment。 So the advisor sends back a fully
    pinned-out software stack。 including the direct and the transitive dependencies，
    in the form of a log file。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个由不同类型的可定制管道单元组成的解决方案管道。管道单元使得解析过程针对每个应用及其运行时环境进行优化。因此，顾问会返回一个完整的 pinned-out
    软件栈，包括直接和传递依赖，以日志文件的形式。
- en: along with a justification， to inform the user on why some dependency versions
    were。 had or removed from the resolution process， and to warn or inform about
    some package specificities。 So what we observe in our knowledge graph。 This observation
    include， among other things。 information about the application stack， such as
    build time and runtime environments。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以及一个理由，告知用户为什么某些依赖版本被添加或从解析过程中移除，并警告或通知某些软件包的特性。因此，我们在知识图谱中观察到的情况包括，关于应用栈的信息，比如构建时间和运行时环境。
- en: and also about dependencies and benchmark of packages， version performances。
    They also have information about application binary interface， CVEs for libraries。
    different kind of security and lysers， and also source code meta information。
    So now I want to talk to you about prescriptions， and how they can help you heal
    your Python applications。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 还包括关于依赖和包基准、版本性能的信息。它们还包含有关应用二进制接口、库的 CVE，不同类型的安全性分析器，以及源代码元信息。因此，现在我想与你讨论处方，以及它们如何帮助你修复
    Python 应用程序。
- en: So what we call prescriptions are， in fact， an example of configurable pipeline
    units。 that we use in touch resolution process。 They are simply declarative， yaml
    files。 stating how the resolution process should look like。 And they are a way
    to formalize developers' knowledge， about dependencies in two units。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所称的处方实际上是可配置管道单元的示例，这些单元用于触控解析过程。它们只是声明性的yaml文件，说明解析过程应该是什么样的。这也是一种将开发者关于依赖关系知识形式化的方式。
- en: which are automatically， consumed by the resolver to compute， the software stack
    recommendations。 So prescription are present on an open source， GitHub repository
    under the touch station organization。 so that every developer with any knowledge
    about dependencies。 can help improve touch resolution process。 So now let's see
    an example of how a developer can create。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数据会被解析器自动消费，以计算软件堆栈推荐。因此，处方信息存储在一个开源的GitHub仓库中，属于触控站点组织，以便每位对依赖关系有任何了解的开发者都可以帮助改进触控解析过程。那么现在让我们看看开发者如何创建一个示例。
- en: prescriptions from its knowledge。 So here I took this issue from the pillow
    repository。 on GitHub or the pillow library。 And here we have this user who saw
    this issue， which。 was that pillow 8。3 and numpy are incompatible。 So for example，
    you have this error。 when you try to run an application with pillow 8。3， and numpy。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 处方源于它的知识。这里我从GitHub上的pillow库中获取了这个问题。这里有一个用户发现了这个问题，问题是pillow 8.3和numpy不兼容。因此，例如，当您尝试运行一个使用pillow
    8.3和numpy的应用时，您会遇到这个错误。
- en: Type error array takes one positional arguments， but two are given。 So we see
    that pillow 8。3 and numpy have API compatibility。 So what this developer can do，
    for instance。 is create this prescription， which is a yaml file。 And if you want
    to know exactly how to create the prescriptions， it's quite easy to do。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 类型错误：数组接受一个位置参数，但给定了两个。因此，我们看到pillow 8.3和numpy具有API兼容性。因此，这位开发者可以做的一个示例是创建这个处方，即一个yaml文件。如果您想知道如何准确创建处方，其实很简单。
- en: It's something we have in our documentation。 And so basically in this prescription
    or yaml file。 you will find information about the packages that， don't go together，
    the versions。 the index that come from also。 And you will have a warning， which。
    will be returned as a justification to the user。 For example， pillow inversion
    8。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们文档中包含的内容。因此，基本上在这个处方或yaml文件中，您会找到有关不兼容的包、版本以及来自索引的信息。您还会收到一个警告，这将作为返回给用户的理由。例如，pillow的版本8。
- en: 3 by 0 does not work with numpy。 And you also have the link to the justification，
    which。 is the issue that was open on the pillow repository at the end。 so that
    users can check how white dots exactly didn't， allow to solve pillow 8。3 and numpy
    during the resolution， process。 Some of the prescriptions we have are automatically
    created。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 3与numpy不兼容。此外，您还可以找到用于说明的链接，即在pillow仓库中打开的问题，用户可以检查为什么白点确实无法在解析过程中解决pillow 8.3和numpy的问题。我们的一些处方是自动创建的。
- en: and refreshed on a weekly basis using Python packaged data， from different sources。
    such as the Python package index， GitHub open source repositories， but also。 from
    publicly available data sets， such as security scorecards， data sets。 which is
    created by the open source security， foundation。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数据每周更新一次，使用来自不同来源的Python打包数据，比如Python包索引、GitHub开源仓库，还包括来自公开可用数据集的数据，例如由开源安全基金会创建的安全评分卡数据集。
- en: This prescription can contain data about package popularity。 non-relabilities
    for some packaged versions， artifact size， for example。 And all of this can be
    used during the resolution process。 to assess the reliability of a given dependency。
    So finally， let's see what the conclusion--。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这个处方可以包含有关包的流行度、某些包版本的不可靠性、工件大小等数据。而这些都可以在解析过程中用于评估给定依赖关系的可靠性。最后，让我们看看结论是什么。
- en: what are the conclusion we can draw from what we just saw。 Managing dependencies
    in Jupyter Notebooks， has become significantly easier for others。 because of requirements
    being locked and embedded directly。 into the notebook metadata with no additional
    five needed。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能从刚刚看到的内容中得出什么结论？管理Jupyter Notebooks中的依赖关系对于其他人来说变得显著容易，因为要求被锁定并直接嵌入到笔记本的元数据中，无需额外的配置。
- en: Jupyter Notebooks with embedded dependencies， can be built using Jupyter Notebook
    source to image。 without any additional files either。 And finally， Notebooks can
    be shared as standalone。 units with an environment ready in a few clicks。 Using
    TOT to manage dependencies in your Notebook。 both guarantees that your Notebook
    will be shared， in a consistent， reliable manner。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 带有嵌入依赖项的Jupyter Notebook可以使用Jupyter Notebook源构建成镜像，而无需任何额外文件。最后，Notebook可以作为独立单元分享，环境准备只需几次点击。使用TOT管理Notebook中的依赖项，确保您的Notebook以一致、可靠的方式共享。
- en: and that your application will benefit， for the best possible software stack。
    according to its purpose。 Finally， I would like to thank you。 and also encourage
    you to contribute to Project TOTs。 to help make Python-dependent civil solutions
    better。 If you have any questions。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 您的应用程序将受益于最佳的软件堆栈，以符合其目的。最后，我要感谢您，并鼓励您为TOT项目做出贡献，以帮助改善依赖Python的民用解决方案。如果您有任何问题。
- en: you can ask them to me。 I will be available right there。 And so thank you very
    much。 [APPLAUSE]。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以向我提问。我将会在那儿。非常感谢您。[掌声]。
- en: '![](img/190d0f30a9873a134f5dbcc699411591_4.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/190d0f30a9873a134f5dbcc699411591_4.png)'
- en: (applause)。
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: （掌声）。
