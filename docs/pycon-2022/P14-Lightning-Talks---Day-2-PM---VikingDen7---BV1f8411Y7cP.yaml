- en: P14：Lightning Talks - Day 2 PM - VikingDen7 - BV1f8411Y7cP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P14：闪电演讲 - 第二天下午 - VikingDen7 - BV1f8411Y7cP
- en: \>\> Welcome to the end of day two。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: \>\> 欢迎来到第二天的结束。
- en: '![](img/7166498fe6a53e554ff5f6b4e42bc599_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7166498fe6a53e554ff5f6b4e42bc599_1.png)'
- en: '![](img/7166498fe6a53e554ff5f6b4e42bc599_2.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7166498fe6a53e554ff5f6b4e42bc599_2.png)'
- en: \>\> Yes， welcome。 \>\> Let's kick it off with some lightning talks， shall we？
    \>\> We shall， we shall。 As a reminder， each of our speakers will get five minutes。
    When we get down to around 20 seconds。 we'll start with our small claps。 One，
    then two， and then we'll go into a full clap to let our lovely speakers know they
    are at time。 Let's go ahead and start with our first speaker， Christian。 \>\>
    Hello。 Can you hear me？ Yeah， cool。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: \>\> 是的，欢迎大家。 \>\> 我们来开始一些闪电演讲吧，怎么样？ \>\> 好的，我们开始吧。请记住，每位发言者都有五分钟的时间。当时间接近20秒时，我们会开始小拍手。先一声，然后两声，最后我们会进行热烈的掌声，让我们的发言者知道他们时间到了。现在让我们开始第一位发言者，克里斯蒂安。
    \>\> 你好。你能听到我吗？太好了。
- en: Okay， so I will do some light coding， so everything will explode， but let's
    see。 Hola， Bonjour。 hola， hello， shiao。 We know languages are beautiful， but sometimes
    they can be a barrier。 My name is Christian， and I wanted to talk to you about
    Python and Spanish。 so you can follow me there on social media， whatever， but
    this is not relevant now。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我将做一些轻量级编码，可能一切都会崩溃，但让我们看看。Hola，Bonjour。hola，hello，shiao。我们知道语言是美丽的，但有时候它们可能成为障碍。我的名字是克里斯蒂安，我想和你谈谈Python和西班牙语。你可以在社交媒体上关注我，随便，但这现在并不重要。
- en: So how many non-native English speakers do we have here in the audience？ A few。
    Okay， for enough。 So for us， usually learning to code requires learning English，
    which is not bad。 but of course it's an extra step。 So I was thinking， okay。 how
    can I put this in perspective for people to understand， the things we need to
    do。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 那么在座的非母语英语人士有多少？几个。好的，足够了。对我们来说，学习编码通常需要学习英语，这并不好，但当然这又是一个额外的步骤。所以我在想，好的。我该如何让大家理解我们需要做的事情。
- en: So since I like to play a little bit， I was thinking of doing something maybe
    silly。 So let's start with a simple Python interpreter， nothing wrong there， but
    everything makes sense。 So the first thing that I learned in Python were a list。
    So you can create a list with many elements， oh， sorry， with many elements there。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 所以因为我喜欢玩一些东西，我想做点可能傻的事情。所以让我们从一个简单的Python解释器开始，没什么错误，但一切都很有意义。我在Python中学到的第一件事是列表。所以你可以创建一个包含许多元素的列表，哦，抱歉，包含许多元素。
- en: And this was really cool because I came from Bash and Pearl， so okay， at least
    that's cool。 But then you can， of course， create it in a more simpler way。 And
    how can you populate a list？ Well。 you can use the famous meantras loop。 So you
    can go and say， like meant -- oh。 let's try with a -- with a contador。 And meantras，
    contador is less than 10。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这真的很酷，因为我来自Bash和Perl，所以，好吧，至少这很酷。但你当然可以以更简单的方式创建它。那么你如何填充一个列表呢？好吧。你可以使用著名的`meantras`循环。你可以说，比如`mean`——哦。让我们试试一个`contador`。而`meantras`，`contador`小于10。
- en: You can go and do an -- and then increase the contador。 And then you have --
    oh， by the way。 if you are -- if you are -- if you don't know about， this at-cont。
    -- you can do a list with a lot of things。 You can do a lot of things。 And then
    you can make sure that these things are the same with the typical， of the of course。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以去做一个——然后增加`contador`。然后你就会有——哦，顺便说一下。如果你——如果你——如果你对这个`at-cont`不了解——你可以做一个包含很多东西的列表。你可以做很多事情。然后你可以确保这些东西和典型的，当然是相同的。
- en: And then you can do the typical part -- you can go there and get the item by。
    -- and then the typical -- and then the typical -- and then the typical。 -- sometimes
    it's the item that doesn't exist， then you will get an exception。 So how do we
    handle exceptions in Python with the typical intentar eseption？
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可以做一些典型的部分——你可以去那里获取这个项目——然后就是典型的——然后就是典型的——然后就是典型的。有时候项目是不存在的，这样你就会得到一个异常。那么我们如何在Python中处理异常，使用典型的`intentar
    eseption`？
- en: So if you go intentar and you go， for example， something crazy， like， I don't，
    know， 99。 you can capture the eseption and then typically implement something。
    Oh， no， right？ Okay。 So of course this thing was just playing around with the
    C Python code。 I mean。 I just patch everything with the grammar， nothing too serious，
    but yeah。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果你尝试去做一些疯狂的事情，比如，我不知道，99。你可以捕获这个`eseption`，然后通常实现一些东西。哦，不，对吧？好的。所以当然这个事情只是玩玩C
    Python代码。我是说。我只是用语法简单修补了一下，没什么太严肃的，但确实如此。
- en: maybe I should get another hobby。 So let's go to the solution。 I know this is
    not the solution。 I don't expect Python to be in Spanish， of course， at any moment。
    But we could help differently。 So maybe you can start your projects。 Having in
    mind that at some point someone will really -- really keen into maybe。 all the
    readme and all the things that you have。 And we can see this， for example。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 也许我应该找个其他的爱好。那么我们来看看解决方案吧。我知道这并不是解决方案。我当然不指望Python会突然变成西班牙语。但是我们可以用不同的方式提供帮助。所以也许你可以开始你的项目。记住，总会有某个人真的——真的很想去阅读你的所有`readme`和你拥有的所有资料。我们可以举个例子。
- en: in this effort in Python， Argentina， that they started， to translate the tutorial
    from Python。 then it transformed into the whole group， translating the official
    documentation of Python。 And we finally have it there since a couple of months，
    maybe a year。 And other things， like。 for example， PyConcharras， that is usually
    an instance that， helps us， of course。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在阿根廷的这个Python努力中，他们开始翻译Python教程。然后它转变为整个团队，翻译Python的官方文档。我们已经有几个月，甚至一年了。而且还有其他事情，比如，PyConcharras，通常是一个支持我们的实例，当然。
- en: to be around people that speak the same language and， you know。 learning your
    own language will make you feel home。 So at least from the Spanish community panel
    view， we started to do something like that。 And this is Python and Spanish。 You
    can check the information。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 和讲同样语言的人在一起，知道吧。学习自己的语言会让你有归属感。因此，从西班牙社区的角度来看，我们开始做一些这样的事情。这是Python和西班牙语。你可以查看相关信息。
- en: You will not find the Python interpreter in Spanish there as well。 Because that's
    not the goal。 But if you don't speak English as a first language， maybe you can
    start your own， community。 Just to encourage and enable， as Peter was saying in
    the keynote， to enable more people。 to have more developers。 And what else is
    that learning your own language？ That's it。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在那里你也不会找到西班牙语的Python解释器。因为那并不是目标。但是如果你不是以英语为母语的人，也许你可以开始自己的社区。就像Peter在主题演讲中所说的，鼓励和支持更多人，培养更多开发者。那么学习自己的语言又有什么呢？就是这样。
- en: Thank you very much。 [ Applause ]。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 非常感谢。[掌声]。
- en: '![](img/7166498fe6a53e554ff5f6b4e42bc599_4.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7166498fe6a53e554ff5f6b4e42bc599_4.png)'
- en: What a great talk。 I'm so glad we're not changing very much between Python 3
    and Python 4。 All right。 Next up we have Mario with my first PyCon。 Reflections。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这是个很棒的演讲。我很高兴我们在Python 3和Python 4之间没有太多变化。好吧，接下来是Mario带来的我的第一次PyCon。反思。
- en: '![](img/7166498fe6a53e554ff5f6b4e42bc599_6.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7166498fe6a53e554ff5f6b4e42bc599_6.png)'
- en: Give it away for Mario。 [ Applause ]， Hi， everyone。 This is my first PyCon。
    Reflections。 [ Applause ]， Again， I'm Mario。 You can find me on Twitter， Python
    by night。 So my journey to PyCon began with a call to adventure。 It was actually
    this tweet by the PyCon Twitter handle with a call for， proposals。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 把它送给Mario。[掌声] 嗨，大家好。这是我第一次参加PyCon。反思。[掌声] 再次，我是Mario。你可以在Twitter上找到我，用户名是Python
    by night。我的PyCon之旅是一次冒险的召唤。其实是PyCon官方Twitter发出的这条推文，呼吁提交提案。
- en: And I thought to myself， why not？ It can't be that hard， right？
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我心里想，为什么不呢？这应该不会太难，对吧？
- en: And I was surprised in early February when they were -- I guess it wasn't that
    hard。 And I got my tutorial proposal accepted。 So that just meant that I had to
    have a bit of help to get to PyCon。 So I'm super natural aid。 And that was in
    the form of the travel grant。 Thanks， PSF。 Thank you very much。 [ Applause ]，
    So to cross that threshold and make the journey。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当我在二月初得知我的教程提案被接受时，我感到惊讶。看来这并没有那么难。所以这意味着我需要一点帮助才能去参加PyCon。因此，我获得了超级自然的支持。这种支持来自旅行资助。谢谢PSF。非常感谢。[掌声]，所以跨越那道门槛，开始这段旅程。
- en: my family and I had to make the journey from， Redden。 California up to the Salt
    Pals Convention Center。 It was a little over nine hour drive。 I thought to do
    it in two days since my three-year-old daughter probably couldn't handle that
    drive。 We stopped at a place called the Valley of Fire in Nevada， where I saw
    some cool cave paintings。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我和我的家人需要从加利福尼亚的Redden前往盐湖城会议中心。这是一段超过九小时的车程。我决定分两天完成，因为我三岁的女儿可能无法承受如此长时间的驾驶。我们在内华达州停留在一个叫火焰谷的地方，在那里我看到了一些很酷的洞穴壁画。
- en: petrographs， I guess they're called over 4，000 years old。 This is me and my
    best caveman cosplay。 You may see my daughter there in the middle of that one，
    this Martian landscape。 My wife。 they're walking through -- trekking through Mars，
    apparently。 And eventually we arrived。 The next day I was ready to go。 This is
    me at the entrance of the convention center。 Yes。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 岩画，我想它们有超过4000年的历史。这是我和我最好的穴居人装扮。你可以看到我的女儿在这幅火星景观中间。我的妻子，她们显然正在穿越火星。最终我们到了。第二天我已经准备好了。这是我在会议中心的入口。没错。
- en: I chose the silly pose， of course。 My wife will not like that。 And then I was
    ready to enter the belly of the whale to tackle my tutorial titled "Goodbye Hello
    World。"， Hello， functional fast API web app。 Check it out on the video if you
    weren't there。 Of course。 the first thing to do is to make sure it was real。 I
    was there in the middle of that schedule。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我当然选择了傻傻的姿势。我的妻子不会喜欢那样。然后我准备进入“鲸鱼的肚子”，进行我的教程，题目是“再见你好，世界。”，你好，功能快速API网络应用。如果你没有去，可以看看视频。首先要确保这是真的。我在那个日程的正中间。
- en: so I began to get ready。 This is me looking through my -- preparing for battle。
    looking through my slides。 And then I went ahead and delivered this tutorial，
    1。30 pm on Wednesday。 It was awesome。 My preparation paid off again， invite you
    to check it out when all this is said and done。 Along my journey， I've met some
    allies， some enemies -- no， not enemies。 This is PyCon。 Just allies。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我开始准备。这是我在查看我的幻灯片，为战斗做准备。然后我在周三下午1:30进行了这个教程。真棒。我的准备又一次得到了回报，邀请你在这一切结束后去看看。在我的旅程中，我遇到了一些盟友，也遇到了一些敌人——不，不是敌人。这是PyCon。只有盟友。
- en: Some wonderful people I've met。 Here we see Lauren， Chris， Deborah at the PSF
    booth。 I helped set up， volunteered for that。 I met Marietta。 That was really
    awesome。 I met a couple cool guys， and here's me awkwardly posing with them， Anthony
    and Jay。 I don't know who this guy is， but he just wanted to take a picture。 I'm
    just kidding， Peter。 Sorry。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我遇到了一些很棒的人。这里是Lauren，Chris和Deborah在PSF摊位。我帮忙布置，志愿参与。我遇到了Marietta。那真的很棒。我还遇到了一些很酷的人，这里我和他们尴尬地摆姿势，Anthony和Jay。我不知道这个家伙是谁，但他只是想拍照。开个玩笑，Peter。抱歉。
- en: Then I had a big ordeal。 I started volunteering。 I did session running and chairing。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我遇到了一个大考验。我开始志愿服务。我做了会议的组织和主持。
- en: '![](img/7166498fe6a53e554ff5f6b4e42bc599_8.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7166498fe6a53e554ff5f6b4e42bc599_8.png)'
- en: That was really cool。 I didn't realize session running meant a lot of running。
    That's my steps yesterday。 11。98 kilometers。 Then the Supreme ordeal came while
    I was playing a wonderful game of exploding kittens。 What could that Supreme ordeal
    be？ That was that my lightning talk got accepted。 I was like， oh boy。 not what
    I do。 I had to prepare furiously putting slides together， but here I am。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 那真是太酷了。我没意识到会议的进行意味着很多奔跑。这是我昨天的步数：11.98公里。然后在我玩一个很棒的《爆炸小猫》游戏时，出现了一个巨大的考验。那个巨大的考验是什么呢？就是我的闪电演讲被接受了。我当时想，哦，天哪。这可不是我擅长的。我不得不拼命准备幻灯片，但现在我在这里。
- en: Enjoying every bit of PyCon as much as I can。 This journey， it's been great。
    It's been awesome。 I loved it。 It's not all for nothing。 There's a wonderful bounty
    to be had。 It's just a slight bit of stuff that I've gotten。 It's pretty great。
    I'm sure some of you have even greater bounty。 I was really happy because you
    can barely see on there。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我尽可能享受PyCon的每一刻。这段旅程太棒了。我非常喜欢。这一切都不是白费的。这里面有丰厚的收获。虽然我只获得了一小部分，但还是很不错。我相信你们中的一些人收获更大。我真的很开心，因为你们几乎看不到。
- en: I got the last metal straws that they were hanging out at one of those booths。
    Really cool thing。 That's been my journey so far。 I know that pretty soon it's
    going to be time for the road back。 time to head home。 I'm not sure how I'm going
    to do that。 I'll just follow the signs。 I hope to see all of you again in one
    year at the next PyCon。 Thank you。 I think， Mara。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我在一个摊位上得到了最后一根金属吸管。真酷的东西。这就是我迄今为止的旅程。我知道不久就该是回家的时候了。我不确定我该如何做到这一点。我只会跟随标志。我希望在明年下一个PyCon上再次见到你们。谢谢你。我想，玛拉。
- en: you have had a very eventful first by God。 Next up。 we have Georgie who's going
    to talk to us about how open source is the walk in the park。 I want to give a
    shout out to Georgie because Georgie did all of the beautiful graphics that you
    see for PyCon。 in the new PSF annual report， which just came out。 She did all
    those as well。 They are terrific。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你经历了一个非常多彩的第一场演讲。接下来，我们有乔治要和我们谈谈开源如何像在公园散步。我想对乔治表示感谢，因为乔治做了所有你在PyCon上看到的美丽图形。在刚刚发布的新PSF年度报告中，她也做了所有这些。它们都很棒。
- en: Let's give her a round of applause。 [applause]， I like how the captions spell
    my name。 Hi， everyone。 I have no slides， so it can just concentrate on me。 How
    many of you like to take a walk in the park？
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们给她热烈的掌声。 [applause]，我喜欢字幕中拼写我的名字。大家好。我没有幻灯片，所以可以专注于我。你们中有多少人喜欢在公园散步？
- en: How many of you like to walk in a paid park？ No， expensive， right？ Well， a free
    park？ Yeah， why not？
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你们中有多少人喜欢在收费公园散步？不，太贵了，对吧？那么，免费的公园呢？是的，为什么不呢？
- en: So open source is like a community park。 It's free。 Anyone can just walk in
    there， enjoy the nature。 enjoy the birds。 You use all the facilities there and
    do whatever you want。 Not everything。 I don't know。 There's a limit。 There's a
    limit。 So there's always something magical happening when you spend your time
    outside and you get to share your time with people and to interact with people。
    But it requires maintenance。 You need to clear the fallen leaves。 You need to
    clear the garages。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 开源就像一个社区公园。它是免费的。任何人都可以走进去，享受大自然，享受鸟鸣。你可以使用那里的所有设施，随心所欲。并不是所有的。我不知道。有一个限制。总是会有一些神奇的事情发生，当你花时间在外面，与人们分享时间并互动。但这需要维护。你需要清理落叶。你需要清理垃圾。
- en: And sometimes you have people who started doing some graffiti here and there。
    And you need to trim the plants and the trees。 So why do I say that open source
    is like a park？
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你会看到有人在这里和那里开始涂鸦。你需要修剪植物和树木。那么，我为什么说开源就像一个公园呢？
- en: Because it's free。 You are free to go。 You can do anything you want。 But you
    still need maintenance。 Contributors are like people like you and me。 We can always
    walk in the park。 But if we are the person who actually create and throw the rubbish，
    someone else needs to clear it。 And if you want to be a contributor to be a nice，
    really great contributor to make the park nicer。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这是免费的。你可以自由去。你可以做任何你想做的事。但你仍然需要维护。贡献者就像你我这样的普通人。我们总可以在公园散步。但如果我们是那些实际制造并扔垃圾的人，其他人就需要清理。如果你想成为一个贡献者，成为一个出色的贡献者，让公园变得更好。
- en: you help to pick the pages。 You can help to remove the graffiti。 You can help
    to create more space。 Sometimes you have really cool companies coming in and say，
    "Hey， I would like to make a donation。 I would like to help。"， And how about I
    create a bridge and make this place nicer。 A playground for the kids。 Or some
    benches。 And yeah， of course， when you have all this coming in。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你们可以帮忙挑选页面。你们可以帮忙清除涂鸦。你们可以帮助创造更多空间。有时真的会有很酷的公司前来，说：“嘿，我想捐赠。我想帮忙。”那我想搭一座桥，让这个地方更好。为孩子们建一个游乐场。或者一些长椅。是的，当然，当你有这些进来的时候。
- en: the community park will look more beautiful。 It will look more sustainable。
    The next time when you come back， you can use it again。 It will look more beautiful
    as compared to a community park that has not been maintained。 So if I'm not going
    to spend the entire five minutes， so if another lightning talk wasn't come up。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 社区公园将变得更加美丽。它会显得更可持续。下次你再来时，可以再次使用它。与没有得到维护的社区公园相比，它看起来会更美丽。所以如果我不打算花整个五分钟，如果没有其他快速演讲出来。
- en: feel free。 Anyway， so if you want to contribute， you want to have a beautiful
    park。 start improving this open source community。 And do something。 whether you're
    a company or whether you're a contributor。 That's it。 Thank you。 [applause]， Thanks。
    Georgie。 Hey， Lorena。 You sticking around？ Unfortunately， I have to leave。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 感到自在。因此，如果你想贡献，想要一个美丽的公园，开始改善这个开源社区。做点什么，无论你是公司还是贡献者。这就是。谢谢。[applause]，谢谢。乔治。嘿，洛雷娜。你还在吗？不幸的是，我得离开。
- en: I'm an auctioneer for the Pilates' auction tonight。 So I'm actually going to
    be heading out。 Quick plug。 The Pilates' auction is today。 So maybe I'll see some
    of you there。 I'll be there。 But only after the lightning talk's finished。 Exactly。
    All right。 So next up， we have Bents。 Who's going to give us a talk on lint your
    playlist and fashion？
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我是今晚普拉提拍卖会的拍卖师。所以我其实要离开了。顺便提一下，普拉提拍卖会今天举行。也许我会在那看到你们中的一些。我会在那儿。但只在闪电演讲结束之后。没错。那么接下来，我们有Bents。他将为我们讲解如何为你的播放列表和时尚进行检查。
- en: '![](img/7166498fe6a53e554ff5f6b4e42bc599_10.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7166498fe6a53e554ff5f6b4e42bc599_10.png)'
- en: Let's give it up for Bents。 [applause]， All right。 Hi， everyone。 I'm actually
    here for the gymnastics thing， so I'm not sure。 Now I'm just kidding。 So I need
    to just give you like one minute of real quick context。 and then we can get to
    the fun part。 I work on this project called SamGrap。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为Bents鼓掌。[掌声] 好的，大家好。我实际上是来参加体操活动的，所以我不太确定。开玩笑的。所以我需要给你们大约一分钟的背景介绍，然后我们可以进入有趣的部分。我在一个叫SamGrap的项目上工作。
- en: and you need to know just like three things。 First of all， it's like this tool。
    You get to write like a code search pattern， sort of like reg X。 It looks through
    your code and finds occurrences of whatever you were searching for。 So here we
    type logging。info。dot。dot and it's just going to find all occurrences of this
    call。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你只需要知道三件事。首先，它就像这个工具。你可以写一个代码搜索模式，有点像正则表达式。它会在你的代码中查找你搜索的内容的所有出现情况。因此在这里，我们输入logging.info...它将找到这个调用的所有出现。
- en: even if the developers are trying to be sneaky， and they all get highlighted。
    Second。 you can write not only one pattern， you can write multiple。 and you can
    combine them with logic operators。 So for instance here。 we are looking at logging
    calls。 You can read the left side of the screen， line by line。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 即使开发者想要偷偷摸摸，他们也会被高亮显示。其次，你不仅可以写一个模式，还可以写多个，并用逻辑运算符组合它们。因此，例如在这里，我们在查看日志调用。你可以逐行阅读屏幕左侧的内容。
- en: So whenever inside the logging call there is a get-amp and the nvar has secret
    in the name。 Well。 you shouldn't be printing that probably because it's secret，
    and so SamGrap will flag it for you。 Third thing， it's not only Python， it works
    on many languages， and what we need to have fun is JSON。 And this is the first
    time anyone ever said that。 Okay， so now the actual talk。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 所以每当日志调用中有一个get-amp，并且nvar的名称中包含“secret”时。那么，你可能不应该打印它，因为它是秘密的，因此SamGrap会为你标记它。第三，它不仅适用于Python，它适用于多种语言，而我们需要的乐趣是JSON。这是第一次有人这么说。好的，那么现在是实际的演讲。
- en: I know that my code is messed up， but I've recently been wondering。 maybe the
    world is more messed up。 So we're just going to make this assumption for the rest
    of this talk。 And so then， how is it that we have linters for my code， but not
    the world？ It just feels unfair。 right？ So I created Super SamGrap。 This is basically
    a wrapper on SamGrap that just like abuses it。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道我的代码有问题，但我最近在想，也许这个世界更混乱。所以我们在接下来的讨论中就假设如此。那么，我们的代码有检查工具，但世界却没有？这感觉真不公平，对吧？所以我创建了Super
    SamGrap。它基本上是SamGrap的一个包装，基本上是滥用它。
- en: but also links the world。 So that's good。 And now what I mean is whenever there's
    something in the world。 you can like sort of translate it， represent it in JSON。
    Here's what I mean。 There's this thing out there in the world。 It's one of our
    GitHub projects。 Something is wrong with it。 I challenge you to find what it is。
    But now as humans。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 但它也能连接到世界。所以这很好。我的意思是，每当世界上发生某事时，你可以将其翻译成JSON，表示出来。我的意思是，世界上有一个东西。它是我们的一项GitHub项目。它出了点问题。我挑战你们找出是什么。但现在，作为人类。
- en: we cannot really do that。 So I'm going to translate it to JSON because computers
    can look through it pretty easily。 They will see something is funky。 And specifically。
    the rule I wrote for this specific case is if we get a JSON object from the GitHub
    API that says we have a repository where the star count of the repository is over
    100。 so it's kind of a popular project， then it's kind of a problem if it doesn't
    have a code of conduct。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实际上无法做到这一点。所以我将把它翻译成JSON，因为计算机可以很轻松地查找它。它们会发现一些异常。具体来说，我为这个特定情况写的规则是，如果我们从GitHub
    API获取一个JSON对象，显示我们有一个星标超过100的仓库，说明它是一个比较受欢迎的项目，那么如果它没有行为准则，那就成了问题。
- en: So if we run SamGrap， it's going to output exactly this。 Hey。 you have this
    project in your organization。 Quite popular。 No code of conduct。 Fix it。 Okay。
    So now this sort of eased you into the concept。 Here come the actual fun stuff。
    Spotify playlist。 What is wrong with this playlist？ I'll give you a couple seconds。
    You're not going to know。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行SamGrap，它会输出正是这样。嘿，你在你的组织里有这个项目。相当受欢迎。没有行为准则。修复它。好的，现在这让你逐渐理解了概念。接下来是一些有趣的内容。Spotify播放列表。这份播放列表有什么问题？我给你几秒钟。你可能不会知道。
- en: by the way， spoiler alert。 Some people say that it has Taylor Swift in it and
    to those people I say broaden your horizons。 The actual issue is， you know what？
    I shouldn't spoil it。 I can do a live demo。 So this is a rule I wrote for Spotify。
    And it's going to prompt me to input a playlist study。 The issue with the playlist
    was that the tempo changes too much between two songs。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一下，剧透警告。有些人说里面有泰勒·斯威夫特，我对那些人说要开阔视野。实际问题是，你知道吗？我不应该剧透。我可以做一个现场演示。这是我为Spotify写的一个规则。它会提示我输入一个播放列表。播放列表的问题是两首歌之间的节奏变化太大。
- en: So shake it off going right into smells like thin spirit is too much of a change。
    The lyrics is this linter rule。 So we look at consecutive tracks。 We extract the
    tempo and we just like， you know， do some math。 Okay。 And the last one。 One of
    the samgyup maintainers visited me in Greece earlier。 Something like a year ago。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 所以直接跳到“闻起来像薄灵魂”太过突兀。歌词就是这个linter规则。我们查看连续的曲目，提取节奏，然后做一些数学运算。好的，最后一个。一位samgyup的维护者大约一年前在希腊拜访了我。
- en: This is a picture of us in front of the Greek Parliament。 And there is something
    wrong with this picture。 Yet another challenge。 What is wrong with this picture？
    Okay。 I'm just going to run samgyup on it。 You know what？
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在希腊议会前的照片。但这张照片有些问题。又一个挑战。这张照片有什么问题？好吧，我就运行samgyup看看。你知道吗？
- en: Maybe I'm going to help you out a little。 This is the JSON representation after
    running it through Google Cloud Vision API and some。 post-processing。 Okay。 Let's
    see what samgyup has to say。 We found a Greek fashion police violation。 You're
    not supposed to go out in pants in the Mediterranean。 The way this works is Google
    recognized the Greek Parliament。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 也许我可以稍微帮你一下。这是通过Google Cloud Vision API和一些后处理后的JSON表示。好的，让我们看看samgyup有什么要说的。我们发现了一起希腊时尚警察违规事件。在地中海你不应该穿裤子外出。这是Google识别希腊议会的方式。
- en: Told us what the latitude of the Greek Parliament is。 And then we can just look
    whether there's like a person somewhere in the picture。 And there's pants inside
    the person。 I guess that's how computers think。 But yeah。 that's basically it。
    That was awesome。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 告诉我们希腊议会的纬度。然后我们可以看看照片里是否有一个人，而这个人穿着裤子。我想这就是电脑的思维方式。但基本上就是这样。太棒了。
- en: '![](img/7166498fe6a53e554ff5f6b4e42bc599_12.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7166498fe6a53e554ff5f6b4e42bc599_12.png)'
- en: That was so cool。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 那真是太酷了。
- en: '![](img/7166498fe6a53e554ff5f6b4e42bc599_14.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7166498fe6a53e554ff5f6b4e42bc599_14.png)'
- en: Thanks for that。 Next we have Mark who's going to tell us about how you can
    help speed up Python with benchmarks。 Give it up for Mark。 Okay。 I'll see how
    we can get this over before Larry has set up。 Just to upset him。 I'm Mark Shannon。
    I work with a faster C Python team。 And I'm here to ask you a favor。 So I'm often
    asked how much faster C Python is going to be？ It's 3。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢你的分享。接下来是马克，他将告诉我们如何通过基准测试来加速Python。为马克鼓掌。好的，我看看能否在拉里设置之前把这个讲完，以此来激怒他。我是马克·香农，我和更快的C
    Python团队一起工作。今天我想请你们帮个忙。人们常问C Python到底快多少？答案是3。
- en: 11， going to be 3。10。 And I'm an honest person。 So I always say it depends。
    I realize that's a somewhat unsatisfying answer， but it's the true one。 And the
    reason we don't really know is because we don't know what your workload is。 We
    don't know what you're using Python for。 We have a bunch of benchmarks。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 11，变成3。10。我是个诚实的人，所以我总是说这要看情况。我意识到这有点令人不满意，但这确实是事实。我们不知道你工作的具体内容，也不知道你用Python做什么。我们有一系列基准测试。
- en: They're kind of the standard Python benchmarks， but they're sort of a bit of
    an historical， oddity。 And there's also quite a wide range of results。 It doesn't
    really allow us to tell you very much about how much faster your program is。 going
    to be。 So we have Delta Blue， which is twice as fast。 And Telco， which is no faster。
    Does your application resemble something that does lots of numerical processing？
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 它们算是标准的Python基准测试，但有点历史意义上的奇特之处。而且结果的范围也相当广泛。这实际上并不能告诉我们你的程序会快多少。所以我们有Delta
    Blue，它快了两倍。而Telco则没有加速。你的应用程序是否类似于进行大量数值处理的东西？
- en: Or does it do some constraint solving？ So basically， what we need is you to
    help。 I know about how to make a Python virtual machine faster， but I don't know
    a great deal。 about web apps or machine learning or whatever other thing you do
    with Python。 There's a million and one things that people use Python for。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 它是进行约束求解吗？所以基本上，我们需要你来帮助。我知道如何让Python虚拟机更快，但我对网络应用、机器学习或你用Python做的其他事情不太了解。人们使用Python的地方有千千万万。
- en: We would like to make your program faster in 3。12， but we can't do that unless
    we know。 what your program does or have some representative sort of version of
    it。 And that's where you can help。 I think this is the last slide。 Yeah， this
    is a very short talk。 So there's a benchmark website called PyPerformance that
    you can read on redox here。 As on GitHub。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望在3.12中让你的程序更快，但如果不知道你的程序做什么，或者没有一些代表性的版本，我们就无法做到。这就是你可以帮助的地方。我认为这是最后一张幻灯片。是的，这是一个非常简短的演讲。所以有一个名为PyPerformance的基准测试网站，你可以在redox上查看。也在GitHub上。
- en: that's a framework for doing benchmarking。 It also holds a standard benchmark
    suite。 But you can run your benchmarks on it。 So even if you don't have a ready-made
    benchmark。 you can at least try and encapsulate your， software。 Even if it's proprietary
    or there's confidential information in it， you can maybe run it locally。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个用于基准测试的框架。它还包含一个标准的基准测试套件。但是你可以在上面运行你的基准测试。因此，即使你没有现成的基准测试，至少也可以尝试封装你的软件。即使它是专有的，或者里面有保密信息，你也可以在本地运行它。
- en: and at least let us know what sort of result you have。 Yeah， there's a website
    here。 It's PyPerformance， Readadox and the GitHub thing。 And if you need help
    doing that or you have suggestions or sort of benchmarks， you think。 we should
    add。 I mean， even if you can't add a benchmark。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 至少告诉我们你获得了什么样的结果。是的，这里有一个网站。它是PyPerformance、Readadox和GitHub的链接。如果你需要帮助或有建议，或者认为我们应该添加的基准测试，哪怕你不能添加基准测试也没关系。
- en: but you think there's a domain in which we're， obviously missing stuff， then
    let us know。 And then you can， if you've got to GitHub faster， see Python/ideas。
    There's a whole bunch of ideas on how to make it faster。 But there's also any
    ideas that are welcome on benchmarking or anything like that。 So yeah。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你认为有一个领域我们显然遗漏了的内容，请告诉我们。如果你在GitHub上看到了Python/ideas，有一大堆让它更快的想法。不过，任何关于基准测试或类似主题的想法也都是受欢迎的。所以是的。
- en: we need your help。 We can't come up with benchmarks for domains that we just
    don't understand or aren't experts。 in， but you can。 So that's it。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要你的帮助。我们无法为我们不理解或不擅长的领域提供基准测试，但你可以。所以就这些。
- en: '![](img/7166498fe6a53e554ff5f6b4e42bc599_16.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7166498fe6a53e554ff5f6b4e42bc599_16.png)'
- en: '[applause]， Thanks， Mark。 What y''all didn''t just see was happening while
    Mark was speaking was Larry。 He really researched his laptop to get the monitor
    to work。 And it worked just right before Mark finished his talks。 It was perfect。
    Absolutely perfect。 So next Larry is going to talk to us about correlating your
    data with Correlate。'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[掌声]，谢谢，马克。你们刚刚没有看到的是，在马克发言时，拉里正在努力让他的笔记本电脑显示器工作。就在马克结束发言之前，它终于成功了。简直完美。绝对完美。接下来，拉里将与我们谈论如何用Correlate来关联数据。'
- en: '![](img/7166498fe6a53e554ff5f6b4e42bc599_18.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7166498fe6a53e554ff5f6b4e42bc599_18.png)'
- en: Let's give him a round of applause。 [applause]， Thanks。 I watched the IT crowd
    too。 So I have a problem。 I like old-time radio， like the radio dramas from the
    '40s。 like detective shows and West， Easterns， but I hate bad file names。 If you
    go onto the internet and download a big zip file containing， like let's say， Boston，
    Blackie。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们给他一点掌声。 [掌声]，谢谢。我也看过《IT狂人》。所以我有个问题。我喜欢旧时的广播，比如40年代的广播剧，比如侦探剧和西部片，但我讨厌糟糕的文件名。如果你上网下载一个大压缩文件，里面有波士顿、黑子这样的内容。
- en: these file names are crap。 However， you can get very nice clean metadata about
    the old show if you go onto Wikipedia。 or in this case， an episode log thing。
    So I'd like to rename all of those MP3s and give them nice。 proper readable names。
    But I have a lot of work to do。 There are 199 episodes of Boston Blackie。 There's
    446 of gun smoke。 There's 809 of yours truly， Johnny Dollar。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件名真糟糕。然而，如果你去维基百科，或者在这种情况下，去查看剧集日志，你可以获得关于这个老节目的非常干净的元数据。所以我想重命名所有这些MP3，并给它们好看、合适的可读名称。但我还有很多工作要做。波士顿黑影有199集。枪烟有446集。你忠实的约翰·道尔有809集。
- en: And what if they came out with a new zip file and they update things？
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果他们推出了一个新的压缩文件并更新了内容，那该怎么办？
- en: Now I have to do all that by hand。 So I have more problems。 I'm really lazy。
    I don't want to do this by hand。 Also it turns out I'm bad at CS because apparently
    nobody has solved this problem in a general。 way before。 I know。 I looked on Google。
    I guess I'm bad at that too。 I will point out this is not the Gail Shapley stable
    marriage problem。
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我必须手动完成所有这些工作。所以我有更多的问题。我真的很懒。不想手动做这些。此外，结果证明我在计算机科学方面很差，因为显然之前没有人以一般的方式解决过这个问题。我知道，我在谷歌上查过。我想我在这方面也很差。我想指出，这不是盖尔·沙普利的稳定婚姻问题。
- en: It's a slightly different problem。 But the basic idea is I have two sets of
    data。 Conceptually they represent the same things。 And I want to match them up
    together。 How do I do that？
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个稍微不同的问题。但基本思路是我有两组数据。从概念上讲，它们代表相同的事物。我想把它们匹配在一起。我该怎么做？
- en: So I wrote it。 It's called correlate。 And I'm going to walk you through。 I knocked
    together this sample code this afternoon to write this lightning talk。 I basically
    took the list of the MP3s and I took the list of all the episodes that I。 scraped
    off of the web page somewhere。 So I import correlate。 I create my correlator object。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我写了它。它叫做 correlate。我将带你了解。我今天下午快速编写了这个示例代码，用于写这次闪电演讲。我基本上取了MP3的列表，以及我从某个网页抓取到的所有剧集的列表。因此我导入
    correlate。我创建了我的相关对象。
- en: I split out the two data sets。 We're going to put on all of your data。 Here's
    the MP3s。 Here's the episodes。 This parses the MP3 file names and pulls out the
    date and the title。 This parses the list of episodes and pulls out the title and
    the date and the star。 The important lines are these。 We're setting -- we're saying
    here's a key。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我将两个数据集分开。我们将放入你所有的数据。这是MP3文件。这是剧集。这会解析MP3文件名，并提取出日期和标题。这会解析剧集列表，并提取出标题、日期和明星。重要的行是这些。我们在设置——我们在说这是一个键。
- en: something interesting about this metadata， about this value。 And that matches
    to this one。 So this MP3 file， here's the date or here is -- the best way to do
    it is take the word。 of the title and lower case them and send them in separately。
    So I do that for both the MP3s and the episode。 It's a good chai idea to make
    sure that the data that's going in is actually what you。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这个元数据、这个值，有些有趣的事情。而这与这个匹配。所以这个MP3文件，这里是日期，或者说——最好的做法是取标题中的单词，将其转换为小写，并单独发送。因此我对MP3和剧集都这样做。确保输入的数据实际上是你所期望的，这是个不错的想法。
- en: intended so there's a print thing。 You can say print out my data sets and this
    looks correct。 I'm getting proper dates。 I'm getting proper keys both for data
    set A and data set B。 And so I run it。 You just run correlate。 This is the feature
    I'll tell you about in a second and you just print out the results。 And a fifth
    of a second later it has correlated the 200 elements from this and the 200 elements。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 意图是，所以有一个打印的东西。你可以说打印出我的数据集，这看起来是正确的。我得到了合适的日期。我得到了数据集A和数据集B的合适键。所以我运行它。你只需运行
    correlate。这是我稍后会告诉你的功能，然后你只需打印出结果。一秒钟后，它已将来自这200个元素和另外200个元素进行了关联。
- en: in that and match them together and the results look great。 It's doing a perfect
    job。 What's really interesting is you've scanned through the results a little
    bit。 This one。 there are no words in common between the two titles but the dates
    were the same。 So it said， oh。 those are a match。 This one didn't have a date
    at all。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个过程中将它们匹配在一起，结果看起来很不错。它做得很好。真正有趣的是你稍微浏览了一下结果。这个标题之间没有共同的单词，但日期是相同的。所以它说，哦，那是一个匹配。这个根本没有日期。
- en: Like both sides of the date was invalid but there were a couple of words that
    matched。 out of the title。 Don Davis and those were unique enough that correlate
    said， oh。 that's a good match。 So correlate features， you can wait the individual
    mappings of keys to values。 You can have redundant keys and you might think that
    was not helpful but it's actually。
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 就像日期的两个方面都是无效的，但有几个词与标题中的单词匹配。Don Davis，那些词独特到相关性说，哦。这是一个好的匹配。因此，相关性功能允许你权衡键到值的单个映射。你可以有冗余键，你可能认为这没有帮助，但实际上是。
- en: very helpful if the word the matches three times to these two values， those
    are probably。 a good match。 I support ranking or you probably think of ordering，
    I call it ranking。 So like if two values at the top of the data sets seem like
    a good match， that might be。 a better than one at the top and one at the bottom。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个词与这两个值匹配三次，那肯定是一个很好的匹配。我支持排名，或者你可能会想到排序，我称之为排名。因此，如果数据集顶部的两个值似乎是一个好的匹配，那可能是。比一个在顶部一个在底部的匹配要好。
- en: And I support fuzzy keys which slows everything down but sometimes you just
    need fuzzy keys。 So you can install it right now on PIP。 You can also look at
    the source on GitHub， it's open source。 I'm done。 Thank you。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我支持模糊键，这会减慢一切，但有时你确实需要模糊键。所以你现在可以在 PIP 上安装它。你也可以在 GitHub 上查看源代码，它是开源的。我说完了。谢谢。
- en: '![](img/7166498fe6a53e554ff5f6b4e42bc599_20.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7166498fe6a53e554ff5f6b4e42bc599_20.png)'
- en: '[applause]， \>\> Thank you， Larry。 I think I understand correlate now， it is
    magic。 Cool。 Thanks for the talk and next we have Rich。'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[掌声]， \>\> 谢谢你，Larry。我想我现在理解相关性了，这真是太神奇了。很酷。感谢这次演讲，接下来是Rich。'
- en: '![](img/7166498fe6a53e554ff5f6b4e42bc599_22.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7166498fe6a53e554ff5f6b4e42bc599_22.png)'
- en: Give us a talk on the importance of effective， concise communication。 Give it
    up for Rich。 [applause]， \>\> Hello everyone。 I'm Rich Taggart and I'm a software
    developer。 If I had to describe myself in one word， I would probably say that
    I'm a skier。 I spend as much time as I can in the snow and in the mountains。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 给我们讲述有效、简明沟通重要性的演讲。为Rich鼓掌。[掌声]， \>\> 大家好。我是Rich Taggart，我是一名软件开发者。如果让我用一个词来描述自己，我可能会说我是一名滑雪者。我尽可能多地在雪地和山中度过时间。
- en: A word that I would not use to describe myself is brevity。 If you were to ask
    any of my friends。 they would probably tell you that I'm long-winded。 and I have
    a tendency to ramble about whatever it is that comes to my mind without any filter。
    especially in situations where I might be nervous for some reason。 So as it turns
    out。
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会用简洁这个词来描述自己。如果你问我的任何朋友，他们可能会告诉你我很唠叨，我倾向于毫无过滤地闲聊我脑海中浮现的任何事物，尤其是在我因为某种原因感到紧张的情况下。所以结果是。
- en: that ended up spilling over into my writing and my technical writing。 So I thought
    I would share with you some things that I've learned as I've tried to improve，
    that。 Identify and convey the most important idea when you communicate with another
    person。 This will allow you to achieve the greatest effect for your intent and
    effort。 In today's world。
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这最终也影响了我的写作和技术写作。因此，我想和你分享一些我在努力提高时学到的东西。与他人交流时，识别并传达最重要的想法。这将使你能够实现你意图和努力的最大效果。在今天的世界里。
- en: we wish to spend our energy on more activities than we have time for。 Various
    distractions pull our attention in many facets of our life。 Allow your recipient
    to interpret your message with as little energy as possible。 I've included here
    some tips to consider when composing a message。 First， write down the topics。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望将精力投入到比我们有时间做的更多的活动中。各种干扰在我们生活的许多方面拉走了我们的注意力。让你的收件人以尽可能少的精力来理解你的信息。我在这里包含了一些在撰写信息时需要考虑的提示。首先，写下你想要传达的主题。
- en: ideas and thoughts you wish to send。 Then identify the common theme between
    these thoughts。 Last。 convey that main idea with one or two brief supporting examples。
    And this does not need to be a long extensive process。 Most of the time it takes
    a few seconds to jot down ideas or maybe a couple minutes depending。
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你希望发送的想法和思路。然后确定这些想法之间的共同主题。最后，用一到两个简短的支持性例子传达这个主要思想。这并不需要是一个漫长的过程。大多数时候，写下想法只需要几秒钟，或者可能需要几分钟，具体取决于情况。
- en: on the message。 If you're not sure where to get started。 I've found the Hemingway
    Editor to be a great tool， to help learn how to do this。 That's my talk。 Thanks
    everyone。 Thanks Rich。
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 关于信息。如果你不确定从哪里开始。我发现海明威编辑器是一个很好的工具，帮助学习如何做到这一点。这就是我的演讲。谢谢大家。谢谢，Rich。
- en: '![](img/7166498fe6a53e554ff5f6b4e42bc599_24.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7166498fe6a53e554ff5f6b4e42bc599_24.png)'
- en: And next we have Sebastian， who's going to talk to us about testing migrations。
    Give it up for Sebastian。
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们有塞巴斯蒂安，他将与我们谈论测试迁移。为塞巴斯蒂安热烈鼓掌吧。
- en: '![](img/7166498fe6a53e554ff5f6b4e42bc599_26.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7166498fe6a53e554ff5f6b4e42bc599_26.png)'
- en: Yeah， hello everyone。 I'm going to talk about something that really bugs me。
    That I get to see a lot of in the real world。 It's causing real problems。 So it's
    not going to be funny。 It's going to be a little bit more serious。 So we're here
    at PyCon。 So I assume you are way better programmers than I am。 So you're all
    right bug free code， right？
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，大家好。我想谈谈一些让我很困扰的事情。我在现实世界中看到很多，这造成了真正的问题。所以这不会有趣，反而会更严肃一些。我们在PyCon大会上，我假设你们都是比我更优秀的程序员。所以你们都写无错误的代码，对吧？
- en: Or maybe not。 So I see a lot of smaller applications out there， mostly web applications
    that don't。 test code that is directly touching production databases。 And I'm
    here to convince you that you should do that otherwise。 So say that you have a
    small application and a small application treats its database as。
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 或许不是。所以我看到很多小型应用程序，主要是网络应用程序，它们没有测试直接影响生产数据库的代码。我在这里说服你们这样做，否则情况会很糟糕。假设你有一个小型应用程序，这个小型应用程序将其数据库视为。
- en: a managed dependency。 What that means is that your database is the only application
    that will ever talk to。 the database。 It has a complete control of your database。
    If other applications will try to communicate through your database， they have
    to do an。 API or not at all。 And every interaction your application has with the
    database is hidden from the outside。
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 是一个受管理的依赖项。这意味着你的数据库是唯一会与之交互的应用程序。它对你的数据库拥有完全控制权。如果其他应用程序试图通过你的数据库进行通信，它们必须使用API，或者根本不进行通信。你的应用程序与数据库的每次交互都是对外隐藏的。
- en: world。 So you could say that your database lies within the boundaries of your
    own application。 Often in such a situation your application defines the table
    structures or the schemas。 it needs in the database。 And a migration tool like
    Alembic or Django's migration system takes care of actually bringing。 about the
    structure of your database。 But sometimes our migrations go a little bit further。
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 世界。因此，你可以说你的数据库位于你自己应用程序的边界内。在这种情况下，你的应用程序通常定义了所需的表结构或模式。而像Alembic或Django的迁移系统这样的迁移工具则负责实际构建数据库的结构。但有时我们的迁移会走得更远。
- en: You might want to change the contents of your database。 You might want to add
    names together to get a full name column。 You might want to change currencies。
    And when you do that in Django you write something called a data migration。 And
    in a data migration you write a little bit of Python code or a little bit of SQL
    code。
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想要更改数据库的内容。你可能想将名字合并，以获得一个完整的姓名列。你可能想更改货币。当你在Django中这样做时，你会编写称为数据迁移的东西。在数据迁移中，你会编写一点Python代码或一点SQL代码。
- en: that performs the logic。 You can do very much the same with Alembic。 Well this
    is actual code you write。 And this is actual code that you should test because
    it could have dramatic effects in。 your production data。 And I really mean that。
    You don't want to lose customer data。 You don't want to lose your scientific data
    that you suppressiously and so expensively， gained。
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这个工具执行逻辑。你可以用Alembic做到类似的事情。这是你实际编写的代码。这也是你应该测试的实际代码，因为它可能会对你的生产数据产生重大影响。我真的很认真。你不想失去客户数据。你也不想失去你辛苦和昂贵获得的科学数据。
- en: So you should really test your data。 And one thing that I hear a lot is that
    people say。 well I have rollback capabilities。 If something goes wrong I'll just
    rollback my database。 rollback to migration。 And I'm fine again。 But that's not
    really the case。 Because what the problem is， is that basically things working
    fine and things exploding are。
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你真的应该测试你的数据。我听到的一个常见说法是，人们说，嗯，我有回滚功能。如果出了问题，我只需回滚数据库，回滚到迁移。我就没事了。但事实并非如此。问题在于，基本上，事情正常工作和事情爆炸之间的区别。
- en: just two separate parts of your buck scale。 And both situations are relatively
    benign。 You might be surprised when I say that things exploding is relatively
    okay。 But then at least you know that things are not working。 You can roll back。
    But as much more of an issue is that when you're in the middle of that landscape，
    when you're。
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 只是你们的计算架构中的两个独立部分。在这两种情况下，情况相对良性。当我说事情爆炸时，你可能会感到惊讶，但那至少意味着你知道事情没有正常工作。你可以回滚。但更大的问题是，当你处于这种局面中时，当你。
- en: in the middle of that scale， that's where things get really tricky。 You've executed
    something but you might and migration works but you might have actually。 messed
    up your data。 For example， for example， say that you accidentally truncate all
    the addresses of your customers。 or only the long addresses。 Your migration will
    work but you will no longer be able to ship anything to your customers。
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在那个规模的中间，事情变得非常棘手。你已经执行了一些操作，但迁移有效，但你可能实际上已经搞砸了你的数据。例如，假设你意外地截断了所有客户的地址，或者只有较长的地址。你的迁移将会成功，但你将无法再给客户发货。
- en: If these distortions are massive， you detect them right away。 You fix them，
    you go on。 But if they're small and they're often small， you might only notice
    them after months。 And then you've been working with flawed data all along and
    you cannot really， really。 fix it anymore。 So the solution is to treat the code
    you write for those migrations as real code and you。
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些扭曲是巨大的，你会立刻发现。你修复它们，继续前进。但如果它们很小，而且通常很小，你可能要几个月才会注意到。然后你一直在使用有缺陷的数据，而你真的无法再修复它。所以解决方案是把你为这些迁移编写的代码当作真实代码来处理。
- en: should test it。 Now how can you do that？ Well you can write integration tests
    because this is a managed dependency。 And that's in the classicist way of thinking
    that's promoted in this book。 For instance。 and you should just test your migrations
    with a test database that's very。 much like your own production database。 And
    you should do that。 Now how does that work？
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 应该进行测试。那么你如何做到这一点呢？你可以编写集成测试，因为这是一个受管理的依赖关系。这是这本书中所倡导的经典思维方式。例如，你应该用一个与自己的生产数据库非常相似的测试数据库来测试你的迁移。你应该这样做。那么这是如何实现的？
- en: Well it's actually very simple。 You have a before state。 before your migration
    and in your test you should make sure that。 you migrate your test database to
    that state。 You just dump test data into your database。 then you run your migration
    and then you assert， that the result is what you want it to be。
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这非常简单。你有一个迁移之前的状态，在你的测试中，你应该确保将你的测试数据库迁移到那个状态。你只需将测试数据导入你的数据库。然后运行你的迁移，之后你要断言结果是你想要的。
- en: For Django there's a very handy package。 It's called Django test migrations。
    I didn't write it but I use it a lot。 You should definitely use that。 There are
    some remarks。 use realistic data， faker data often isn't good enough。 It doesn't
    contain yet cases。 If there are at cases that you are ignoring， please， please
    do make sure that you insert， barriers。
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Django，有一个非常方便的包。它叫做Django测试迁移。我没有写过它，但我用得很多。你绝对应该使用它。有一些注意事项。使用真实的数据，假数据通常不够好。它目前还不包含案例。如果有你忽略的案例，请一定要确保你插入了障碍。
- en: raise exceptions when they do occur in your production data。 And finally those
    tests can be really。 really costly。 They can cost a lot of time。 So don't put
    them in your regular unit test suite。 And before we go， we all love Python but
    please support your local conferences。 I'm a volunteer for Europe， Python。 Please
    go there but also go to your local conferences。
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当它们在你的生产数据中发生时，要抛出异常。最后，这些测试可能真的很昂贵。它们会耗费很多时间。所以不要把它们放在你的常规单元测试套件中。在我们结束之前，我们都喜欢Python，但请支持你当地的会议。我是欧洲Python的志愿者。请去那里，也请去参加你当地的会议。
- en: Thanks a lot。 This was it。
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 非常感谢。这就是全部。
- en: '![](img/7166498fe6a53e554ff5f6b4e42bc599_28.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7166498fe6a53e554ff5f6b4e42bc599_28.png)'
- en: '[applause]， Thank you Sebastian。 And next we have William who''s going to tell
    you all how to secure your PIPE account。'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '[掌声]，谢谢你，Sebastian。接下来是William，他将告诉你如何保护你的PIPE账户。'
- en: '![](img/7166498fe6a53e554ff5f6b4e42bc599_30.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7166498fe6a53e554ff5f6b4e42bc599_30.png)'
- en: Awesome。 Give it up for William。 [applause]， Hi everybody。 Yeah。 so this talk
    really only has two slides。 So basically this talks about how to secure a PIPE
    account。 My name is William。 This is the one slide。 First as a show of hands。
    how many of you have a package on PIPE account？ Okay， so like about half the room。
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了。为William鼓掌。[掌声]，大家好。是的。这次演讲实际上只有两张幻灯片。基本上，这个演讲讲的是如何保护一个PIPE账户。我的名字是William。这是第一张幻灯片。首先请举手，多少人有一个PIPE账户的包？好吧，大约一半的房间。
- en: So immediately this talk immediately applies to you。 For a good other portion
    of you。 you will probably end up publishing a package on PIPE。 at some point or
    you might be a manager of a team where people on your team are publishing。 packages。
    So hopefully you'll have something to take away from this too。
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这次的演讲对你们来说立刻生效。对于你们中的大部分人，你们可能最终会在某个时候在PIPE上发布一个包，或者你可能是一个团队的经理，你的团队中有人在发布包。所以希望你们也能从中有所收获。
- en: So basically one of the demo is three main techniques you can use currently
    on PIPE to。 lock down and secure your account。 We'll talk about enabling two factor，
    web often TOT or both。 Add in scoped API tokens for your projects and also recovery
    codes。 So without further ado。 So I have a local copy of Warehouse here which
    is a software that powers PIPE。
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，演示的一个主要技巧是你目前可以在PIPE上使用的三种主要技术，用于锁定和保护你的账户。我们将讨论启用双因素认证，通常是TOT或两者兼有。为你的项目添加范围API令牌和恢复代码。那么，不再废话。我这里有一个本地的Warehouse副本，这是一个支持PIPE的软件。
- en: You'll notice that I am not actually sorry， E-derbin but I am logged in as them
    and I will。 begin making some security changes。 So if I go to settings。 you will
    see that I have the ability to add two factor for my， account， two factor requirement。
    More to add two factor， I have to add recovery codes first。
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到我实际上并不是E-derbin，但我以他们的身份登录，并且我将开始进行一些安全更改。如果我进入设置，你会看到我可以为我的账户添加双因素认证，双因素要求。为了添加双因素，我必须先添加恢复代码。
- en: So I'm going to go ahead and generate some recovery codes and do this。 It's
    going to be for my password which because this is a local setup is password which
    I then。 mistyped。 Hello。 Third time to turn。 Okay。 So it's going to ask you to
    save your recovery codes。 I'm going to go ahead and not save them because it's
    a demo but I'm going to copy one of them。
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我将生成一些恢复代码来完成此操作。这将是我的密码，因为这是一个本地设置，密码我输入错了。你好。第三次尝试。好吧。它会要求你保存你的恢复代码。我将不保存它们，因为这是演示，但我将复制其中一个。
- en: just in case。 It's going to ask me to enter one to make sure that I actually
    did save them which I。 didn't do。 So I am going to verify。 It's now verified。
    Right？
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 以防万一。它会要求我输入一个，以确保我确实保存了这些代码，而我并没有做到。所以我将进行验证。现在已验证，对吧？
- en: And now it's going to let me do a real two factor。 So I have two options。 I'm
    going to do both of them for you。 I'm going to add two factor with authentication
    application also known as to TP and then I'll。 also do one with the security device。
    Okay。 Well， then token。 So for two factor with a authentication application， it's
    going to give me a little QR code and。
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在它将让我进行真正的双因素认证。我有两个选项。我将为你们两者都进行设置。我将使用认证应用程序（也称为TP）添加双因素，然后我也会用安全设备进行一次。好的，令牌。那么，使用认证应用程序的双因素认证，它会给我一个小的二维码。
- en: now you're going to have to trust me that I'm going to use one of my phone。
    You're not going to be able to verify this but I'm going to go ahead and scan
    it。 It's going to give me a little， you know， six digit code。 I'm going to go
    ahead and put that in so confirm that I haven't just deleted it again。
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你得相信我会用我的手机之一。你不能验证这一点，但我将继续扫描。它会给我一个六位数字代码。我将把它输入，以确认我没有再次删除它。
- en: So in this case again， this does not matter that you can see it because this
    is going。 to get deleted as soon as I stop。 But I have now added to TP and what
    this means is that the next time you log on to。 PIPI it will prompt you for code
    basically to ensure that you are in fact possessing the。 device that has the token。
    But you know， we can go one step further。
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，这并不重要，因为你可以看到它，因为这将在我停止后立即被删除。但我现在已经添加了TP，这意味着下次你登录PIPI时，它会提示你输入代码，以确保你确实拥有那个包含令牌的设备。但你知道，我们可以更进一步。
- en: We can actually add a security device too。 So go ahead and do that。 Similarly。
    I'm going to go ahead and name it。 So you know， you might have multiple mobile
    devices。 So in this case， I'm going to call mine the laptop key， right？ Click
    setup。 It's going to prompt me for permission。 I'm going to do a security device。
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实际上也可以添加一个安全设备。所以继续操作。同样，我将为其命名。你知道，你可能有多个移动设备。所以在这种情况下，我将我的称为笔记本电脑密钥，对吧？点击设置。它会提示我请求权限。我将做一个安全设备。
- en: I'm going to go ahead and touch it and it's going to be set up。 So now if you
    see the bottom here。 I have two factor authentication methods。 I have my TOTP
    application and I have my laptop key。 security key。 I can move any of them any
    of it to any time。 And yeah， pretty much it。 You can also see the security events。
    So on your account， if you log in。
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我会触摸一下，它将被设置好。所以现在如果你看到底部，我有两种因素认证方法。我有我的TOTP应用程序和我的笔记本电脑安全密钥。我可以随时移动其中任何一个。就这些。你也可以看到安全事件。因此，如果你登录你的账户。
- en: you'll see if someone has set one for you on your behalf， perhaps what you know
    in。 Actually。 just to demo this really quick， I'm going to go ahead and log out
    and log back， in。 So I'm going to get with the device， touch my thing， and I'm
    logged in。 So the one last thing I wanted to demo was API tokens。
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有人在你的名义下设置了一个令牌，你会看到，实际上。为了快速演示一下，我接下来会注销并重新登录。所以我会用设备，触摸我的东西，我就登录了。最后一件我想演示的事情是API令牌。
- en: And so we've had API tokens for a couple of years now。 But one of the cool things
    you can do that not as many people know about is that you can。 scope them to individual
    projects。 So I'm going to go ahead and add an API token。 This is the standard
    API token view。 And name it， you know， crap。
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用API令牌有几年了。但有一件很酷的事情是，并不是很多人知道，你可以将它们限制在单独的项目中。所以我接下来会添加一个API令牌。这是标准的API令牌视图，给它命名，你知道，随便一个名字。
- en: And I'm going to scope it to Clintus。ind。 So when I do this， again。 this token
    is not actually secret。 But in the real deployment。 this would be a token that
    you would add to get a bit of。 actions or to your local workflow to publish。 So
    you can use this instead of a password。
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我将把它限制在Clintus。ind。所以当我这样做时，再次。这令牌实际上并不是秘密。但在实际部署中，这将是一个你用来获取一小部分操作或将其添加到本地工作流程以发布的令牌。所以你可以用这个代替密码。
- en: It's much more secure。 It's a copy and a password everywhere。 You can remove
    the token if that was a mistake。 And you will note that doing all of this also
    corresponds to events on a page。 So again， you can order this。
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这更加安全。它到处都是一个副本和一个密码。如果这是一个错误，你可以移除令牌。你会注意到，所有这些操作也对应页面上的事件。所以你可以再次对其进行排序。
- en: '![](img/7166498fe6a53e554ff5f6b4e42bc599_32.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7166498fe6a53e554ff5f6b4e42bc599_32.png)'
- en: And that is all I have。 So thank you。 [APPLAUSE]， \>\> I'm a philosopher， Liam。
    And also。 what William didn't say was he was the person that implemented a lot
    of this， for PIPI。 So let's give him another round of applause for that as well。
    [APPLAUSE]， \>\> All right。
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我所拥有的一切。所以谢谢大家。[掌声]，我是一名哲学家，Liam。而且，威廉没有说的是，他是实施了很多这些的人，为PIPI。所以我们再为他鼓掌一次。[掌声]，好吧。
- en: '![](img/7166498fe6a53e554ff5f6b4e42bc599_34.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7166498fe6a53e554ff5f6b4e42bc599_34.png)'
- en: Next up， we have Alexa with generating recipes of varying quality with GTP too。
    Give it away for Alexa。 [APPLAUSE]， \>\> Hi， I'm Alexa。 And today I want to talk
    to you about generating recipes with deep learning and Python。 My main goal for
    this talk is just to show you that it's pretty easy。
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有Alexa来生成不同质量的食谱，使用GTP二号。把它交给Alexa。[掌声]，你好，我是Alexa。今天我想和你谈谈如何使用深度学习和Python生成食谱。我这次演讲的主要目标是向你展示这其实很简单。
- en: It doesn't have to be intimidating to get started with deep learning。 Excuse
    me。 So this really only has five steps。 I'll walk you through the whole thing。
    The first step is to get your model。 Here， I'm going to use GPT2。 There's a great
    package called GPT2 Simple by MaxWolf on GitHub。 I'll use that。
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 开始深度学习并不一定要让人感到害怕。抱歉。这其实只有五个步骤。我会带你完成整个过程。第一步是获取你的模型。在这里，我将使用GPT2。在GitHub上，有一个叫做GPT2
    Simple的优秀包，由MaxWolf开发。我会用这个。
- en: It makes fine tuning really easy。 But you can use pretty much any language generation
    model that you like。 Here's my code。 It's pretty easy to load up GPT2。 I did this
    all in Google collab。 If you want more details about exactly how I loaded up this
    model， you can just search。 GPT2 Simple and all the documentation is online。 Our
    second step is to prepare your data。
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 微调变得非常简单。但你几乎可以使用任何你喜欢的语言生成模型。这是我的代码。加载GPT2非常简单。我在Google collab中完成了这一切。如果你想了解我如何加载这个模型的详细信息，你可以搜索GPT2
    Simple，所有文档都在线上。我们的第二步是准备你的数据。
- en: So you can use any data set you like。 I just took a data set right off of Kaggle。
    I took the CSV file， changed it to a text file and added some little tokens to
    make sure。 my model knew where the start and the end of the recipe was as well
    as where the different。 sections of the recipe were。 So our third step is to fine
    tune。
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你可以使用任何你喜欢的数据集。我直接从 Kaggle 上拿了一个数据集。我将 CSV 文件改成了文本文件，并添加了一些小标记，以确保我的模型知道食谱的开始和结束在哪里，以及不同的食谱部分在哪里。因此，我们的第三步是进行微调。
- en: Now these language models that I'm using are pre-trained on a huge amount of
    data。 All we're doing by fine tuning is getting it to focus in on recipes specifically。
    So this GPT2 Simple package makes it really， really easy。 You can do it in one
    line。 Fine tune and then the name of your training file。
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我使用的这些语言模型是在海量数据上进行预训练的。我们通过微调来让它专注于特定的食谱。因此，这个 GPT2 Simple 包使得操作变得非常、非常简单。你只需一行代码就能完成。微调，然后输入你的训练文件的名称。
- en: '![](img/7166498fe6a53e554ff5f6b4e42bc599_36.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7166498fe6a53e554ff5f6b4e42bc599_36.png)'
- en: But you also have some options to customize。 So you can change the number of
    steps that you train for。
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 但你也有一些自定义的选项。所以你可以改变训练的步骤数量。
- en: '![](img/7166498fe6a53e554ff5f6b4e42bc599_38.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7166498fe6a53e554ff5f6b4e42bc599_38.png)'
- en: You can change how often you print sample and save data。 And you can also use
    some memory saving options if you're running it in CoLab like I was。 Our fourth
    step is to choose good prompts。 Don't overlook this step because it really makes
    a difference on how your model performs。 and how your output looks。 So you can
    choose lots of options。
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以改变打印样本和保存数据的频率。如果你像我一样在 CoLab 中运行，还可以使用一些节省内存的选项。我们的第四步是选择好的提示。不要忽视这一步，因为它真的会影响你的模型性能和输出效果。所以你可以选择很多选项。
- en: You can prompt it with search terms or tags。 You can give your model an ingredient
    list and ask it to generate a recipe from that。 What I did was give it a recipe
    title。 You can also use something called few shot learning。 which essentially
    just means you， give within your prompt a few examples of your desired output。
    So for my case that would look like giving a few complete examples of recipes
    that I。
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用搜索词或标签来提示它。你可以给模型一个食材列表，并要求它从中生成一个食谱。我做的是给它一个食谱标题。你还可以使用一种称为少样本学习的方法，这基本上意味着你在提示中给出几个你期望输出的示例。因此，在我的案例中，这将是给出几个完整的食谱示例。
- en: would like it to generate。 And then a title at the end of my prompt that tells
    it actually which recipe I would like。 it to generate。 And that just gives it
    a better idea of what kind of structure and format I'm looking for。
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望它生成。然后在我的提示的末尾加上一个标题，告诉它我实际上希望生成哪个食谱。这可以让它更好地理解我在寻找什么样的结构和格式。
- en: '![](img/7166498fe6a53e554ff5f6b4e42bc599_40.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7166498fe6a53e554ff5f6b4e42bc599_40.png)'
- en: So our first step and last step is to actually generate our recipes。 So you
    can choose to generate it just in your terminal or to a file。 You can see here
    I have it going to piconrecipes。txt。 You can change your temperature which is
    essentially how expected or unexpected you want your generated。
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们的第一步和最后一步实际上是生成我们的食谱。你可以选择在终端中生成它或将其保存到文件中。你可以看到这里我将其保存到 piconrecipes.txt。你可以改变温度，这基本上决定了你希望生成的内容是多么符合预期或意外。
- en: text to be。 Here's where you load in your prompt。 I asked it to truncate when
    it reaches this little end recipe tag that will just tell us。 when it gets to
    the end of the recipe or it thinks it's gotten to the end of a recipe， we'll see。
    And you can also change the length and the number of samples that you generate。
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是你加载提示的地方。我要求它在达到这个小的食谱结束标记时截断，这将告诉我们。当它到达食谱的结尾或认为到达了食谱的结尾时，我们将看到。你还可以改变生成样本的长度和数量。
- en: '![](img/7166498fe6a53e554ff5f6b4e42bc599_42.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7166498fe6a53e554ff5f6b4e42bc599_42.png)'
- en: So this talk would not be fun if I didn't get to show you a bad example of a
    recipe that。 I generated。 So I wanted to show you this one for almost trigger
    free vanilla fudge cake which is really。 something。 You can see it's got several
    issues。 It's got the general structure down but it's you know there's some things
    to be improved。 there。 The favorite part of this is when you look at the directions
    and it asks you to use an。
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我不展示一个我生成的糟糕食谱例子，这次演讲就不会有趣。所以我想给你展示这个几乎是无触发的香草软糖蛋糕，它真的有些问题。你可以看到它有几个问题。它的整体结构还可以，但确实有一些地方需要改进。最喜欢的部分是，当你查看说明时，它要求你使用一个。
- en: air conditioner as an appliance。 Clearly there's some improvement to be made
    here。 If you want some better luck at home when you're doing this yourself you
    can do things。 like include more training data。 Train for more steps。 Use fuchshot
    learning which we talked about earlier it's just including examples of your。
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 空调作为一种设备，显然这里还有改进的空间。如果你想在家做这项工作时更顺利，可以尝试做一些事情，比如增加更多的训练数据。训练更多的步骤。使用我们之前讨论过的fuchshot学习，就是包括你的例子。
- en: desired output within your prompt。 And also experiment with settings。 Because
    it's a lightning talk I can't really go deeper into the different settings that。
    you can use and change。 But definitely experiment with your models and see how
    it goes。 If you want more info about the package that I used for this here's a
    QR code it's there。
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的提示中实现期望的输出。并且实验不同的设置。由于这是一个快速演讲，我不能深入探讨你可以使用和更改的不同设置。但一定要尝试你的模型，看看效果如何。如果你想了解我用的这个包的更多信息，这里有一个二维码。
- en: on GitHub but that's all。
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在GitHub上，但就这些。
- en: '![](img/7166498fe6a53e554ff5f6b4e42bc599_44.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7166498fe6a53e554ff5f6b4e42bc599_44.png)'
- en: Thank you。 That was great that cake looked delicious。 My absolute favorite class
    of humor is like machines trying to be humans very badly。 That's absolutely hilarious。
    Next we have a talk on the dreaded Django upgrade by Srinivas。 Let's see if Srinivas
    around applause。
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 谢谢你。那真是太棒了，那块蛋糕看起来很好吃。我最喜欢的幽默类型是机器试图非常糟糕地模仿人类。这绝对是搞笑的。接下来我们有Srinivas关于可怕的Django升级的演讲。让我们看看Srinivas在不在，掌声欢迎。
- en: '![](img/7166498fe6a53e554ff5f6b4e42bc599_46.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7166498fe6a53e554ff5f6b4e42bc599_46.png)'
- en: Hello everyone。 I'm Srinivas Buntadou。 I'm a software engineer at Cox Automotive。
    And yeah this is my first bike on and having a great experience I hope you guys
    do。 One thing I wanted to share is it's one story sitting there and listening
    to the talks and。 enjoying them and it's a totally different experience standing
    here and trying to talk。
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 大家好。我是Srinivas Buntadou。我是Cox Automotive的一名软件工程师。这是我第一次上台，我希望你们也能有很好的体验。我想分享的一件事是，坐在那里听演讲是一回事，站在这里试图发言又是完全不同的体验。
- en: It's so fast my heartbeat right now。 Right。 Without further ado I'll go into
    the talk。 So what I'm going to share with you today is about our story of upgrading
    Django from like。 we were running it on one dot eleven dot expression and then
    upgrading it to the latest version。 I'm going to share it with you soon。 And it's
    not reinventing the wheel。
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我的心跳非常快。好的。话不多说，我将进入主题。今天我要和大家分享的是我们升级Django的故事。我们之前使用的是一个点十一点版本，然后升级到最新版本。我很快会和你们分享这些。这并不是重新发明轮子。
- en: It's more like sharing our story so that some small fine tuning and steps that
    we did to just。 get through the process faster。 Right。 Sorry。 Yeah。 All right。
    So why upgrade？
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这更像是分享我们的故事，讲述我们为加快这一过程所做的小调整和步骤。好的。抱歉。那为什么要升级呢？
- en: Django just like any other package or library， right。 What happens is over the
    time you won't receive the security hot patches and then the support。 for the
    latest version or the latest transit of dependencies or libraries and same with。
    the features too。 Like the older versions they stop developing the features just
    like any other library。
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: Django就像其他任何包或库一样。随着时间的推移，你将不会收到安全热修补程序，也无法获得最新版本或依赖库的支持，功能也是如此。旧版本停止开发功能，就像任何其他库一样。
- en: And what we observed over time is our when we developed our code this was like
    2015， 2016。 and we never upgraded the Django version that we were running since
    then。 So towards the end of 2020 and 2021 that's when we started noticing a lot
    of problems because。 of this。 All right。 So just as I said earlier， right。
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们观察到随着时间的推移，当我们在2015年和2016年开发代码时，自那时以来我们从未升级过Django版本。因此，在2020年底和2021年，我们开始注意到很多问题的出现。好的。正如我之前所说的。
- en: we were running on Django one dot eleven dot eighteen。 and then if you look
    at the slide there that shows the end of cycle for the Django versions。 it's not
    even visible in that。 So it sort of ended even before 2019。 So now you know why
    we had to do that。 We it sort of we were forced to do that。
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在Django一点十一点十八上运行。如果你看一下那张幻灯片，显示的是Django版本的生命周期结束，甚至看不到。因此，它在2019年之前就已经结束了。所以现在你知道我们为什么不得不这样做。我们是被迫的。
- en: But we are glad we jumped。 We did the upgrade because right now you know you
    get the the trooper the runtime or the processing。 time in the application not
    even going to the database level but the application itself。 is fast and this
    applies so just to give an example our system is more like monolith and。 tied
    up with the microservices but this sort of works with the approach that we took
    works。
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们很高兴我们进行了升级。因为现在，你知道，应用程序中的运行时或处理时间甚至在数据库层面都没有达到，而是应用程序本身运行得很快。这种方法适用于我们的系统，它更像是一个单体，并与微服务相结合。
- en: with any repository or smaller code repository thousands of lines of code or
    million lines。 of code etc。 All right。 Okay。 First thing is I think the problem
    that most of us face is about dependencies be direct dependencies。 or transitive
    that we see in the packages。 That is our inbuilt packages or open source packages
    that we pull into our system。 And one one thing that we sort of did it as a precursor
    before even moving into the upgrade。
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何代码库或较小的代码库中，可能有成千上万行代码或数百万行代码。好的。首先，我认为我们大多数人面临的问题是关于依赖关系的，无论是直接依赖还是我们在包中看到的传递依赖。这是我们在升级之前做的准备工作之一。
- en: is making sure we have the dependency either pinned or unpin depending on what
    we need。 The pin dependencies obviously everyone prefers that because you know
    that even with the upgrade。 and when you do the pip compile it's going to just
    install the same package so your code。 would run without any errors but there
    is a problem there in the sense that you can't。
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 确保我们有依赖关系，无论是固定的还是未固定的，具体取决于我们的需要。固定依赖关系显然是每个人都更喜欢的，因为即使在升级后，当你执行 pip 编译时，它只会安装相同的包，这样你的代码就能顺利运行，但这里有一个问题，你无法。
- en: you won't get the latest packages so Django we know we are getting the latest
    package but。 not the other libraries。 So at some point you got to either unpin
    them or define a specific version that works for。 you。 And then now coming to
    unpin。 Now there is a so for us as I said it's a monolith tied to different microservices
    so。 we made sure that the setup。py that the installation files for all the microservices
    you would never。
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 你无法获取最新的包，所以 Django 我们知道我们在获取最新包，但其他库则不是。因此，在某个时候，你必须选择解除固定依赖或定义一个适合你的特定版本。现在说到解除固定，正如我所说的，对于我们来说，这是一个与不同微服务相结合的单体，因此我们确保了
    setup.py 中的安装文件，你永远不会。
- en: touch or you would never pin any dependencies because when you are pulling it
    into the monolith。 you would want to pull the latest versions for it to run without
    any errors so that the。 transitive dependencies are upgraded。 Right。 Moving on。
    And another small thing that sort of helped is a move a quicker is annotating
    the pip compile。
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 你永远不会锁定任何依赖关系，因为当你将其引入单体时，你希望拉取最新版本以便运行没有任何错误，从而更新传递依赖关系。好的，接下来，另一个帮助我们更快的事情是注释
    pip 编译。
- en: by that I mean if you look at the hashes on the side you would do the exact
    dependencies。 so packages in your output requirements dot lock what that helped
    us in doing is when you。 are manually installing or deleting a package you would
    know what transitive dependencies。 to remove even before the pip compile step。
    So that sort of helped us move quicker and then just going to the Django itself
    has great documentation。
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我的意思是，如果你查看侧边的哈希，你会看到确切的依赖关系。因此，在你的输出要求文件中，包锁定帮助我们在手动安装或删除包时，知道需要删除哪些传递依赖，即使在
    pip 编译步骤之前。因此，这帮助我们更快地进行操作，而 Django 本身也有很好的文档。
- en: so like just reading the release notes are you know how to do the upgrade or
    the deprecated。 methods the most important thing would give you more information
    on what to address quickly。 And then we have a lot of open source code models
    I would call them which is like automatic。 you know it's easy to fix the deprecations
    in your code these are not written by as these。
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，阅读发布说明可以告诉你如何进行升级或已弃用的方法，最重要的是能提供更多信息，帮助你快速处理问题。然后我们有很多开源代码模型，我会称之为自动化的，你知道，修复代码中的弃用方法非常简单，这些并不是由我们自己编写的。
- en: are open source libraries that we have。 Oops。 Oh。 Out of time。 Go ahead。 Go
    ahead。 Yeah。 This is the last slide so I just wanted to say these are the open
    source libraries that。 help you fix the deprecations in the code automatically。
    Round of applause。
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有开源库。哦，抱歉，时间不够。继续，继续。是的，这是最后一张幻灯片，所以我想说这些是帮助你自动修复代码中弃用部分的开源库。请大家鼓掌。
- en: '![](img/7166498fe6a53e554ff5f6b4e42bc599_48.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7166498fe6a53e554ff5f6b4e42bc599_48.png)'
- en: Thank you。 Thank you。 I had one job。 All right。 And I think for our last talk
    we're going to have Adrian who's going to talk to us about。 when to rewrite in
    Rust let's give Adrian a round of applause。
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 谢谢大家。谢谢。我本来只需做好一件事。好的，我想在我们的最后一场演讲中，我们将邀请Adrian来和我们谈谈何时在Rust中重写。请大家为Adrian鼓掌。
- en: '![](img/7166498fe6a53e554ff5f6b4e42bc599_50.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7166498fe6a53e554ff5f6b4e42bc599_50.png)'
- en: Hello。 Hi folks。 My name is Adrian。 So I rewrote a module in the standard library
    called graphlib。 It's available in 3。9 in Rust。 And this talk I'm going to talk
    about what I learned from that was my first time moving。 some of the Rust。 Maybe
    when you should rewrite something in Rust。 So the first thing I want to talk about
    is when is it good to rewrite something in Rust。
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 你好。大家好。我叫Adrian。我在标准库中重写了一个模块，叫做graphlib。它在Rust的3.9版本中可用。在这次演讲中，我将谈谈我从中学到的经验，这是我第一次迁移一些Rust代码。也许你应该在Rust中重写某些东西的时机。首先，我想谈谈在什么情况下重写某些东西是好的。
- en: or like when you should think about that。 I think especially if it's your first
    time doing it you should pick something that's。 CPU bound that's a well contained
    in PI and ideally has existing tests。 So something like graphlib which is an existing
    well understood piece of Python is a good candidate。 for that。 If it's your first
    time trying to write something in Rust maybe trying to figure out how to。
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 或者说你应该何时考虑这一点。我认为，尤其是如果这是你第一次做这件事，你应该选择一个CPU绑定且相对独立的项目，并且最好有现有的测试。因此像graphlib这样的已有且易于理解的Python模块是一个很好的候选对象。如果这是你第一次尝试用Rust编写某些东西，或许应该考虑如何进行。
- en: test it， how to learn Rust all that。 And one go and figure out the API for your
    thing is probably a bit too much。 So the next couple of slides are going to be
    interesting things that I learned from my。 first time writing something in Rust。
    So the first one is the idea of fallibility。 In Python you can raise an exception
    anywhere in Rust you can't do that。
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 测试一下，如何学习Rust所有内容。而一次性了解API可能有点过于复杂。因此接下来的几张幻灯片将展示我在第一次用Rust编写东西时学到的有趣内容。第一个是关于脆弱性的概念。在Python中，你可以在任何地方引发异常，而在Rust中你不能这样做。
- en: In particular for something like graph related in this case it made sense to
    represent as。 like a hash map sort of thing and there's many ways to represent
    a graph but in this。 case that's what made sense。 And the issue encounter is that
    Python's hash function is fallible。 You can raise an exception like there's things
    that are not hashable but Rust doesn't allow， that。
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是对于图相关的内容，在这种情况下，将其表示为哈希映射是有意义的，表示图的方式有很多种，但在这个案例中，这种表示方式是合理的。遇到的问题是Python的哈希函数是脆弱的。你可以引发异常，有些东西是不可哈希的，而Rust则不允许这种情况发生。
- en: And what happens if you try to do that is you just get like a panic and like
    everything's。 pretty ugly。 So it's all this problem is I just created like a little
    struct。 This is Python but really this was written in Rust so we can all understand
    it。 And what I do is I hash the thing before I put it in here and so now my hash
    function。
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你试图这样做，结果就是会出现恐慌，情况会变得相当糟糕。所以这个问题是我创建了一个小结构。这是Python代码，但实际上这是用Rust编写的，这样我们都能理解。我做的是在放入这里之前对其进行哈希处理，所以现在我的哈希函数。
- en: is just returning a known value。 And that means that when I call Python's hash
    function I'm still at a point where I have。 control and I can return a Python
    error as opposed to Rust's hash function calling it。 where there's no error handling。
    The next is boundary crossing。 One of the more expensive things especially for
    the current state of Rust Python bindings。
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 只是返回一个已知的值。这意味着，当我调用Python的哈希函数时，我仍然处于一个可以控制的状态，我可以返回一个Python错误，而不是Rust的哈希函数调用它时，那里没有错误处理。接下来是边界跨越。对于当前状态的Rust
    Python绑定来说，成本较高的事情之一就是这个。
- en: is you know doing a lot of calling from one place to the other。 So when you're
    designing really even at the API level you want to minimize how much you're。 going
    to have to call Python from Rust and Rust from Python because if you're doing
    that。 all the time it's going to be slower than if you just didn't Python。
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道在一个地方到另一个地方进行大量调用。因此，在设计时，即使在 API 级别，你也想要尽量减少从 Rust 调用 Python 和从 Python 调用
    Rust 的次数，因为如果你一直这样做，效率会比完全不调用 Python 时慢。
- en: And the issue I encountered was when you have a hash map and you know you find
    that something。 has the same hash so maybe it's the same thing， maybe it's the
    thing you're looking。 for then you still need to do an equality comparison to
    make sure it actually is the。 same thing and that meant that every time I looked
    something up in a hash map I had to。
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我遇到的问题是，当你有一个哈希表时，你发现某个东西有相同的哈希值，可能是同一个东西，也可能是你要找的东西，但你仍然需要进行相等性比较，以确保它确实是同一个东西。这意味着每次我在哈希表中查找某个东西时，我都必须。
- en: call back into Python and that was really slow。 So I did a lot of optimization。
    I've done this already but what I did is I just did a reference comparison in
    Rust before。 calling it to Python。 And so for most cases when you're saying with
    this API you're saying this task is done。 that task exists in the hash map and
    it's the exact same object and so this means that。
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 回调到 Python，这真的很慢。所以我进行了很多优化。我已经这样做过了，但我在调用 Python 之前在 Rust 中进行引用比较。因此在大多数情况下，当你说这个
    API 时，你是在说这个任务已完成。那个任务在哈希表中存在，并且是同一个对象，这意味着。
- en: I almost never have to call it back into Python。 The last more interesting one
    is mutability。 Rust has this whole borrow system。 One of the fundamental rules
    is you can't have more than one mutable reference in Python。 Everything is kind
    of a mutable reference but you can't grab value in a dictionary and。 then mutate
    that and then use that to look up something else and you run it to issues。
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我几乎不需要再调用 Python。最后一个更有趣的问题是可变性。Rust 有一个完整的借用系统。基本规则之一是你不能在 Python 中有多个可变引用。所有东西都有点像可变引用，但你不能在字典中抓取值然后进行修改，再用它去查找其他东西，这会导致问题。
- en: And the existing API for Graph Lab is something like this。 There's a class that
    contains information on each node and it has some mutable parts like。 whether
    the thing is ready or not and some parts that really aren't mutable like the。
    parents of that task。 And so what I had to do is I had to destructure and do two
    different things so I had to have。
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 现有的 Graph Lab API 大致是这样的。有一个类，包含每个节点的信息，它有一些可变部分，比如该任务是否准备好，还有一些实际上并不可以变的部分，比如该任务的父节点。因此，我必须解构并执行两件不同的事情，所以我不得不。
- en: like a mutable part and an immutable part and that allowed me to freely access
    the mutable。 part and then access the mutable part， return the reference and then
    move on。 So you can see there's some issues with this。 The Python version in my
    opinion is a lot nicer。 Everything is contained in one place。 Here you can end
    up with like different keys and mappings and gets weird but that's the way。
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个可变部分和一个不可变部分，这让我可以自由访问可变部分，然后访问不可变部分，返回引用，然后继续。所以你可以看到这里有一些问题。依我看来，Python
    版本要好得多。所有内容都集中在一个地方。而在这里，你可能会遇到不同的键和映射，变得奇怪，但这就是它的方式。
- en: you have to do。 And so my takeaways for this are probably write in Python first。
    Don't understand the API， understand where the hot loops are， understand where
    you can。 gain performance before you move to Rust。 And once you are writing in
    Rust。 think about biomedry crossing， try and minimize your calling， back and forth。
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我对这点的总结是，可能先在 Python 中编写代码。了解 API，理解热点循环的位置，了解你可以在哪里提升性能，然后再转向 Rust。一旦你开始用 Rust
    编写代码，考虑生物交叉，尽量减少你来回的调用。
- en: try and move work to Rust， work in Rust and come back to Python。 And think about
    fallibility。 That's something we don't really think about in Python。 Anything
    can raise an exception and Rust。 you don't really have that luxury。 You have to
    be more explicit and sometimes you can't even raise an exception。 And then make
    things immutable as much as possible because that's going to make it a。
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试将工作迁移到 Rust，先在 Rust 中工作，然后再回到 Python。并且要考虑错误性。这是我们在 Python 中并不常考虑的事情。任何事情都可以引发异常，而在
    Rust 中，你并没有这种奢侈。你必须更加明确，有时甚至无法引发异常。然后尽可能让事物不可变，因为这会使其更加稳定。
- en: lot easier to work with a bar checker。 And so last question is probably was
    this fast？ Yes。 it was very fast and it worked great。
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 使用条形检查器工作要容易得多。那么最后一个问题是，这个快吗？是的，确实很快，而且效果很好。
- en: '![](img/7166498fe6a53e554ff5f6b4e42bc599_52.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7166498fe6a53e554ff5f6b4e42bc599_52.png)'
- en: And that wraps it up for today's Lightning Talks。 If you want to watch more
    Lightning Talks。 we'll be back at it again tomorrow morning， before the keynotes
    at 8 AM。 Come back here。 come and see us。 We'd love to have you。
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 今天的闪电演讲到此结束。如果你想观看更多的闪电演讲，我们明天早上8点在主题演讲前会再回来。请回来这里，来看看我们。我们很乐意见到你。
- en: '![](img/7166498fe6a53e554ff5f6b4e42bc599_54.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7166498fe6a53e554ff5f6b4e42bc599_54.png)'
- en: Take care and have a good night。
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 保重，祝你晚安。
