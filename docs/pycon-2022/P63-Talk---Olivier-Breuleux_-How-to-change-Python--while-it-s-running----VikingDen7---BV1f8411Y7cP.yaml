- en: P63：Talk - Olivier Breuleux_ How to change Python (while it's running) - VikingDen7
    - BV1f8411Y7cP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P63：演讲 - 奥利维尔·布鲁莱克_ 如何在Python运行时进行更改 - VikingDen7 - BV1f8411Y7cP
- en: Hello everybody。 Let us give a warm welcome to Mr。 Olivier。 He's going to talk
    about how。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 大家好。请热烈欢迎奥利维尔先生。他将讨论如何。
- en: '![](img/9cf0e3ffc376b5a53f99c3d6be1cad31_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9cf0e3ffc376b5a53f99c3d6be1cad31_1.png)'
- en: '![](img/9cf0e3ffc376b5a53f99c3d6be1cad31_2.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9cf0e3ffc376b5a53f99c3d6be1cad31_2.png)'
- en: to change Python while it's running。 [Applause]， \>\> Probably。 \>\> Hi everyone。
    Today I am going to show you how to change Python while it is running。 In other
    words。 I am going to explain how life coding can be implemented in the Python，
    programming language。 First。 what is life coding？ The definition that I'm going
    to use。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[掌声]，\>\> 大家好。今天我将向你们展示如何在Python运行时进行更改。换句话说，我将解释如何在Python编程语言中实现实时编码。首先，什么是实时编码？我将使用的定义是。'
- en: '![](img/9cf0e3ffc376b5a53f99c3d6be1cad31_4.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9cf0e3ffc376b5a53f99c3d6be1cad31_4.png)'
- en: is this。 Life coding is a development process where a program is edited at the
    same time。 as it is run。 So that changes to that program may be observed in real
    time。 For example， at。 the bottom here I have some code for a toy video game that
    I shamelessly pulled from a。 Pi game tutorial。 While the game is running， we might
    do something like change the way。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这是实时编码。实时编码是一种开发过程，在程序运行时同时编辑它。这样，对该程序的更改可以实时观察到。例如，在这里底部我有一些代码，用于一个我毫不掩饰地从Pi游戏教程中复制来的玩具视频游戏。当游戏运行时，我们可能会做一些更改。
- en: the acceleration works。 And when we do that， the game immediately responds and
    uses the， new rules。 Of course， this is very nice for game development because
    of all the instant， feedback that you get。 But you could also use it to update
    the rest back end without restarting， the server。 Or you could fix a bug in the
    long running machine learning program where you。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 加速是如何工作的。当我们这样做时，游戏立即响应并使用新的规则。当然，这对于游戏开发非常好，因为你可以获得所有的即时反馈。但你也可以用它来在不重启服务器的情况下更新其余的后端。或者在长时间运行的机器学习程序中修复一个bug。
- en: don't want to rerun the expensive pre-processing for each change that you make。
    So if we look。 a bit at existing life coding platforms， you will see that a lot
    of them are in the music。 creation space。 For example， super collider or sending
    Pi。 Because they allow you to instantly。 hear how the changes that you make to
    the code and to the parameters are reflected in， the output。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 不想为每次所做的更改重新运行耗时的预处理。因此，如果我们看一下现有的实时编码平台，你会发现其中很多都在音乐创作领域。例如，超级合成器或发送Pi。因为它们允许你立即听到对代码和参数所做更改在输出中的反映。
- en: Which is very helpful to get a feel for what is interesting or not to do。 I
    must also mention the small type language which has been around since the 70s。
    It's most。 well known implementation， Squeak。 As well as its fork pharaoh。 Are
    built around the concept。 of coding in a live environment， making it a pioneer
    in this field。 Regarding Python specifically。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这对了解哪些内容有趣或不值得做是非常有帮助的。我还必须提到小类型语言，自70年代以来一直存在。它最著名的实现是Squeak，以及它的分支Pharo。它们围绕在实时环境中编码的概念构建，使其成为该领域的先驱。关于Python特定的。
- en: I think Jupyter notebooks kind of fit the idea。 Although it is limited to the
    cells that you。 write in the notebook。 It does have one nifty feature that you
    can turn on called person。 auto reload。 Also available in iPython。 Which is probably
    the closest thing to what I am。 about to show you。 Now what I am about to show
    you is my own live coding library which。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为Jupyter笔记本在某种程度上符合这个理念。虽然它仅限于你在笔记本中编写的单元格，但它有一个很棒的功能，可以开启称为自动重载的功能。在iPython中也可以使用。这可能是我即将展示的内容中最接近的东西。现在我要展示的是我自己的实时编码库。
- en: is called Jurigged。 And maybe if I have time I will also demonstrate a platform
    that I。 call Snack Talk which I am building on top of Jurigged。 Before we dive
    any deeper into。 the mechanisms and implementations of live coding。 In Python
    I am going to describe precisely。 what it is that we aim to do。 Keeping in mind
    that every decision we make here is going。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 被称为Jurigged。如果我有时间的话，也许我会演示一个我称之为Snack Talk的平台，它是建立在Jurigged之上的。在我们更深入探讨现场编码的机制和实现之前，我将准确描述我们希望做什么。请记住，我们在这里所做的每一个决定都将改变Python的运行。
- en: to have some trade-offs。 The most basic thing we want to do here is to be able
    to update。 functions in the middle of a program's execution。 And I really mean
    in the middle of it。 So。 you start your program。 It is executing as usual one
    step at a time。 And then at some。 point you open one of the source files with
    your favorite text editor。 And you change。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些权衡。我们在这里最基本的需求是能够在程序执行的中间更新函数。我真的指的是在执行的中间。所以，你启动程序。它像往常一样一步一步地执行。然后在某个时刻，你用你喜欢的文本编辑器打开其中一个源文件，并进行更改。
- en: the code of some function and then you save。 What happens next？ What we want
    to happen。 is that as soon as you save we want to patch the running process。 We
    will keep the execution。 pointer where it is。 So for example here we were about
    to execute the Y function。 And。 we will keep our position in the execution。 And
    we will also keep the program state。 But。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一些函数的代码，然后你保存。接下来会发生什么？我们希望发生的事情是，一旦你保存，我们希望修补正在运行的进程。我们将保持执行指针在当前位置。因此，例如，在这里我们即将执行Y函数。我们将保持在执行中的位置。同时我们也将保持程序状态。但。
- en: we will change the function。 Which means that the next time that we call foo
    the new code， is run。 And in the nutshell that is essentially all we aim to do
    here。 But there are a lot。 of details to make a bit more precise。 For example，
    let's say we have this function f。 which is in a module called mod。py。 And which
    I am using in this other module， test。py inside。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更改函数。这意味着下一次我们调用foo时，将运行新代码。简而言之，这就是我们在这里的主要目标。但有很多细节需要更准确。例如，假设我们有这个函数f，它在一个名为`mod.py`的模块中。我在另一个模块`test.py`中使用它。
- en: this test function。 So I will call f in three different ways。 First I will fetch
    it from。 the module mod。fx。 The second way is that I am going to use this reference
    to f that。 I have imported directly。 Or I will simply fetch it from a dictionary
    in which I have。 tucked the function。 These are all valid ways to call a function
    that I found in many existing。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试函数。因此，我将以三种不同的方式调用f。首先，我将从模块`mod.fx`中获取它。第二种方式是，我将使用这个直接导入的f引用。或者我将简单地从一个字典中获取，我在其中存放了这个函数。这些都是我在许多现有项目中找到的有效调用函数的方法。
- en: Python programs。 And what I want is that if I change the source code for f in
    mod。py。 I want all of these references to be updated。 In this case， they should
    all return the new。 result which is 1000。 Now you can see right away that simply
    we are not rerunning that， module。 Mod。py is not enough。 Because it will just
    make a new f。 It will not change the existing。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Python程序。我希望的是，如果我更改`mod.py`中f的源代码，我希望所有这些引用都被更新。在这种情况下，它们都应该返回新的结果，即1000。现在你可以立刻看到，仅仅重新运行那个模块`mod.py`是不够的。因为这只会创建一个新的f，并不会更改现有的。
- en: value of f in test。py nor the one that is tucked in the dictionary。 So the first
    call。 will be adjusted but not the others。 So this is something that we have to
    watch for。 Next。 we also want to update methods。 For example， maybe I want to
    add a talk method to the animal， class。 Before I add this， if I create some animal，
    let's name her Bertha。 And that I， ask her to talk。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在`test.py`中，f的值和字典中包含的值。第一次调用会被调整，但其他调用则不会。因此，这是我们必须注意的。接下来，我们还希望更新方法。例如，也许我想在动物类中添加一个talk方法。在我添加这个方法之前，如果我创建一些动物，比如叫她Bertha。当我要求她说话时。
- en: I will get an attribute error。 But in that same running program， if I add， this
    talk method。 what I want is not only future animals but also all existing animals。
    should suddenly gain the ability to talk。 In which case， even our Bertha will
    be suddenly。 gifted with that ability。 And likewise， if I was to change an existing
    method， I would。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我将得到一个属性错误。但在同一个正在运行的程序中，如果我添加这个talk方法，我希望不仅是未来的动物，所有现有的动物也应该突然获得说话的能力。在这种情况下，即使我们的Bertha也会突然获得这种能力。同样，如果我改变一个现有方法，我也会。
- en: want existing objects to use the new version。 Of course， there are some intrinsic
    limitations。 to what kind of changes are acceptable。 Because while we can update
    behavior relatively easily。 the same cannot be said of object state。 So if for
    example， you change the way objects。 are initialized or change the internal structure
    of the data inside， old objects may become。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 希望现有对象使用新版本。当然，对于可接受的更改类型，有一些固有的限制。因为虽然我们可以相对容易地更新行为，但对象状态则不能如此。如果例如，你更改对象的初始化方式或更改内部数据结构，旧对象可能会变得。
- en: inconsistent with the new behavior。 In this case， you might need to simply restart
    the， function。 There is nothing that will work in every situation， of course。
    Then we also。 want to update closures。 For those who might not be familiar with
    the term， a closure is。 a function that is nested inside another function。 For
    example， the one that I put in。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 与新行为不一致。在这种情况下，你可能需要简单地重启这个`function`。当然，并不是所有情况都有解决方案。然后我们也想更新闭包。对于那些可能不熟悉这个术语的人来说，闭包是一个嵌套在另一个函数内部的函数。例如，我在这里展示的就是你可以写的最简单的闭包。
- en: a dashed box is a closure。 And it carries some state from the other function
    here， the。 variable x from adder。 This commonly happens in Python。 You've probably
    done this before。 For example， if you write a decorator that wraps a function
    to add some new behavior。 that proper function that is defined inside the decorator
    is a closure。 And the example。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 虚线框是一个闭包。它携带来自另一个函数的某些状态，这里是来自`adder`的变量`x`。这在Python中很常见。你可能以前做过。例如，如果你写一个装饰器来包装一个函数以添加一些新行为，那么在装饰器内部定义的那个适当函数就是一个闭包。而这个例子。
- en: that I'm showing here is merely the simplest closure that you could write。 The
    add function。 in the dashed box inside of adder will add x to whatever number
    is given as an argument。 Why？
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我所展示的加法函数在虚线框内，会将`x`加到作为参数给出的任何数字上。为什么呢？
- en: So every time that we call adder， we create a new add function， which is packaged。
    with the value of x for adder。 So add one is the add function package with the
    value， one for x。 And in the other file， add two is the add function package with
    the value two， for x。 So when we call this test function with giving 10 to add
    one and add two， we will， get 11 and 12。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，每次调用`adder`时，我们都会创建一个新的加法函数，它与`adder`的`x`值打包在一起。因此，`add one`是与`x`值为`1`的加法函数打包在一起。在另一个文件中，`add
    two`是与`x`值为`2`的加法函数打包在一起。因此，当我们调用这个测试函数，给`add one`和`add two`传入`10`时，我们会得到`11`和`12`。
- en: So if we change that add function， ideally what we want to happen is that we
    want。 to change these closures。 We want add one to change and we want add two
    to change。 So。 I changed the plus for inextpicability for multiplication sign。
    So now tests should return。 10 and 20。 So one thing I will note is that if you
    use percent of the reload in iPython。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们改变那个加法函数，理想情况下我们希望发生的事情是，我们希望改变这些闭包。我们希望`add one`和`add two`都发生变化。所以我将加号换成了乘号。所以现在测试应该返回`10`和`20`。我注意到的一点是，如果你在`iPython`中使用重载百分比。
- en: it will effectively properly change add one because it is rerunning the module。
    But it。 will miss add two。 So in this case， you will get instead of 10/20， you
    will get 10/12， which。 is inconsistent。 Again， there are some limitations。 For
    example， you cannot ask for more variables。 from the outer scope in the inner
    function than the ones that the original asked for。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 它实际上会正确地改变`add one`，因为它正在重新运行模块。但它会漏掉`add two`。因此在这种情况下，你会得到`10/12`而不是`10/20`，这就是不一致的。再次强调，有一些限制。例如，你不能从外部作用域要求比原始要求更多的变量。
- en: So if there was another variable z that you wanted to capture from adder， that
    was not。 captured previously。 You could not capture it because you cannot do that
    after the fact。 It might already be gone and already collected by the garbage
    collector。 And the last requirement。 that I am going to mention is precision。
    By precision， I mean that we should only update。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果有另一个变量`z`你想从`adder`中捕获，但之前没有捕获。你不能捕获它，因为事后无法做到这一点。它可能已经消失，并被垃圾回收器回收。我要提到的最后一个要求是精度。我的意思是我们应该只更新。
- en: what needs to be。 For example， here I have a little program that simply loops
    over user。 input and calls f on every number that the user gives。 If we update
    f， we would like to。 keep running that while loop， but the next iteration， we
    will get， we will call the new。 version of f on the next input。 The issue， of
    course， is that f is in the same file as。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要做什么。例如，这里我有一个小程序，它简单地循环用户输入，并在用户给出的每个数字上调用`f`。如果我们更新`f`，我们希望继续运行那个`while`循环，但在下一次迭代中，我们将对下一个输入调用`f`的新版本。当然，问题在于`f`与。
- en: the while loop。 So we want to avoid running it again in the process of updating
    part of， the code。 This is something that I haven't really seen in the existing
    solution doing Python。 Maybe I missed it， but I feel that it's important。 Because
    a lot of the functionality that someone。 might want to change in a program is
    in the main script file。 So you want to be able to。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 避免在更新部分代码的过程中再次运行while循环。这是我在现有的Python解决方案中没有看到的东西。也许我错过了，但我觉得这很重要。因为很多人可能想在程序中更改的功能都在主脚本文件中。所以你希望能够。
- en: do these updates without rerunning the script from the beginning。 So how are
    we going to。 go about this？ Well， the method that we're going to use is hot patching。
    So that's basically。 just patching functions during a live instance of a program。
    So。 to understand how to patch Python code， we first need to understand how the
    data structures。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在不从头开始重新运行脚本的情况下进行这些更新。那么我们将如何进行呢？我们将使用的方法是热补丁。因此，这基本上是在程序的实时实例中补丁函数。为了理解如何修补Python代码，我们首先需要了解数据结构。
- en: for functions work。 So I've taken the same closure example as before， but with
    outer and。 inner as the function names。 And the structure of the function behind
    that is as follows。 So the top left box is the function object for outer。 And
    it contains many fields， but。 the important one that I want to focus on is dunder
    code here。 When I say dunder， I mean。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对于函数的工作。我使用了之前相同的闭包示例，但将外部和内部作为函数名称。其背后的函数结构如下。左上角的框是外部函数的函数对象。它包含许多字段，但我想关注的重要字段是这里的dunder代码。当我说dunder时，我是指。
- en: two underscores before and two underscores after， just so you know。 And that
    field， dunder， code。 points to a different object， a code object， which also contains
    many fields that。 pertain to the function。 For example， there is a argument code
    and there's many other， things。 But there's also this field that points to the
    bytecode for the function。 So when we。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在前后各有两个下划线，供你参考。而该字段，dunder代码，指向一个不同的对象，即代码对象，其中还包含许多与函数相关的字段。例如，有一个参数代码，还有许多其他内容。但还有这个字段指向函数的字节码。所以当我们。
- en: call the other function， it will read the dunder code pointer and fetch that
    code type object。 And then it will read the bytecode and execute it。 If we have
    inner functions， then at some。 point we will need to create a function for the，
    the function object for the inner function。 In its dunder closure field， we will
    put a tuple of cells that contain the variables。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 调用其他函数，它会读取dunder代码指针并获取该代码类型对象。然后它将读取字节码并执行它。如果我们有内部函数，那么在某个时刻我们需要为内部函数创建一个函数对象。在其dunder闭包字段中，我们将放置一个包含变量的元组。
- en: that we're capturing。 In this case， x。 And the dunder code pointer will point
    to the code。 object for the inner function。 And that object is originally contained
    in the CO_understore。 core consts field of the outer functions code object。 So
    that's simply a list of all the。 constants that are needed for execution， like
    literals， true， false， and certain code objects。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在捕获的内容。在这种情况下是x。dunder代码指针将指向内部函数的代码对象。而该对象最初包含在外部函数代码对象的CO_understore核心常量字段中。因此，这只是一个执行所需常量的列表，比如文字值、true、false，以及某些代码对象。
- en: So ultimately， as I've explained， we may have multiple function instances that
    correspond。 to different captured values， but they all point to the same code
    object， ultimately。 Now the interesting thing about Python is that these dunder
    code pointers can be modified。 So you can take any existing function object and
    change that pointer to point to the code。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，正如我所解释的，我们可能有多个函数实例对应于不同的捕获值，但它们最终都指向同一个代码对象。现在Python的有趣之处在于这些dunder代码指针可以被修改。因此，你可以取任何现有的函数对象并将该指针更改为指向代码。
- en: of some other function or an object that you've made yourself。 This can be risky
    if you do。 the wrong thing。 You can actually cause a segfault。 but it basically
    allows you to change the behavior， of a function on the fly。 So here's what we
    want to do。 Whenever we have new code， we。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你自己制作的某个其他函数或对象。如果你做错了事情，这可能会很危险。你实际上可以导致分段错误。但它基本上允许你动态改变函数的行为。所以我们想要做的是，每当我们有新代码时。
- en: want to identify all of the functions that point to the old code。 And we want
    to change。 all the dunder code pointers from the old code to the new code。 Alright。
    With this in， mind。 here's the plan。 First， we need to detect if a source file
    has changed。 There are already。 libraries that do that very well。 For example，
    watchdog， which is what I have used。 So we。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要识别所有指向旧代码的函数。然后我们希望将所有旧代码的双下划线代码指针更改为新代码。好的，考虑到这一点，这是计划。首先，我们需要检测源文件是否发生了变化。已经有库可以很好地做到这一点。例如，我使用过的watchdog。
- en: can simply watch for changes in the background。 And when there is a change，
    we can asynchronously。 make the batch。 Then we need to identify which function
    or which functions were changed。 This involves doing a structural diff between
    the old source code and the new and stripping。 away the unchanged parts。 So I
    don't think I really have time to go in deep detail about， that one。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以简单地在后台监视变化。当发生变化时，我们可以异步地进行批处理。然后我们需要识别哪些函数或哪些函数发生了变化。这涉及对旧源代码和新源代码之间进行结构差异比较，并剥离未改变的部分。所以我觉得我真的没有时间去详细说明这一点。
- en: so I will leave it at that。 There are a few ways you could do this that are
    better。 than some others。 Once we have that， we will compile the new code in isolation
    to get a。 new code object。 And then we need to find the old code object that corresponds
    to what was， changed。 That step requires a bit of thinking。 Naively， you would
    think that it would be。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我就说到这里。有几种方法可以比其他方法更好地做到这一点。一旦我们有了这些，我们将在隔离中编译新代码以获得一个新的代码对象。然后我们需要找到与所更改内容对应的旧代码对象。那一步需要一点思考。天真地说，你可能会认为它会是。
- en: easy to find because if I change the function f in module m， then you know，
    in module m。 if I get the attribute f， it should basically be there。 And 99% of
    the case， that's kind， of true。 But the truth is that it could be anywhere。 For
    example， maybe it is a function。 that has a decorator。 And that decorator stashed
    it in deep in a dictionary or a different。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易找到，因为如果我在模块m中更改函数f，那么在模块m中，如果我获取属性f，它基本上应该在那里。在99%的情况下，这种说法基本正确。但事实是，它可能在任何地方。例如，也许它是一个带有装饰器的函数，而那个装饰器将其深藏在字典或其他地方。
- en: module because maybe it's a handler for root on a web server。 There are legitimate
    cases。 where that would happen， of course。 Maybe also the decorator has executed
    it and threw it， away。 So it's not even around anymore。 There's nothing to update。
    But in order to figure that， out。 you would basically need to explore the entire
    heap。 And ultimately， I don't think。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 模块，因为也许它是Web服务器上根的处理程序。当然，这种情况是合法的。也许装饰器也执行了它并将其丢弃。所以它甚至不在身边，无法更新。但为了弄清楚这一点，你基本上需要探索整个堆。最终，我觉得我并不认为。
- en: there is really any other solution to be thorough。 So I've basically done exactly
    that， but using。 the garbage collection module。 So using the GC module， you can
    get all the objects and。 basically find all the functions， cache their code objects，
    file and line number。 A priori。 that's pretty expensive。 But ideally， we would
    do it once at the beginning if the hot patching。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 其实并没有其他彻底的解决方案。所以我基本上就是这样做的，但使用了垃圾回收模块。通过使用GC模块，你可以获取所有对象，并基本上找到所有函数，缓存它们的代码对象、文件和行号。事先来看，这相当昂贵。但理想情况下，我们希望在热补丁的开始时只执行一次。
- en: module is imported early。 And in that case， that's not too bad。 But of course，
    it raises。 the question of what about modules that are loaded afterwards， right？
    Thankfully， this。 is kind of easier because we had the latitude to set things
    up。 One good way I have found。 to do this is to use the audit hook feature。 This
    is a feature that was added in Python， 3。8。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 模块是早期导入的。在这种情况下，这并不算太糟糕。但当然，它引出了一个问题，那就是后面加载的模块怎么办，对吧？幸运的是，这相对简单，因为我们有灵活性来设置事物。我发现一个很好的方法是使用审计钩子功能。这是Python
    3.8中新增的功能。
- en: Essentially， it is a way to listen for events about the Python runtime when
    we open， the file。 when we fork a process and so on。 And also， whenever we execute
    code。 So whenever。 a new module is imported or whenever we execute user code，
    there will be the exec audit event。 that will be triggered that you can watch
    for。 And it will give you the code objects prior。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，这是一个监听关于Python运行时事件的方法，当我们打开文件时，当我们分叉一个进程等等。同时，每当我们执行代码时。每当新模块被导入或执行用户代码时，都会触发exec审计事件，你可以进行监视。这将向你提供之前的代码对象。
- en: to execution。 So you can harvest the objects from there。 This is basically the
    simplest。 and easiest way to have found to do this。 But still， that's not entirely
    enough because。 we need to get a handle on every function object that points to
    that code object。 Now。 many function objects can have the same code object。 And
    even though we called get object， earlier。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 到执行。因此，你可以从那里获取对象。这基本上是找到的最简单、最容易的方法。但这仍然不完全足够，因为我们需要处理每个指向该代码对象的函数对象。现在，许多函数对象可以有相同的代码对象。尽管我们早些时候调用了获取对象。
- en: they may have been created afterwards。 But in this case， there is still the
    getrefers。 function in the GC module that will help us basically find all of them。
    Again， this operation。 is proportional to the number of objects in the heap， as
    I've found out。 But hot patching。 doesn't -- is not an operation that happens
    often。 And frankly， it needs to be really。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 可能是在之后创建的。但在这种情况下，GC模块中仍然有getrefers函数，它将帮助我们基本上找到它们。再次强调，这个操作与堆中对象的数量成比例，正如我发现的那样。但热补丁并不是一个经常发生的操作。坦白说，它需要真的。
- en: big before it is noticeable。 Now that we have everything， we can finally swap
    out the pointers。 and then we profit。 Now， are we done？ Well， there are still
    a few kinks to iron out， I， would say。 For example， if you only update code selectively
    for certain functions and。 they have a different number of lines than before，
    then any function that is unchanged。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在显著之前是很大的。现在我们拥有了一切，我们终于可以交换指针，然后获利。现在，我们完成了吗？嗯，我会说，还有一些小问题需要解决。例如，如果你仅为某些函数选择性地更新代码，并且它们的行数与之前不同，那么任何未更改的函数。
- en: but comes afterwards will now have the wrong line numbers in tracebacks。 So
    if we want to。 have the good line numbers and we certainly do， then we also need
    to do some more to update， these。 Another issue is that complex decorators that
    rely on code inspection or code signature。 inspection will fail。 So what I'm thinking
    of in this case are just in time compilers。 For example。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 但后面的内容将会在回溯中显示错误的行号。所以如果我们想要，好的行号，我们当然想要，那么我们还需要做更多的更新。另一个问题是依赖于代码检查或代码签名检查的复杂装饰器将会失败。所以我在这种情况下想到的是即时编译器。例如。
- en: jacks。 I'm also thinking about single or multiple dispatch libraries that， use，
    for example。 type annotations to do the dispatch。 And let me give you an example
    of， that。 So this is code that uses a multiple dispatch library that I've written
    called， OVLD。 which you can install with pip and try out if you want。 It's pretty
    cool。 So， yeah。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我还在考虑使用例如类型注释进行调度的单调或多调库。让我给你一个例子。这是使用我编写的名为OVLD的多调度库的代码，你可以用pip安装并尝试，如果你想的话。这非常酷。所以，是的。
- en: in this simple example， I basically define a function F that has two behaviors。
    So if。 the argument is an int， then it will do this multiplication and then there's
    a fallback。 function whenever it doesn't find a match that will just shrug。 So
    what happens if we。 change these definitions so that instead of an int， we will
    have a float here and we will。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个简单的例子中，我基本上定义了一个具有两种行为的函数F。所以如果参数是int，它将执行这个乘法，然后在没有找到匹配时有一个回退函数，它只会耸耸肩。那么如果我们更改这些定义，使其不再是int，而是float，我们将。
- en: add another dispatch so that we can do something special when the input is a
    string。 So ideally。 we want the behavior to be adjusted。 So that before when we
    called F with an int， we got。 100 but now there is no function for int。 So now
    it shrugs after the change and the same。 for float and for strings it goes from
    shrugging to being warm and welcoming。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 添加另一个调度，以便在输入是字符串时可以做一些特别的事情。所以理想情况下，我们希望行为能够调整。这样在我们用int调用F时，我们得到了100，但现在没有int的函数。所以在更改后它耸耸肩，而float和字符串则从耸肩变得温暖和热情。
- en: The problem is that we cannot simply recreate a new OVLD object because other
    references。 may exist and they would become out of sync and erroneous。 So we kind
    of want to update。 the existing object。 At the same time， if we are going to do
    that， we need to update。 the internal state of that object。 So if it has， for
    example， a cache of the name of a。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于我们不能简单地重建一个新的OVLD对象，因为可能存在其他引用，它们将变得不同步和错误。因此，我们想要更新现有对象。与此同时，如果我们要这样做，我们需要更新该对象的内部状态。所以如果它有，例如，一个名称的缓存。
- en: type to a function to call for that type， we need to update that。 And there's
    really。 no generic way that it could know how to do that。 It has to be a special
    code。 But what。 if we had a protocol that libraries could opt into？ I have made
    one which may not be。 perfect and the implementation might still be a bit buggy
    but here it is。 The idea is， this。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 类型到调用该类型的函数，我们需要更新它。实际上没有通用的方法可以知道如何做到这一点。它必须是一个特殊代码。但是如果我们有一个协议，让库可以选择加入呢？我做了一个，虽然可能不完美，实施可能还有点bug，但就是这样。这个想法是，
- en: When we have a code object and we search for the function that point to it，
    we could。 also search for a special kind of object。 For example， this kind of
    conformr object。 So。 when we do get refers， it will find this link between the
    function and the code。 And it will。 also find this link。 And if it sees that，
    it sees a link with an object that has a donder。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们有一个代码对象并且寻找指向它的函数时，我们也可以搜索一种特殊类型的对象。例如，这种符合对象。所以，当我们获取引用时，它将找到函数和代码之间的链接。并且它也会找到这个链接。如果它看到这一点，它会看到与一个具有donder的对象之间的链接。
- en: conform method， it would know that， okay， I have to call this with the new code。
    And。 then that object would know how to update the internal data structures of
    the other object。 which is neat。 I think this is a fairly nice way to do it because
    it avoids having a dependency。 on the hot patching library or any external library。
    You just need to define that object。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: conform方法，它会知道，好的，我必须用新代码调用这个。然后那个对象会知道如何更新另一个对象的内部数据结构。这很不错。我认为这是一种相当好的方法，因为它避免了对热补丁库或任何外部库的依赖。你只需定义那个对象。
- en: and connect the things properly and make sure that the reference to it is saved
    somewhere。 And then if we are doing live coding that will be helpful， otherwise
    it will just sit there。 and do nothing。 Right。 Okay。 So we're nearing the end。
    So something that I wanted to do。 is show you a bit how a jerk worked works。 So
    I'm going to。 Okay。 All right。 I assume。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 并正确连接事物，确保对它的引用被保存到某处。如果我们在进行实时编码，那将是有帮助的，否则它将仅仅坐在那里而无所事事。对吧？好的。所以我们快要结束了。我想做的事情是展示一下jerk是如何工作的。所以我将要。好的。好的，我假设。
- en: '![](img/9cf0e3ffc376b5a53f99c3d6be1cad31_6.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9cf0e3ffc376b5a53f99c3d6be1cad31_6.png)'
- en: that's big enough， I hope。 Okay。 So the way jerk worked is that it works exactly
    the same。 You can substitute the Python for it。 So instead of Python bottle。py，
    you can use jerk bottle。py。 I'm going to add the V flag so that it's verbose。
    And okay。 So here I have just the bottles。 of beer song that is being printed
    out。 But I can， if I want， change the code to be a。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该足够大。好的。所以jerk的工作方式是，它的工作方式完全相同。你可以用它来替代Python。因此，代替Python bottle.py，你可以使用jerk
    bottle.py。我将添加V标志，以便它是详细的。好的。所以这里我只是在打印啤酒瓶之歌。如果我想，我可以更改代码。
- en: bit more child friendly。 So now I have pints of milk instead of bottles of beer。
    I can。 do silly stuff。 And now it's a snake that's talking。 One thing I will mention
    is that if。 you cannot modify functions that are currently running， well， you
    can。 But the changes would。 only take effect after the second time you call it。
    So for example， I have updated this。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 更加适合儿童。所以现在我有牛奶瓶而不是啤酒瓶。我可以做一些愚蠢的事情。现在是一个会说话的蛇。我会提到的一点是，如果你不能修改当前正在运行的函数，那么你可以。但是更改只会在你第二次调用它时生效。例如，我更新了这个。
- en: here in the sing method， but it is still going one at a time because it is in
    the middle of。 executing sing。 But the next time I would call sing， it would adjust。
    I can change this。 though to go a bit faster。 So that is one way you can use jerk
    so on any existing program。 I also wanted a way to use it in a development setting
    where you're not necessarily organized， with。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在sing方法中，但它仍然是逐个执行，因为它正在执行sing。但是下次我调用sing时，它会调整。我可以改变这一点，以便稍微快一点。所以这是一种你可以在任何现有程序中使用jerk的方法。我还想在一个开发环境中使用它，在这里你并不一定是有组织的。
- en: where you didn't necessarily write your own loop and so on。 So I have this other
    example， here。 Okay。 So this is like just a simple example。 So the idea is that
    when we execute， this。 we get this little interface where everything that's on
    standard out is printed out。 And。 we also get the result here。 So of course I
    can change this here。 And it re-exacutes。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在你不一定自己写循环的情况下。所以我这里有另一个例子。好的。这就像一个简单的例子。所以想法是，当我们执行这个时，我们会得到这个小接口，所有在标准输出上的内容都会打印出来。我们在这里也得到了结果。所以当然我可以在这里更改它。它会重新执行。
- en: from the main function which I have specified on the comment line。 So you can
    specify any。 function in the module。 It will basically stop there and let you
    develop it restarting if， needed。 I can modify other functions like I can remove
    the sorting and then it doesn't， sort anymore。 I can do， if I do something that
    is an error like this， then it will show， me the error。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 从我在注释行中指定的主函数开始。你可以在模块中指定任何函数。它基本上会在那里停止，让你在需要时重新启动开发。我可以修改其他函数，比如我可以移除排序，然后它就不再排序了。如果我做一些错误的事情，它会显示错误。
- en: And I can fix it and it will run the thing again。 And then finally I can。 continue
    and then it will just continue the normal execution of the program。 Right。 Okay。
    I still have， still have a minute。 So the other thing I'm going to show you is
    snack， talk。 So this is something that I've built on top of， of Gureg。 Right。
    So this is an interface。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以修复它，然后它会再次运行这个程序。最后我可以继续，然后它将正常执行程序。对吧？好的，我还有一分钟。所以我要给你展示的另一件事是小吃，谈话。这是我在Gureg基础上构建的东西。对吧？这是一个接口。
- en: '![](img/9cf0e3ffc376b5a53f99c3d6be1cad31_8.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9cf0e3ffc376b5a53f99c3d6be1cad31_8.png)'
- en: where you can， well， you can print out arbitrary objects and they have like
    this graphical representation。 So that's a random colors function。 I can choose
    to edit it。 Okay。 That was actually the edit。 I wanted to make。 But yeah。 So，
    so yeah， I can basically change it and it will， and it will。 change the behavior。
    But I can also save it。 So， so you can see the coding original source。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以打印任意对象，它们有这样的图形表示。这是一个随机颜色函数。我可以选择编辑它。好的，实际上这就是我想做的编辑。但是是的，我基本上可以更改它，它会改变行为。但我也可以保存它。所以你可以看到编码的原始源文件。
- en: file here。 Once I've changed it here， I can choose to save it and then it saves
    it back。 into the original source file。 You can also use it to， I don't know，
    to edit， you know。 built-ins and stuff like that。 And you can even save them back。
    That's like the worst。 foot gun I've ever written。 But anyway， that's， that's
    basically it for that。 Okay。 So， right。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我在这里更改了它，我可以选择保存，然后它会保存回原始源文件。你也可以用它来编辑内置的东西之类的。而且你甚至可以把它们保存回来。这是我写过的最糟糕的脚枪。不过，总的来说，就是这样。好的，那么，对吧。
- en: So in conclusion， it is possible to add patch functions， methods， closures most
    of the time。 which is what I have implemented in Gureg。 It is also possible to
    implement multiple dispatch。 and code transforms via a protocol。 Here I have called
    it the Thunder Conform Protocol。 And I've implemented it in a separate library
    that I called CodeFind。 If anyone wants to。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，添加补丁功能、方法和闭包在大多数情况下是可能的，这就是我在Gureg中实现的。通过协议也可以实现多重调度和代码转换。我称之为“雷电一致性协议”，并在一个我称之为CodeFind的独立库中实现了它。如果有人想要的话。
- en: look at it， I would appreciate it。 So yeah， that's it。 Thank you。 If you want
    to have， the slides。 you can scan the QR code。 And also if you want to try out
    Gureg， I have also， a QR code for that。 So that's it。 Thank you very much。 [Applause]。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 看看这个，我会很感激的。所以，是的，就是这样。谢谢。如果你想要幻灯片，你可以扫描二维码。如果你想尝试Gureg，我也有一个二维码。所以就是这样。非常感谢。[掌声]。
- en: '![](img/9cf0e3ffc376b5a53f99c3d6be1cad31_10.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9cf0e3ffc376b5a53f99c3d6be1cad31_10.png)'
- en: '![](img/9cf0e3ffc376b5a53f99c3d6be1cad31_11.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9cf0e3ffc376b5a53f99c3d6be1cad31_11.png)'
