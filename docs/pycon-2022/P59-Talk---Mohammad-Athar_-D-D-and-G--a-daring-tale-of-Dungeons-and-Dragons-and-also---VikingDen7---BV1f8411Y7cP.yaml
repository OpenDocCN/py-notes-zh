- en: P59：Talk - Mohammad Athar_ D&D and G  a daring tale of Dungeons and Dragons
    and also - VikingDen7 - BV1f8411Y7cP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P59：演讲 - 穆罕默德·阿萨尔 D&D 和 G 一个关于龙与地下城的冒险故事，以及 - VikingDen7 - BV1f8411Y7cP
- en: Welcome back。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎回来。
- en: '![](img/6b3141a37cb667142feb0530e37d42aa_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b3141a37cb667142feb0530e37d42aa_1.png)'
- en: '![](img/6b3141a37cb667142feb0530e37d42aa_2.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b3141a37cb667142feb0530e37d42aa_2.png)'
- en: So we have second talk of the day， D and D and G， a dating tale of Dungans and
    dragons。 and also crafts by Mo Madata。 Over to you Mo。 Hey everybody， thanks for
    being patient with me。 It's hard to stand。 I'm usually not this rude。 Let's go
    ahead and get started。 Yeah。 so since I have mostly spent my career in large corporations
    and my brain is broken。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们今天的第二个演讲是关于 D&D 和 G，一个关于龙与地下城的约会故事，还有 Mo Madata 的工艺。请交给你了，Mo。大家好，感谢你们耐心等候。我站着很难受，我通常不会这么无礼。我们开始吧。是的，因为我大部分时间是在大型公司工作的，所以我的脑子有些混乱。
- en: I have to give you an agenda。 And we're just going to really quickly talk about
    myself。 I do some level setting about where you guys are at。 And then I'm going
    to very briefly introduce graphs and why they're really cool and why。 they matter。
    And then I'm going to talk about a handful of algorithms that I've divided into
    three。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我必须给你们一个议程。我们将非常快速地谈谈我自己。我会设定一下你们的水平。然后我会非常简要地介绍图形，以及它们为什么很酷，为什么重要。然后我会谈谈我将其分为三部分的一些算法。
- en: different classes。 So yeah， let's go ahead and dive in。 If you want to follow
    along in this presentation， you can check out my link tree。 It's just a Muhammad-Athar。
    And it's got a link to a PDF of the presentation and some other stuff。 I'll be
    adding to that， so check back occasionally。 So yeah， amongst my many， many interests。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的类。好吧，让我们深入探讨一下。如果你想在这个演讲中跟进，可以查看我的链接树。它就是 Muhammad-Athar，上面有演讲的 PDF 和其他一些内容的链接。我会不断添加，所以请偶尔回来查看。是的，在我众多的兴趣中。
- en: I really think graphs are neat。 Obviously I like Python。 I like drawing and
    DMing sometimes。 so this is a nice little intersection of all of those。 About
    you。 hopefully you've got some programming under your belt。 This isn't going to
    be a real coding heavy presentation。 So that should be all right。 If you don't。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我真的觉得图形很有趣。显然，我喜欢 Python。我喜欢画画和偶尔做 DM，所以这三者的结合很不错。关于你， 希望你已经有了一些编程基础。这不会是一个真正需要大量编码的演讲，所以应该没问题。如果没有的话。
- en: hopefully you're familiar with maps or dictionaries in Python。 Real basic object-oriented
    stuff。 nothing too hardcore there。 There will be some matrices here。 If you aren't
    familiar with those。 don't worry。 You can always circle back to them and learn
    them later or just don't use them and use something。 else because graphs are flexible
    like that。 So people who are familiar with graphs may recognize this map of the
    city of Kona'sburg。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你对 Python 中的地图或字典有所了解。这是非常基础的面向对象内容，没有什么太难的。这里会涉及一些矩阵。如果你不熟悉它们，也不用担心。你可以随时回过头来学习它们，或者不使用它们，使用其他东西，因为图形是灵活的。所以熟悉图形的人可能会认出这是科纳斯堡市的地图。
- en: And that's a classic problem in graph theory that presented a city separated
    by a river。 and in between the river or in the river there are two land masses。
    So that's four land masses connected by seven bridges。 The question was。 can you
    take a tour of the city and cross each bridge exactly once？
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是图论中的一个经典问题，呈现了一个被河流分隔的城市。在河流之间有两个陆地。因此，有四个陆地通过七座桥相连。问题是，你能否游览这个城市，并且每座桥恰好走一次？
- en: I'd rather motivate graphs by asking you about your friend group。 And if I was
    to ask you about your friend group， you probably wouldn't tell me like a。 bullet
    point list of their name and date of birth and height and stuff like that。 You're
    more likely going to tell me about their， you'll probably tell me a story of something，
    like。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我更愿意通过询问你的朋友圈来激励图形。如果我问你关于你的朋友圈，你可能不会告诉我他们的姓名、出生日期和身高等信息。你更可能会告诉我他们的故事。
- en: oh， this is my friend Alice who I met through a mutual friend Bob at a party
    thrown。 by Claire where I lost a whole bunch of money to my friend Dan and Ellen。
    And what that is is you're describing these people and the relationships you have
    with。 those people。 And that's what's really exciting about graphs is there are
    data structure that can codify。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，这是我的朋友艾丽斯，我通过一个共同的朋友鲍勃在克莱尔举办的派对上认识的，那时我输掉了很多钱给我的朋友丹和艾伦。你正在描述这些人和你与他们的关系。这就是图形令人兴奋的地方，因为它们是一种能够编码的数据信息结构。
- en: systems as entities and relationships。 And a lot of other data structures purport
    to do that but graphs treat these relationships。 as first class members and that's
    where their strength really lies。 And two special relationships that they can
    encode particularly well are directional relationships。 where for example a friendship
    type of relationship is too directional。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 系统作为实体和关系。许多其他数据结构声称可以做到这一点，但图将这些关系视为一等公民，这就是它们真正强大的地方。而且它们特别能够编码的两个特殊关系是方向关系。例如，友谊类型的关系是有方向的。
- en: If you're friends with someone， you kind of assume they're friends with you
    but if you're。 following someone say on Twitter or something like that， then they
    don't necessarily have。 to follow you。 And that's where graphs are really useful
    as far as encoding directional relationships。 There's also transitive relationships。
    And the example I like to use to motivate this is if an ad company made like a
    viral。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你和某人是朋友，你会假设他们也是你的朋友，但如果你在 Twitter 上关注某人之类的，他们并不一定要关注你。这就是图在编码方向关系时特别有用的地方。还有传递关系。我喜欢用的例子是，如果一个广告公司制作了一个病毒式的。
- en: video and then paid to put it up on Twitter。 And if you really liked it and
    you retweeted it but you weren't really in the market for。 their product， that
    ad campaign is a failure using classic analytics。 But if you dig a little deeper
    into this， your friend may have seen the video， been in the。 market for that product
    and bought it。 And so you can use graph analytics to encode those transitive relationships
    and dig a little。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 视频，然后付费在 Twitter 上发布它。如果你真的喜欢它并且转发了，但你并不真的想买他们的产品，那么这个广告活动在经典分析中是失败的。但是如果你深入挖掘一下，你的朋友可能看过这个视频，正好在考虑购买该产品并且买了它。因此，你可以使用图分析来编码这些传递关系并进一步挖掘。
- en: deeper into the success or failure of any particular ad campaign or other relationships。
    This is a more classic illustration of a graph。 It's essentially the more formal
    definition is that a graph is a collection of nodes and。 edges。 Those are just
    the fundamental atomic unit in a graph and then edges are pairs of nodes。 that
    represent a connection between them。 For example， we have the -- where's my cursor？
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 更深入地分析任何特定广告活动或其他关系的成功或失败。这是一个更经典的图的示例。它的本质上更正式的定义是，图是一组节点和边。那些只是图中的基本原子单位，边是表示它们之间连接的节点对。例如，我们有——我的光标在哪里？
- en: There it is。 Node A， C， B， and D here。 We have edges between them。 We can also
    have directed edges and that's just in a directed graph and your edges would。
    have to be ordered pairs then。 One thing I really want to talk about but couldn't
    figure out how to wedge into this。 conversation or into this presentation is paths
    and subgraphs。 They're really useful tools。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 找到了。节点 A，C，B 和 D。在它们之间有边。我们还可以有有向边，这仅在有向图中，你的边必须是有序对。我真的很想谈谈的一个事情，但不知道如何融入这个对话或演示的是路径和子图。它们是非常有用的工具。
- en: So if you're doing graph analytics， you'll definitely want to be familiar with
    that。 And a path is just what it sounds like。 It's just a collection of nodes
    and you get a -- oh。 I lost my cursor。 There it is。 You get a starting node and
    an ending node and you get a path through other nodes to get。 to that ending node。
    And then a subgraph is just a portion of a graph。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果你在做图分析，你一定想熟悉这一点。路径就是它听起来的意思。它只是一组节点，你会得到一个——哦。我找不到我的光标。找到了。你得到一个起始节点和一个结束节点，并通过其他节点到达那个结束节点。然后子图只是图的一部分。
- en: And so these will be really useful if you ever do graph analytics more but the
    last。 little awkward thing that I want to cover is labels which are a way to describe
    the class。 of a node。 So for example， in this graph， we've got either servers
    or clients and that's a label。 But you can also add a property to any graph and
    that's any other information and that's。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果你在做图分析时，这些将非常有用，但我想提到的最后一个稍微尴尬的事情是标签，它们是一种描述节点类别的方法。例如，在这个图中，我们有服务器或客户端，那就是一个标签。但是你也可以向任何图添加一个属性，那就是任何其他信息，且。
- en: where the real strength of graphs comes in because you can add a name or a model
    or the。 amount of free space on a particular machine or the latency between two
    machines and stuff。 like that and really start doing some really cool analytics
    and exploit your data a little， further。 As far as applications， they're everywhere。
    If you're here。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是图的真正优势所在，因为你可以添加名称、模型、特定机器上的空闲空间量或两台机器之间的延迟等内容，并真正开始进行一些很酷的分析，进一步挖掘你的数据。就应用而言，它们无处不在。如果你在这里。
- en: hopefully you're already excited about that。 But you've probably seen them in，
    you know， map。 social networks， puzzle solving and state， spaces， disease propagation，
    communication。 I'm not going to read this。 You guys can read it later。 It's everywhere。
    Okay。 so this is PyCon so I'm going to very briefly cover representing graphs
    in Python。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你已经对此感到兴奋。但你可能已经在地图、社交网络、难题求解、状态空间、疾病传播、通信中见过它们。我不会读这个。你们可以稍后阅读。它无处不在。好的，这是
    PyCon，所以我将非常简要地介绍如何在 Python 中表示图。
- en: You can use either an adjacency or degree matrix， an edge list， a dictionary
    or you can use。 packages like network X。 And so when you have a matrix representation。
    a matrix is just really a table of numbers。 You let your rows represent the from
    node and your columns represent the to node。 So for example， you know， we got
    the number two over here。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用邻接矩阵或度矩阵、边列表、字典，或者你可以使用像 network X 这样的包。因此，当你有一个矩阵表示时，矩阵实际上只是一个数字表。你让行表示起始节点，列表示目标节点。例如，你知道，我们在这里得到了数字二。
- en: So that's from a to D and we have two edges from A to D。 So the number in the
    table represents。 the number of edges。 You'll see that along the diagonal， there's
    no。 there's all zeros because none of these， nodes connect to themselves。 And
    one more thing is you'll see that this matrix is symmetric。 For example。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这是从 A 到 D，我们有两条边从 A 到 D。因此，表格中的数字表示边的数量。你会看到沿对角线的地方，全是零，因为这些节点没有连接到自己。还有一件事是，你会发现这个矩阵是对称的。例如。
- en: from A to B is one but from B to A is also one because there's one edge from。
    A to B and from B to A because this graph is undirected。 Just be careful if you're
    using directed graphs because the matrix won't be symmetric and certain。 assumptions
    fall apart。 And that just looks like a list in Python。 If you want to get fancy。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 从 A 到 B 是一条边，但从 B 到 A 也是一条边，因为从 A 到 B 和从 B 到 A 各有一条边，因为这个图是无向的。如果你在使用有向图，请小心，因为矩阵不会是对称的，某些假设会崩溃。这在
    Python 中看起来就像一个列表。如果你想变得复杂一些。
- en: you can use a NumPy array。 You can also just use an edge list which is just
    pairs。 One thing to note here is that I've got the edge CD in here twice。 Because
    there are two edges from C to D。 D dictionaries are nice。 They're better for directed
    graphs。 There's a lot of redundancy in this one because I want to represent the
    same graph over and。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 NumPy 数组。你也可以只使用边列表，它只是成对出现。需要注意的一点是，我在这里两次写了边 CD，因为从 C 到 D 有两条边。字典很不错。它们更适合有向图。在这一个中有很多冗余，因为我想表示同一个图。
- en: over。 But they're also nice because you can use any hashable object as the key
    to your dictionary。 So depending on how you write up a custom node class， you
    can just use that object as the。 key and just have a list of the actual nodes。
    Or you can make your own custom-made node objects and your own graph objects and
    throw。 your logic in there。 As much as I love graphs， they aren't great for everything。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 但是它们也很不错，因为你可以使用任何可哈希对象作为字典的键。因此，取决于你如何编写自定义节点类，你可以直接使用该对象作为键，并只拥有实际节点的列表。或者你可以制作自己的自定义节点对象和图对象，并将你的逻辑放在里面。尽管我非常喜欢图，但它们并不适合所有情况。
- en: If you're exploring graphs and graph databases especially， avoid them if you've
    got a lot。 of rights if you have a right heavy system。 Or if you're querying large
    parts of a database。 you lose a lot of the efficiencies that graphs， provide。
    So let's go ahead and dive in。 That's right。 Quick disclaimer。 D&D is inherently
    racist。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在探索图和图数据库，特别是，如果你的写操作很多，或者你在查询数据库的大部分内容，最好避免使用它们。你会失去很多图所提供的效率。那么让我们开始吧。没错，快速免责声明。D&D
    本质上是种族主义的。
- en: This is something that Wizards of the Coast is addressing， but it's baked in
    there。 So that's something that bothers you。 I've tried very hard to not have
    representations like that in here。 but I'm not perfect。 So if it does， please
    let me know because I'm always trying to be better。 It's not inherently violent，
    but there sometimes tends to be violence in D&D adventures。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这是《海岸巫师》正在解决的问题，但这已经根深蒂固了。因此，这让你感到困扰。我非常努力地避免在这里出现这样的表现形式，但我不是完美的。如果确实出现了，请告诉我，因为我一直在努力变得更好。它本质上并不暴力，但在
    D&D 冒险中有时会出现暴力。
- en: So I've also tried to minimize that。 Okay， let's go ahead and get started。 So
    you meet in the tavern and you want to get a logger because it hails a gross。
    The bar is all the way up here， but you're all the way down here。 So you need
    to get through this very busy bar。 You're like， you know what？ No problem。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我也尝试去最小化这个。好吧，我们开始吧。你们在酒馆里相聚，你想要得到一个伐木工，因为外面下着大雪。酒吧就在这里的最上方，而你们却在这里的最下方。因此，你需要穿过这个非常繁忙的酒吧。你心想，这没问题。
- en: I'm just going to start walking， but you come to a fork in the road。 And so
    now you're like， oh man。 okay， well， I'm just going to go down a random fork。
    I don't know， whichever one。 but that means you end up hitting a dead end， right？
    Because you run into this nice， I don't know。 it's like a dog， woman， person。
    This is the only picture I didn't draw。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我就要开始走了，但你来到了一个分叉路口。于是你想，哦，天哪。好吧，我就随机选择一条分叉。我不知道，随便哪一条。但这意味着你会走入死胡同，对吧？因为你碰到了这个，我不知道的美好东西。就像一只狗，一个女人，一个人。这是我唯一没有画的图。
- en: so I don't know everything in it。 The guy I did credit him in the first one，
    Noah QH， check him out。 you know， support artists。 So yeah， anyways， you run into
    this obstacle。 so you end up backtracking to the intersection， and you go down
    one of the other options in the fork in the road。 And you basically can keep doing
    that until you get to the bar。 And in the worst case scenario。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我并不知道里面的所有事情。我在第一幅图中给了那个家伙信用，诺亚·QH，去看看他。你知道，支持艺术家。所以，嗯，你碰到了这个障碍。于是你回到了交叉口，走了分叉路口的其他选项。基本上你可以一直这样做，直到你到达酒吧。在最坏的情况下。
- en: your triple looks something like this。 You start over here。 you come to an intersection
    and you just make a decision， and if that decision。 leads you to a dead end， then
    you backtrack and you try another path。 And this is known as depth-first search。
    Oh， just kidding， I need to practice more。 First。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你的三元组看起来像这样。你从这里开始。你来到一个交叉口，然后你做出一个决定，如果这个决定导致你走入死胡同，那么你就返回并尝试另一条路径。这被称为深度优先搜索。哦，开玩笑的，我需要更多练习。首先。
- en: I'm going to tell you about converting maps to graphs。 You can treat the corridors
    as edges and entities and the intersections as nodes。 And so this is sort of less
    naturally than a lot of other things， but does naturally turn。 into a graph。 And
    so you've got your nodes that I've just labeled alphabetically and then dead end
    nodes。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我要告诉你如何将地图转换为图。你可以把走廊看作边，把交叉口看作节点。因此，这比许多其他事情更不自然，但确实自然地转化为图。所以你有我刚刚用字母标记的节点，以及死胡同节点。
- en: that I've just labeled as an X。 And then you have your edges connecting those
    nodes。 And you can use depth-first search， which is a nice， simple recursive algorithm
    that。 is quick to implement， easy to use。 Yaddiata。 Yeah， I can run through this。
    Do we have time？ Yeah。 we got time。 Okay。 The way depth-first search runs， it's
    recursive， right？
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我刚刚标记为一个 X。然后你有连接这些节点的边。你可以使用深度优先搜索，这是一种简单的递归算法，快速实现，易于使用。是的，我可以讲解一下。我们还有时间吗？是的，我们有时间。好的。深度优先搜索的运行方式是递归的，对吧？
- en: So you always kind of want to put that end condition there at the beginning。
    And then one little gotcha that always threw me off is to make sure you mark your
    current。 node is visited。 Just the way these algorithms work is they will build
    lists of unvisited nodes。 And if you don't mark them as visited， you're going
    to end up going in loops。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你总是想在开始时放置结束条件。还有一个总是让我困惑的小细节是要确保你标记当前节点为已访问。正是这些算法的工作方式，它们会建立未访问节点的列表。如果你不将它们标记为已访问，你将陷入循环。
- en: And then you basically just check every node。 If it is the target node， you
    know。 just recurse into it。 So what that looks like， I wanted to go through just
    one or two iterations here。 we'll， start at the node down at the bottom that we've
    marked as visited。 It's not the endpoint。 So we're going to mark it as visited。
    And then we're going to check every one of its unvisited neighbors。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你基本上只需检查每个节点。如果它是目标节点，你就知道了。只需递归进入它。因此，我想在这里逐一讲解一两个迭代。我们将从底部的节点开始，该节点已标记为已访问。它不是终点。因此，我们将其标记为已访问。然后我们将检查它的每一个未访问的邻居。
- en: right？ And we're going to perform DFS by going basically to the top of this。
    And this isn't the endpoint。 So we're not going to return true here。 We are going
    to mark it as visited。 And then for every one of its neighbors。 we're going to
    just recurse further in。 And so eventually you end up recursing through the whole
    thing and getting to the end。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对吧？我们将通过基本上到达顶部来执行深度优先搜索。这不是终点。因此我们在这里不会返回true。我们将其标记为已访问。然后对于它的每一个邻居，我们将进一步递归。因此，最终你会遍历整个过程并到达终点。
- en: And you can finally order a beer。 Or a non-alcoholic beer if you're under 21
    in America。 But as you're ordering your beer， a little street urchin comes up
    to you and asks you， for help。 And you're like， oh， you know what？ I'm there。
    I'm here to answer the call to adventure。 And you get kicked out of the bar for
    drawing a weapon in the middle of a bar。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你终于可以点一杯啤酒。如果你在美国未满21岁，还可以点一杯无酒精啤酒。但是当你点啤酒时，一个小街头流浪儿走过来请求你的帮助。你心想，哦，你知道吗？我来了。我在这里回答冒险的召唤。结果你因在酒吧中间拔出武器而被赶出酒吧。
- en: And everybody's just trying to have a good time。 So he leads you to the sewers
    where there's been trouble。 But it's locked。 So you're like， ah， I got to find
    a key。 And he's all like， you know what。 don't worry。 I think either Alice or
    Bob have the key。 It's weird town。 Everyone's names are alphabetically ordered。
    So you're like， you know what？ That's fine。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 每个人都只是想玩得开心。因此他带你去下水道，那里的情况很糟。但它被锁住了。你心想，啊，我得找到一把钥匙。他说，别担心。我觉得爱丽丝或鲍勃有钥匙。这是个奇怪的城镇，每个人的名字都是按字母顺序排列的。所以你心想，没问题。
- en: I'll just go ask Alice and see if she's got the key。 And Alice is like， I don't
    have the key。 But maybe you can ask Carmen or Dev。 And you're like， OK， you know
    what？ That's fine。 But first I got to ask Bob。 And Bob is like， I don't have the
    key either and my face looks like toast。 So maybe ask Ellen。 And so then you're
    like， all right， I'm going to add Ellen to my list。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我去问爱丽丝，看看她是否有钥匙。爱丽丝说，我没有钥匙。但也许你可以问卡门或德夫。你心想，好的，没问题。但我首先得去问鲍勃。鲍勃说，我也没有钥匙，我的脸看起来像吐司。所以也许去问艾伦。然后你心想，好吧，我要把艾伦加到我的名单上。
- en: But I first got to go see Carmen。 And Carmen is like， I don't have the key either。
    Go ask Bob。 And this is where things start running circles。 And you're like， this
    is ridiculous。 Why am I just going down the list like this， asking people when
    I have the magic of graphs。 to help me organize this search？ And so if we revisit
    this search by treating people as nodes。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 但我首先得去找卡门。卡门说，我也没有钥匙。去问鲍勃吧。这时事情开始循环。你心想，这太荒谬了。我为什么要这样逐一询问，明明有图的魔力可以帮助我整理这个搜索？所以如果我们把这个搜索重新审视，把人当作节点。
- en: the edges between each node， represent the relationships between those people。
    So this could be relationships like Alice Knows Bob， Alice Follows Bob， or Alice
    and Bob。 are friends with each other。 Or Alice thinks Bob has the key。 which is
    the relationship we're going to use。 So let's revisit this problem using-- oh，
    man。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 每个节点之间的边代表了这些人之间的关系。这可能是诸如“爱丽丝认识鲍勃”、“爱丽丝关注鲍勃”或“爱丽丝和鲍勃是朋友”之类的关系。或者“爱丽丝认为鲍勃有钥匙”，这就是我们将要使用的关系。所以让我们用——哦，天哪，再次审视这个问题。
- en: I have 15 minutes left。 Holy cow。 I thought this was a 45-minute presentation。
    Dang。 Guys。 breath first search is great。 Do it。 All right。 So one thing。 you
    want to make sure your mark your nose is visited。 This is actually-- yeah。 you're
    crossing them off off the top。 So when Carmen finally tells you to go visit Bob，
    you're like。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我还有15分钟。哇，我以为这是一个45分钟的演讲。哎呀，伙计们，广度优先搜索太棒了。去做吧。好吧，有一件事，你要确保标记你的节点为已访问。这实际上是——是的。你在顶部划掉它们。因此当卡门终于告诉你去找鲍勃时，你会想。
- en: ha， I already took care， of that。 You're like， I'm not going to be in a trip，
    dog。 And then what else do you need to know about breath first search？ Oh， this
    is cool too。 because as you're solving a problem， you can build the graph on the
    fly。 So that's cool。 You don't have to know everything about the graph as you're
    solving whatever problem。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 哈，我已经处理好了。你会说，我可不会再被困住，伙计。那么，你还需要了解广度优先搜索的什么呢？哦，这也很酷，因为在解决问题时，你可以即时构建图形。所以这很棒。在你解决任何问题时，不必了解图的所有信息。
- en: you're solving。 And that's another thing I really like about graphs is they
    are more than any other day。 base really open to modifying things on the fly。
    That's breath first search。 Breath first search。 Everyone knows it。 Look it up。
    So yeah， your mark knows it's visited。 This is another thing。 This is what depth
    first search would look like along this network。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你正在解决的问题。还有一件我很喜欢的事情是，图比任何其他数据库都更能灵活修改。这就是广度优先搜索。广度优先搜索，大家都知道。查一下。所以，是的，你的标记已被访问。这是另一件事。这就是在这个网络上深度优先搜索的样子。
- en: And then this is what breadth first search would look like。 And it's cool。 because
    you can kind of get to whatever solution in as few as jumps as， possible。 Whereas
    with depth first search， you kind of have to go to the end of a particular path。
    So that's definitely something you want to keep in your back pocket， is breadth
    first。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，这就是广度优先搜索的样子。它很酷，因为你可以在尽可能少的跳跃中找到解决方案。而对于深度优先搜索，你必须走到特定路径的尽头。所以，广度优先搜索绝对是你要记住的一项技能。
- en: search is the way to go for most simple things。 So you get the key。 Are in the
    sewer， there's a map。 And you're like， you know what？ No problem。 I've already
    converted maps to graphs。 And I've done breadth first search。 I can get there
    in two hops。 Easy。 And so you run off and the kids looking at you like you're
    an idiot。 And he beats you there。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数简单问题，搜索是最有效的方式。你找到了钥匙，身处下水道，有一张地图。你心想，没问题。我已经把地图转换成图形了。而且我做过广度优先搜索。我可以在两个跳跃内到达那里，简单。所以你就跑去，孩子们看着你像个傻瓜，而他却比你先到了。
- en: And you're like， what？ And he's like， I know a faster way from a wizard named
    Dykstra。 Because you didn't think about the path lengths。 And so if you consider
    the path lengths。 you can get a faster path。 Just because if you go from S to
    A to B。 you're going to go along this big corridor versus， if you take a little
    detour from S to A to E。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你会想，什么？他会说，我知道一个来自巫师迪克斯特拉的更快的方法。因为你没有考虑路径长度。如果你考虑路径长度，你可以找到更快的路径。因为如果你从S到A再到B，你会走过这个大走廊，而如果你从S到A再到E，你就会走一条小绕路。
- en: If you take a detour from S to A to B， you， can take B to E， which is shorter。
    And that's a really great algorithm that I'd love to talk you through some time。
    But there it is。 This is all in the PowerPoint。 I-- yeah。 If you guys want to
    know about it。 that's one thing about this is you just want to repeat。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从S到A再到B绕道，你可以从B到E，这样更短。这是一个很棒的算法，我希望有时间能和你讨论。但这就是了，所有内容都在PPT中。如果你们想知道，这就是要重复的一件事。
- en: it until you mark your targeted note as visited。 It's a little gotcha if you're
    doing Dykstra。 Don't end too early。 And then you go into the evil guy's lair and
    you make batman noises。 And you find a-- turns out this guy wasn't really a big
    bat。 He's just a messenger。 And so now you have a whole list of people-- or a
    whole bunch of messages that people。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 直到你将目标节点标记为已访问。这是进行迪克斯特拉时的小陷阱。不要太早结束。然后你进入恶棍的巢穴，发出蝙蝠侠的声音，发现这家伙并不是一只大蝙蝠，他只是个信使。因此，现在你有了一整张人际关系名单，或者说是一堆信息。
- en: have been sending to each other。 And so you say Frank's message and Gina， Gina's
    message and Hector。 and so on and so， on。 And that's getting real confusing。 So
    you turn it into a graph。 And now you sort of got a message graph saying like，
    oh， these people are messaging these， people。 And it doesn't get confusing at
    all because graphs make the problem a lot more simple。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 彼此发送的消息。因此你会说弗兰克的消息，吉娜的消息，赫克托的消息，等等，这就变得非常混乱。所以你把它变成一个图形。现在你有了一张消息图，说明这些人正在给这些人发消息。这样就不会混淆，因为图形使问题变得简单得多。
- en: to illustrate。 So it looks something like this instead of just a bullet point
    list。 And so the algorithms you can use here are-- yeah， how do you determine
    like who's actually。 in charge of this network？ There's a lot of different algorithms
    for this。 There's sort of two classes is articulation points， which sort of tell
    you what node or。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 所以它看起来像这样，而不是仅仅是一个项目符号列表。因此，你可以在这里使用的算法是——是的，你如何确定谁实际上掌控这个网络？对此有很多不同的算法。大致上有两个类别，即关节点，它们告诉你哪个节点或。
- en: edge you can remove to separate the graph completely from each other， like basically。
    turn in two graphs， two separate graphs， or one disconnected graph。 Those are
    great if you have a point like that。 But those don't always exist。 So another
    tool you can use is centrality， which is just determining a node's influence。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以删除一条边，完全将图从彼此分开，基本上变成两个图，两个独立的图，或者一个不连通的图。如果你有这样的点，那是很好的。但这些并不总是存在。因此你可以使用的另一个工具是中心性，它只是确定一个节点的影响力。
- en: I'm going to use degree centrality because it's really easy to calculate。 It's
    literally just counting the degrees per node。 And so you can normalize it by n
    minus 1。 The number of nodes minus 1。 That's the maximum number of connections
    any node can have。 And so that ends up looking like this。 And so then you can
    take out someone that's sort of at the center。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我将使用度中心性，因为计算起来真的很简单。它只是逐个节点计算度数。因此你可以用n减1来归一化。节点数减去1。这是任何节点可以拥有的最大连接数。因此它最终看起来像这样。然后你可以去掉一个在中心的节点来说明。
- en: a high influence the， person。 There's a lot of other centralities。 Degree centrality
    is just the most simple one。 You definitely want to look at other ones。 And so
    you go and you make more batman noises。 And you get a big bag of money and you
    go to the mayor and they're like。 yes， this is， great。 I can finally fund the
    town。 But I don't know how to distribute it。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一个影响力很高的人。有很多其他的中心性。度中心性只是最简单的一个。你肯定想看看其他的。因此你去做更多的蝙蝠侠声音。然后你拿着一大袋钱去找市长，他们说，是的，这很好。我终于可以为城镇提供资金。但我不知道怎么分配。
- en: And this is our town charter。 And we have to fund all these things。 And I don't
    know where to start。 And so you can use community detection， which is another
    class of algorithms。 I'm only going to go over primes because I have like zero
    time。 But basically you take that charter and every entity in the charter， you
    turn it into its， own node。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的城镇章程。我们必须为所有这些事情提供资金。而我不知道从哪里开始。因此你可以使用社区检测，这是另一类算法。我只会讲素数，因为我几乎没有时间。但基本上你把章程中的每个实体变成自己的节点。
- en: So you've got entity 1， 1 is the mayor， 1， 2 is the mayor's aide， et cetera。
    And then you connect them by basically saying， oh， are they mentioned in the same
    section。 of the charter？ And then you can keep connecting them a little more loosely
    by saying， okay。 if they're mentioned， at all in the charter， that's not as strong
    a connection， right？
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你有实体1，1是市长，1，2是市长的助手，等等。然后你通过基本上问，他们是否在章程的同一部分中提到来连接它们。然后你可以稍微松散地连接它们，说，好吧。如果他们在章程中有提到，那连接就没有那么强，对吧？
- en: So I want to be aware of that。 And I'm going to wait that connection by 2 to
    just sort of say like。 oh， these entities， are a little more distant from each
    other， according to the charter。 So then you have a list of edges and their weight。
    And I actually， yeah。 I ordered them by their edge weight because you need to
    for primes。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我想对此有所了解。我将这条连接的权重设为2，以表示，根据章程，这些实体之间的距离稍微远一点。然后你就有了一份边和它们的权重的列表。实际上，我是的，我按边权重对它们进行了排序，因为你需要这样做来处理素数。
- en: algorithm because you basically take out all the nodes and you start adding
    or you take。 out all the edges and you start adding edges back to your graph until
    you get what's known。 as a spanning tree。 And that's what this looks like。 You
    add an edge and then you add an edge and then you're just going through your ordered。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 算法，因为你基本上去掉所有节点，然后开始添加，或者你去掉所有边，然后开始将边添加回你的图中，直到你得到一个被称为生成树的东西。这看起来就是这样。你添加一条边，然后再添加一条边，然后你就按照顺序进行。
- en: list of edges ordered by weight。 But if you do that， right。 you may end up getting
    a loop which is contrary to what a。 tree is because we're trying to get a graph
    that has the minimum weight while still being。 fully connected。 So we don't actually
    need this one。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 按权重排序的边列表。但如果你这样做，对吧。你可能最终会得到一个环，这与树的定义相悖，因为我们试图得到一个具有最小权重同时又完全连接的图。因此我们实际上不需要这个。
- en: We can just remove that and we keep doing this process and we end up connecting
    the graph。 with what's known as a minimum spanning tree。 And then we can start
    removing edges to build out the community detection algorithm。 And that is basically
    just going backwards until the desired number of groups is achieved。 So we're
    going to take out the edge AF and the edge BF。 And now we have three communities，
    right？
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以直接删除这个，我们继续这个过程，最终将图连接成一个被称为最小生成树的结构。然后我们可以开始删除边缘，以构建社区检测算法。这基本上就是倒着进行，直到达到所需的组数。所以我们将删除边缘AF和边缘BF。现在我们有三个社区，对吧？
- en: And we end up funding the mayor's office and the mayor's aid equally as much
    as water。 well maintenance roads， animal crossing， fire medical and hazardous
    magic because graphs。 are not a silver bullet。 So one thing I did want to talk
    about is your algorithms only work the way they're supposed。 to。 And so if they，
    you should always ask yourself what kind of results do I expect before running。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最终为市长办公室和市长助理的资金与水务、道路维护、动物越境、消防医疗和危险魔法同样多，因为图形并不是银弹。因此我想说的一件事是，你的算法只有在它们应该工作的情况下才能运行。所以如果它们，你应该总是问自己在运行之前我期待什么样的结果。
- en: any algorithm？ And this was， yeah， no， I'm not going to share that anecdote。
    That's fine。 Basically you want to know what success and failure looks like before
    you run an algorithm， right？
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 有什么算法吗？这件事，嗯，我不会分享那个轶事。没关系。基本上，你想在运行算法之前知道成功和失败的样子，对吧？
- en: And if you don't get results that you expected， check if it's implemented correctly。
    Check if there's similar algorithms。 I did mention there's a lot of community
    detection algorithms out there。 Try it。 And then lastly， redefine what a node
    or edge is because maybe this arbitrary relationship。 of being in the same paragraph
    that charter that doesn't really encode any useful information。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有得到预期的结果，请检查是否正确实现。检查是否有类似的算法。我确实提到过有很多社区检测算法。试试看。最后，重新定义一下什么是节点或边，因为也许在同一段落中的任意关系并没有编码任何有用的信息。
- en: right？ So， wow， I made it on time。 I still have time to spare。 Great。 I practiced
    this like five times and thought I got it。 But， you know。 when you're up here
    and the lights are shining， time doesn't matter。 But I just wanted to leave you
    guys with a few little things。 Graphs are great and， oh。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 对吧？所以，哇，我准时到了。我还有时间剩下。太好了。我练习了大约五次，觉得我掌握了。但是，你知道，当你站在这里，灯光照耀时，时间就不重要了。但我只是想给你们留下一些小东西。图表很棒，哦。
- en: can't cross your arms over the mic。 They're really great because they encode
    systems as entities and relationships。 If you don't walk away with any other algorithm
    today， check out breadth for a search。 It's really useful。 You can use it for
    a lot of different things。 They're also very resilient to on-the-fly changes。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 不能把手臂交叉在麦克风上。它们真的很棒，因为它们将系统编码为实体和关系。如果今天你没有学到其他算法，至少要看看广度优先搜索。它真的很有用。你可以用它做很多不同的事情。它们对即时变化也非常有弹性。
- en: You can add information to your graph or to any node or edge in your database
    without。 having to update the entire thing without having to， you know， rewrite
    schemas and stuff。 The sort of three big classes of algorithms， we went through
    our paths， connections， communities。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在数据库中向你的图形或任何节点或边添加信息，而不必更新整个内容，不必，你知道，重写模式等等。我们经过的三大类算法是路径、连接和社区。
- en: '![](img/6b3141a37cb667142feb0530e37d42aa_4.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b3141a37cb667142feb0530e37d42aa_4.png)'
- en: There's a lot of different stuff out there。 So， definitely check it out yourself。
    Check out my link tree。 It's got my GitHub on there that I thought I could populate
    between when my plane landed。 last night and now， but I will definitely have it
    populated later this week with more resources。 for you guys to look through。 Great。
    I can't believe I made it with time to spare。 Look at that。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 外面有很多不同的东西。所以，肯定自己去看看。查看我的链接树。里面有我的GitHub，我本来想在昨晚我的飞机着陆和现在之间填充一些内容，但我肯定会在本周晚些时候添加更多资源，供你们查阅。太好了。我真不敢相信我还有时间剩下。看看那。
- en: You have five minutes of your life back。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你们又有了五分钟的生命。
- en: '![](img/6b3141a37cb667142feb0530e37d42aa_6.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b3141a37cb667142feb0530e37d42aa_6.png)'
- en: Thanks for watching。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 谢谢观看。
