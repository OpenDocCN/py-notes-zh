- en: P56：Talk - Mason Egger_ Write Docs Devs Love_ Ten Tips To Level Up Your Tech
    Writing - VikingDen7 - BV1f8411Y7cP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All right， folks， thank you very much for the last talk of this session。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7fb412e9cd3a788de3d78d39723b5295_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
- en: '![](img/7fb412e9cd3a788de3d78d39723b5295_2.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
- en: If you get a chance， download the QR code。 That's the download。 Photograph it，
    take a picture of it。 These slides are amazing。 So you'll want to have an extra
    copy。 You can peruse them while you're watching the talk。 Zoom in on them if you'd
    like to feel like that。 But I'll give you an extra minute to do that and hopefully
    you won't overload the Wi-Fi。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: And with that being said， I'm going to do Smase and Edgar and he's going to
    teach us。 how to write Doc's Dev's love。 Ten tricks to level up your tech writing。
    Take it away。 Awesome。 Thank you， everyone。 How's everyone going？ This is my first
    in-person conference talk since 2019。 It's great to be back。 Yes， these slides
    are dense。 I have a lot of information on them。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: So if you want to follow along， I know that it's going to be hard to see from
    the back。 to be able to follow along from there。 So yeah， first， who am I？ My
    name is Mason Edgar。 I am a developer advocate at Gretel， which is a synthetic
    data company。 Talk about that later。 Prior to my work at Gretel， I was a developer
    advocate and community author on a digital， ocean。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: which is where I learned a lot of everything that I'm about to teach you today。
    If you've never seen or used digital ocean tutorials， they're fantastic。 There
    was a lot of great people there that taught me a lot about documentation， and。
    I want to share that with you。 So just to kind of set the stage a little bit，
    start out。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: let's talk about what is tech writing。 So think about that feeling you get when
    you follow an online tutorial。 you know， you're， copying and pasting the code
    blocks， you're executing stuff。 and it just magically works， on the first run。
    You don't have to go hunt anything down。 It just works。 And you're like， wow，
    that's amazing。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: And then think about all the time you've wasted hunting down documentation that
    doesn't， work。 You know， it forgot a step。 Something's missing。 You just doesn't
    work at all。 And now you're frustrated and you don't know what to do and you have
    to go Google。 It's not good docs。 So what is the difference between the two of
    those？ You know。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: what made one successful and what made the other one unsuccessful？
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: And we're going to talk about that in this talk today。 And just a quick high
    level overview。 I like defining things。 Technical writing is instructional or
    informative writing that focuses on how to accomplish a。 task using a specific
    tool。 So why is technical writing important？ Well。 technical writing is very important
    because it's usually the first impression that。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: someone has of your project。 If someone goes to your project， tries to use it。
    can't figure out the docs， usually， within a couple of minutes， they're going
    to go somewhere else。 There are very few libraries in the world that are the only
    library on earth that do， it。 So your docs are actually one of your first levels
    of marketing and getting people to。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有人去你的项目，尝试使用它，却无法弄清楚文档，通常在几分钟内，他们会去别的地方。世界上很少有库是唯一可以做到这一点的。因此，你的文档实际上是你营销和吸引人们的第一步。
- en: use your product， your open source project or anything。 Your technical docs
    teach people how to use your project or your code。 And if you're not teaching
    people how to use it， what are you doing？ You know。 you kind of need to have it
    there。 When was the last time that you found out about a new project just by looking
    at code。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 使用你的产品、开源项目或其他任何东西。你的技术文档教人们如何使用你的项目或代码。如果你不教人们如何使用它，那你在做什么？你知道，你需要把它放在那里。你上次是如何通过查看代码发现新项目的？
- en: by going to GitHub and opening up somebody's app。py， the read me doesn't count，
    the read。 me your technical docs。 Very few people will actually find new projects
    and new code by opening up GitHub and reading。 source code。 If you do， congrats，
    I applaud you， but most of the world doesn't do it that way。 Technical documentation
    teaches users how to use your project effectively and safely。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 是通过去 GitHub 打开某人的 app.py，读我不算，读我你的技术文档。实际上，很少有人会通过打开 GitHub 阅读源代码来找到新项目和新代码。如果你这样做，恭喜你，我为你喝彩，但大多数人不是这样做的。技术文档教用户如何有效且安全地使用你的项目。
- en: Imagine you were filling up your tire and the documentation said， fill up the
    tire with。 air or fill up the tire with air to 35 psi。 If you， that last part，
    if you don't have that。 could lead to some disastrous efforts， if you don't include
    it。 So having technical writing helps you build community around your project。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下你在给轮胎充气，文档上写着，给轮胎充气，或者给轮胎充气到 35 psi。如果没有最后那部分，可能会导致一些灾难性的后果。因此，拥有技术写作可以帮助你围绕你的项目建立社区。
- en: It's actually one of the first steps in building community around any project。
    It allows people to come back。 It's very likely to bring people back。 People will
    want to contribute。 You know， people get really excited， but oh。 those docs are
    so great。 I want to go contribute to that project and they'll do so。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上是围绕任何项目建立社区的第一步之一。它允许人们回来。很可能会吸引人们回来。人们会想要贡献。你知道，人们真的很兴奋，哦，那些文档太好了。我想去贡献那个项目，他们会这样做。
- en: And then they'll tell their friends about it， which is how we all know that
    we're all， at PyCon。 I know a lot of you have shared that， oh， you should check
    out this library or you should。 check out that library。 Word of mouth is a great
    way of talking about stuff。 So you need to have your docs kind of work is like
    helping you build your community。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然后他们会告诉他们的朋友，这就是我们都知道我们在 PyCon 的原因。我知道你们中的许多人分享过，哦，你应该看看这个库或者你应该看看那个库。口碑是谈论事物的一个很好的方式。因此，你需要让你的文档像是帮助你建立社区一样运作。
- en: So today I'm going to talk about my top 10 tricks and tips to， I put trips on
    there because。 I decided to combine them and can't spell。 For improving your technical
    writing。 Let's claim or these are mine， these are mine。 As in， this is my opinion，
    you。 there may be something on here that I completely have， left out that you
    think is amazing。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 所以今天我将谈论我提高技术写作的十大技巧和窍门。我在这里加上“窍门”，因为我决定把它们结合在一起而且不会拼写。让我们声称这些是我的，这些是我的。也就是说，这是我的观点，你可能会觉得这里有我完全遗漏的东西，非常棒。
- en: Doesn't make it any less amazing。 This is just what I've dealt with and what
    I've learned in my。 you know， the two and a， half years that I spent working at
    DigitalOcean working on writing content。 Just because it's not on here doesn't
    mean it's not great。 And picking 10 was tough。 If I was able to give this talk
    in its entirety， this would be Mason's 374 tips on improving。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不让它变得不那么惊人。这只是我所经历的和我在 DigitalOcean 工作期间学到的内容，大约两年半的时间。仅仅因为它没有出现在这里，并不意味着它不好。而且选择
    10 个确实很难。如果我能完整地进行这个演讲，这将是 Mason 的 374 个提高技巧。
- en: your documentation。 None of you would stay for that talk。 I wouldn't stay for
    that talk。 I'd get up and leave。 So we're going to go with 10 today and hopefully
    they will be able to help you improve your。 documentation。 So tip number 10， make
    your end goal clear。 Have a clear。 concise goal in your documentation in the first
    paragraph in the very beginning。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: saying this is what I want you to do。 This library will allow you to do X in
    this tutorial。 You will do X by using this。 Be very upfront with the end goal
    as soon as you start writing your documentation。 If you're writing a tutorial，
    don't spend a thousand words at the beginning telling the。 user how great the
    technology is。 They already know this。 They're there learning about your stuff。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: You don't need to spend the first paragraph， you know， on this network library。
    Well in 1976 or '67 they decided to build DARPA。 And like no， you went too far
    back。 That's a waste of time and effort。 Don't spend time grandiosing over your
    tech。 If they want to read a novel， they'll go read a novel。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Developers are here to get things done and they're just going to skip over that
    anyway。 Make it blatantly obvious what the reader is going to learn from this。
    Make it like in this tutorial you will set up a Apache web server and you will
    deploy。 a static site using Hugo as your static site generator。 Make it this is
    what you're going to get。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: That way people can know what they're doing and get going with it。 So we're
    re-effrasing that。 Tip number nine， don't be overly verbose。 Technical documentation
    should be concise， not a novel。 There are plenty of really good software engineering
    novels。 I recommend you check them out。 But technical documentation should not
    be a novel。 SAT words are not necessary here。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: If you're unaware of the SAT it's a collegiate preparatory exam where they ask
    you if you。 know of these words that are in English that nobody uses in regular
    vernacular anymore， at all。 vernacular。 Great word there。 SAT words here。 Always
    assume your readers don't speak the same language that you do。 Always assume that
    they are maybe English and second speakers and using really big words。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: or using words that are not common in everyday speech is going to slow them
    down。 It's not that they won't know them but it's a waste of time。 Aim for a low
    reading level。 You can use apps like this。 This is a picture on the side of the
    Hemingway editor。 Grammarly does this。 Aim for a very low reading level to just
    get people to be able to read your docs really。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: quickly and not spend time trying to figure out what the docs say and more how
    to do what。 the docs say。 I personally aim for a third grade reading level。 You
    should not have to put that much effort into figuring out these docs。 Sometimes
    it's difficult so I'll allow myself to go as high as sixth grade reading level。
    Again。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: this goes back up to my previous point。 This really helps non-native speakers
    with your documentation。 Tip number eight。 Use inclusive language。 Avoid using
    things like gendered pronouns and go for more gender neutral pronouns。 Don't be
    afraid to use the second person。 You will do this。 It's totally acceptable。 Somewhere
    in。 at least in my educational experience， we got told don't use second person。
    Always use third。 No。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这回到我之前提到的观点。这确实对非母语人士使用你的文档有帮助。提示八。使用包容性语言。避免使用性别代词，选择更中性的代词。不要害怕使用第二人称。你会这样做的。这是完全可以接受的。在某个地方，至少在我的教育经历中，我们被告知不要使用第二人称。总是使用第三人称。不。
- en: You can use second person。 Right？ If you're looking for a second person plural。
    I love the word y'all。 I have an entire talk on the word y'all that I can give
    at a later date if you ask me。 very nicely or if you buy me enough drinks in a
    bar。 It's really funny。 There is a recording of it on the internet。 You have to
    go find it。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用第二人称，对吧？如果你想用第二人称复数，我喜欢“y'all”这个词。如果你问我，我可以在稍后的时间给你关于“y'all”的整个演讲，非常好玩。或者如果你在酒吧请我喝足够的酒。真的很有趣。网上有录音。你得去找找。
- en: Avoid using known internet slang that can be viewed as demeaning or derogatory。
    Those like noobs or 10x developers or dummies。 Your docs are there to teach people
    not to start a fight。 There's a great series of everything like blank for dummies。
    It's a great series。 I love them。 I think they're great。 I know people who will
    not buy those books because they're like。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 避免使用可能被视为贬低或侮辱的网络俚语。像“新手”或“十倍开发者”或“傻瓜”。你的文档是为了教人，而不是为了引发争吵。有一个很棒的系列书籍，比如《傻瓜也能做的事情》。这是一个很好的系列。我喜欢它们。我觉得它们很棒。我认识一些人不会买那些书，因为他们觉得。
- en: '"I''m not a dummy。 I get it。 Don''t do that。 Don''t make people not want to
    use your docs because of non-inclusive language。 It''s only hurting you。 It''s
    not hurting them。 Avoid words that can make someone question or doubt their skill
    level。 Using stuff like simple or easy。 You should just simply do this。 It''s
    not great。 Imagine if you logged onto Python website and the first part of the
    documentation was simply。'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: “我不是傻瓜。我明白。不这样做。不要让人们因为非包容性语言而不想使用你的文档。这只会伤害你，而不是他们。避免使用可能让人质疑或怀疑自己能力的词汇。像简单或容易这样的表达。你应该只是简单地这样做。这并不好。想象一下，如果你登录到
    Python 网站，文档的第一部分是简单的。
- en: compile and install Python from source。 There's nothing simple about that。 If
    I saw that。 I'd be like， "Nope。 I'm going to another language， something that's
    easier。"。 Try to avoid using these words。 You'd be surprised。 You may think that
    this bullet point is a little bit weird， but you would be surprised。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 从源代码编译和安装 Python。这没有什么简单的。如果我看到那个，我会说，“不，我要换另一种语言，找一些更简单的。”尽量避免使用这些词。你会感到惊讶。你可能会觉得这一要点有点奇怪，但你会感到惊讶。
- en: You'd be surprised how many people get turned off by seeing something that other
    people。 tell them is simple and then it's not simple to them and it turns them
    off the entire project。 Just avoid using that。 Limit technical jargon。 For those
    of you， jargon itself is jargon。 which I think is hilarious。 Jargon are special
    words or expressions that are used by a particular profession or group。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你会惊讶有多少人因为看到别人告诉他们简单的东西，而发现对他们来说并不简单，从而对整个项目失去兴趣。尽量避免使用那种说法。限制技术术语。对于你们来说，行话本身就是行话。我觉得这很搞笑。行话是特定职业或群体使用的特殊词汇或表达方式。
- en: and are difficult to understand if you're not in that group。 Every use of jargon
    can make it difficult for beginners to grok your content。 Did you see what I did
    there？ I will admit， I was like eight years into the industry before I finally
    figured out what。 that word meant。 I thought people were just making chicken noises。
    I was like。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不在那个群体中，理解起来很困难。每次使用行话都可能让初学者难以理解你的内容。你看到我刚才做了什么吗？我得承认，在我进入这个行业八年后，我才最终明白那个词是什么意思。我以为人们只是在发鸡叫声。我是说。
- en: '"This is a weird way to write code， but I mean， bro， yeah， we''ll do it。"，
    It works。 Knowing your audience will help you decide how much jargon you can use。
    I say limit。 This really does depend on the situation。 Are you writing internal
    documentation for your team？'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: “这是写代码的一种奇怪方式，但我是说，兄弟，是的，我们会这样做。”它有效。了解你的受众会帮助你决定可以使用多少行话。我说要限制。这确实取决于情况。你是在为你的团队写内部文档吗？
- en: You may be able to get away with it more because the team is expected to know
    this kind of， stuff。 If you don't know who your audience is for your documentation，
    always assume beginners。 Assume the lowest level and it will， you'll write much
    better docs。 Again。 this is going to be a recurring theme。 Think back to the person
    who does not speak your language natively。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能更容易逃避这个问题，因为团队应该知道这些内容。如果你不知道文档的目标读者是谁，始终假设他们是初学者。假设最低水平，这样你会写出更好的文档。这将是一个反复出现的主题。想想那个不以你语言为母语的人。
- en: It's a lot easier not to use it。 Beginners will always appreciate you overly
    explaining all of you people who are experts。 many of you in this field who are
    experts。 You know you don't read documentation word for word。 You know you skim
    it and you're not going to notice if there's a word there or not because。 you
    skim and you look for what you need。 So tip number six， define all acronyms。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 不使用它会容易得多。初学者总是会感激你过于详细地解释所有的内容，尤其是对于那些领域中的专家。你们中许多人都是专家。你知道你并不会逐字阅读文档。你知道你是浏览它，而不会注意到是否有某个词，因为你是浏览并寻找你需要的东西。所以，第六个建议，定义所有缩略语。
- en: Tech has way too many acronyms。 It's disheartening and it hurts my soul。 We
    have so many acronyms that some have two or three meanings and you have to use
    context。 clues around acronyms。 I would love to see the political system use that
    in their English test。 Nobody would get it right。 They'd all fail。 Trying to figure
    out which of these acronyms do you mean？
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 技术领域有太多的缩略语。这令人沮丧，伤透了我的心灵。我们有如此多的缩略语，以至于有些有两个或三个含义，你必须使用上下文线索来理解这些缩略语。我希望看到政治体系在他们的英语测试中使用这个。没有人会答对，他们都会失败。试着弄清楚你指的是哪一个缩略语？
- en: Acronyms can easily scare away readers。 New learners are very often intimidated。
    And acronyms。 you know， because you can't context clue your way into acronyms。
    You just kind of have to know acronyms will scare your readers away。 Hands down。
    So write out the full name of the acronym when you first introduce it。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 缩略语很容易吓跑读者。新学习者通常会感到恐惧。因为你无法通过上下文线索理解缩略语。你必须知道，缩略语会吓跑你的读者。毫无疑问。因此，在首次介绍缩略语时，写出其全名。
- en: So if you're going to say something like add a record to DNS。 So you would say
    something like add a record to the domain name system， DNS。 And look。 you've now
    defined it。 And now the reader can understand it can go forward knowing what it
    means。 If you in plan to use the acronym for the rest of the documentation， say
    so。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果你要说类似“向DNS添加记录”的内容。你应该说“向域名系统（DNS）添加记录”。看看，你现在已经定义它了。现在读者可以理解并继续前进，知道它的含义。如果你打算在文档的其余部分使用这个缩略语，请说明。
- en: You say you take that example， add a record to the domain name system， DNS。
    We will refer to the domain name system as DNS for the rest of this documentation
    or， tutorial。 It works in like longer form content。 If you are planning on like
    if it's like actual technical documentation。 there's nothing wrong， with a glossary。
    You could just have a glossary and every time you use it。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你说你以这个例子为基础，向域名系统（DNS）添加记录。我们将在本文档或教程的其余部分中将域名系统称为DNS。这适用于较长的内容。如果你打算像实际的技术文档那样写，使用词汇表没有错。你可以只设一个词汇表，每次使用时都引用。
- en: you link to it and it could either， be like a highlight bubble that comes up
    or it can just link to another part of the documentation。 that is a glossary of
    all of your terms。 I spent more time being afraid of acronyms and not using tech
    because of the acronyms and。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你链接到它时，可以是一个弹出的高亮气泡，或者仅仅是链接到文档的其他部分，即你的术语的词汇表。我花了更多的时间担心缩略语，因而不使用技术。
- en: I would like to see them all go away， at least in beginner focused content。
    Step number five。 and this is the hardest one for me because I love memes。 Like
    I grew up on memes are the best thing ever。 But avoid memes， idioms and regional
    language。 So you need to avoid using them unless you are positive you know who
    your audience is。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望在面向初学者的内容中，所有缩略语都消失。这是对我来说最难的一步，因为我喜欢表情包。我是从表情包中成长起来的，它们是最好的东西。但要避免使用表情包、成语和地区性语言。除非你确信知道你的受众是谁，否则你需要避免使用它们。
- en: For those of you that don't know idioms， it's a group of words established by
    a usage that's。 not deductible by normal people。 So if you use something that's
    like that was a piece of cake or pulling out all the stops。 these things are not
    comprehendable to people who are not aware of that idiom， especially。 again if
    they are not native speakers of your language， they'll be overly confusing， to
    use these。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些不知道习语的人来说，习语是一组由用法建立的词汇，普通人无法推导出来。所以如果你使用像“这是一块蛋糕”或“全力以赴”这样的表达，这些对不了解该习语的人来说是不可理解的，尤其是如果他们不是你的语言的母语者，这会非常混淆。
- en: So try to avoid them。 Your six co-workers， if you are writing internal documentation。
    might understand these。 A global audience who may have never seen SpongeBob may
    not get the upper case。 lower case meme。 Like it just may not happen。 So， and
    I love memes， they're a great way of teaching。 but you should try to avoid them，
    for inclusive documentation。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，尽量避免它们。如果你在编写内部文档，你的六个同事可能理解这些。然而，对于可能从未见过《海绵宝宝》的全球观众来说，他们可能不理解大小写的梗。可能真的不会发生。所以，我喜欢梗，它们是教学的好方式，但你应该尽量避免它们，以实现包容性的文档。
- en: Avoid using regional language that might confuse native and non-native speakers。
    Something like performing this command will totally trash your system or don't
    use this， library。 it's dodgy which I had to look up because I don't understand
    non-American English。 And we get a lot of regional variants in Texas， or in the
    United States too， Coke versus Pop。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 避免使用可能让母语和非母语人士感到困惑的区域语言。比如说“执行这个命令会完全破坏你的系统”或“不要使用这个库”。这是有风险的，我不得不查阅，因为我不懂非美式英语。在德克萨斯州或美国，我们也有很多地区变体，比如
    Coke 和 Pop。
- en: versus soda。 Just avoid using these kind of phrases and these kind of things
    where people that aren't。 from that region won't understand what it is。 Tip number
    four。 use meaningful code samples and variable names。 Use examples of real world
    problems that your product can solve or your open source library。 can solve。 Others
    want to know what problems your code solves， show them。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 与汽水相比。避免使用这些类型的短语和这些类型的表达，外地人可能不理解它们。提示四：使用有意义的代码示例和变量名。使用你产品或开源库可以解决的现实问题的示例。其他人想知道你的代码解决了什么问题，给他们展示。
- en: Don't tell them what it does， show them。 If you take nothing away from this
    talk。 do not tell people what your library does， show， people what your library
    does。 They'll get way more out of it than anything else。 Very often readers will
    just skip to the code。 How many of you have read the explanation on every stack
    overflow you've ever Googled？
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 不要告诉他们它做什么，给他们展示。如果你从这个演讲中什么都不带走，那就不要告诉人们你的库做什么，而是展示给他们看。他们会从中获得比其他任何事情更多的理解。读者通常会直接跳到代码上。你们中有多少人阅读过你在谷歌上查找的每个
    Stack Overflow 的解释？
- en: How many of you have scrolled mid-page down and only just looked at the answer
    and didn't。 even read the text underneath it？ Raise your hand， I've done it too。
    People skip the text。 they go to the code， so make sure that you're using real
    world， problems for it。 Use meaningful variable names。 We all say snarky things
    like code should be self-documenting。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你们中有多少人在页面中间向下滚动，只看了答案而没有阅读下面的文本？举手，我也做过。人们跳过文本，他们去看代码，所以确保你使用的是现实世界中的问题。使用有意义的变量名。我们都说代码应该是自文档化的。
- en: which is a lie we tell， ourselves。 That's going to be the title of my autobiography。
    code should be self-documenting and other lies， we tell ourselves。 Documentation
    should also be self-documenting。 Foo and bar are useless， they need to go。 Stop
    using them。 They need nothing， nobody understands them。 Let them go。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们对自己说的谎言。这将是我自传的标题。代码应该是自文档化的，以及我们对自己说的其他谎言。文档也应该是自文档化的。Foo 和 bar 是无用的，它们需要被去掉。停止使用它们。它们毫无价值，没人能理解它们。让它们离开。
- en: Include everything that is needed to run the code。 This includes things like
    import statements。 Sometimes I have read documentation where it's like， "Oh， great，
    it's this great piece。 of code block，" and I read through it。 Then I can't get
    it to work because they didn't tell me how to import their library。 I'm like，
    "Oh， no， this is sad，" and then I have to go figure it out。 Include things。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 包括运行代码所需的一切。这包括导入语句等内容。有时我阅读的文档中写着：“哦，太好了，这是一个很棒的代码块，”我读完它后，却无法运行，因为他们没有告诉我如何导入他们的库。我想：“哦，不，这太遗憾了，”然后我得去找解决办法。包含这些内容。
- en: Include everything that the user needs to do it。 Please have a completed copy
    of the code for copy and pasting。 If you are going to build out， say a tutorial，
    where you're going through and stepping somebody。 through piece by piece， so these
    are the imports。 This is how you do part one， part two， part three。 At the very
    end， include a code block that contains the entire thing。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 包括用户需要完成它的所有内容。请确保有一个完整的代码副本，以便复制和粘贴。如果你要构建一个教程，逐步引导某人，这些是导入。这是如何做第一部分、第二部分、第三部分。在最后，包含一个代码块，包含整个内容。
- en: People don't have to copy five different code blocks。 They can copy one code
    block and immediately take it over。 People code samples， and again。 another one，
    and this is a tweet quote。 If you want， "Foo and bar useless， get rid of them。"。
    That will be my campaign slogan when I run for president。 Tip number three。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 人们不需要复制五个不同的代码块。他们可以复制一个代码块并立即使用。人们代码示例，还有另外一个，这是一个推文引用。如果你想，“Foo和bar没用，去掉它们。”这将是我竞选总统时的口号。提示三。
- en: avoid making your readers leave your docs。 This is a big one that a lot of people
    don't tend to think about。 Try to avoid sending readers to other sites or to other
    links。 The internet has all given us this ability to completely forget about 900
    tabs。 It's a top of our browser window， and as soon as you go on to the next one，
    it's very likely。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 避免让读者离开你的文档。这是一个很多人不常考虑的重要问题。尽量避免将读者发送到其他网站或链接。互联网让我们完全忘记900个标签的能力。在浏览器窗口的顶部，一旦你去下一个标签，很可能。
- en: you'll ever make it back。 Everything necessary to complete your task should
    be self-contained within the documentation。 or within the tutorial。 Copying a
    few steps from another set of documentation is actually better than sending your
    users。 to like 15 different sites。 If you are going to do this， please don't plagiarize，
    maybe rewrite it。 or you could， like quote it and give credit back to the author，
    but please don't plagiarize。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能再也回不去了。完成任务所需的一切应包含在文档或教程中。复制其他文档中的几步实际上比将用户发送到15个不同的网站更好。如果你要这样做，请不要抄袭，最好是重写，或者你可以引用并给作者信用，但请不要抄袭。
- en: If you are going to make the reader leave your article， which again， I don't
    recommend。 have a reason and a way to bring them back。 Do it all at the beginning。
    This was something that DigitalOcean did really well with our tutorials， and it's
    one。 of the things I loved。 At the very top， there was a list of prerequisites
    for those tutorials。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你要让读者离开你的文章，我不推荐这样，至少要有理由和方法让他们回来。尽量在一开始就处理好。这是DigitalOcean在教程中做得很好的地方，这是我喜欢的一点。在最顶部有一个这些教程的先决条件列表。
- en: You needed to have Ubuntu installed， you needed to have Python installed， and
    maybe you needed。 Java installed because you're doing a Minecraft server or something。
    These were well-defined at the top， and they were linked to them that would take
    you out。 to other places that would do it， and then you'd come back， and as soon
    as you got into。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要安装Ubuntu，你需要安装Python，可能还需要安装Java，因为你在做一个Minecraft服务器。这些在顶部都定义得很好，并且有链接可以带你去其他地方，然后你会回来，一旦你进入。
- en: the body of the tutorial， you would never leave the tutorial again。 So link
    out to them。 If you have documentation yourself that you've already written that
    can like link out to。 link out to your own stuff， of course， but try not to leave
    people hanging and making。 them go elsewhere。 Don't just say go install Python。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在教程的主体中，你将不会再离开该教程。所以链接到它们。如果你自己已经写了文档，可以链接到你自己的内容，但要尽量避免让人们挂在那里，让他们去别处。不要仅仅说去安装Python。
- en: Give them a tutorial that sets them up for success that allows them to do this
    and allows。 them to come back when they have finished。 But yeah。 avoid making
    your reader leave and go to other sites。 You'll never get them back。 You'll be。
    we got another tab in a C of 600 Chrome tabs。 Your computer will overheat because
    Chrome takes all your RAM。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 给他们一个成功的教程，使他们能够完成这个任务，并在完成后能够回来。但要避免让读者离开，去其他网站。你永远无法让他们回来。你会有另一个标签在600个Chrome标签页中。你的电脑会过热，因为Chrome占用了你所有的RAM。
- en: and then they reboot， and it's gone。 Is it not my only one that that happens
    to？ Okay。 So number two and probably one of the most important tips， make your
    content scannable。 Make it again， this goes back to that Stack Overflow thing。
    We don't read full documentation。 We scan for what we're looking for。 This is
    very prevalent amongst the expert and the advanced users。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然后他们重启，结果就没了。难道这不是只有我遇到的情况？好的。第二点，可能是最重要的提示之一，就是让你的内容易于扫描。这又回到了Stack Overflow的问题。我们不会阅读完整的文档，我们只会扫描寻找所需的信息。这在专家和高级用户中非常普遍。
- en: Beginners on the other hand will read all the way through it。 So make it easy
    for your reader to find a single piece of information。 They may not need the full
    tutorial on how to install Apache and get Hugo running and install。 a static site。
    They may just need that one command to figure out how do I actually run the compilation。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 而初学者则会从头读到尾。因此，确保读者能轻松找到单个信息。他们可能不需要关于如何安装Apache和运行Hugo及安装静态站点的完整教程。他们可能只需要那一条命令，来搞清楚如何实际进行编译。
- en: step to make Hugo work。 They don't need the whole tutorial for that。 but they're
    going to go to your tutorial and， they're going to find it。 So like I said。 beginners
    tend to read entire posts where experienced users scan for what， they need。 they
    get what they need， and they leave。 Use headings and subheadings to break up content。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让Hugo工作的步骤。他们不需要整个教程，但他们会去你的教程，找到需要的信息。因此，正如我所说，初学者倾向于阅读完整的帖子，而经验丰富的用户则会扫描他们需要的内容，他们获得所需的信息后就离开。使用标题和副标题来划分内容。
- en: Outline big changes， such as a next step or a change of context。 So if you are
    in your documentation， you're like， next we're going to do this。 You finish one
    section， introduce the next section， continue on。 Use table of contents。 I love
    table of contents。 Again， this helps with the people who are scanning because
    they， again。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 概述重大变化，比如下一步或上下文的变化。因此，如果你在文档中提到，“接下来我们要做这个。”你完成一个部分后，介绍下一个部分，继续进行。使用目录。我非常喜欢目录。这有助于扫描的用户，因为他们再次需要快速找到信息。
- en: they're not trying， to read everything。 They're trying to solve a very specific
    problem very quickly。 And if they've made it to your documentation and they don't
    get the answer within 30 seconds。 they're going to go to stack overflow。 I wish
    I had the actual statistics。 but I think the average time per site people spend，
    on websites is like six seconds。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 他们并不是在试图阅读所有内容。他们在快速解决一个非常具体的问题。如果他们找到了你的文档，但在30秒内没有找到答案，他们就会去Stack Overflow。我希望我能有实际的统计数据，但我认为人们在网站上平均停留的时间大约是六秒钟。
- en: They click on it， they look for what they need。 If it's not there， they're gone。
    That's why if you ever look at something like Google Analytics， you'll see your
    bounce rate。 which is how quickly they left your site。 It's really small because
    they came to your site。 they looked for what they needed， they， didn't find it
    in a blink of an eye， and they left。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 他们点击进去，寻找他们需要的内容。如果没有找到，他们就走了。这就是为什么如果你查看Google Analytics，你会看到跳出率，这是指用户离开你网站的速度。它非常低，因为他们来到了你的网站，寻找所需的内容，但在一瞬间没有找到就离开了。
- en: And that happens all the time。 Use consistent styling when writing。 If you are
    going to write。 have a large open source project or you're going to start your，
    own blog， have a consistent style。 develop a consistent voice。 If you're like，
    for example， if you're going to write。 make all of the library names bold， and
    all of your file paths， italics。 Make sure it's consistent。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况时常发生。写作时要保持风格一致。如果你要写一份大型开源项目，或者要开始自己的博客，请确保风格一致，培养统一的声音。例如，如果你要写作，所有的库名称用粗体表示，所有的文件路径用斜体表示。确保保持一致。
- en: That allows， again， when people are scanning， they become accustomed to your
    style and they're。 like， oh， that's bold， that's a file， that's a library name。
    I immediately know that。 If you change it up all throughout， it makes it a lot
    more difficult to scan and people。 won't come back to it。 The user quickly picks
    up on these styles a lot quicker than you would think。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这让人们在浏览时习惯于你的风格，他们会觉得，“哦，那是粗体，那是文件，那是库名称。”我立刻就知道。如果你在不同地方都改变风格，这会使得扫描变得更加困难，人们就不会再回来了。用户比你想象的更快地习惯这些风格。
- en: And again， it makes it more scannable and consistency is key。 You have to be
    consistent with this。 Otherwise you're just， people aren't going to be able to
    use your documentation and they'll。 go somewhere else。 Tip number one， and this
    is the most important one。 please verify your documentation。 Test your documentation。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，使文档更易于扫描，一致性是关键。你必须保持一致。否则，人们无法使用你的文档，他们会去其他地方。提示一，这是最重要的一条。请验证你的文档。测试你的文档。
- en: Always verify your instructions and test your work。 The only thing worse than
    no documentation is incorrect documentation because no documentation。 means I
    go somewhere else to look for it。 Incorrect documentation wastes my time。 Time
    is valuable。 We all know this。 We've all learned this over the last three years。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 始终验证你的说明并测试你的工作。没有文档的情况比错误的文档更糟，因为没有文档意味着我会去别处寻找。错误的文档浪费我的时间。时间是宝贵的。我们都知道这一点。我们在过去三年中都学到了这一点。
- en: That time is extraordinarily valuable。 Please don't waste it。 If possible。 let
    someone else test your work。 You would be surprised。 You'll get a bias。 You're
    going to get a bias when you're writing your tutorial or your documentation because。
    you're the subject matter expert on this library。 It's not really helpful for
    you because you're going to fill in the blanks and not even know。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这段时间极其宝贵。请不要浪费它。如果可能的话，让其他人测试你的工作。你会感到惊讶。你在写教程或文档时会产生偏见，因为你是这个库的主题专家。这对你并没有真正的帮助，因为你会填补空白却意识不到。
- en: you're filling in the blanks。 Get someone else to test your work。 This is a
    great way to introduce new open source maintainers to open source projects。 And
    I'll talk about this in a later slide with something about Hectoberfest but getting。
    people involved。 It's a great way to make them test your docs。 Use a fresh environment
    for testing。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你在填补空白。让其他人测试你的工作。这是将新的开源维护者引入开源项目的好方法。我会在后面的幻灯片中谈到一些关于 Hectoberfest 的事情，但让人们参与进来。这是让他们测试你的文档的好方法。使用一个新的环境进行测试。
- en: Yes。 You don't have to use a fresh environment for testing。 There are so many
    remnant artifacts that you don't know what you've installed。 Maybe one day you
    accidentally pip installed something and you weren't in a VN and you never。 went
    back and cleaned it up and now there's something lingering in system Python that
    makes。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 是的。你不必使用一个新的环境进行测试。有太多残留的文档，你不知道你安装了什么。也许有一天你不小心使用 pip 安装了某个东西，而你不在虚拟环境中，你从来没有返回去清理，现在系统
    Python 中残留着一些东西，这让人感到困扰。
- en: it where only you work。 It works on your machine trademark。 Works on my machine。
    So always have a fresh environment when you're testing。 It's just going to make
    it a lot easier and it's going to make it a lot more consistent。 This tip because
    I always -- ten was too few I had to add one more。 Practice。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 只有你能用的地方。它在你的机器上能工作。商标。它在我的机器上能工作。因此，在测试时始终使用一个新的环境。这会让事情变得简单得多，也会让它更具一致性。这个提示因为我总是——十个太少了，我必须再加一个。实践。
- en: Like everything in life， the only way to get better at anything is to practice。
    So you have to practice technical writing。 Just like you practice code。 Just like
    if you're a musician， you've practiced playing the guitar， you have to practice。
    Try to set aside an amount of time daily or weekly to just write。 You don't have
    to publish it。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 就像生活中的一切，变得更好唯一的方法就是实践。因此，你必须练习技术写作。就像你练习代码一样。就像如果你是音乐家，你练习弹吉他一样，你必须练习。尽量每天或每周抽出一些时间来写作。你不必发布它。
- en: I don't -- the code that I write just to practice coding， I don't submit a library
    of Mason doing。 hacker rank programs。 Like no， you can just keep it for yourself。
    It doesn't have to be public。 No one ever has to see it but you but the practice
    will still help。 But one thing just don't do。 don't throw it away。 Save it in
    a folder。 You'll never know when you'll want to dust it off。
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会——我写的代码只是为了练习编程，我不会提交给 Mason 库或做 HackerRank 的程序。不，你可以把它留给自己。它不必是公开的。没有人需要看到它，只有你，但练习仍然会有所帮助。但有一件事不要做。不要把它扔掉。把它保存在一个文件夹里。你永远不知道什么时候会想要翻出来。
- en: You'll never know when it might inspire you for something else。 You never know
    when you might write about something and then you forget about it six。 months
    later and you're like oh yeah I wrote about it and you can dust off your own notes。
    and now you have it。 So how can you get started with technical writing？ Write
    documentation at work。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: I guarantee you your manager will love you。 Every single promotion I've ever
    gotten while I was an engineer was because I decided to。 take on the task of documenting
    everything I could find in my site。 There's always something to be documented。
    If you work at a place where there's nothing that can be documented。 never leave。
    If you have to like cement yourself to the building because you're working at
    a unicorn。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: Start a blog。 This is a great way to do it。 The best part about blogs is it
    can be free。 Okay it can be free。 I didn't even know my own word there。 If someone
    is paying you to write or you're writing at your company you're kind of limited。
    to what you can write about。 When you have your own blog you can write about anything。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: You can write about tech。 You can write about not tech stuff。 I write about
    a mixture of both if you ever go check out my blog。 So it's a lot freer。 Great
    for practicing。 And then another thing you can do is you can contribute to open
    source projects。 Many many many many open source projects always need help with
    their documentation。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: It's very rarely perfect and it's very rarely ever complete。 And even still
    they always need examples。 Examples are a great thing for documentation。 Hacktoberfest
    is a great place to start and it's where I started。 So I worked at DigitalOcean
    for two and a half years I recently left。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Hacktoberfest is a great program in the month of October where you just get
    incentivized。 to try to commit pull requests and get them accepted by maintainers。
    And I've the last two years I've used my Hacktoberfest contributions to just make
    some docs better。 and some projects that I thought could be better。 And I trust
    you。 Trust me they'll love it。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: And there are a lot of people here who have gotten their start in Hacktoberfest
    and are。 now amazing amazing contributors。 And can I can I point you out？ Can
    I？ Yes。 Marietta。 the amazing CPython developer， got part of her start in Hacktoberfest。
    She's sitting right here in my talk。 She was the first female CPython contributor。
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Love her to death。 She's now on the Hacktoberfest board。 She got started doing
    that。 You can all start in the exact same way。 You have to start somewhere。 It's
    a great place to start。 That's all I have for this time。 You can follow me on
    Twitter if you want to。 You can tweet at me and I'll answer questions。 I have
    an open space that's going on right after this in 250 A/B on synthetic data。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: But if you want to come talk to me about documentation， totally fine。 You can
    find the slides on the QR code again or they're on my website。 Thank you for your
    time。 And I hope that you'll make your docs better。 [APPLAUSE]， (audience clapping)。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果你想来和我聊聊文档，完全可以。你可以在二维码上再次找到幻灯片，或者它们在我的网站上。感谢你的时间。希望你能让你的文档更好。 [掌声]，（观众鼓掌）。
- en: '![](img/7fb412e9cd3a788de3d78d39723b5295_4.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7fb412e9cd3a788de3d78d39723b5295_4.png)'
