- en: P28：Talk - Bruce Eckel_ Making Data Classes Work for You - VikingDen7 - BV1f8411Y7cP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P28：演讲 - 布鲁斯·艾克尔_ 让数据类为你服务 - VikingDen7 - BV1f8411Y7cP
- en: \>\> Your ladies and gentlemen， we'll have Mr。 Bruce Ecker giving a presentation
    on making。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: \>\> 各位先生女士，我们将由布鲁斯·艾克尔先生进行关于制作的演讲。
- en: '![](img/cb0c8f5012f543e01ce8fb0120c60edd_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cb0c8f5012f543e01ce8fb0120c60edd_1.png)'
- en: '![](img/cb0c8f5012f543e01ce8fb0120c60edd_2.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cb0c8f5012f543e01ce8fb0120c60edd_2.png)'
- en: data classes work for you。 \>\> Okay。 All right。 Sounds like it's working。 So
    all of the -- this is really examples。 And all the examples are on the GitHub
    repo。 So it's my repo and look for data classes as types。 Should be easy to find
    even if you forget it。 And this started from -- I do a podcast with my friend
    James Ward and we interviewed somebody。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 数据类为你服务。 \>\> 好的。好的。听起来一切正常。所以所有这些——这实际上是示例。所有的示例都在GitHub仓库中。所以这是我的仓库，寻找数据类作为类型。即使你忘记了，也应该很容易找到。这是从——我和我的朋友詹姆斯·沃德做的一个播客，我们采访了某个人。
- en: who had created a -- they called it Smart Types Library for Scala and something
    just kind。 of clicked。 I've been studying functional programming a lot in the
    last few years and something just。 kind of came together and I'm hoping that that
    happens for you during this presentation。 So I'm going to start with normally
    if your type doesn't -- if your type is incorrect。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 谁创建了一个——他们称之为Scala的智能类型库，某种东西就这样点击了。我在过去几年里大量研究函数式编程，某种东西就这样结合在一起，我希望在这个演讲中你们也会经历这样的过程。因此我将从通常开始，如果你的类型——如果你的类型不正确。
- en: you should throw an exception。 But I want to show all of the errors and so I
    created this little function that checks the。 expression and it has a couple of
    error messages。 The second one is usually out of range。 That's why I separated
    it。 Normally you would use an assert to check things and throw an exception but
    I want to see。 all of the errors that happen in the example。 So I wrote this。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该抛出一个异常。但我想展示所有错误，因此我创建了这个小函数来检查表达式，并且有几个错误消息。第二个通常是超出范围。这就是我将其分开的原因。通常你会使用断言来检查事情并抛出异常，但我想看到在示例中发生的所有错误。所以我写了这个。
- en: Not terribly important but you need to see what it was。 And let's make this
    bigger。 Okay。 So suppose we have a very simple system where we want to do some
    kind of customer feedback。 So we're going to have a thing called stars and the
    value should be between one and ten。 And you know how customer feedback systems
    work。 You can never actually give it zero stars。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是特别重要，但你需要看到它是什么。让我们把它放大。那么假设我们有一个非常简单的系统，我们想要做某种客户反馈。所以我们将有一个叫星星的东西，其值应该在一到十之间。你知道客户反馈系统是如何运作的。你永远无法真正给它零颗星。
- en: So it will be one to ten and typical way we do this is just by using an int。
    And so the -- an int is a type that has a value between minus very big number
    to plus。 very big number。 And we want to make this -- we want to adapt it to use
    for our stars so that it's between。 one and ten。 And what this means what we typically
    do is we say， okay。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 所以它将是一到十，典型的做法是使用一个int。因此，一个int是一个值在负非常大数字到正非常大数字之间的类型。我们想要让它——我们想要调整它以便使用我们的星星，使其在一到十之间。这意味着我们通常会说，好的。
- en: every time I use this if you're， going to do it right。 I need to check the argument
    to make sure that it's actually between， one and ten。 So my stars are correct。
    And so I do that there and then this other function where I use everywhere you
    use it。 You need to check that it's correct。 Now some of you might be looking
    at this going， oh。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 每次我使用这个时，如果你要做对，我需要检查参数以确保它确实在一到十之间。这样我的星星才是正确的。因此我在那里做了，然后这个其他函数无论你在哪里使用它，你都需要检查它是否正确。现在你们中的一些人可能会看着这个说，哦。
- en: but you're returning stars plus， five。 So what if you start out with stars that's
    ten。 then you're going to return something that's， fifteen。 Well。 we can only
    say that we're returning an int because， well， that's all we have in this， situation。
    So we don't really know that we're returning a stars object in this case。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 但你返回的是星星加五。那么如果你开始时星星是十，那你将返回十五。那么我们只能说我们返回的是一个int，因为，这就是我们在这种情况下所拥有的。所以我们并不真正知道我们在这种情况下返回的是一个星星对象。
- en: We're just returning an int。 So maybe it's okay that stars plus five or stars
    times five is okay。 Maybe that's fine。 I don't know。 But if we do want it to be
    a proper star。 then we've got a problem there too。 So this really isn't a very
    satisfying solution。 Plus any time I had a new function or if I were to change
    something about stars， I'd。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只是返回一个整型。所以也许星星加五或星星乘五是可以的。也许这没问题。我不知道。但如果我们希望它是一个适当的星星，那么我们也有问题。所以这真不是一个令人满意的解决方案。此外，每次我有一个新函数或如果我想更改星星的某些内容，我会。
- en: have to go back here and make sure that every place that I did a check， it would，
    you know。 I'd have to change it。 So we got this stuff distributed all over the
    place。 Let's see if we can look at this a little different way。 Let's， what's
    the problem？
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我必须回到这里，确保我检查的每个地方，都需要更改它。所以这些东西分散在各个地方。让我们看看能否换个方式来看待这个问题。我们的问题是什么？
- en: How do we solve this problem traditionally？ Well now traditionally。 This is
    one of the things that objects were supposed to solve for us。 And the key was
    encapsulation。 So the idea is that here in my constructor， first of all， in Python
    by tradition， we say。 if it's preceded by an underscore， that means it's private。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们传统上如何解决这个问题？传统上，这是对象应该为我们解决的事情之一。关键是封装。因此这里的想法是，在我的构造函数中，首先在Python中，传统上我们会说。如果它前面有下划线，那就意味着它是私有的。
- en: You can actually go in there and look at it but， and modify it if you want to。
    But that's what we call private。 So we'll make it private and then further down
    here we're going to set。 use the property， decorator to allow you to read it。
    But since there's no writer。 then you can only read it。 So pretty good。 We've
    encapsulated it。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你实际上可以进去看看，但如果你想的话，也可以修改它。但这就是我们所称的私有。因此，我们将其设为私有，接下来我们将使用属性装饰器来允许你读取它。但由于没有写入器，因此你只能读取它。挺不错的。我们已经将其封装起来了。
- en: we've hidden it inside of the class and everywhere， each of the methods， that
    I use。 I need to perform， well when I go into it， I need to perform some kind
    of。 precondition check which is in this case the number of stars that you pass
    me， still an， int。 I'll check with my condition function to make sure that that's
    not too big。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们把它隐藏在类的内部以及每个我使用的方法中。我需要执行某种前置条件检查，在这种情况下就是你传递给我的星星数量，仍然是一个整型。我会用我的条件函数检查，确保这不是太大。
- en: And then I'll perform some sort of internal operation and then I'll do a post-condition。
    check to make sure that I haven't messed anything up。 And I need to do that every
    method that I have for my class。 And the condition is simply using my check to，
    if you pass an argument， then it checks。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我将执行某种内部操作，之后我会进行后置条件检查，以确保我没有搞砸任何事情。我需要在我为我的类定义的每个方法中都这样做。条件是简单地使用我的检查，如果你传递了一个参数，它就会进行检查。
- en: the argument and if you don't pass in an argument it checks self。underscore
    number， the local。 number value。 Alright， well this was the promise of object-oriented
    programming that we would have this encapsulation。 and we keep everything safe
    and at the time that I got started in it， which is when it。 was really starting
    to show up， seemed like a great idea， seemed like a much better idea。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不传递参数，它会检查self.underscore number，局部number值。好吧，这就是面向对象编程的承诺，我们会有这种封装，我们保持一切安全，而我开始接触它时，正是它真正开始出现的时候，看起来是个好主意，似乎是一个更好的主意。
- en: than what we had before with plain old functions。 But this still looks pretty
    messy and it doesn't seem great。 Down here I'm just showing that because I didn't
    have a setter， it prevents mutation。 and you get an attribute error。 And it's
    a lot of work。 And if I were to add another method。 I'd have to make sure or if
    somebody else comes along。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 比我们以前的普通函数要好得多。但这看起来仍然相当杂乱，并且似乎并不好。在这里，我只是展示因为没有设置器，它阻止了变更。你会得到属性错误。这需要很多工作。如果我添加另一个方法，必须确保或者如果其他人来了。
- en: and adds another method they would have to know what to do to make sure that
    they did。 the proper precondition and post-condition checks。 So it's not terribly
    satisfying。 So let's look at another approach which is data classes。 So the idea
    of a data class is。 and this is， I've actually lost track of when this was， added
    to Python。 Thank you。 3。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 并添加另一个方法，他们必须知道该怎么做，以确保他们进行了适当的前置条件和后置条件检查。所以这并不是特别令人满意。那么让我们看看另一种方法，即数据类。数据类的想法是，我实际上已经忘记了这是什么时候加入Python的。谢谢3。
- en: 7 was added in 3。7 and basically what you're able to do is define these class
    properties。 So this is a property of the class and then the data class， I want
    to call it decorator。 but that's not the right thing。 We do column decorators。
    Okay。 because I know too many languages and I get the terminologies mixed up。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 7 在 3.7 中添加，基本上你能够定义这些类属性。这是类的一个属性，然后是数据类，我想称之为装饰器，但这不是正确的名称。我们做列装饰器。好吧，因为我知道太多语言，术语搞混了。
- en: So the data class decorator then takes this information and manufactures this
    class for。 you which has a number of attributes。 Including it takes these properties。
    these class properties and creates a constructor， based on those that uses those
    in the order in which you define them and you need the。 type annotations in order
    for it to know what to do with them。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 数据类装饰器接收这些信息并为你制造这个类，它具有许多属性。包括它取这些属性。这些类属性并创建一个构造函数，基于这些属性，按你定义的顺序使用它们，你需要类型注解，以便它知道该如何处理它们。
- en: And so it creates a constructor that you can call。 Don't have to give it the
    arguments names but you can。 And each of the fields now has the same property
    in the object。 So you can access name， number。 depth and then， oh， I had a default
    argument here。 So， and here's where I call the default。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 因此它创建了一个你可以调用的构造函数。你不必给出参数名称，但你可以。而且现在每个字段在对象中都有相同的属性。这样你可以访问名称、编号、深度，然后，哦，我在这里有一个默认参数。因此，在这里我调用了默认值。
- en: use the default argument。 It creates a dunder EQ so you can compare one of these
    messenger objects with another。 There's a replace function that allows you to
    take an existing object and make a new。 object with one or more of the properties
    given different values。 It's in arc， well。 when you're looking at things in terms
    of functional programming， you get。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用默认参数。它创建一个魔法方法 `__eq__`，以便你可以比较这些消息对象之间的关系。还有一个替换函数，允许你从一个现有对象创建一个新的对象，并对一个或多个属性赋予不同的值。当你从函数式编程的角度看事情时，这一点很重要。
- en: into this immutability idea and the more you use it， the more you like it。 So
    we'll look at that a little later。 These are still by default mutable。 So one
    of the things that that means is that I can't use it as a key in a dictionary
    and。 if I try to do that， it'll tell me it's unhashable。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这与不可变性这个概念相结合，使用得越多，你就越喜欢它。因此我们稍后会看一下。这些默认仍然是可变的。所以这意味着我不能将它用作字典中的键。如果我尝试这样做，它会告诉我它是不可哈希的。
- en: And the reason it's unhashable is because all of the properties are mutable
    and it builds。 the hash key， the way that it indexes into the dictionary。 It builds
    the hash key using all of those properties。 And so if they're mutable。 that means
    you could put the hash key in， you could modify。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 它不可哈希的原因是因为所有属性都是可变的，并且它构建哈希键的方式是通过所有这些属性来索引字典。因此，如果它们是可变的。这意味着你可以将哈希键放入，并对其进行修改。
- en: the properties and then when you're looking something up， it would generate
    a different， hash key。 And so you wouldn't be able to find the thing。 So it just
    prevents this is standard with any kind of hashing system across all languages。
    If it's mutable， that's kind of a bad idea。 All right。 So there is one more thing
    we'd like to add here which is data classes have this option。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当你查找某些内容时，它会生成一个不同的哈希键。因此你无法找到该对象。这只是防止了任何类型的哈希系统在所有语言中的标准。如果它是可变的，那就是个坏主意。好的。所以我们还想在这里添加一件事情，即数据类有这个选项。
- en: that allows you to say that the objects are frozen。 So what this means is that
    the constructor that it generates will make all of these properties。 immutable。
    Well， I mean technically， it's Python， you can always mush things around。 But
    if you try to modify these things， you will get a frozen instance error。 It will
    tell you that。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许你说这些对象是冻结的。这意味着生成的构造函数会使所有这些属性都是不可变的。技术上来说，这仍然是 Python，你总是可以对其进行修改。但是，如果你试图修改这些东西，你会收到一个冻结实例错误。它会告诉你。
- en: oh， you can't do that because you said that this was supposed to， be frozen。
    So now we've got something where， and this is much closer to what you do in functional。
    programming and we'll see the benefits of that in a second。 And so one of the
    things that we see is that we're able to use the object as a key for。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，你不能这样做，因为你说这个应该是冻结的。因此现在我们有了一些东西，这与函数式编程的做法更接近。我们稍后会看到这带来的好处。我们看到的一件事是，我们能够将对象用作。
- en: our hash table because if it's immutable， then it'll automatically create the
    dunder hash， function。 And so it's happy with that。 So we can use it as a key
    in a dictionary and here we look it up。 All right。 So in functional programming，
    well， one of the things that I was confused by for a long。 time is a phrase that
    I heard， I don't know， it's probably Luca Cardelli or somebody， one。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的哈希表，因为如果它是不可变的，那么它将自动创建双下划线哈希函数。所以它对此很满意。因此，我们可以将其用作字典中的键，这里我们进行查找。好吧。在函数式编程中，我很长一段时间感到困惑的事情之一是我听到的一个短语，我不知道，可能是卢卡·卡尔德利（Luca
    Cardelli）或者其他某个人，早期类型研究者之一。
- en: of the early type people say that a class is not a type。 I didn't really know
    what that meant。 but in functional programming， they talk about， this a lot。 And
    the phrase that you will sometimes hear is that a type is a set of values and
    that。 is much easier for me to think about。 It's just some way to define a finite
    set of values。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 早期的类型研究者说，类不是类型。我不太明白这是什么意思，但在函数式编程中，他们经常谈到这一点。你有时会听到的一个短语是类型是一组值，这对我来说要容易得多。它只是定义一个有限值集合的一种方式。
- en: And one of the things that you try and do， well， a couple of things you do in
    functional。 programming， one is that you make everything immutable so that you
    don't have to think。 about protecting that data。 It's protected by default because
    you can't change it。 And so it simplifies everything。 You don't have to have this
    cluster of methods around your data to protect it。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你尝试做的事情之一，嗯，功能编程中你做的几件事情之一是使所有东西都是不可变的，这样你就不必考虑保护数据。默认情况下，它是受保护的，因为你不能改变它。因此，这简化了一切。你不必在数据周围有一堆方法来保护它。
- en: You say， here's my data。 You can't change it so you can read it， but you can't
    modify it。 Everything's safe。 The other thing that you want to do with types typically
    is to make impossible values。 unrepresentable。 So in our case with the stars example。
    what we want to do is the impossible values are， anything except for the values
    between 1 and 10。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以说，这是我的数据。你不能改变它，所以你可以读取，但不能修改。一切都很安全。你通常希望做的另一件事是让不可能的值不可表示。因此，在我们这个星体的例子中，我们想要做到的就是将1到10以外的任何值视为不可能的值。
- en: And so we'll start out by saying， all right， here's my stars class and it's
    a data class， immutable。 here's the number of stars。 And then the other thing
    that you get with data classes is this dunder post init function。 Because the
    data class takes your information and it generates the constructor for you。 And
    so there would probably be some way to go and muck about with a constructor。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们将开始说，好的，这是我的星体类，它是一个数据类，不可变的。这里是星体的数量。然后你从数据类中获得的另一件事是这个双下划线后初始化函数。因为数据类会接收你的信息并为你生成构造函数。所以可能有某种方式可以去干扰构造函数。
- en: But it's much easier to say， all right， automate the constructor。 And then once
    it's done。 I'll run this function post init and I'll check the values。 That's
    typically what you're doing with post init。 You might be able to do something
    else with it。 But the intent of it was so you can check the results of this object
    that you've just， constructed。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 但说“好吧，自动化构造函数”要简单得多。一旦完成，我会运行这个初始化后的函数并检查值。这通常就是你在初始化后所做的。你可能还能用它做其他事情。但它的意图是让你可以检查你刚刚构造的对象的结果。
- en: And so here's the one place now where I do my check to make sure it's within
    the range。 1 through 10。 And now when I have my functions that operate on the
    stars objects。 notice they're no longer， methods。 Those they could be。 but it's
    just a lot easier to think about them as standalone functions。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我检查确保它在范围1到10内的地方。现在当我有操作星体对象的函数时，请注意它们不再是方法。它们可以是，但把它们视为独立函数要简单得多。
- en: that accept stars objects and return stars objects。 Now I don't have to worry
    about testing before or after I modify them or any of that stuff。 That's all taken
    care of because the only kind of stars objects you can even create are。 the correct
    ones。 So and also notice that here I actually am returning a star's object。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这是接受星体对象并返回星体对象的函数。现在我不必担心在修改它们之前或之后进行测试或其他任何事情。这些都已经处理好了，因为你能够创建的唯一类型的星体对象是正确的星体对象。所以请注意，这里我实际上是返回一个星体对象。
- en: And so it's clear when you read it that， oh yeah， whereas before I was returning
    an int。 I could be a star， could be a not。 Here it's very clear that I'm returning
    a star's object and when I perform this operation here。 if it goes out of range，
    the constructor， well， the construction process， including the。 post-init automatically
    discovers if I've done something wrong。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 所以当你阅读时很清楚，哦，是的，之前我返回的是一个整数。我可以是一个星星，也可以不是。在这里很清楚，我返回的是一个星星对象，当我在这里执行这个操作时。如果超出范围，构造函数，包括构造过程，会自动发现我是否做错了什么。
- en: And so what I want to point out here is how much simpler and clearer this is
    because here。 in the stars class， I define exactly what it is and I can't create
    any of these objects。 that are incorrect。 And so for the rest of the program，
    I don't even have to think about it。 And that's kind of the aha moment that I
    want to initially get you to say， oh， I should do。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我想指出的是，这样做是多么简单和清晰，因为在星星类中，我明确地定义了它是什么，我无法创建任何不正确的对象。因此，在程序的其余部分，我甚至不必考虑它。这就是我希望你最初意识到的那个“啊哈”时刻，哦，我应该这样做。
- en: it this way。 This is going to make my life much， much easier and it's going
    to reduce all kinds of errors。 now。 And if anybody uses my star's object later，
    if I decided to change the top number to five。 instead of ten， everything is going
    to be fine。 Or at least if there are problems they're going to be discovered immediately。
    I don't， have to go through my code looking for all these tests。 All right。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做会让我生活轻松得多，而且会减少各种错误。如果以后有人使用我的星星对象，如果我决定把顶部数字改为五，而不是十，一切都会正常。或者至少如果有问题，它们会立即被发现。我不必在代码中寻找所有这些测试。好的。
- en: So now let's look at the next thing that we try and do in functional programming
    which。 is composing things together。 So we have all these small pieces that work
    well and then we want to be able to put them。 together。 And what I'm going to
    compose here is a data class made from other data classes。 So this will be ultimately
    what we want to do is create a person。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看功能编程中我们尝试做的下一件事，那就是组合事物。我们有这些运作良好的小块，然后我们希望能够将它们组合在一起。我在这里要组合的是一个由其他数据类构成的数据类。因此，最终我们要做的就是创建一个人。
- en: And the person is going to contain a full name， a date of birth， and an email
    address。 So might as well make those into data classes as well。 So the full name
    has some-- so the post in it now is going to be checking the validity。 of the
    name after it's been initialized。 And one of the tests I'm going to do is to make
    sure that there are two names。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这个人将包含全名、出生日期和电子邮件地址。所以也可以将这些做成数据类。因此，全名有一些——所以现在的后处理将检查在初始化后名字的有效性。我将进行的测试之一是确保有两个名字。
- en: And so I split it and if it's greater than-- let's see。 If it is-- yeah。 it
    should be greater than one。 And if it is not， if there's only one name then it
    says， "Oh。 you have to have two names。"， And you'd want to do all kinds of other
    things there。 But you can do that all in this one place where you're talking about
    the name。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 因此我将其拆分，如果它大于——让我看看。如果它是——是的，它应该大于一。如果不是，如果只有一个名字，那么就会说：“哦，你必须有两个名字。”然后你会想在这里做各种其他事情。但你可以在这里谈论名字的地方完成所有这些。
- en: And then once it's created then you don't have to worry about it being used
    any other， place。 The second place is the birth date。 And for the others of these。
    I'm just going to show some sort of checking is taking place。 We'll actually look
    at birth date in a second。 And then the email address does some sort of checking。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建后，你就不必担心它在其他地方被使用。第二个地方是出生日期。对于其他这些，我只是展示一些检查正在进行。我们稍后会实际查看出生日期。然后电子邮件地址进行某种检查。
- en: And now we can compose a new data class from the existing data classes。 And
    you'll note that the constructor that it creates requires you to pass the name
    and。 the birth date and the email address in。 So it's very clear and readable
    what you get。 And then-- so if we go ahead and print that， you can see it performs
    the checking as part。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以从现有的数据类组合一个新的数据类。你会注意到它创建的构造函数要求你传入名字、出生日期和电子邮件地址。因此，获得的内容非常清晰易读。那么——如果我们继续打印，你会看到它作为检查的一部分执行。
- en: of this person constructor。 It calls the constructors for all of the individual
    parts。 And then it displays-- and this is one thing I didn't mention before that
    the data class。 also generates a nice dunder str for you so that it produces something
    you'd have to。 do yourself normally， creating a new class to make a readable string
    output。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这个人构造函数。它调用所有单独部分的构造函数。然后它显示——这也是我之前没有提到的一件事，数据类还会为你生成一个不错的双下划线字符串，所以它会生成一些你通常需要自己做的东西，创建一个新的类以产生可读的字符串输出。
- en: And so you can see this produces that for you as well。 All right。 so now I sort
    of waved my hands over the birth date。 But that's kind of an interesting one to
    delve into a little bit more。 And so let's look at-- so the thing is what we want
    to look at is the value of using these。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你可以看到这也为你生成了这个。好的。所以现在我稍微提到了出生日期。但这是一个有趣的话题，可以深入探讨一下。那么让我们看看——我们想关注的是使用这些的价值。
- en: types and data classes are really great but enums are also a way to define a
    type because。 with enums you have a set of values。 You have a finite set of values。
    It's defined at-- well。 compile time。 I mean， it's there before whereas the data
    classes we've seen are actually created at。 runtime whereas enums are created
    at compile time。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 类型和数据类真的很棒，但枚举也是定义类型的一种方式，因为通过枚举你有一组值。你有一个有限的值集合。它是在编译时定义的。我是说，它在编译之前就存在，而我们看到的数据类实际上是在运行时创建的，而枚举是在编译时创建的。
- en: And one of the benefits of that is that your IDE can use that to do completion
    or whatever。 If you've got an enum and it can tell you here are the options and
    you can just select。 for them and other more sophisticated things are possible。
    So let's look at the building a date。 And so we're going to have-- we're going
    to follow this pattern with frozen data classes。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的一个好处是你的IDE可以利用这一点进行补全或其他操作。如果你有一个枚举，它可以告诉你这里是选项，你只需选择它们，其他更复杂的事情也是可能的。那么让我们看看构建一个日期。所以我们将遵循这个模式，使用冻结数据类。
- en: We've got a day and it has the day number and we're going to check。 We're going
    to do a basic check which obviously isn't thorough enough。 But just for starters
    we're going to say this day has got to be between 1 and 31。 All right。 The year
    we'll say all right this is somebody's birth date so probably nobody's alive before。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一天，它有日期编号，我们要进行检查。我们将进行一个基本的检查，这显然不够彻底。但作为开始，我们将说这一天必须在1到31之间。好的。至于年份，我们说好吧，这可能是某个人的出生日期，所以在此之前可能没有人活着。
- en: 1900 and definitely not no birth dates after 2022。 So that'll be our post in
    that check。 And now for the month we'll use any num。 And so this allows me to
    have names for all the months。 And again， can't remember when this feature was
    added but you can assign each enum value。 to an object。 And it might have been
    310。 In this case the object is just going to be a tuple。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 1900年之后绝对没有出生日期。因此，这将是我们的检查内容。现在对于月份，我们将使用枚举。这让我可以为所有月份命名。再说一次，我记不清这个功能是什么时候添加的，但你可以将每个枚举值分配给一个对象。这可能是310。在这种情况下，对象将只是一个元组。
- en: And the number is the month number that we traditionally use。 And then over
    here we have the days of how many days can be in that month。 And so one of the
    things we can do is we've got a static method here and I can say give， me month。
    month number。 And of course it has to make sure that that month number is within
    range。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 数字是我们传统使用的月份数字。然后在这里我们有这个月份中可以有多少天。因此，我们可以做的事情之一是我们有一个静态方法，我可以说给我月份。月份数字。当然，它必须确保该月份数字在范围内。
- en: And if it is it goes ahead and produces the object associated with that number。
    And here is where we're solving the day of the month problem。 So if I have a month
    and I have a day I can pass the day into the month and it says okay。 what's the
    number of that day and then I'll index into the tuple for that month and make。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是，它就继续生成与该数字相关联的对象。在这里我们解决了一个月的日期问题。所以如果我有一个月份和一个日期，我可以将日期传递给月份，它会说好的。这个日期的数字是多少，然后我会在该月份的元组中索引并制作。
- en: sure that it's less than or equal to that。 So now we can guarantee that the
    days of the month are proper。 And so now I can do this composition thing again
    where I take the birth date and I've。 got the month， the day， the year and those
    will do whatever checks they need to do as。 that is being created。 And then in
    the post and knit check all I need to do is take the day and pass it into。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 确保它小于或等于那个。因此现在我们可以保证每个月的天数都是正确的。所以现在我可以再次进行这种组合操作，把出生日期、月份、日期和年份都放在一起，它们会在创建时执行所需的检查。然后在后期的检查中，我只需要将日期传入。
- en: check day for my month。 And it automatically checks to make sure that the day
    is within range。 Okay。 so that's pretty cool。 And now I've got a set of these
    and it'll go through and validate all of them。 So my birth date apparently is
    okay。 And then we've got a bunch of things that check and discover that oh these
    things are。 out of range gives me all that information that they're all out of
    range。 And so it's， I don't know。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 检查我的月份的天数。它会自动检查确保日期在范围内。好的。这很酷。现在我有一组这样的数据，它会遍历并验证所有这些。所以我的出生日期显然是可以的。然后我们有一堆东西来检查并发现，哦，这些东西超出了范围，给我提供了所有超出范围的信息。所以我不知道。
- en: I was quite delighted to discover this。 And also I did some tests because initially
    I think I just found somebody's example where。 they used a tuple and I said oh
    you can use tuples but then I did a test to find out that。 oh yeah you can assign
    it to any object at all which of course why wouldn't you be able， to？
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我很高兴发现这一点。而且我做了一些测试，因为最初我认为我只是找到了某人的例子，他们使用了元组，我想哦，你可以使用元组，但后来我进行了测试，发现哦，是的，你可以将其赋值给任何对象，当然，为什么不呢？
- en: It's Python。 All right。 So the month， so I used for the months I used an e and
    the month can also be used。 be created， using data classes but it's a lot more
    complicated than just using any num。 And that's really the point of this example。
    And remember all these examples are on the GitHub repository so you can just look
    through。 them and they're exactly what you're seeing here。 And so I could do the
    same thing that I did before and then I could actually use the data。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Python。好的。所以这一个月，我用的是e，月份也可以用数据类来创建，但这比使用任何枚举要复杂得多。这才是这个例子的重点。请记住，所有这些例子都在GitHub仓库中，所以你可以查看它们，它们正是你在这里看到的内容。所以我可以做之前做的事情，然后我可以实际使用数据。
- en: class， frozen data class for a month and you can see it's significantly messier
    and harder。 to follow。 So that's a good thing to know。 Like when you have a finite
    number of elements if you can put them in an enum that'll probably。 be much better
    than using the data class approach。 If you have a lot of elements or you only
    need to create some of them then the data。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 类，冻结的数据类持续一个月，你会发现它显得明显更复杂且更难以理解。所以这是一个值得了解的好事。比如当你有有限数量的元素时，如果你能将它们放入枚举中，那可能会比使用数据类的方法更好。如果你有很多元素，或者只需要创建其中的一部分，那么数据类。
- en: class approach is going to probably be better。 Yeah。 So the point of this was
    just to show that it works but that it's messier and less maintainable。 All right。
    So I think， yep that's everything。 All right， so I did get through。 We have five
    minutes left but I guess we can't do questions。 Is that correct？ We can do questions？
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 类的方法可能会更好。是的。所以这次的重点只是表明它可以工作，但它更复杂且不易维护。好的。所以我想，是的，这就是一切。好的，我确实讲完了。我们还有五分钟，但我想我们不能提问。是吗？我们可以提问吗？
- en: We can do questions this time。 All right。 So I've got five minutes for questions。
    Are there any questions？ Yes。 So is the question， can you take an existing class
    and freeze it？ Oh。 Can you freeze individual fields？ I didn't encounter that so
    I can't really say， I mean。 maybe but I didn't encounter that。 So I'm guessing
    probably not。 Oh， we have an expert。 No。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这次我们可以进行提问。好的，所以我有五分钟的提问时间。有没有问题？是的。那么问题是，你能将现有的类冻结吗？哦。你能冻结单独的字段吗？我没有遇到这种情况，所以我不能确切说，我的意思是，可能可以，但我没有遇到。所以我猜可能不行。哦，我们有一位专家。不。
- en: Other questions？ You can， oh so you can individually make them read only properties
    like I did in the。 normal class example。 But you do that by hand， yeah。 Yes。 [inaudible]，
    Okay。 [inaudible]， Okay。 [inaudible]， The observation was that I did not have
    any questions。 [inaudible]。 The observation was that I did not account for leap
    years but there might be some clever。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他问题吗？你可以，哦，所以你可以像我在正常类示例中那样单独将它们设置为只读属性。但你是手动做的，是的。是的。[听不清]，好的。[听不清]，好的。[听不清]，观察到的是我没有任何问题。[听不清]。观察到的是我没有考虑闰年，但可能会有一些聪明的想法。
- en: way to do it。 Yes。 That's a good point。 Yeah。 Somebody else is going to notice
    that too。 Anything else？ Yes。 [inaudible]， Does it check the what？ [inaudible]，
    Okay。 You guys understood the question better than I did。 [inaudible]， Okay。 You
    guys understood the question better than I did。 [inaudible]， Okay。 Yeah。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 做法是这样的。是的。这是一个好观点。是啊。其他人也会注意到这一点。还有别的吗？是的。[听不清]，它检查什么？[听不清]，好的。你们对这个问题的理解比我更好。[听不清]，好的。你们对这个问题的理解比我更好。[听不清]，好的。是啊。
- en: Person is simply calling the constructors for the base types。 For the composed
    types I should say。 Okay。 All right。 Okay。 Oh wait。 No。 We have one here。 [inaudible]，
    I'm not。 But I mean I've heard about them more mostly just recently。 So I didn't。
    [inaudible]， Yes。 Yeah。 Another thing is this Adors library that， yeah， so I should
    probably say Adors and， and， I can't。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 人只是调用基础类型的构造函数。对于组合类型我应该这么说。好的。好吧。哦等等。我们这里有一个。[听不清]，我不是。但我的意思是我最近听说过它们。所以我没。
    [听不清]，是的。是啊。还有一个是这个Adors库，嗯，是的，我应该说Adors和，我不能。
- en: Yeah。 So yeah。 Yeah。 I mean there's a lot of work going on but once you see
    the benefit of doing it this way。 you can see why other people are working on
    making it better。 All right。 I think we're done。 Yes。 [inaudible]， Thank you。
    [applause]。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 是啊。所以是的。是啊。我的意思是有很多工作在进行，但一旦你看到这样做的好处，你就会明白为什么其他人正在努力使其更好。好的。我想我们结束了。是的。[听不清]，谢谢。[掌声]。
- en: '![](img/cb0c8f5012f543e01ce8fb0120c60edd_4.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cb0c8f5012f543e01ce8fb0120c60edd_4.png)'
- en: (applause)。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: （掌声）。
