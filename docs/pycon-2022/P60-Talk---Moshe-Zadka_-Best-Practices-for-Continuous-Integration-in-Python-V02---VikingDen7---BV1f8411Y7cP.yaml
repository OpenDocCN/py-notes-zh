- en: P60：Talk - Moshe Zadka_ Best Practices for Continuous Integration in Python
    V02 - VikingDen7 - BV1f8411Y7cP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P60：演讲 - Moshe Zadka_ Python中的持续集成最佳实践 V02 - VikingDen7 - BV1f8411Y7cP
- en: So I want to cover what are the steps I'm going to go through in this talk。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我想要讲述在这个演讲中我将要经历的步骤。
- en: '![](img/0b9fcf17d06e5a70dccca14da249704e_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0b9fcf17d06e5a70dccca14da249704e_1.png)'
- en: I'll start by diving into what are the functional bits that make up a continuous
    integration。 system because those are the functional bits that we want to apply
    the best practices to。 Then before we talk about how to apply those best practices
    to， we'll talk about why we're。 going to apply the best practices to。 So what
    actually makes one continuous integration set up good and another bad？
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我将开始探讨构成持续集成系统的功能部分，因为这些功能部分是我们希望应用最佳实践的地方。在我们讨论如何应用这些最佳实践之前，我们将讨论为什么要应用最佳实践。那么，究竟是什么使一个持续集成的设置好，而另一个不好呢？
- en: So what are the criteria we're going to evaluate？ And finally。 after we've all
    agreed about what bits we can control and what are the targets。 we'll actually
    come to what I promised I'm going to talk about and explain how to make。 your
    continuous integration actually good。 So before you even talk about having a continuous
    integration for a project。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们要评估的标准是什么？最后，当我们都同意可以控制的部分和目标时。我们将真正进入我承诺要谈论的内容，并解释如何让你的持续集成真正有效。因此，在你甚至谈论为项目进行持续集成之前。
- en: you usually are， going to have some sort of a local way of building your project。
    So。 basically the interpreted language， we don't have a traditional build step，
    we don't need。 to compile anything， you know， usually。 But we do have steps that
    are pretty traditional to run and I kind of think of them as the build。 We usually
    want some kind of linting process。 Pilate， flakeate， sometimes my pie。 Under linting。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你通常会有某种本地构建项目的方式。因此，基本上，作为一种解释性语言，我们没有传统的构建步骤，我们不需要编译任何东西，你知道的，通常。但是我们确实有一些相当传统的步骤要执行，我将其视为构建。我们通常想要某种代码检查过程。Pilate、flakeate，有时是my
    pie。在代码检查之下。
- en: I cover anything that will look at your code but will not run it。 So anything
    that analyzes your code statically。 Obviously。 the other thing that you can do
    is run your code and the other thing you can， do is test your code。 Test is anything
    that runs your code or pieces of your code and looks at the output and sees。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我涵盖了任何可以查看你的代码但不会运行它的内容。因此，任何静态分析你的代码的内容。显然，另一件你可以做的事情是运行你的代码，另外一件你可以做的是测试你的代码。测试是任何运行你的代码或部分代码的内容，并查看输出。
- en: if the output is okay。 So， we usually do that when we want CI and before we
    have a CI。 you usually want to already， have some way of running your tests locally。
    And we usually have some sort of packaging。 Now， sometimes you'll package it into
    a wheel or an S-dist but this does not have to be the。 case。 Sometimes you'll
    want to package it into a PEX or maybe a Debian package or an RPM package。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果输出没问题。那么，我们通常在想要进行持续集成（CI）时这样做，并且在拥有CI之前。你通常会希望已有某种方式在本地运行你的测试。而且我们通常会有某种打包方式。现在，有时你会将其打包成一个wheel或S-dist，但这并不是必须的。有时你会想要将其打包成PEX，或者也许是Debian包或RPM包。
- en: or very commonly a Docker container image。 But these three things。 they're not
    always present but very frequently you'll find that。 most projects will have all
    of these three。 And before we even run CI。 we want to make sure that the project
    knows how to lint itself。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 或者非常常见的是Docker容器镜像。但这三件事并不总是存在，但你会发现大多数项目通常会有这三者。在我们甚至运行CI之前，我们想要确保项目知道如何进行代码检查。
- en: to test itself and to package itself。 So let's assume we already have a project
    that does that。 Well， we can start doing CI。 And so， I kind of gave the thing
    away， right？ I said， well， you know。 you run it locally， it's not the CI。 So clearly
    CI should be something that you run remotely on a server。 Well when you run it
    locally， the answer to when you run it was either very simple or。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试自身并进行自我打包。因此，让我们假设我们已经有一个能做到这一点的项目。那么，我们可以开始进行CI。所以，我有点提前说出结论了，对吧？我说，嗯，你知道。你在本地运行，它不是CI。因此显然，CI应该是在服务器上远程运行的东西。当你在本地运行时，答案要么非常简单，要么。
- en: very complicated。 The simple answer is when you wanted and the complicated answer
    is human psychology is。 really complicated。 I don't know when you wanted to do
    it。 But at the end of the day， you know。 it's at least obvious。 When you wanted
    to do it， you just did it。 When you run it on a server。 the server has to have
    some sort of well-defined algorithm， when do you run that build。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 非常复杂。简单的答案是，当你想做的时候，而复杂的答案是人类心理真的很复杂。我不知道你想什么时候做。但归根结底，你知道。至少是显而易见的。当你想做的时候，你就去做。当你在服务器上运行它时，服务器必须有某种明确的算法，来决定何时运行这个构建。
- en: And that will have to be defined via code， so that has to be very clear。 In
    the old old data。 like let's say circa 2006， having a nightly build was considered。
    this is where the term continuous integration came for。 You continuously， every
    night。 every night you run the build and teams did that were， like sophisticated。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 而这必须通过代码来定义，所以这必须非常明确。在老旧的数据中，比如说2006年，拥有一个夜间构建被视为。这就是持续集成一词的来源。你每晚持续地运行构建，团队这样做是很复杂的。
- en: They have an automated build process that runs every night on a server。 That
    was like the height of sophistication in 2006。 And then it was good， right？
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 他们有一个每晚在服务器上运行的自动构建过程。在2006年，这被视为复杂性的巅峰。然后，那是好的，对吧？
- en: Because then in the morning you can come in and say， okay， oh， something broke。
    It was one of the things that were done during the day。 You should remember that
    2006 is a long time ago and most teams were very local and like。 there was a specific
    definition of time， right？ Like the time zone of the local team。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这样早上你可以进来并说，好的，哦，有东西坏了。这是白天做的事情之一。你应该记住2006年是很久以前的事，大多数团队都是非常本地化的，并且有一个具体的时间定义，对吧？就像是本地团队的时区。
- en: So the night is like whenever the team is asleep。 And so they would come in
    the morning。 see that something broke。 One of the things that happened during
    the day。 it might be difficult to figure out which， of the things during the day。
    So someone said， hmm。 I have an idea。 What if instead of waiting until it's night
    time。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 所以晚上就像是团队在睡觉的时候。因此，他们早上进来时，会发现有什么东西坏了。白天发生的事情之一，可能很难确定是哪个事情导致的。所以有人说，嗯。我有一个主意。要不我们不等到晚上。
- en: as soon as they've emerged to the main， branch， we'll run it。 Then if it's broken。
    we'll know that that's probably whatever that merges。 This is like， let's say
    in 2008。 if you had that， you were like in the top 95th percentile， of development
    sophistication。 People were like， oh， that's a team I want to join。 Clearly they
    take their code seriously， right？
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦它们合并到主分支，我们就会运行它。如果它坏了，我们就知道这可能是合并的某个东西。这就像是，假设在2008年，如果你有这样的系统，你就处于开发复杂性前95个百分点的行列。人们会说，哦，那是我想加入的团队。他们显然很重视他们的代码，对吧？
- en: But we keep updating our standards。 And nowadays， we usually think of what we
    want to run the contingency regression on or。 something I want to think of as
    suggested patch。 Different systems will have different names for that。 In GitHub，
    it will be called the pull request。 In GitHub， it will be called the merger request。
    If you use review board， it's a review request。 But whatever it is。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们不断更新我们的标准。现在，我们通常会考虑我们想在应急回归上运行的内容，或者。某些我想作为建议补丁来考虑的东西。不同的系统会有不同的名称。在GitHub中，它将被称为拉取请求。在GitHub中，它将被称为合并请求。如果你使用审核板，它就是审核请求。但不管是什么。
- en: it's the thing that you ask your colleagues to review as people will。 also be
    the thing that you're going to run the CI before you merge。 So if it's broken。
    you don't know that fact after you have merged。 And now you have to fix something
    that's broken for everybody。 But you know， ahead of time， this is let's say， you
    know， started kind of being like kind。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你请同事审查的东西，因为人们会。也是你在合并之前要运行持续集成的东西。因此，如果它出错，你在合并后就不知道这个事实。现在你必须为每个人修复一些已经坏掉的东西。但你知道，提前了解这一点，这就像是，嗯，开始有点像一种标准实践。
- en: of standard practice， sometime between 2013 to 2015。 And by now。 every reasonable
    system that you use will have that as a built-in feature。 The situation hasn't
    stopped。 Right？ This is already kind of 10 to 7 years ago。 There's like more things
    that can be done now。 People talk about stuff like merge trains。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 大约在2013到2015年之间。这种情况并没有停止，对吧？这已经是大约7到10年前的事了。现在还有更多可以做的事情。人们谈论的东西比如合并列车。
- en: something called not-wacket science， which is， a very weird name for something。
    All kinds of stuff。 I'm not going to dive too much into that。 Another thing I'm
    not going to dive too much into that is continuous delivery and deployment。 That's
    not because these things are not important。 But this talk is limited in time。
    If I try to cover everything， it would take way too long。 So in this talk。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种叫做“非严谨科学”的东西，名字非常奇怪，涉及各种内容。我不会深入探讨这个。另一个我不会深入探讨的主题是持续交付和部署。这并不是因为这些事情不重要，而是这次演讲时间有限。如果我尝试涵盖所有内容，会花费太长时间。所以在这次演讲中。
- en: I'm going to focus on these suggested patch builds。 And the reason I'm going
    to focus on these suggested patch builds is that in a typical， project。 your continuous
    integration system， CPU cycle for CPU cycle， will be spending most。 of its time
    in that flow。 Right？ Sure， this will eventually be merged to main。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我将重点关注这些建议的补丁构建。之所以关注这些建议的补丁构建，是因为在一个典型的项目中，你的持续集成系统，按CPU周期计算，通常会在这个流程中花费大部分时间，对吧？当然，这最终会合并到主分支中。
- en: and it will run CI on that merge to main。 But usually a patch takes a few iterations。
    So on average。 most of the flows that go through your CI are going to be on that
    suggested， patch build。 Which means that the main thing you're going to want to
    optimize is that flow。 So I'm going to focus the entire talk on just how to optimize
    that specific patch build。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 它将在合并到主分支上时运行CI。但通常一个补丁需要经过几次迭代。因此，平均而言，大多数经过CI的流程都将在这些建议的补丁构建上。这意味着你最想要优化的主要内容就是这个流程。所以我将整个演讲的重点放在如何优化这个特定的补丁构建上。
- en: And to come back to like， why are we doing that， we usually run it as an automated
    gate。 Right？
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 说回我们为什么这么做，我们通常将其作为一个自动化的门来运行，对吧？
- en: We have a human gate。 Why is the human approval process that will usually mark
    off as approved。 Why is it this code looks good to me？ And the goal of the CI
    is usually to look for regressions。 Right？ It can't really say if the patch is
    like accomplishing its goal in the abstract。 Right？
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个人工门。为什么人类审核流程通常会标记为已批准？为什么这段代码在我看来不错？CI的目标通常是寻找回归问题，对吧？它真的不能说这个补丁是否在抽象上达成了它的目标，对吧？
- en: That's not something you can really implement in a computerized manner。 Right？
    What a CI system。 the goal of it in a， one of the suggested patch build is， is
    this making。 any of our things worse than they were before？ And so this is useful
    because this means that like anything that has passed this gate will。 at least
    not make things worse off。 So this is a goal of this suggested system。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是你可以以计算机化方式真正实现的，对吧？CI系统的目标之一是，在这些建议的补丁构建中，是否让我们的任何事情比之前更糟？这很有用，因为这意味着任何通过这个门的东西至少不会让事情变得更糟。因此，这是这个建议系统的一个目标。
- en: So now we know what it's supposed to do and we know what we're talking about。
    So this is what we're going to focus about。 How do you make your CI system be
    a better automated gate for patch being not regressions？
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道它应该做什么，也知道我们在谈论什么。那么这就是我们要关注的内容。你如何让你的CI系统成为一个更好的自动化门，以防补丁不出现回归？
- en: So how does it do that？ Well， your CI system is usually made of a coordinator
    that look at suggested patches。 and decides， okay， that suggested patch has now，
    I should really do like these ones on， it。 And then the CI runners will actually
    go through the flow， run your tests， run your linters。 and send the output。 And
    in most modern frameworks， again， regardless of which ones you use。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 那它是如何做到的呢？你的CI系统通常由一个协调者组成，它会查看建议的补丁并决定，“好吧，这个建议的补丁现在可以进行，我应该真的做这些。”然后CI运行器将实际执行流程，运行你的测试，运行你的代码检查工具，并发送输出。在大多数现代框架中，无论你使用哪个框架，这个输出都是可用的。
- en: that output will be， consumable via two ways and both of these are important
    and it's going to be really relevant。 in the， you know， press of the talk。 One
    is that they're going to be collected live from the runners。 So as the build is
    running， you can see the output， which means if there's a test failure。 you can
    see it immediately， but it's not just live， it's also documented。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 该输出将以两种方式被处理，这两种方式都很重要，并且在这个演讲中非常相关。第一种是它们将从运行器中实时收集。因此，当构建正在运行时，你可以看到输出，这意味着如果有测试失败，你可以立即看到，但这不仅仅是实时的，它也是有文档记录的。
- en: It's also retained forever。 Now forever is obviously like somewhat of a nebulous
    concept exactly when it's backed。 up， what's going to be paid。 But it's usually
    considered in most systems a reasonably long term place。 right？ You can have a
    permalink in it that you can link in a discussion and say this build shows。 you
    that this test did something， right？ So this is kind of an important thing to
    kind of remember about the build logs in the continuous。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 它也会永远保留。现在“永远”显然是一个模糊的概念，确切的备份时间、支付情况是什么。但在大多数系统中，通常被认为是一个相对长期的存储，对吧？你可以在其中有一个永久链接，可以在讨论中引用，并说这个构建向你展示了这个测试做了某事，对吧？所以这是一个关于持续构建日志需要记住的重要事项。
- en: integration system。 So now that we understand what the continuous integration
    system is made of and what it's。 supposed to do， let's figure out what we can
    do to， what kind of continuous integration。 systems are better than others， right？
    What do we make it good， right？
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 集成系统。那么现在我们明白持续集成系统的构成以及它应该做什么后，让我们来弄清楚我们能做什么，哪些持续集成系统比其他系统更好，对吧？我们如何使它变得更好，对吧？
- en: Even if we don't know how to make it good， what we make people say this is a
    good system。 you have improved the situation。 Well， there's a few different pretty
    orthogonal criteria that you can apply。 So one criterion that you can apply is
    accuracy， right？
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们不知道如何做好它，我们所做的也会让人们说这是一个好的系统。你改善了情况。好吧，有几个不同且相对独立的标准可以应用。那么，一个可以应用的标准是准确性，对吧？
- en: We said that its goal is to say does the patch introduce a regression？
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们说它的目标是判断补丁是否引入了回归。
- en: So accuracy means that the answer is correct。 If it says that the patch introduces
    a regression。 it introduces a regression and if it says that， the patch does not
    introduce a regression。 the patch does not introduce a regression。 Any time that
    it gives the wrong answer。 that's an accurate answer， that's an incorrect answer。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 所以准确性意味着答案是正确的。如果它说补丁引入了回归，那么它确实引入了回归；如果它说补丁没有引入回归，那么补丁就没有引入回归。任何时候它给出错误答案，那就是不准确的答案。
- en: Clearly the perfect continuous integration system is 100% accurate。 A system
    that is more accurate is better than a system that is less accurate。 So this is
    a criteria。 right？ This is something that is good to have。 But another orthogonal
    criterion is actionability。 Again， CPU cycle for CPU cycle most of the time when
    you run a CI system， it will say。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，完美的持续集成系统是100%准确的。一个更准确的系统比一个不那么准确的系统要好。所以这是一个标准，对吧？这是一个值得拥有的东西。但另一个相对独立的标准是可操作性。再次强调，CPU周期对CPU周期而言，大多数时候当你运行CI系统时，它会说。
- en: that most of the patches are bad。 That's reasonable， right？ Otherwise。 why would
    you have a CI system？ If most of the time it would approve。 then you should probably
    run it less， right？ It's probably doing a lot of redundant work。 So in general，
    a lot of times patches are bad。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数补丁都是坏的。这是合理的，对吧？否则，你为什么要有一个CI系统？如果大多数时候它都会批准，那么你可能应该少运行它，对吧？它可能在做很多冗余工作。所以通常来说，很多时候补丁都是坏的。
- en: '![](img/0b9fcf17d06e5a70dccca14da249704e_3.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0b9fcf17d06e5a70dccca14da249704e_3.png)'
- en: That's okay， right？ This is why we have this automated system to give us feedback。
    But this means that when the patch is not good， it's really useful if that system
    gave。 you good information about how to fix it。 Now， the optimum here is something
    like black。 which actually generates a diff for you。 But that's probably unattainable。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这样可以吗，对吧？这就是我们拥有这个自动化系统以获取反馈的原因。但这意味着当补丁不好时，如果这个系统能提供给你关于如何修复它的有用信息，那是非常有用的。现在，这里的最佳选择是像black那样的工具，它实际上会为你生成一个diff。但这可能是无法实现的。
- en: So what kind of an attainable criterion we can have here？ Well。 the best of
    all system tells you exactly how to reproduce it locally。 Once you can reproduce
    it locally， the CI system is not in the picture anymore。 Right now。 how actionable
    it is is kind of up to your local development environment。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们可以在这里获得什么样的可实现标准呢？好吧，所有系统中最好的那个确切告诉你如何在本地重现它。一旦你能在本地重现它，CI系统就不再是问题了。现在，多少可操作性取决于你的本地开发环境。
- en: You can use local debuggers， you can put in print statements。 Whatever used
    to debug your local code is up to you， right？
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用本地调试器，也可以放入打印语句。用来调试你本地代码的方法由你决定，对吧？
- en: That's already like a language stack issue or a development stack issue， not
    a CI issue。 So best of all， if a CI system tells you how to reproduce it locally，
    if for some reason。 it's very hard to reproduce locally， it should probably give
    you a lot of useful information。 Another， again， orthogonal criterion is how long
    does it take towards answer， promptness， right？
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这已经类似于语言堆栈问题或开发堆栈问题，而不是 CI 问题。所以最理想的是，如果一个 CI 系统告诉你如何在本地重现它，如果出于某种原因，它很难在本地重现，它应该提供大量有用的信息。另一个，再次，正交的标准是回答所需的时间，及时性，对吧？
- en: Imagine that you had a system that is perfectly accurate and perfectly actionable，
    meaning。 that it always gives you the correct answer。 And when the answer tells
    you like this is a bad patch。 like you can either reproduce， it locally， but it
    takes the whole day to run。 That's not a good system， right？ Even though it's
    perfect on the first two criteria， right。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你有一个完全准确且可操作的系统，意味着它总是给你正确的答案。当答案告诉你这是一个坏补丁时，你可以在本地重现，但运行需要整整一天。这不是一个好的系统，对吧？即使它在前两个标准上是完美的，对吧。
- en: that's not a good system because you， wouldn't be able to develop effectively
    with it。 So promptness is an orthogonal criterion here。 And the final criterion
    I'm going to talk about is costs。 Right？ Again， imagine that you had a system
    that is perfect on all the other three， but costs。 a lot of money。 Well， we live
    in a capitalist society， right？ We have to pay money for these things。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一个好的系统，因为你无法有效地进行开发。所以及时性在这里是一个正交标准。而我将要谈的最终标准是成本。对吧？再想象一下，你有一个在其他三个方面都完美的系统，但成本非常高。好吧，我们生活在资本主义社会，对吧？我们必须为这些东西付钱。
- en: Basically， the most money you spend in kind of a modern， kind of flexible， cloudish
    environment。 is the one-on-the-compute cost。 If you're spending more money than
    your product brings in。 then this becomes an affordable， system， right？ And that's
    kind of like the limit case。 Clearly。 in an ideal case， you want to minimize the
    cost because this is your profit margin。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，在现代灵活的云环境中，你花费的最多的钱是计算成本。如果你花的钱超过了你的产品收入，那么这就变成了一个不可承受的系统，对吧？这就像是一个极限案例。显然，在理想情况下，你希望尽量减少成本，因为这就是你的利润空间。
- en: on whatever product DCI system supports。 So now that we know what our goals
    are， finally。 we can talk about how to actually， improve them。 So well， you can
    improve the accuracy。 You can improve the actionability。 You can improve the promptness。
    And you can improve the cost。 So one of the biggest things you can do to improve
    the accuracy is to use containers。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 DCI 系统支持的任何产品。因此现在我们知道我们的目标是什么，最后。我们可以谈谈如何真正改善它们。那么，嗯，你可以提高准确性。你可以提高可操作性。你可以提高及时性。你可以降低成本。所以你可以提高准确性的一项重要措施是使用容器。
- en: And the reason is because remember that we said that CI， the goal here in the
    gate function。 is to tell you the regression。 Now if you update to a new Python
    version， right。 even if it exposes a hidden problem， with your code， right。 even
    if it's a new Python build that uses wider characters and。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 之所以如此，是因为我们记得我们说过 CI，这里的目标是告知你回归。现在如果你更新到一个新的 Python 版本，对吧。即使它暴露了代码中的隐藏问题，对吧。即使是一个使用更宽字符的新
    Python 构建。
- en: it exposes like some problematic stuff with your code， it's not a regression
    in your patch。 That patch should not be not allowed to come in。 So you want to
    use container image that has a specific version of Python and a specific。 build
    of Python。 And any other non-Python dependencies。 And then you want to pin the
    image tag。 right？ If you do all of that and then pin to latest， you've undone
    all the work， the hard work。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 它暴露了代码中一些问题的内容，并不是你补丁中的回归。这个补丁不应该被拒绝。因此，你想使用具有特定版本的 Python 和特定构建的容器镜像。以及任何其他非
    Python 的依赖关系。然后你想固定镜像标签，对吧？如果你做到这一切然后固定到最新，你就抵消了所有的努力和艰辛。
- en: you've done。 Because as soon as a new image is released， you've upgraded to
    the new image。 And again， you might fail perfectly valid patches。 Now a typical
    Python program has dependencies。 Even pretty small things can have like 10， in
    like their recursively closed dependencies。 Medium ones can have 100s。 I've seen
    definitely ones with like thousands。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦发布新镜像，你就已经升级到新镜像。而且你可能会拒绝完全有效的补丁。现在一个典型的 Python 程序有依赖关系。即使是比较小的东西，也可能有像 10
    个这样的递归依赖关系。中等的可能有数百个。我见过确实有数千个依赖的情况。
- en: If any of those versions update and that somehow causes a problem， again， it
    doesn't。 matter if the problem is in the library or in your code。 This is not
    a problem with a patch。 You should test against the pin dependencies because otherwise
    you will be giving the wrong， answer。 You will be saying that the patch is wrong
    but the patch is absolutely fine。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些版本中的任何一个更新，并且因此导致问题，问题不论是在库中还是在你的代码中，都无关紧要。这不是补丁的问题。你应该针对固定的依赖项进行测试，否则你会得出错误的结论。你可能会说补丁是错误的，但实际上补丁是完全正确的。
- en: So you should always test in your CI flow with patch versions against pin dependencies。
    Now you don't want to upgrade the pins and you want to upgrade them in a dedicated
    patch。 And if that patch fails， the CI system has done its job。 That patch will
    not be allowed to merge。 That patch does indeed introduce a regression and until
    you fix it， you should not merge， it。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你应该始终在 CI 流程中使用固定依赖项的补丁版本进行测试。现在你不想升级这些固定依赖项，而是希望在专门的补丁中进行升级。如果该补丁失败，CI 系统就完成了它的工作。该补丁将不被允许合并。确实，该补丁引入了回归，直到你修复它为止，你都不应该合并。
- en: You should probably fix that at some point but you should follow the usual flow
    about how。 to fix problematic patches。 There are services that will help you。
    The only thing that will help you is to produce your PRs。 That's not nothing but
    you are still responsible for looking at the failures deciding when to。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能在某个时刻需要修复这个问题，但你应该遵循关于如何修复问题补丁的通常流程。有些服务会帮助你。唯一能帮助你的是生成你的 PR。这并非毫无意义，但你仍然负责查看故障，决定何时进行调整。
- en: merge and so on。 So whether you use a service or not， you should still go with
    this flow。 Test quality matters a lot for the CI accuracy。 If you have bad tests。
    they're going to reduce your CI quality。 But test quality is its own not half
    hour talk but at least 10 hour tutorial。 From the CI perspective， what you want
    to do is make sure that you monitor and improve。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 合并等等。因此，无论你是否使用服务，你仍然应该遵循这个流程。测试质量对 CI 的准确性非常重要。如果你的测试很糟糕，它们将降低你的 CI 质量。但测试质量本身不是半小时的讨论，而至少是一个
    10 小时的教程。从 CI 的角度来看，你要做的是确保你监控并改进。
- en: the test quality。 The CI is in a unique position to look at the test and see
    the historical data and see。 which tests are good and which aren't。 You want to
    make sure that you do that。 Again。 I'm not going to cover exactly how to optimize
    that。 For improving actionability。 the biggest thing you can do is set the verbosity
    to the highest， level it will go。 Any test runner。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 测试质量。CI 在查看测试时处于独特的位置，可以查看历史数据，了解哪些测试是好的，哪些不是。你想确保做到这一点。再次强调，我不会详细讲解如何优化这一点。为了提高可操作性，最大的事情是将详细程度设置为最高水平。任何测试运行程序。
- en: linked runner that has verbosity options， set them to the maximum it can go。
    Because you can filter out stuff but you cannot filter in stuff。 Which means if
    you had a failure。 especially if it's hard to reproduce failure， you really， want
    to know what was the problem。 So the higher the verbosity， the better。 You can
    filter the logs if you really need to。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 链接的运行程序具有详细程度选项，请将其设置为最大值。因为你可以过滤掉某些内容，但无法过滤进来。这意味着如果出现故障，尤其是如果故障难以重现，你真的想知道问题出在哪里。因此，详细程度越高越好。如果真的需要，你可以过滤日志。
- en: A lot of the time failures will be in tests。 Now frameworks like PyTests or
    Hamcrest will help you to make sure that the assertions。 are more verbose。 But
    they are there to help you。 They are not there to do your job for you。 You can
    still use PyTests assertions or Hamcrest assertions and not get verbose test outputs。
    if you use them badly。 Make sure you cause your test to fail locally。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 很多时候，故障会出现在测试中。现在像 PyTests 或 Hamcrest 这样的框架会帮助你确保断言更具详细性。但它们是来帮助你的，并不是替你完成工作。如果你使用不当，你仍然可以使用
    PyTests 断言或 Hamcrest 断言，而不会得到详细的测试输出。确保你的测试在本地失败。
- en: Like the assertion failure actually has enough verbosity if not to fix that。
    That is extremely useful。 That is time well spent when you write a test。 One thing
    that PyTests or any of these frameworks will not help you with is when tests fail
    not。 because of an assertion failure but because of an exception。 Which means
    make sure in your code。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，断言失败实际上具有足够的详细性，如果不能修复那就极为有用。当你编写测试时，这样的时间花得非常值得。PyTests 或任何这些框架无法帮助你的是，当测试失败并不是因为断言失败，而是因为异常。这意味着确保在你的代码中处理好这些情况。
- en: When you raise an exception add a lot of details。 Because those details those
    frameworks will show you。 But if you don't put those details in they will not
    be able to show you those details。 So this is really important。 And we talked
    about how a lot of actionability comes to local reproducibility。 Spue as many
    details of the environment to the logs。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当你抛出异常时，添加大量细节。因为这些细节那些框架会展示给你。但是如果你没有放入这些细节，他们将无法显示这些细节。因此，这非常重要。我们讨论了如何许多可操作性归结于本地可复现性。尽可能多地将环境的细节输出到日志中。
- en: You can do it in the beginning of the test one so they will scroll off the live
    one and。 won't bother anyone。 But when you have a failure and whoever is trying
    to reproduce it locally is having problems。 they will scroll to the beginning
    and read carefully about what is different between their。 environment and the
    CI environment and you don't know which line is going to save them。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在测试开始时进行处理，这样它们就会滚动到实时日志中，不会打扰任何人。但当你发生故障，而试图在本地重现的人员遇到问题时，他们会滚动到开头，仔细阅读他们的环境和CI环境之间的不同之处，而你不知道哪一行会拯救他们。
- en: So of course environment variables are really crucial because you don't know
    which environment。 variable is going to make some library deep deep deep in your
    code behave slightly differently。 Any details about the platform version of libc
    version of operating system and so on。 And anything else you can think of just
    spew your heart out。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，环境变量是非常重要的，因为你不知道哪个环境变量会让某个库在你的代码中表现得稍有不同。任何关于libc版本、操作系统版本等的细节，以及你能想到的其他任何事情，都可以尽情表达。
- en: As a corollary you're spewing all these environment variables。 If you put secrets
    in them you're going to have a bad time with your secret licking。 The solution
    is not to do all kinds of fancy masking。 The solution is don't put your secret
    in environment variables。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个推论，你泄漏了所有这些环境变量。如果你把秘密放在其中，处理秘密的时间会很糟糕。解决方案不是做各种花哨的掩盖，而是不要把你的秘密放在环境变量中。
- en: The better place to put your secrets every reasonable CI system will give you
    better place。 to put those secrets in。 Environment variables are really scary
    because there are other things that will spew environment。 variables so you're
    not actually helping yourself。 You're just delaying the inevitable secret。 One
    way to improve partners is to cache aggressively。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 每个合理的CI系统都会给你提供更好的地方来存放秘密。环境变量真的很可怕，因为还有其他东西会泄漏环境变量，所以你实际上并没有帮助自己。你只是在延迟不可避免的秘密。改善合作伙伴的一种方式是积极缓存。
- en: A lot of CI systems will have primitives to cache all kinds of downloads in
    a local file。 systems that will help you figure those out and start using those。
    If you build containers it's kind of annoying to set container layer caching against
    the， registry。 But if you go through that flow it's going to save you a lot of
    time because unlike when。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 很多CI系统会有原语来缓存各种下载到本地文件系统，这将帮助你找出并开始使用它们。如果你构建容器，将容器层缓存设置为注册表是有点麻烦的。但是如果你经过这个流程，将节省很多时间，因为这与当。
- en: you build it locally those CI runners are often very similar so they will not
    have those layers。 cached in。 But very commonly people order their container build
    files to have the least changing and。 most time consuming layers at top。 So if
    you do go through this flow you can improve your container build speed a lot。
    And have local PyPI container caching proxies that are network wise close to the
    CI system。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在本地构建时，这些CI运行器通常非常相似，因此它们不会缓存这些层。但人们通常会将他们的容器构建文件排序，以使最少变化和最耗时的层在顶部。因此，如果你经过这个流程，可以大大提高你的容器构建速度，并拥有与CI系统网络接近的本地PyPI容器缓存代理。
- en: Another thing you can improve on this is pooling。 Aggressively we use connections，
    downloads， etc。 Think carefully about how to break up tests that actually improve
    things。 You can fail fast。 If you use all kinds of libraries to order tests based
    on likelihood to fails， a couple。 of open solutions I will mention them in my
    talk notes。 You can also parallelize ones aggressively。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以改进的另一个方面是池化。积极使用连接、下载等。仔细考虑如何拆分测试以真正改善情况。你可以快速失败。如果你使用各种库根据失败的可能性排序测试，我会在我的演讲笔记中提到几种开放解决方案。你还可以积极并行化测试。
- en: You can use CI primitives for that or you can use tester primitives for that。
    Again。 some configuration may be needed。 It's often worthwhile。 You can mock out
    those things especially like databases。 You can get something that smokes out
    the database and doesn't run to a file system。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以为此使用CI原语，也可以使用测试者原语。再说一次，可能需要一些配置。这通常是值得的。你可以模拟那些东西，尤其是数据库。你可以得到一些模拟数据库而不连接到文件系统。
- en: You can mock out a file system by mounting something like Tempeface which won't
    write， to disk。 All kinds of tricks like that。 You can also kill useless ones
    to improve the cost。 If a committee is added to a patch nobody is going to care
    about any ones that are in。 the previous patch。 It's annoying to find those ones
    and kill them but that can improve your cost a lot。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过挂载像Tempeface这样的文件系统来模拟文件系统，它不会写入磁盘。各种这样的技巧。你还可以杀死无用的部分以降低成本。如果一个补丁添加了一个委员会，没人会关心之前补丁中的任何内容。找到这些并杀死它们很烦人，但这可以大大改善你的成本。
- en: You can stop runs early。 That's a bit of a trade-off because sometimes you don't
    get all the failures and you'll。 get to a flow where people do more patches。 You
    should monitor that and see if it actually improves things。 Even if you do better
    stabbing and mocking that will take less resources from the environment。 But you'll
    notice that a lot of these things come with trade-offs。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以提前停止运行。这有点折衷，因为有时你不会得到所有的失败，你会进入一个人们做更多补丁的流程。你应该监控这一点，看看它是否真的改善了事情。即使你做得更好，模拟也会减少环境的资源消耗。但你会注意到，很多事情都是有折衷的。
- en: You can have better accuracy by writing more tests or making sure that they're
    really good。 You can focus a lot of actionability but you might lose on promptness。
    You can focus a lot on promptness but you might lose out on cost。 You can focus
    on all of them but you're going to put it out of effort。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 通过编写更多的测试或确保它们真的很优秀，你可以提高准确性。你可以非常注重可操作性，但可能会失去及时性。你可以非常关注及时性，但可能会在成本上失去。你可以关注所有这些，但你会付出更多的努力。
- en: You have to make a decision what you value。 If you don't make a decision you're
    still making a decision by your actions but it's。 going to be re-litigated every
    spring。 You're much better off actually deciding what are your values。 Once you
    have your values in hand， once you know what you care about you can measure。 what
    you have and now that you know what you value you can see whether your measurement。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须决定你重视什么。如果你不做决定，你的行为仍然在做决定，但这会在每个春天被重新审议。你最好真正决定你的价值观。一旦你掌握了自己的价值观，一旦你知道你在乎什么，你就可以衡量你所拥有的，现在你知道了你的价值观，你就可以看到你的衡量标准。
- en: aligns with your values。 And if they don't， now you know what to improve。 The
    thing that least aligns with your values is exactly how much effort to put in。
    So putting that amount of effort and deleting it by how much you want it。 But
    you also want to repeat this process。 You want to keep thinking about whether
    your values should change and you want to see whether。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 与你的价值观保持一致。如果不一致，那么你现在知道该改善什么。与你的价值观最不一致的事情正是你要投入的努力。因此，要根据你想要的程度来投入这样的努力。但你也想重复这个过程。你想持续思考你的价值观是否应该改变，并想看看是否。
- en: the situation changes。 Both of these things are likely to change。 That's okay。
    This is talk about best practices。 The only way to do that is to practice them。
    So I hope that you'll apply it to your favorite CIFlow。 I love talking about this。
    I just stood out here and talked to you about this for 30 minutes。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 情况在变化。这两件事情都可能发生变化。没关系。这是讨论最佳实践。做到这一点的唯一方法就是实践它们。因此，我希望你能将其应用到你喜欢的CIFlow中。我喜欢谈论这个。我刚在这里站了30分钟跟你们谈论这个。
- en: If you want to continue the conversation， again my website is COVIDism。com，
    email LinkedIn。 and like 2，000 other ways of reaching out to me out there。 And
    we also have an open space to borrow it at 11am。 Check the board for what room
    it is。 And I would love to talk to you all about more about that。 Thank you all。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想继续对话，我的网站是COVIDism.com，电子邮件、LinkedIn，还有其他2000种联系方式。我们还有一个开放空间，11点借用。查看公告板，看看是什么房间。我很想和大家聊更多关于这个的事情。谢谢大家。
- en: And I hope this was a good talk and I hope you enjoy the rest of your conference。
    [APPLAUSE]。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这次谈话很精彩，也希望你享受会议的其余时间。[掌声]
