- en: P29：Talk - Calvin Hendryx-Parker_ Bootstrapping Your Local Python Environment
    - VikingDen7 - BV1f8411Y7cP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P29：演讲 - Calvin Hendryx-Parker_ 启动你的本地Python环境 - VikingDen7 - BV1f8411Y7cP
- en: There are a lot of you in here because this is not as simple as it may seem
    as many of。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里有很多人，因为这并不像看起来那么简单。
- en: '![](img/4396149f3293257eae9d4250fa16d898_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4396149f3293257eae9d4250fa16d898_1.png)'
- en: you have probably found out through your first attempts at setting up your computer
    or the。 many follow on failed attempts decades later as a seasoned Python developer
    still trying。 to do this type of thing。 So a little bit of intention setting。
    I think that's important for kicking off the talk the， right way。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能通过第一次尝试设置电脑或多年后作为经验丰富的Python开发者仍然尝试这种事情而发现了这一点。因此，设定一些意图，我认为这是以正确的方式开启演讲的重要一步。
- en: For those of you who may not be familiar， there is an Easter egg in Python that
    gives you the。 Zen of Python if you import and run this module。 So I recommend
    to anyone who I've ever taught Python to or had the pleasure of teaching them。
    how to get started with Python is to print this out， put it in a frame， put it
    in your。 bathroom and read it every day when you brush your teeth a couple times
    a day。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些可能不熟悉的人，Python中有一个复活节彩蛋，如果你导入并运行这个模块，会给你带来Python之禅。因此，我建议任何我教过Python的人，或者有幸教他们如何开始使用Python的人，打印出来，放在框架里，放在你的浴室，每天刷牙时读几遍。
- en: It's good for the soul， it's good for more than just programming and coding
    but it helps just。 everyone on the same page about how we're going to think about
    this kind of a problem。 of getting your computer ready to be your superpower tool
    that is going to be the thing。 that you use day in and day out as the role of
    a developer or system engineer or whatever。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这对灵魂有好处，不仅仅是编程和编码，帮助每个人达成共识，如何看待这种问题。让你的电脑准备好成为你的超级工具，这将是你作为开发者或系统工程师等每天都在使用的东西。
- en: the role may be where you're going to be using Python whether you're a data
    scientist or。 whether you're going to be a software developer or engineer。 This
    is an important one and we're going to highlight a couple of these throughout
    the。 talk and I'll get to those in a moment but the ultimate goal here is to end
    up not here。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这个角色可能是你使用Python的地方，无论你是数据科学家，还是软件开发者或工程师。这是一个重要的话题，我们将在演讲中强调其中几个，但这里的终极目标是不要停留在这里。
- en: Some of you are familiar with XKCD。 This was April 2018， Randall Monroe posted
    this comic。 admitting he had did some bad things， to his computer at this point。
    So if you've seen this。 the Python Environmental Protection Agency wants to seal
    it in a cement。 chamber and so that was the alt text on this specific one but
    it was funny， it's like there's。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你们中的一些人可能熟悉XKCD。这是2018年4月，Randall Monroe发布了这幅漫画，承认他对他的电脑做了一些坏事。如果你见过这个，Python环境保护局想把它封在一个水泥箱里，这就是这张漫画的替代文本，但很有趣。
- en: a lot of truth in this cartoon and I can tell you from being someone who's been
    you， I have。 used Python since the year 2000。 Very first version of Python I ever
    installed was version 152 and all this is true and I've。 been through all of this
    stuff because I've been on a Mac or on Linux or on Windows and。 I've ended up
    with five different installs and I'm not sure where this Python is coming， from。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这幅漫画中有很多真理，我可以告诉你，作为一个从2000年开始使用Python的人，我经历了这些。第一次安装的Python版本是152，这些都是事实，我经历过这一切，因为我用过Mac、Linux和Windows，最终安装了五个不同的版本，我不知道这些Python是从哪里来的。
- en: I'm not sure where PIP is putting something。 I swear I installed something in
    one spot。 I go over to use it in the project and it's， like module not found。
    I think we all can relate and actually if you all are， if there's a quick question，
    don't。 hesitate to raise your hand， I'll make sure I repeat it back but I want
    to avoid this situation。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我不知道PIP把东西放到哪里。我发誓我在一个地方安装了某个东西，我去项目中使用时，结果是“找不到模块”。我想我们大家都能理解，如果你们有快速问题，别犹豫，举手，我会重复一遍，但我想避免这种情况。
- en: for you all because Python does live in many places。 It is provided by your
    operating system so if you're on a Mac or if you're typically on， Linux。 those
    are going to have Python pre-installed and I know it sounds great but be warned，
    it。 may not be the one for you。 You may have installed Python from an App Store
    so for example if you go to the Microsoft。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 因为Python存在于许多地方。它由你的操作系统提供，所以如果你在Mac上，或者通常使用Linux，通常会预装Python。我知道这听起来不错，但请注意，这可能不适合你。你可能是通过App
    Store安装的Python，例如，如果你访问Microsoft。
- en: App Store there is a shiny Python that you can search and install in there。
    Great way to get started is a new developer but may not be the right one for you
    either。 You can download an installer from Python。org so there are some binary
    package installers。 there are source code downloads as a beginner that is also
    daunting and confusing because。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在App Store中，有一个闪亮的Python，你可以在里面搜索和安装。对于新开发者来说，这是一个很好的入门方式，但可能不适合你。你可以从Python.org下载一个安装程序，那里有一些二进制包安装程序，作为初学者，源码下载也是令人畏惧和困惑的。
- en: you're not sure which one is going to work for you necessarily or you can be
    using a。 package manager。 There's lots of great choices there as well。 If you're
    on Debian Ubuntu。 there's apt。 If you're on the other Linux's you're going to
    have YAM or whatever the latest installers。 there may be Homebrew which is actually
    a personal favorite of mine and I highly recommend。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你不确定哪个适合你，或者你可以使用包管理器。这里有很多不错的选择。如果你在Debian或Ubuntu上，有apt。如果你在其他Linux上，你将使用YAM或最新的安装程序。可能还有Homebrew，这是我个人的最爱，我强烈推荐给你们。
- en: it and I'll be showing off some Homebrew stuff in this talk。 If you're on Windows
    there's an equivalent to Homebrew called Chocolaty and all these。 will give you
    a way to install Python onto your machine。 You can also have Python installed
    via a Python distribution so if you aren't familiar there。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这次演讲中，我会展示一些Homebrew的内容。如果你在Windows上，有一个相当于Homebrew的工具叫做Chocolaty，所有这些都能为你提供在你的机器上安装Python的方法。你也可以通过Python发行版安装Python，如果你对此不熟悉。
- en: are custom package distributions like the Anaconda Python or the ActiveState
    Python that。 are kind of prepackaged and supposed to give you a great experience
    out of the box but if。 you're still are confused about these kinds of things it
    may not give you that great experience。 you're totally expecting。 Why should you
    care about all of this at all？
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些自定义的包发行版，如Anaconda Python或ActiveState Python，这些都是预打包的，旨在为你提供开箱即用的良好体验，但如果你仍然对这些感到困惑，可能不会给你预期的良好体验。你为什么要关心这些？
- en: It just sounds mind-numbingly boring almost to me to think we'd have to still
    be dealing。 with this in the year 2022 but we do because we want to make sure
    that everyone can stay， Zen。 I mentioned we were going to highlight a couple of
    these in Python statements which specifically。 the beautiful is better than ugly，
    the explicit is better than implicit and simple is better。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我觉得在2022年我们仍然要处理这些事情，真是让人感到无聊，但我们这样做是为了确保每个人都能保持内心的宁静。我提到我们会强调一些Python语句，特别是“美好胜于丑陋”、“显式胜于隐式”和“简单胜于复杂”。
- en: than complex。 I think one of the ways if you've ever heard of the term the ceiling
    of complexity one。 of the ways to break through the only way you can break through
    the ceiling of complexity。 is to simplify so that last one is very important is
    to keep things simple until they can't。 be any more simple and then we'll talk
    about that beautiful is better than ugly。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 比复杂更重要。我认为，如果你听说过“复杂性的天花板”这个术语，突破复杂性的唯一方法就是简化，所以最后一点非常重要，就是保持事物简单，直到它不能再简单为止，然后我们会讨论“美好胜于丑陋”。
- en: If it feels wrong it might be wrong kind of that smell test as a developer when
    you're。 going through and writing some code and you're like this doesn't feel
    right it's getting。 the job done but I'm not sure about it。 Same thing goes for
    how you're installing and using Python in your local system。 I'm hoping to say
    we can talk about improving that process making it more consistent making。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果感觉不对，那可能就是错的，这种“嗅觉测试”作为开发者，当你编写代码时，如果你觉得这不对劲，虽然能完成工作，但我不太确定。同样的道理也适用于你在本地系统中安装和使用Python的方式。我希望我们可以讨论改善这个过程，使其更加一致。
- en: it more simple making it more explicit implicit pythons are troublesome because
    you don't know。 where they came from you don't know where the PIP is going you
    don't know where the。 packages are being installed into so let's start off with
    some ground rules first some。 quick rules that'll keep you as safe as possible
    on your own computer so again focusing on。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使其更简单，更明确，隐式的Python是麻烦的，因为你不知道它们来自哪里，不知道PIP去哪里，也不知道包被安装到哪里。所以让我们先制定一些基本规则，一些快速规则，确保你在自己电脑上的安全，再次专注于。
- en: getting this right and having that foundational base is in my mind just a important
    factor。 of the fact that this is how I make my livelihood。 I want to have this
    the most awesome killer set up on my machine that you know just makes。 me as productive
    as I possibly can but we're going to start off with this first rule which。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 正确地做到这一点，并建立基础是我认为至关重要的，因为这就是我的生计。我希望在我的机器上有一个最棒的配置，使我尽可能高效，但我们要从这个第一条规则开始。
- en: is no pseudo you should not have to type pseudo to do anything with Python whether
    you're installing。 Python or installing a package in Python or installing some
    kind of Alan for Python there。 is no reason to ever use pseudo I don't care no
    whining if you're using pseudo to do something。 on your machine or administrative
    privileges to do something on your machine you're probably。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 没有伪装，你不应该在与Python交互时输入伪装，无论是安装Python，还是安装Python中的某个包，或者安装某种Python的Alan。没有理由使用伪装，我不在乎，如果你在自己的机器上使用伪装或管理员权限做任何事情，你可能。
- en: doing something incorrect or again it should feel wrong to you that that smell
    test should。 tell you that something is is a rye if you're using pseudo I mean
    the reason for this is。 you're most likely going to be installing a Python package
    into a place that I shouldn't。 be like in for example the system Python do not
    use the system Python that Python that。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 做错事或再次做事时，这种气味测试应该让你感觉不对劲。如果你使用伪装的东西，原因在于你很可能会将一个Python包安装到一个不该安装的地方，比如系统Python。不要使用你电脑上自带的Python，如果你在Linux或Mac上，那不是你的Python。
- en: came on your computer if you're on Linux or on Mac that's not for you that's
    not your。 Python that Python is for use by the system itself the installed OS
    is going to be running。 its own scripts and own programs and on kind of clean
    up tasks those are going to be using。 the system Python and if you upgrade out
    for underneath the system Python some package。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 那个Python是供系统本身使用的，安装的操作系统将运行自己的脚本和程序，并进行一些清理任务。那些将使用系统Python，如果你在系统Python下升级某个包。
- en: that one of the scripts is relying on you could actually be making a whole computer
    unstable。 and you're heading for a reinstall of the system or else a really terrible
    cleanup and。 don't use it for anything that system Python is not for you again
    I repeat that not for。 you because that is only for the OS so now I know you're
    saying okay this Python on my。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果某个脚本依赖于它，你可能会使整个计算机不稳定，并且你可能会面临系统的重新安装或非常糟糕的清理。不要将其用于任何事情，系统Python不属于你，我再次重申，这不是为了你，因为它仅供操作系统使用。所以现在我知道你在说，好吧，这个Python在我。
- en: computer but you're telling me I can't use it what do I do smart guy I'm going
    to hopefully。 encourage you to start down the right path I'm gonna give you a
    couple quick tools and。 techniques that I find to be very very useful the first
    one is going to be pi and not to。 be confused with pip and or pip or a million
    other tools that seem to be very really similarly。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 电脑上，但你告诉我我不能使用它，我该怎么办，聪明人？我希望能鼓励你走上正确的道路，我将给你一些我认为非常有用的快速工具和技巧，第一个是pi，不要和pip混淆，或者其他似乎非常相似的工具。
- en: named a pie and is a really really specific nice tool that has been open source
    that allows。 you to change your global Python that you would use so if you are
    sitting in a terminal。 and you type the word Python what you expect to have happen
    would actually be launching。 your Python that's yours you've installed through
    pi and not the system Python so right now if。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 叫做pi，是一个非常具体的优秀工具，开源，允许你更改全球使用的Python。如果你在终端中，输入Python时，预期会启动的是你通过pi安装的Python，而不是系统Python。
- en: you didn't have pi and installed and you didn't any type the word Python you're
    gonna be using。 the system Python again problematic you can have per project Python
    versions that was a。 consultant I deal with a lot of Python's day in day out we've
    got projects that are running。 from Python 2 7 straight through to I don't think
    anything 3 11 you have definitely 3 10。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有安装pie，也没有任何类型的Python，你将再次使用系统自带的Python，这会有问题。作为一名顾问，我每天都在处理很多Python项目，我们有的项目运行的是Python
    2.7到3.11之间的版本，至少有3.10。
- en: the most recent stable version of Python and everything in between we've got
    projects on。 3 7 or 3 8 3 9 and I need to have an easy way to be able to install
    each of those and。 keep them clean so that I can now have virtual sandboxed environments
    that I'm not stomping。 on my own self as I go and install dependencies for various
    projects and then the other kind。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 最新的稳定版本的Python以及所有介于其间的版本，我们有的项目在3.7、3.8和3.9上，我需要一个简单的方法来安装每个版本，并保持它们的整洁，这样我就可以拥有虚拟的沙箱环境，而不会干扰到自己，随着安装各种项目的依赖。
- en: of quick tools here this works for Linux and for Mac if you're on Windows there
    is a。 pie and win but I probably wouldn't recommend using it and I'm going to
    recommend something。 for Windows folks would be to investigate and seriously consider
    using WSL 2 the window subsystem。 for Linux is very mature now much faster than
    the original version of it and it's going。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些快速工具适用于Linux和Mac，如果你在Windows上，有一个叫做pie和win的工具，但我可能不太推荐使用它。对于Windows用户，我建议你调查并认真考虑使用WSL
    2，Windows的Linux子系统现在已经非常成熟，比原始版本快得多。
- en: to give you experience that is going to line up with a lot of like how to's
    online where。 people are using Linux you'll just feel like one of the gang because
    basically the WSL 2。 gives you a full Ubuntu or full Debbie or whatever you installed
    as your base Linux for。 WSL on Windows gives you that full full environment out
    of the box ready to go and you'll be able。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让你获得的体验将与网上很多操作指南相符，人们在使用Linux时你会觉得自己就像其中一员，因为基本上WSL 2提供了完整的Ubuntu或Debian，或者你作为基础Linux安装的任何其他系统。WSL在Windows上提供了一个完整的环境，可以随时使用。
- en: to do everything you would see here today just like I'm doing on my I'm on Ubuntu
    here。 you can do it on Mac you'll be able to do it on Windows just the same so
    let's see this。 actually in in action here okay so I've got my terminal and I
    have Pie Am installed but。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成今天展示的所有内容，和我在Ubuntu上做的一样，你可以在Mac和Windows上同样做到。让我们看看实际效果，所以我现在打开了终端，并且已经安装了Pie
    Am。
- en: '![](img/4396149f3293257eae9d4250fa16d898_3.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4396149f3293257eae9d4250fa16d898_3.png)'
- en: the way to install Pie Am is going to be in my case I use homebrew for everything
    if I'm。 on Linux there's Linux homebrew if I'm Mac the Mac homebrew it installs
    the same it has。 cross-platform support between the two OS's and if you're on
    Windows and using WSL that。 will work as well because you're just using Linux
    so once you've done you know a brew。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Pie Am的方法在我这里，我使用homebrew，如果我在Linux上则是Linux homebrew，如果在Mac上则是Mac homebrew，它们的安装方式相同，支持跨平台。如果你在Windows上使用WSL，这也可以正常工作，因为你实际上是在使用Linux，所以一旦你完成了brew的设置。
- en: install Pie Am that will get you all the way there already got installed so
    I don't need。 it once I've got Pie Am installed I can now see if there are versions
    of Python that are。 on this system so it's going to include out of the box the
    system Python and consideration。 for a Python you would want to use right now
    is showing me my global Python is set to the， 3。10。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Pie Am将使你完成所有设置，我已经安装了它，所以不需要再安装。一旦我安装了Pie Am，我可以查看这个系统上是否有Python的版本，它会自动包含系统自带的Python，并且对于你现在想使用的Python，它会显示我的全局Python设置为3.10。
- en: 3 which is installed into a specific folder on this system which was in my home
    directory。 but then you see I've got three eight version available I got three
    nine version available。 and I'll talk about those other versions up there that
    are named and don't have necessarily。 version numbers in them they are going to
    be virtual environments but if I wanted to。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 3.10被安装在我的主目录中的特定文件夹中，但你会看到我有3.8和3.9的可用版本。我将讨论那些没有特定版本号的其他版本，它们将是虚拟环境。如果我想要。
- en: just type the word Python I will get a three dot 10 dot three Python environment
    and that's。 just the one that's installed from Pie Am so I didn't use pseudo I
    just do for example。 if I want to install another version for example three dot
    nine dot four oops three。 dot nine dot four because we've got old projects that
    might be using that that goes and downloads。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 只需输入单词Python，我就会得到一个三点十点三的Python环境，这就是从Pie Am安装的那个版本，所以我没有使用伪命令，比如说。如果我想安装另一个版本，比如三点九点四，唉，三点九点四，因为我们有旧项目可能会用到这个，去下载它。
- en: from Python dot org and grabs all the stuff if you're using homebrew it's going
    to use all。 the like Z lib and read line so that you've got all the dependency
    satisfied to make sure。 you're good to go to install Python we'll come back to
    that window here momentarily like。 by my mouse here we go okay so we can now also
    do for example if I go on to my desktop and。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 从Python.org抓取所有内容，如果你使用homebrew，它会使用所有的像Z lib和read line的东西，以确保所有的依赖项都满足，以确保你可以顺利安装Python，稍后我们将回到那个窗口，我的鼠标在这里，我们可以现在做，比如说，如果我去我的桌面。
- en: I've got two folders here project one project two if I go into project one and
    I want to。 use a specific version of Python here as opposed to another version
    of Python like the default。 Python so right now I type Python I get three dot
    10 dot three which is that default global。 if I type pie and local and say I want
    to use three dot nine dot eleven excuse me you'll。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我这里有两个文件夹，项目一和项目二，如果我进入项目一，并且我想在这里使用特定版本的Python，而不是像默认Python的另一个版本。所以现在我输入Python，我得到三点十点三，这是默认的全局版本。如果我输入pie和local，并说我想使用三点九点十一，抱歉，你会。
- en: notice my prompt actually automatically updated over there on the right side
    to show that I'm。 using three dot nine dot eleven and now when I type the word
    Python I get three nine eleven。 by default so I'm in full control of my environments
    here I know where it's coming from it's explicit。 I have said I want to use this
    version of Python when I'm in this version this folder oops if I。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我的提示实际上在右侧自动更新，以显示我正在使用三点九点十一，现在当我输入单词Python时，我得到三点九点十一。默认情况下，我完全控制我的环境，我知道它来自哪里，这很明确。我说过，当我在这个版本的文件夹中时，我想使用这个版本的Python，唉，如果我。
- en: go up a directory you'll see that the three nine eleven went away anyway I type
    Python back in。 three dot ten dot three excuse me which is also super awesome
    so again seeding into that directory。 pie am is doing the magic here to automatically
    give me now three dot nine dot three how is it。 doing it it's there's no serious
    magic it is explicit it is put a Python version dot file in that folder。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 上移一个目录，你会看到三点九点十一消失了，无论如何我再次输入Python，得到三点十点三，抱歉，这也非常棒，所以再次进入那个目录，pie am在这里做魔法，自动给我现在的三点九点三，它是怎么做到的呢？没有什么神秘的魔法，它是明确的，它是在那个文件夹中放了一个Python版本的文件。
- en: and so pie am is looking for that as I invoke the Python command there's basically
    a wrapper around。 all the Python commands to say I'm going to use the version
    is specified in that Python version。 which also makes it easy to now specify across
    a project like what version of Python you're using。 although I don't think I would
    do that with this Python version they're better like pie project。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 所以pie am在我调用Python命令时会寻找这个，基本上是所有Python命令的一个包装，表示我要使用在该Python版本中指定的版本，这也使得现在在整个项目中指定你使用的Python版本变得容易，虽然我不认为我会用这个Python版本，它们更好，比如说pie项目。
- en: dot tom will files to specify specific Python requirements for your specific
    project that we'll。 talk about later okay so that's a quick quick intro to pie
    am and kind of the explicit over。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: tom文件用于为特定项目指定特定的Python要求，我们稍后会讨论，好吧，这就是pie am的快速介绍，以及相对显式的部分。
- en: '![](img/4396149f3293257eae9d4250fa16d898_5.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4396149f3293257eae9d4250fa16d898_5.png)'
- en: implicit I can say exactly what versions of Python I want and when I want them
    pie am one of the。 reasons I recommend it is it has some nice plugins if you are
    using limbs right now which you should。 be to make sandboxes pie am supports these
    out of the box and it's really snap in easy to use。 if you're using virtual and
    wrapper it supports that as well I've since I've started using pie。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 隐式地，我可以准确地说我想要的Python版本，以及我想要的时间，pie am是我推荐的原因之一，它有一些不错的插件，如果你现在正在使用limbs，你应该使用以创建沙箱，pie
    am开箱即用地支持这些，真的很简单易用。如果你在使用virtual和wrapper，它也支持那个，自从我开始使用pie。
- en: am I've stopped using virtual and wrapper because the benefit of virtual and
    wrapper was it kind of。 hides that virtual environment sandbox away from you and
    I don't really need it here so。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我已停止使用 virtual 和 wrapper，因为 virtual 和 wrapper 的好处是它可以将虚拟环境的沙箱隐藏起来，而我在这里并不需要它。
- en: '![](img/4396149f3293257eae9d4250fa16d898_7.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4396149f3293257eae9d4250fa16d898_7.png)'
- en: the way you can get these plugins if you just do brew search pie am， there you
    go shoot too much。 there'll be the pie am recipe but you also have the pie am
    dash virtual and let's go ahead and。 I'm gonna make a pie am for you real quick
    the virtual environment。 so I'm in project one I've set up this three nine dot
    eleven but that's not actually what I want to。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过执行 brew search pie am 来获取这些插件，看看，有点多。会出现 pie am 的配方，但你也可以找到 pie am dash
    virtual。让我快速为你创建一个虚拟环境。所以我在项目一，我已经设置了 3.9.11，但这实际上不是我想要的。
- en: use technically that is going to be what I consider my like base install of
    the versions of Python I。 don't want to mess those up if I do hit freeze right
    here it should be empty I should have no。 packages installed right now I've got
    this pristine clean environment and I will keep it that way。 and instead I will
    do pie am virtual and we'll make another one using three dot nine dot eleven。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术上讲，这将是我认为的 Python 版本的基础安装，我不想搞乱它们。如果我在这里执行 pip freeze，它应该是空的，我现在没有安装任何包，我有这个原始的干净环境，我将保持这种状态。而我会执行
    pie am virtual，再创建一个使用 3.9.11 的虚拟环境。
- en: and I'll just call it prog one dash in being just hope small it doesn't matter
    name I can even use it。 for whatever we want but now it still says I'm using three
    dot nine dot eleven I need to tell。 this project that I want to use my specific
    virtual environment right here so I'll do that pie am。 the local command again
    and I will specify prog one with the misspelled ev in and now the prompt on。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我就叫它 prog one dash in，希望这个名字不重要，我甚至可以用它做任何我们想做的事情，但现在它仍然显示我使用的是 3.9.11。我需要告诉这个项目我想在这里使用我特定的虚拟环境，所以我会再次执行
    pie am 本地命令，并指定 prog one，带有拼写错误的 ev，这样提示符就会。
- en: the right hand side is updated to show that I'm actually using a sandbox if
    I pip install into this。 sandbox for example like requests very popular package
    and now if I do pip freeze。 you'll see I've got four packages installed if I cd
    up out of the directory and do pip freeze。 again clean pristine environment I'm
    not polluting my like system python with any packages accidentally。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 右侧已更新，显示我实际上正在使用一个沙箱。例如，如果我在这个沙箱中使用 pip 安装一个非常流行的包，比如 requests，接下来如果我执行 pip
    freeze，你会看到我已经安装了四个包。如果我从目录中 cd 到上一级并再次执行 pip freeze，在干净的环境中，我并没有意外地污染我的系统 Python。
- en: I'm being very explicit and about what version of python and what sandbox have
    this version of python。 so for these you aren't familiar like that that virtual
    is really critical to keeping your world。 sandboxed off from the other projects
    and I'll show that here right now let's let's I've got another。 project here project
    two if we go into project two I've got a requirements file in there so if we。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我正在非常明确地说明使用的是哪个版本的 Python，以及这个版本的 Python 所在的沙箱。因此，对于那些不太熟悉的人来说，这个虚拟环境对于保持你的世界是非常关键的。我现在就来展示一下。这里有另一个项目，项目二，如果我们进入项目二，我那里有一个需求文件，所以如果我们。
- en: look at that requirements file it's going to install requests using a extra
    called you know use。 sharday on pie three and so I'll do the pie am actually I
    already made a virtual environment for。 this one so just to speed up things called
    project two backup and if I do pip freeze it should be。 empty oh no I did install
    the array so this is going to have the pie three sharday version of。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 看看那个需求文件，它将使用一个额外的调用来安装 requests，使用的是你知道的 pie three。我实际上已经为这个项目创建了一个虚拟环境，为了加快进程，我叫它
    project two backup。如果我执行 pip freeze，应该是空的，哦不，我确实安装了数组，所以这里会有 pie three 的 charade
    版本。
- en: requests already installed into it if I go back into project one well I already
    already done that so。 we'll just want to dip these real quick well I'll just go
    into project one we'll do pip freeze。 to compare it to the one that's up there
    right above it。 like the joys of live demoing right so you'll see there's a difference
    here that that charade。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: requests 已经安装在其中。如果我回到项目一，其实我已经完成了这个步骤，所以我们只想快速比较一下。我会进入项目一，执行 pip freeze，与上面的那个进行比较。像是现场演示的乐趣一样，所以你会看到这里有一个区别，那就是
    charade。
- en: version four is missing from the bottom one where it was included in the top
    one up here oops。 oh I scrolled too far there it is this this line right here
    is missing in the bottom one because。 I've installed them in two different ways
    I installed the same package in two different ways because I。 may have two projects
    that need to use those kind of subtle differences between having maybe a。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 版本四在底部缺失，而在顶部这里是包含的，哦，我滑动得太远了，那里有这个，这一行在底部缺失，因为。 我以两种不同的方式安装了它们，我以两种不同的方式安装了同一个包，因为我。
    可能有两个项目需要使用这些细微差别，可能有一个。
- en: different version of requests installed in one versus another because maybe
    you've not run your。 full regression tests against your code with an upgraded
    version of requests so you may be。 working between two projects where you need
    to maintain two different versions of the same package。 even across those two
    spots and so pip pip and plus sorry pi m plus the virtual environment plugin。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个项目中安装不同版本的`requests`，因为你可能还没有对你的代码运行完整的回归测试，使用了升级版本的`requests`，所以你可能在两个项目之间工作，需要维护同一个包的两个不同版本。
    甚至在这两个位置之间，所以`pip`，抱歉，`pi m`加上虚拟环境插件。
- en: makes this like just super seamless because you can now cd between the directories
    you're not。 activating and deactivating and forgetting because sometimes the biggest
    problem I always had with。 virtual environments was I would forget to deactivate
    I'd cd into another directory for another project。 I would pip install something
    and it end up over in the other virtual environment and I like and then。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这让操作变得非常流畅，因为你现在可以在目录之间使用`cd`，不需要。 激活和停用，避免遗忘，因为有时候我在虚拟环境中最大的问题就是。 我总是忘记停用，进入另一个项目的目录。
    我会安装一些东西，结果却是在另一个虚拟环境中，我喜欢，然后。
- en: nothing works so to solve that problem has a nice environment injection that
    basically cd's in and。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 没有任何作用，因此解决这个问题有一个很好的环境注入，基本上是进入并。
- en: '![](img/4396149f3293257eae9d4250fa16d898_9.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4396149f3293257eae9d4250fa16d898_9.png)'
- en: out unless you do that real quick so that is that part of this now if you have
    simpler needs where。 maybe you aren't just wanting to go down the whole piant
    path since python 3。3 python has included。 bundled in a kind of a simplified version
    of virtual and called VM and so if you were to invoke python。 with a minus m VM
    which basically says I want to run the module VM this packaged inside a python。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 除非你快速处理这个问题，否则是没有任何作用。如果你有更简单的需求，可能你并不想走整个`piant`路径，自从Python 3.3起，Python内置了。
    一种简化版本的虚拟环境，叫做`VM`，所以如果你调用Python。 使用`-m VM`，这基本上表示我想运行打包在Python内部的模块`VM`。
- en: you can do the same thing with pip so if you invite python minus m pip it'll
    run the packaged version。 of pip that is in the python interpreter you're dealing
    with directly as opposed to maybe some。 random pip that's in your path so kind
    of a surefire way to make sure you're getting a virtual environment。 for the version
    of python you're currently running is to run a minus m VM like that and it'll
    use。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以对`pip`做同样的事情，所以如果你调用`python -m pip`，它将运行当前你处理的Python解释器中打包的版本。 的`pip`，而不是你路径中某个随机的`pip`，所以确保你正在获取当前运行的Python版本的虚拟环境的可靠方法就是像这样运行`-m
    VM`，它将使用。
- en: the included virtual in which is kind of a stripped down linear version of the
    standard virtual environment。 package to give you a VM called VM in this case
    now some some side notes here sometimes you've got。 tools you want to get installed
    like you want to black and you want to ice or you want to use docker。 compose
    or hdbx or all these kind of cool python command line tools where do you manage
    those。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 包含的虚拟环境是标准虚拟环境的一个简化线性版本。 包装给你一个称为`VM`的虚拟机，在这种情况下，有些旁注，有时你想安装的工具，比如你想要`black`，你想要`ice`，或者你想使用`docker`。
    `compose`或`hdbx`，或者所有这些酷炫的Python命令行工具，你要怎么管理它们。
- en: various tools like that so i recommend to folks to use pipx if you've not checked
    out pipx it is。 super awesome super easy to use and it will greatly simplify your
    life being able to install these。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 像这样的各种工具，所以我建议大家使用`pipx`，如果你还没有了解过`pipx`，它是。 非常棒，超级容易使用，它将极大地简化你的生活，让你能够安装这些。
- en: '![](img/4396149f3293257eae9d4250fa16d898_11.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4396149f3293257eae9d4250fa16d898_11.png)'
- en: kinds of tools so let's look real quick here i'm going to go to my home directory
    i already have。 pipx installed but for example if i want to use who's here swimming
    with hdbpy it's an awesome tool。 for like messing around with apis and calling
    you know making get requests and folks requests and。 kind of a replacement for
    curl but it does some cooler stuff like it'll give you colorized output。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 各种工具来说有些困惑，所以让我们快速看看，我要去我的主目录，我已经安装了 pipx，但例如如果我想使用 hdbpy 这个出色的工具，来与 API 玩耍，进行
    GET 请求和 POST 请求，它有点像 curl 的替代品，但它能做更酷的事情，比如给你彩色输出。
- en: normally it has a command called hdb and when you ran it you would invoke hdbpy
    from the command line。 you typically pip the instructions may tell you to pip
    install hdbpy but i'll implore you to。 install pipx first and do pipx install
    hdbpy and this is going to create in the back ground for you。 another little virtual
    environment sandboxed away you don't see you don't deal with and then it's going。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，它有一个名为 hdb 的命令，当你运行它时，你会从命令行调用 hdbpy。通常，pip 的说明可能会告诉你 pip install hdbpy，但我建议你先安装
    pipx，然后执行 pipx install hdbpy，这将在后台为你创建另一个小虚拟环境，沙盒式的，你看不见，也不需要处理它，然后它会开始工作。
- en: to inject these three in this case for hdbpy it's going to inject these three
    commands into your。 path automatically so now you saw before i typed in hdb now
    if i type hdb it's green and i can you know。 go ahead and grab uh like a URL maybe
    here we go and there you go uh is there's obviously。 redirect to hdbs because
    i was all good websites should be hdbs that one doesn't uh now and you see。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将这三条命令注入到你的路径中，hdbpy 将自动注入这三条命令。你看到我之前输入了 hdb，现在如果我输入 hdb，它是绿色的，我可以继续抓取，例如一个
    URL，或许这里有一个，嗯，显然有重定向到 https，因为所有好的网站应该使用 https，那一个不是，现在你看到了。
- en: it's all colorized and pretty and hdbpy is an awesome tool but i install it
    into my system python i。 didn't use sudo to install it i didn't even install it
    using like a user flag which i'll talk about。 here in a second i've installed
    into its own little um environment that is now managed just by h by。 pipx so tools
    like you see here i've got black i sort pipmve uh watchdog which has a watch me
    do thing。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切都很美观，hdbpy 是一个很棒的工具，但我将其安装到我的系统 Python 中。我没有使用 sudo 来安装它，甚至没有使用用户标志来安装，稍后我会谈到这一点。我已经将其安装到一个由
    pipx 管理的小环境中，所以像你看到的工具，我有 black、pipmve 和 watchdog，它们在做事情时会监控我。
- en: cool command line tools like that totally deserve to be installed via pipx and
    not put into a virtual。 environment or into some other kind of non-standard place
    there's a good consistent way to do this。 so that was pipx the kind of pipx let's
    see some damage i just showed you that。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 像这样的酷命令行工具完全应该通过 pipx 安装，而不是放入虚拟环境或其他非标准位置。这有一个很好的一致的方式来做到这一点。所以这就是 pipx，接下来我们来看一些效果，我刚刚向你展示了。
- en: '![](img/4396149f3293257eae9d4250fa16d898_13.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4396149f3293257eae9d4250fa16d898_13.png)'
- en: all right and i mentioned just briefly if you didn't catch it what about this
    user scheme。 there is in python the ability to pip install packages with a dash
    dash user pack user flag there。 and this is allows you to install without using
    sudo so you're following like my number one rule。 don't install using sudo but
    you're installing into a python environment or location in your home。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我刚刚简要提到，如果你没有听到，关于用户方案的事情。在 Python 中，可以使用 `pip install` 命令配合 `--user` 标志来安装包。这允许你在不使用
    sudo 的情况下进行安装，这样你就遵循了我的第一条规则：不要使用 sudo 来安装，而是将其安装到你主目录下的 Python 环境或位置。
- en: directory that basically gives you one version of whatever you just installed
    so if you're using。 requests 23 and you need requests 22 for another project using
    this pip install dash dash user。 you know requests equal 22 you know 0。22 uh will
    end up overwriting the already installed version。 because basically it's just
    one little sandbox thing i find this just again confusing for folks who。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 目录基本上给你一个你刚安装的任何工具的版本，因此如果你正在使用 requests 23，而你需要在另一个项目中使用 requests 22，使用 `pip
    install --user requests==22.0.22`，将最终覆盖已经安装的版本。因为基本上这只是一个小沙盒，我发现这对那些。
- en: have never seen it it may be an allure or a way to like not use sudo to install
    a package but you。 may end up with for example if i installed hdpy into with the
    user scheme and then i proceeded to。 install another tool that had conflicting
    version of a dependency using the user scheme i would break。 my hdpy and no longer
    have the working script so again not a good place to be installing packages。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我从未见过，它可能是一种吸引力，或一种不使用 sudo 安装包的方式，但你可能会遇到，比如我在用户模式下安装 hdpy，然后再安装另一个工具，这个工具的依赖项版本冲突，这样我就会破坏
    hdpy，脚本也无法工作，所以再次强调，不应该在这里安装包。
- en: leverage tools like pipx for installing your command link tools because it keeps
    them all separate。 they don't have their own dependencies no conflicts there and
    when using your projects make sure。 using the virtual environments from piam but
    what about i know there's so many options out there right。 this is the mind-blowing
    part about python what makes it so hard you know what about anaconda python。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 利用像 pipx 这样的工具来安装命令行工具，因为它可以将它们全部分开。它们没有自己的依赖关系，不会产生冲突，在使用你的项目时确保使用 piam 的虚拟环境，但我知道外面有那么多选择，对吧。这是
    Python 的一大震撼之处，也正是这让它如此困难，你知道的，关于 Anaconda Python。
- en: and conda kind of data science folks would be more familiar with the conda package
    manager。 oh it's like there's just again too many options actor state python pipx
    used kind of a tool that。 was in favor and then kind of felt a lot of favor because
    of performance issues it was。 interesting in beginning asdf is a very similar
    tool to piamf in that it can install multiple。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: conda 和数据科学领域的人们更熟悉 conda 包管理器。哦，感觉选项实在太多了，actor state python pipx 这种工具曾经受到过青睐，但因为性能问题又失去了不少支持。一开始，asdf
    是一个非常类似于 piamf 的工具，因为它可以安装多个。
- en: versions of a language any language actually you can use it with rust or with
    ruby or python but it。 doesn't have the same plugin environment that the piamf
    one does have for doing for doing python。 specific work for example having that
    virtual limit plugin or the ccash plugin for speeding up builds。 poetry is a great
    tool if you're building libraries but as a new person to python or if you're just。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 任何语言的版本，实际上你可以用 Rust、Ruby 或 Python 来使用它，但它没有 piamf 所拥有的那种插件环境，无法进行 Python 特定的工作。例如，使用
    virtual limit 插件或 ccash 插件来加速构建。如果你在构建库，poetry 是一个很好的工具，但如果你是 Python 新手，或者仅仅是。
- en: you know trying to get work done and you're not developing specifically on a
    library i wouldn't。 recommend necessarily starting off there because there's going
    to be an extra overhead of all the。 kind of poetry um dance and protocol and commands
    and apis that you would need to use。 pdm another you know python package manager
    kind of maybe less popular then say something like piamf。
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你试图完成工作，而不是专门在某个库上开发，我不推荐你从那里开始，因为会有额外的开销，涉及到所有类型的 poetry、舞蹈、协议、命令和 API。PDM
    也是一种 Python 包管理器，可能没有 piamf 那么流行。
- en: and then pipx project。tommel is also another place where you can specify dependencies
    for your。 project and some tools like poetry for example would use that for understanding
    what your。 dependencies are i think there's a lot of promise for using pipx project。tommel
    files that's i think， there's a pep right now that only has been approved but
    look for more to come there around build tools。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然后 pipx 项目。tommel 也是一个你可以为项目指定依赖关系的地方，像 poetry 这样的工具会使用它来理解你的依赖关系。我认为使用 pipx
    项目。tommel 文件有很大的潜力，现在有一个 PEP 已经获得批准，但未来会有更多相关的内容出现，围绕构建工具。
- en: and python and using that pipx project。tommel file instead of a requirements。txt
    file so all that said， is i just want repeatability and simplicity i want this
    thing to be simple and easy kind of。 zen of python i want to be a zen python master
    and i want to follow that simple is better than complex。 uh line of the zen of
    python one of the tools i'll highly recommend to folks is going to be。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 pipx 项目。tommel 文件而不是 requirements.txt 文件。说了这么多，我只想要可重复性和简单性，我希望这一切都简单易懂，这就是
    Python 的禅，我想成为一名 Zen Python 大师，遵循“简单优于复杂”的原则。我强烈推荐的工具之一就是。
- en: pip tools package if you've not installed pip tools it has a pip tools compile
    command built into it。 that'll allow me to manage my dependencies for my project
    so if i'm working on a jango project。 and i got a specific version of jango specific
    version of this and that pip tools allows me to。 specify my main dependencies
    that i'm using in the project as opposed to every dependency i'm using。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: pip工具包，如果你还没有安装pip工具，它内置了一个pip工具编译命令。这将允许我管理我的项目依赖关系，所以如果我在做一个jango项目，并且我有一个特定版本的jango，pip工具允许我指定我在项目中使用的主要依赖关系，而不是每个依赖关系。
- en: in the project um who here has you know had a requirements file where it's just
    gotten like 200。 300 lines long and it's got every version's pinned but you know
    there's always moving dependencies。 underneath the covers like as one tool upgrades
    one dependency you want to make sure you grab all。 of its you know recommended
    dependencies you also want to make sure you're able to easily grab。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，谁有要求文件，已经变得像200、300行长，并且每个版本都被固定，但你知道总是有移动的依赖关系在底层，像一个工具升级一个依赖时，你要确保抓取到它所有推荐的依赖关系，你还要确保能够轻松获取。
- en: security fixes performance fixes bug fixes that are coming in you know very
    minor versions of。 these dependencies and so managing dependencies can be really
    tricky especially if you're trying to。 pin them all so maybe i wouldn't know what
    i mean when i say pinning dependencies if i look at。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 安全修复、性能修复和bug修复都在这些依赖关系的非常小的版本中出现，因此管理依赖关系可能非常棘手，尤其是如果你试图固定它们时。所以也许我不知道当我说固定依赖关系时我的意思是什么。
- en: '![](img/4396149f3293257eae9d4250fa16d898_15.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4396149f3293257eae9d4250fa16d898_15.png)'
- en: i've got an example， yeah there we go here's a requirements file that has got
    all the dependencies for this python script。 specified and it's using a double
    equals to say whenever you pip install always grab exactly that。 version and exactly
    that version and exactly this version because you know any other ones may not
    work。 this will work most of the time and we want something that works all the
    time so we get that。
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我有一个示例，没错，这里有一个包含所有依赖关系的要求文件。它使用双等号来表示每当你使用pip安装时，总是要抓取确切的版本，因为其他版本可能不工作。这大多数情况下都能工作，我们想要的是始终能工作的东西。
- en: repeatability and scalability or uh simplicity of being able to install and
    know that our you know。 six months from now when i come back to this project it
    will run again uh is a common you know problem。 we've all had you know you go
    update the dependencies something has broken maybe a minor dependency happened。
    or worse yet though you probably heard in the news a lot of the supply chain uh
    security issues。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 可重复性和可扩展性，或者说是安装的简单性，让我们知道六个月后我回到这个项目时它还能再次运行，这是一个常见的问题。我们都遇到过，你去更新依赖关系，某些东西就坏了，可能是某个次要依赖出了问题。更糟糕的是，你可能在新闻中听到很多供应链安全问题。
- en: that come along with using these some of these packages you want to make sure
    you're getting the。 exact same package you got six months ago so pip tools solves
    this problem i won't have a full。 time to necessarily demo all of it but it basically
    solves this problem by taking the cryptographic。 hashes of the various packages
    and wheels that are on pipi and comparing those against the last time。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些包时，你要确保获取到与六个月前完全相同的包，因此pip工具解决了这个问题。我可能没有足够的时间来演示全部内容，但它基本上通过获取各种包和轮子的加密哈希，并将其与上次的哈希进行比较，来解决这个问题。
- en: you installed it and pip tools allows me to manage instead of saying uh you
    see requests right here。 uh 2。25。1 requests has sub dependencies which we saw
    in the previous demo of sharday and certify。 and uh idna i don't want to necessarily
    specify those i want to rely on requests to manage you know。 what do you know
    is about its dependencies and so i will rely on i will only specify that requests。
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你安装了它，pip工具允许我管理，而不是说，你看到这里的请求，2.25.1请求有子依赖关系，这在之前的sharday和certify演示中我们看到了。我不想一定要指定那些，我想依赖请求来管理它的依赖关系，所以我只会指定请求。
- en: is gonna say this is my version of requests i want and requests will specify
    the other versions but if。 i want to repeat it uh the pip tools will actually
    output all the hashes for me into another file where。 i can get exactly the same
    thing over again i think with that i am kind of heading toward the end here。
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是我想要的请求版本，请求将指定其他版本，但是如果我想重复它，pip 工具实际上会把所有哈希输出到另一个文件中，在那里我可以精确地再次获得相同的东西，我想我大致上已经接近尾声了。
- en: '![](img/4396149f3293257eae9d4250fa16d898_17.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4396149f3293257eae9d4250fa16d898_17.png)'
- en: one last thing if you really want really really repeatable it's going to be
    docker and pip tools。 using docker containers to really solidify and like shore
    up exactly what version of python。 you'll be using is a great way to make sure
    you get exactly the same build over and again and。 you can come back to it a year
    later and rerun that container without having to worry about。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果你真的想要可重复性，那就是使用 Docker 和 pip 工具。使用 Docker 容器来巩固并确保你将使用的 Python 版本是确保你每次都能获得相同构建的好方法，而且你可以在一年后重新运行那个容器，而不必担心。
- en: installing things on your system to get things running again if you all have
    questions i will be。 at the jet brains booth in the expo hall right after this
    so feel free to come down and pick my。 brain about studying for your system and
    building your awesome like killer workstation thank you all。
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 安装系统上的软件以使其再次运行，如果你们有任何问题，我将在展览厅的 JetBrains 展位上，欢迎随时来与我讨论关于系统学习和构建你们的超强工作站。谢谢大家。
- en: '![](img/4396149f3293257eae9d4250fa16d898_19.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4396149f3293257eae9d4250fa16d898_19.png)'
- en: for being here。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢你们的到来。
