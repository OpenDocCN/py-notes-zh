- en: P19：Talk - Amit Saha_ Implementing shared functionality using Middleware - VikingDen7
    - BV1f8411Y7cP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P19：演讲 - 阿米特·萨哈_ 使用中间件实现共享功能 - VikingDen7 - BV1f8411Y7cP
- en: The previous slide is quite different from what we are going to discuss today。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 上一张幻灯片与我们今天要讨论的内容大相径庭。
- en: '![](img/3af470918a25060cf2fcf1e47aee6edd_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3af470918a25060cf2fcf1e47aee6edd_1.png)'
- en: '![](img/3af470918a25060cf2fcf1e47aee6edd_2.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3af470918a25060cf2fcf1e47aee6edd_2.png)'
- en: Some of the key ideas that I found from back then that really resonated with
    me and that。 expresses the essence of what middleware is are terms like glue。
    It's an interface between hardware found above the transport layer but below the
    application。 environment。 I can't really express why but somewhere those terms
    gives me the essence of what we。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现的一些关键思想，确实与我产生共鸣，并且表达了中间件本质的术语，如“胶水”。这是硬件与传输层之上但应用程序环境之下之间的接口。我无法真正表达为什么，但某些地方这些术语给了我中间件本质的感觉。
- en: truly use middleware for today。 Of course we are not talking about hardware
    but generally just as a glue between different。 parts of our application。 Now
    for today consider a web application which consists of one or more API endpoints。
    or views。 Where is code you write to implement functionality that is common across
    one or more of your。 endpoints or views。 Examples count of page views， centralized
    error handling。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 今天我们真正使用中间件。当然，我们不是在谈论硬件，而是一般地作为我们应用程序不同部分之间的胶水。今天考虑一个包含一个或多个API端点或视图的web应用程序。你编写的代码实现了一个或多个端点或视图中共同的功能。示例包括页面浏览计数、集中式错误处理。
- en: caching and many others。 The whiskey specification PEP333 describes middleware
    as a way to provide extended APIs。 content transformation， navigation and other
    useful functions。 This leads us to our second topic of the talk， middleware for
    whiskey applications。 I will start off with discussing flask applications。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存等许多其他功能。威士忌规范PEP333将中间件描述为提供扩展API、内容转换、导航和其他有用功能的一种方式。这引出了我们演讲的第二个主题，针对威士忌应用程序的中间件。我将从讨论flask应用程序开始。
- en: Consider a very simple flask application where we create a blueprint and define
    a single。 route which handles all the requests and let's refer to that as the
    view function。 Now of course I have omitted bunch of stuff from here because they
    are not relevant in。 this context。 To define middleware in flask we use decorators。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个非常简单的flask应用程序，我们创建一个蓝图并定义一个处理所有请求的单一路由，我们称之为视图函数。现在，我当然省略了一些与此上下文无关的内容。要在flask中定义中间件，我们使用装饰器。
- en: One example for decorators that we use is the before request decorator。 When
    you create a function or define a function and decorate it with the before request
    decorator。 that function always gets called before your view function gets called
    when a request has。 been made to the application。 Similarly， if you want a function
    to be called after the request has been processed and the。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一个我们使用的装饰器例子是**请求前装饰器**。当你创建一个函数或定义一个函数并用请求前装饰器装饰它时，这个函数总是在视图函数被调用之前被调用，当请求发出到应用程序时。
- en: response has been generated， you decorate it with the decorator after request。
    Now of course here I have shown the example of blueprint but this equally applies
    to non-blue。 print applications as well just to be clear。 A typical example is
    shown here as a use case for where you might want to use this。 So let's say you
    want to print or not necessarily print perhaps record the latency of your page。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 响应已生成，你用请求后装饰器装饰它。当然，我在这里展示了蓝图的例子，但这同样适用于非蓝图应用程序，为了明确起见。这里显示了一个典型的例子，作为你可能想要使用此功能的用例。因此，假设你想打印或不一定打印，或许记录你页面的延迟。
- en: rendering。 So what you do is you would use the flask g global variable to start
    a timer in the before。 request function or the function where you decorated with
    before request and then in the。 function you decorated with after request you
    would find the difference between the time。 now and the time that you recorded
    at the beginning of the request and that gives you。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染。因此，你所做的是在请求之前的函数中使用flask的g全局变量来启动计时器，或者在你用请求前装饰的函数中，然后在你用请求后装饰的函数中找到当前时间和你在请求开始时记录的时间之间的差异，这将给你。
- en: the latency of your page rendering。 So that's marked as an optional because
    I may not have time for it。 So if you do check out the slides I think that might
    give you more insights into how。 this before request and after request are implemented
    within flask itself。 Now it's very common to define not one but multiple such
    before request sorry not defined。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 页面渲染的延迟。因此这被标记为可选，因为我可能没有时间去处理它。如果你查看幻灯片，我认为这可能会让你更深入了解 before request 和 after
    request 在 Flask 中是如何实现的。现在，定义不止一个，而是多个这样的 before request 函数是很常见的，抱歉，我并没有定义。
- en: Let's let's let's rehouse that。 It's very common to define multiple functions
    which you declared with before request as well。 as after request。 Now the ordering
    matters for the before request functions which I have specified here as before。
    request underscore F1 before request underscore F2 the order in which they are
    defined is the。 order in which they are called。 For the after request functions
    they are called in the reverse order。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重新来一下。这通常会定义多个函数，你可以在 before request 和 after request 中声明它们。现在，对于我在这里指定的 before
    request 函数，顺序是重要的，指定为 before request underscore F1 和 before request underscore
    F2，它们的定义顺序就是它们被调用的顺序。对于 after request 函数，它们的调用顺序是相反的。
- en: So when the response is generated from the view function the function you defined
    last。 gets called first and then subsequently the other functions in a lasting
    first hour planner。 Let's consider a Django application now。 This is a simplified
    view function which I have called index it takes a single parameter。 request which
    represents the current request that is being handled。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当从视图函数生成响应时，你最后定义的函数首先被调用，然后是其他函数，以此类推。现在，让我们考虑一个 Django 应用程序。这是一个我称之为 index
    的简化视图函数，它接受一个参数 request，表示当前正在处理的请求。
- en: Please give this in mind this is going to be our key for the next couple of
    slides。 So in Django you can define middleware using two approaches you can define
    a class or you。 can define a function。 Now the first example I have here is a
    class based approach you define a class you define。 a constructor which takes
    in a single parameter get response。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这将是我们接下来几张幻灯片的关键。因此，在 Django 中，你可以使用两种方法定义中间件：你可以定义一个类或者定义一个函数。现在我这里的第一个示例是基于类的方法，你定义一个类，定义一个构造函数，该构造函数接受一个参数
    get response。
- en: This parameter represents either the next view function or the next middleware
    to be， called。 The magic really happens here in the magic method call。 So what
    happens here is the first thing notier is the parameter that call takes。 It takes
    a parameter request which represents the current request that is being handled
    and。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个参数表示要调用的下一个视图函数或下一个中间件。真正的魔法发生在调用方法中。因此，这里首先要注意的是调用所接受的参数。它接受一个参数 request，表示当前正在处理的请求。
- en: this is exactly what the view function also took in as a parameter。 Now in the
    call method is where we implement our middleware。 Now in this case the middleware
    we are implementing handles exceptions。 The desired behavior here is if there
    is no exception we return the response as it is。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是视图函数作为参数接受的内容。现在在调用方法中，我们实现我们的中间件。在这种情况下，我们实现的中间件处理异常。此处的期望行为是，如果没有异常，我们将原样返回响应。
- en: If however we got an exception we want to return a custom response。 I have omitted
    that from here for brevity。 Code is really hard to put on slides in a way that
    actually it's legible。 So I have omitted that from here and that's your middleware
    which is using a class based。 approach in Django。 A function based middleware
    looks as shown。 We define a function called。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们遇到异常，我们希望返回自定义响应。我在这里省略了这个内容以保持简洁。代码在幻灯片上展示时确实很难保持可读性。因此，我在这里省略了，这就是你在 Django
    中使用基于类的方法的中间件。基于函数的中间件如下所示。我们定义了一个名为。
- en: you know， of course you can call it exactly what your middleware， does。 In this
    case I am calling it as latency_reporter and because I am measuring latency of
    a request。 using this middleware。 Now the key here is the latency_reporter function
    takes in a parameter get response which points。 to the next middleware or the
    view function that will be called for the request。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可以准确地将其命名为你的中间件所做的事情。在这种情况下，我将其命名为 latency_reporter，因为我正在使用这个中间件来测量请求的延迟。这里的关键是
    latency_reporter 函数接受一个参数 get response，该参数指向下一个中间件或将为请求调用的视图函数。
- en: Now this function returns a closure。 That closure is again taking that parameter
    request which represents the current request。 being handled and that is returned
    and the Django middleware machinery invokes this function。 whenever a request
    is being handled。 Now inside the closure what we do is we again start a timer
    with an assign it to a variable。 request_begin。 And then we go through， sorry
    and then we call the view function or the next middleware which。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这个函数返回一个闭包。这个闭包再次接收参数请求，表示正在处理的当前请求，并且在处理请求时，Django 中间件机制会调用这个函数。现在在闭包内部，我们再次启动一个计时器并将其分配给一个变量
    request_begin。然后我们继续，抱歉，然后调用视图函数或下一个中间件。
- en: is get response and then after we have got the response from that function we
    can print。 the latency here in a more practical use case you push the latency
    to your monitoring system。 and then return the response from here。 Now once you
    define your middleware this is how you activate those middleware in Django。 You
    update your settings。py and you update the middleware list which is a module level。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 是获取响应，然后在我们从那个函数获得响应后，我们可以打印延迟。在更实际的用例中，你可以将延迟推送到你的监控系统，然后从这里返回响应。现在一旦你定义了你的中间件，这就是在
    Django 中激活这些中间件的方式。你需要更新你的 settings.py，并更新中间件列表，这是一个模块级别的设置。
- en: variable to the middleware you want to activate。 The ordering here matters once
    again。 So consider that we have a middleware A， B and then we have your application
    handler or。 your view function whatever you want to call it has。 So when a request
    is being processed like basically when the request is coming into your application。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 变量传递给你想要激活的中间件。这里的顺序再次很重要。因此考虑我们有一个中间件 A，B，然后是你的应用处理程序或你的视图函数，无论你想如何称呼它。当请求被处理时，基本上是请求进入你的应用程序时。
- en: first the middleware A is called then your middleware B is called and then finally
    your。 view function is called。 Once the response has been generated the response
    first goes into middleware B and then goes up。 to middleware A and then finally
    the client。 One key difference between flask and Django middleware is that in
    flask your middleware。 can may not be invoked for both parts of your request that
    is when for the request as well。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 首先调用中间件 A，然后调用你的中间件 B，最后调用你的视图函数。一旦生成了响应，响应会先进入中间件 B，然后再进入中间件 A，最后到达客户端。Flask
    和 Django 中间件之间一个关键的区别是，在 Flask 中，你的中间件可能不会在请求的两个部分都被调用，即在请求时和响应时。
- en: as response because you control that with the decorators before request and
    after request。 In Django it's different。 Your every middleware that you define
    gets both the request as well as response。 It depends on your middleware whether
    you want you can ignore the request or you can ignore。 the response。 It really
    depends on what your middleware is trying to do。 To recap。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 作为响应，因为你通过请求前和请求后的装饰器来控制这一点。在 Django 中则不同。你定义的每个中间件都会获得请求和响应。这取决于你的中间件，你可以选择忽略请求或忽略响应。这真的取决于你的中间件想要做什么。简单回顾一下。
- en: using middleware you define custom code to run before and after request processing。
    and how the middleware works is a framework specific detail which you usually
    can find。 out by looking at the framework source code。 I did it myself but I have
    omitted it from today's talk because I will not be able to。 cut it in the time。
    I thought I had a 45 minutes slot initially。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 使用中间件，你定义自定义代码在请求处理之前和之后运行。中间件的工作方式是框架特定的细节，通常可以通过查看框架的源代码来找到。我自己做过，但我已经在今天的演讲中省略了，因为我无法在时间内讲完。我最初以为我有
    45 分钟的时间。
- en: And yeah and vis-a-vis frameworks define the own mechanism to define the middleware。
    So let's pause a bit。 So as we have seen we write a middleware for Django application
    and we write a middleware。 for flask applications and the way we do it is quite
    different and the reason it's different。 is because each framework implements
    their own mechanism。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，不同的框架定义了自己的中间件机制。让我们稍作停顿。正如我们所见，我们为 Django 应用程序编写了中间件，也为 Flask 应用程序编写了中间件，而我们这样做的方式是相当不同的，原因在于每个框架实现了自己的机制。
- en: Now my question is could you write middleware in a framework independent way？
    It turns out we can。 These are after all vis-a-vis frameworks which means they
    define vis-a-vis applications and。 there lies the answer as we shall see next。
    So I will take a step back and define what is a function which instantly is a
    vis-a-vis。 application。 I knew something like this is how you define a vis-a-vis
    application but before I did this。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我的问题是，你能以框架无关的方式编写中间件吗？结果我们可以。这毕竟是`vis-a-vis`框架，这意味着它们定义了`vis-a-vis`应用程序，答案就在这里，正如我们接下来要看到的那样。因此，我将退后一步，定义什么是一个瞬时的`vis-a-vis`应用程序。我知道这样的东西是如何定义`vis-a-vis`应用程序的，但在我这样做之前。
- en: talk I had no idea。 But this is how a vis-a-vis application looks like and that
    is it。 You don't have to do anything else。 So it takes two parameters of a dictionary
    called envirin and a function start response。 The dictionary environment contains
    key value pairs describing the current request and start。 response is a function
    which you use to send back the response to the client。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我对此毫无头绪。但这就是一个`vis-a-vis`应用程序的样子，仅此而已。你不需要做其他事情。因此，它接受一个名为`envirin`的字典和一个函数`start
    response`作为两个参数。字典环境包含描述当前请求的键值对，而`start response`是一个函数，你用它将响应发送回客户端。
- en: So the commented lines are where you do your processing in your handler and
    then when you。 are ready to send the response you first call the start response
    with two arguments。 The first is a string containing the HTTP status and the second
    is a list of headers that you。 want to add to the response and then you send back
    the response itself。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 注释的行是你在处理程序中进行处理的地方，然后当你准备好发送响应时，首先用两个参数调用一开始响应。第一个是包含HTTP状态的字符串，第二个是你想要添加到响应中的头部列表，然后你发送响应本身。
- en: The response needs to be attribute。 So here it just contains a single byte hello
    world。 Let's look at how we can write a vis-gimid layer。 So it looks very similar
    to the Django middle with certain differences。 In fact let me go back to this。
    If you look at the call method we will ignore the init because it's not relevant
    here。 I mean it's quite clear。 I hope what it's doing。 The call method signature
    and the vis-gimid application signature is exactly the same。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 响应需要是一个属性。因此，这里它仅包含一个字节的问候语“hello world”。让我们看看如何编写一个`vis-gimid`层。它看起来非常类似于Django中间件，但有某些差异。事实上，让我回过头来看看。如果你查看调用方法，我们将忽略初始化，因为在这里并不相关。我是说，它做的事情是相当明确的。我希望你能明白。调用方法签名和`vis-gimid`应用程序签名是完全相同的。
- en: And what we do here is once again one of my favorite examples it seems like
    to handle， exceptions。 So what I do in the call method is I call the self。wisgap
    attribute which points to the original。 wisgab application。 If there is no exception
    the response is returned as returned by the wisgab application。 itself。 If however
    there is an exception I call the start response with a 500 status with some。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里做的再次是我最喜欢的例子之一，似乎是处理异常。因此，在调用方法中，我调用了自我属性`self.wisgap`，它指向原始的`wisgab`应用程序。如果没有异常，响应将按`wisgab`应用程序本身返回。如果发生异常，我将调用带有500状态的一开始响应。
- en: custom headers and then I return a custom response which is an error occurred。
    And that's really useful because you hide your internal exception details from
    your， client。 You should have a logit which I haven't shown here。 And how do you
    integrate the wisgab application with the middleware？ It looks like this。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义头部，然后我返回一个自定义响应，表示发生了错误。这真的很有用，因为你可以将内部异常细节隐藏在客户端面前。你应该有一个日志，我在这里没有显示。你如何将`wisgab`应用程序与中间件集成？看起来是这样的。
- en: You create an object of my exception processor type which is the middleware
    we defined and。 you pass in the wisgab application itself and that's your wisgab
    and you can use a server。 like junicon app to run it。 And there you go you have
    your wisgab application running with wisgab。 I'm going to refer to this as the
    wrapping technique of defining middleware for wisgab。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你创建一个我的异常处理器类型的对象，这是我们定义的中间件，然后你传入`wisgab`应用程序本身，这就是你的`wisgab`，你可以使用像`junicon
    app`这样的服务器来运行它。就这样，你的`wisgab`应用程序正在与`wisgab`一起运行。我将把这称为为`wisgab`定义中间件的包装技术。
- en: applications。 So let's pause again。 So frameworks implement their own mechanisms
    to define middleware as we have seen。 Now wisgab is another wisgab application。
    So that means if we implement a functionality using wisgab middleware they are
    framework。 independent。 Let's see how they work。 So this is the open telemetry
    wisgab middleware。 It's an open source middleware that's available from the open
    telemetry project。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们再暂停一下。框架实现了自己的机制来定义中间件，正如我们所见。现在，wisgab 是另一个 wisgab 应用程序。这意味着如果我们使用 wisgab
    中间件实现功能，它们就是框架无关的。让我们看看它们是如何工作的。这是开放遥测 wisgab 中间件，它是一个来自开放遥测项目的开源中间件。
- en: It doesn't quite matter so I'm not getting to what open telemetry itself is
    but this。 is an example I was familiar with of a wisgab middleware。 So this is
    the source code of the middleware and you can see the similarity with the middleware。
    we define here。 It's pretty much the same if you ignore the specific functionality。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是特别重要，所以我不会详细说明开放遥测本身是什么，但这是我熟悉的一个 wisgab 中间件的例子。所以这是中间件的源代码，你可以看到它与我们在这里定义的中间件的相似性。如果忽略特定功能，它几乎是一样的。
- en: So that's the open telemetry wisgab middleware which is available as a third
    party package。 And how can we use that with Flask？ So when you define a Flask
    app there is an attribute wisgab_app which points to the wisgab application。 And
    what you can do here is we set the attribute to an object of the open telemetry
    middleware。 type which we create by passing the original wisgab as an argument。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是开放遥测 wisgab 中间件，它作为第三方包提供。那么我们如何在 Flask 中使用它呢？当你定义一个 Flask 应用程序时，有一个属性 wisgab_app
    指向 wisgab 应用程序。你可以在这里将该属性设置为开放遥测中间件对象的类型，方法是将原始的 wisgab 作为参数传递。
- en: So this results in the open telemetry middleware wrapping our original wisgab
    application。 And that basically gives you the functionality that the open telemetry
    middleware provides。 for your Flask application。 Now for Django if you look at
    the file wisg。py in your project you will find this code where， there is a top
    level variable called application and that gets set to the return value of the。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这导致开放遥测中间件包装了我们原始的 wisgab 应用程序。这基本上为你的 Flask 应用程序提供了开放遥测中间件所提供的功能。现在，对于 Django，如果你查看项目中的
    wisg.py 文件，你会发现这段代码，其中有一个顶级变量叫做 application，它被设置为返回值。
- en: function get wisgab application and that points to your underlying wisgab application。
    Remember when I said that this framework abstract a lot of these things but somewhere
    in there。 there is a wisgab application so this is the wisgab application。 And
    the way we use the open telemetry middleware it looks similar to Flask。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 get wisgab 应用程序，它指向你底层的 wisgab 应用程序。记得我提到过这个框架抽象了很多这些内容，但在某处确实有一个 wisgab
    应用程序。所以这就是 wisgab 应用程序。我们使用开放遥测中间件的方式与 Flask 类似。
- en: We create an open telemetry middleware object， we pass the original wisgab application
    and。 then we update the value of the application which is the module level variable
    to that。 object and that's all you need to use wisgab middleware。 So this sounds
    like a win， right？
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个开放遥测中间件对象，传入原始的 wisgab 应用程序。然后我们更新应用程序的值，也就是模块级变量，指向那个对象，这就是使用 wisgab
    中间件所需的一切。所以这听起来像是个胜利，对吧？
- en: You can write a wisgab middleware and you can use it in a framework independent
    way。 Now I'm not sure if there are any pitfalls doing that though I haven't explored
    it enough。 but maybe that's something for you to go and explore back home。 Alright
    so let's see one last example of how we can use a middleware。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以编写一个 wisgab 中间件，并且可以以框架无关的方式使用它。现在我不确定这样做是否会有任何陷阱，尽管我还没有深入探索过。不过，也许这是你可以回家探索的内容。好吧，让我们看一个最后的例子，看看如何使用中间件。
- en: Consider that you have a Django application and you're moving some of your backends
    to， Flask。 What you can do is you can define a middleware which embeds the Flask
    application within your。 Django application。 If it sounds like magic that's how
    it seemed like to me when I actually implemented it。 So you define a class called，
    you know you can call it anything really but I have called。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个 Django 应用程序，并且你将一些后端迁移到 Flask。你可以定义一个中间件，将 Flask 应用程序嵌入到你的 Django 应用程序中。如果这听起来像魔法，那就是我实际实现时的感觉。所以你定义一个类，嗯，你可以随意命名，但我叫它。
- en: it Flask app wrapper。 The key again is the special call method。 So here I call
    the Flask apps wisgab method first。 You know I pass the environment and start
    response exactly how I found it here and I。 pass it to the Flask app。 If I get
    a non-404 response I return the data as it is and that indicates to me that request。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Flask应用的包装器。关键再次是特殊的调用方法。所以在这里我首先调用Flask应用的wisgab方法。你知道，我传递环境和启动响应，正如我在这里找到的那样，然后我把它传递给Flask应用。如果我得到一个非404的响应，我就会原样返回数据，这表明请求。
- en: was handled correctly。 If however I get a 404 response I fall back to the Django
    application and that's one way。 you can use middleware to help you in migrations
    perhaps in your project。 And this is how you use it。 It looks very similar to
    how you use the open-to-mill to middleware。 So the result is when you make a request
    to the polls v2 path the Flask application gets。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 处理正确。如果我得到404响应，我会退回到Django应用程序，这是一种方式。你可以使用中间件来帮助你在项目中的迁移。这就是你如何使用它。它看起来非常类似于你使用open-to-mill的中间件。所以结果是，当你请求polls
    v2路径时，Flask应用程序会被调用。
- en: called but when you make a request to the polls path the Django application
    gets called。 So to recap Flask and Django implement custom mechanisms to allow
    users to define middleware。 However， as you have seen when we define a wiskin
    middleware they become， they are framework。 agnostic。 And we use， and we can use
    the wrapping technique to use this wiskin middleware。 Okay。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当你请求polls路径时，Django应用程序会被调用。所以回顾一下，Flask和Django实现了自定义机制，允许用户定义中间件。然而，正如你所看到的，当我们定义一个wiskin中间件时，它们变得独立于框架。我们使用包装技术来使用这个wiskin中间件。好的。
- en: how much are about？ Seven or eight？ So this is going to be like a turbo section
    I think but let's see。 So this is an ASCII issue re-application。 And it's similar
    to what we saw for the wiskin application。 You define an async function。 It takes
    three parameters， a scope。 a function receive and a function send。 So essentially
    describes the current request like you can think of it as the lifetime of。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 大约有多少个？七个还是八个？所以我认为这会是一个快速的部分，但让我们看看。这是一个ASCII问题的重新应用。它类似于我们在wiskin应用中看到的。你定义一个异步函数。它接受三个参数，一个scope，一个receive函数和一个send函数。因此，基本上描述了当前请求，你可以把它想象成生命周期。
- en: the current request。 The receive function is used to get any request data and
    then you use the send function to。 send back any response。 So remember the signature。
    That's all that's needed for this section。 And I'm going to skip over this because
    we'll cover it here。 Okay。 Now let's consider a fast API application。 This is
    how we define a very simple fast API application。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当前请求。receive函数用于获取任何请求数据，然后你使用send函数发送任何响应。所以记住这个签名。这就是本节所需的全部内容。我将跳过这一部分，因为我们将在这里覆盖它。好的。现在让我们考虑一个快速API应用程序。这是我们定义一个非常简单的快速API应用程序的方式。
- en: You create a top level object of fast API type。 We define a root， expensive。
    And it's a super expensive root where we sleep for 10 seconds and then return
    a response。 Now let's say I want to write a middleware as a， you know， caching。
    Like I want to cache these expensive results。 I don't want to calculate a result
    every time。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你创建一个顶层对象，类型为快速API。我们定义一个根，昂贵。它是一个超级昂贵的根，我们睡10秒钟然后返回一个响应。现在假设我想写一个中间件，比如说缓存。我想缓存这些昂贵的结果。我不想每次都计算结果。
- en: So what I do， I define a middleware。 I define a init method。 It takes in two
    parameters。 The first parameter is the as the application itself and have a second
    parameter。 Excluded parts。 Now this is any custom arguments that your middleware
    needs to take。 And we can specify as many as you want here。 I just have one。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我做的就是定义一个中间件。我定义了一个初始化方法。它接受两个参数。第一个参数是应用本身，第二个参数是排除的部分。这是你中间件需要接受的任何自定义参数。我们可以在这里指定任意数量的参数。我这里只有一个。
- en: The key here again is the special column method。 It should be an async function。
    It takes in three parameters， scope receives send， exactly like our asgip function
    here。 And in this function， we define the logic for the middleware。 If there's
    a cache it。 we return the cache response。 If however， we did not get a cache it。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的关键再次是特殊的调用方法。它应该是一个异步函数。它接受三个参数，scope、receive和send，正如我们在这里的asgip函数一样。在这个函数中，我们定义中间件的逻辑。如果有缓存，我们就返回缓存的响应。然而，如果我们没有得到缓存。
- en: we call the original app using the original arguments。 Scope receive。 Cache
    and send is a wrapper that I created which caches the response and then sends
    back。 the response。 You can find these examples in the resources I have shared
    in my website。 And so again， you have defined the middleware。 How do you add it？
    In fast API。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用原始参数调用原始应用。Scope receive。Cache和send是我创建的一个包装器，它缓存响应，然后发送回去。你可以在我分享的网站资源中找到这些示例。因此，再次强调，你已经定义了中间件。你如何在FastAPI中添加它？
- en: it provides a helper method， add middleware。 And you first define the class
    of the middleware that you want to add。 And then you specify any additional parameters。
    In this case。 I have got a parameter called excluded parts which is a list of
    parts I， don't want to cache。 So chat actually is a WebSocket backend which I
    have implemented。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 它提供了一个辅助方法，add middleware。你首先定义想要添加的中间件的类。然后指定任何额外的参数。在这种情况下，我有一个叫excluded parts的参数，它是一个我不想缓存的部分列表。因此，聊天实际上是我实现的WebSocket后端。
- en: And that brings me nicely to my next slide。 So this middleware actually works
    very well， you know。 as for HTTP applications as well， as WebSocket applications。
    And the key to that is because the scope lasts as long as WebSocket connection
    remains open。 So when you call this await serve。app， that function doesn't return
    as long as WebSocket。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这让我很自然地转到下一张幻灯片。因此，这个中间件实际上运作得很好，你知道。它既适用于HTTP应用，也适用于WebSocket应用。关键在于作用域持续的时间与WebSocket连接保持开放的时间一致。所以当你调用`await
    serve.app`时，那个函数在WebSocket连接期间不会返回。
- en: connection remains open。 So I have got some logs down below where you can see
    that the request lasted for 30 seconds。 which is how long the WebSocket connection
    was open for。 I will skip over this。 You can look at the slides。 So now if you
    notice， if you compare what the default behavior of the WISG framework。 and the
    ASCII framework is， I quite like the default behavior of fast API。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 连接保持开放。因此，我在下面有一些日志，你可以看到请求持续了30秒，这就是WebSocket连接保持开放的时间。我会略过这一部分。你可以查看幻灯片。所以现在如果你注意到，比较WISG框架和ASCII框架的默认行为，我非常喜欢FastAPI的默认行为。
- en: Because it allows you to define ASCII middleware directly。 In fact。 that is
    the first thing they recommend in their documentation。 They talk about a more
    specific approach later on in the documentation。 But I quite like the fact that
    they allow you to， they ask you to just write a generic。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 因为它允许你直接定义ASCII中间件。实际上，这是他们文档中推荐的第一件事。他们稍后在文档中讨论了一种更具体的方法。但我很喜欢他们让你，只需编写一个通用的中间件。
- en: ASCII middleware。 Which means if there are other ASCII frameworks。 you could
    use the middleware with those as， well。 I quite like that about fast API。 So the
    last middleware example you are going to see is how can you embed a WISG application。
    in certain ASCII application。 This is as magical as it gets。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: ASCII中间件。这意味着如果还有其他ASCII框架，你可以将中间件与那些框架一起使用。我很喜欢FastAPI这一点。所以你将要看到的最后一个中间件示例是如何将WISG应用嵌入到某些ASCII应用中。这是最神奇的部分。
- en: So what you can do is you define a fast API app and then fast API provides a
    special middleware。 called WISG middleware。 You call the mount method and any
    parts starting with V1 will be passed on to the WISG middleware。 and hence to
    the WISG application。 And the result is， I've got a brief example。 So when you
    call anything with V1， you get hello world from Flask because that's been processed。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你可以做的是定义一个FastAPI应用，然后FastAPI提供一个特殊的中间件，称为WISG中间件。你调用mount方法，任何以V1开头的部分将被传递给WISG中间件，因此传递给WISG应用。结果是，我有一个简要的示例。所以当你调用以V1开头的任何内容时，你会从Flask那里得到hello
    world，因为那是经过处理的。
- en: by Flask。 On the other hand， when you call anything with V2， you get a response
    from a fast API。 The WISG middleware implementation， if you look in the starlet
    source code， looks like， this。 I'm sure you're beginning to see that pattern now。
    So you look at the call method。 it takes in three parameters and then there's
    the special。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，当你调用以V2开头的任何内容时，你会从FastAPI那里获得响应。如果你查看Starlet源代码，WISG中间件的实现看起来像这样。我相信你现在开始看到这个模式了。所以你查看call方法，它接受三个参数，然后有特殊的。
- en: WISG responder class which if you go into it defines a WISG method which takes
    in two。 parameters which is an environment and start response。 So your WISG application
    essentially。 I will skip that。 So key takeaways， middleware can be defined generally
    as an WISG or as G application or。 B framework specific。 Middleware is code that's
    acting as both a client and a server。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: WISG响应者类，如果你深入研究，会定义一个WISG方法，它接受两个参数：一个环境和启动响应。因此，你的WISG应用本质上……我就跳过这一点。所以关键要点是，中间件一般可以定义为WISG应用或G应用，或者特定于B框架。中间件是既充当客户端又充当服务器的代码。
- en: A client for your other middleware or for your views and the server for other
    middleware。 or for your original client。 And middleware enables decoupling and
    sharing of non-functional requirements。 And it also helps us in migration between
    application frameworks as well as WISG and， ASG。 So I have an exercise for you。
    Go back， not today， maybe after you've recovered。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 一个客户端用于你的其他中间件或视图，以及服务器用于其他中间件，或者用于你的原始客户端。中间件使得非功能性需求的解耦和共享成为可能。它还帮助我们在应用框架之间迁移，包括WISG和ASG。因此，我给你一个练习。回去吧，不是今天，可能在你恢复之后。
- en: check out the source code for the built-in， middleware and the community-contributed
    middleware。 You will easily be able to see the pattern and hopefully the talk
    has given you enough。 to really dig deep into those and understand how they work。
    So thank you。 Thanks for choosing my talk over some of the other excellent options
    and I hope you have。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 查看内置中间件和社区贡献的中间件的源代码。你会很容易看到模式，希望这次演讲能给你足够的内容，深入理解这些，并了解它们的工作原理。所以谢谢你。感谢你选择我的演讲而不是其他一些优秀的选择，我希望你能。
- en: gained insights into the internals of the middleware as they apply to WISG and
    ASG applications。 and go away with a few new neural pathways formed in your brain。
    I have written a few books。 Those two are my books most proud of， I guess。 Go。
    Yes。 I know it's a Python conference but I'm a Python as well as a Go guy。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 深入了解中间件在WISG和ASG应用中的内部运作，并让你的大脑形成一些新的神经通路。我写过几本书。这两本是我最自豪的书，我想。去吧。是的。我知道这是一个Python会议，但我既是Python开发者也是Go开发者。
- en: So please check out that book if you're taking your first steps into Go and
    looking for something。 practical and doing math at Python I wrote that few years
    ago but I think it's too relevant。 So please check it out。 Feel free to contact
    me with anything related to this talk or anything else really。 Yeah。 Thank you。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果你正在迈出第一步进入Go，寻找一些实用的东西，做Python的数学，我几年前写的那本书我认为仍然非常相关。所以请查看一下。如果你对这次演讲或其他任何事情有疑问，请随时联系我。是的，谢谢。
- en: '![](img/3af470918a25060cf2fcf1e47aee6edd_4.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3af470918a25060cf2fcf1e47aee6edd_4.png)'
- en: '[applause]， [APPLAUSE]。'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[掌声]，[热烈掌声]。'
