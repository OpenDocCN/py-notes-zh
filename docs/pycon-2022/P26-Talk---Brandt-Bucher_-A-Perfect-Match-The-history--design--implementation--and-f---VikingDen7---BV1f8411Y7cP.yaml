- en: P26：Talk - Brandt Bucher_ A Perfect Match The history, design, implementation,
    and f - VikingDen7 - BV1f8411Y7cP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P26：演讲 - 布兰特·布赫_完美契合 历史、设计、实施和 f - VikingDen7 - BV1f8411Y7cP
- en: We have a full house today。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 今天我们人满为患。
- en: '![](img/1d2c096146578dd9a362e33e9b999f3e_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1d2c096146578dd9a362e33e9b999f3e_1.png)'
- en: '![](img/1d2c096146578dd9a362e33e9b999f3e_2.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1d2c096146578dd9a362e33e9b999f3e_2.png)'
- en: So welcome， thank you so much for being able to join us this morning。 This talk
    is by our friend。 Brent Booker， the perfect match， history design， implementation。
    and future of Python's structural pattern matching。 Brent， take it away。 Thank
    you。 So。 my name is Brent Booker。 Today I'm going to talk about a Python 3。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 所以欢迎大家，感谢你们今天早上能加入我们。这场演讲是由我们的朋友布兰特·布克主持的，完美匹配，Python的结构模式匹配的历史、设计、实施和未来。布兰特，开始吧。谢谢。我叫布兰特·布克。今天我将谈论Python
    3。
- en: 10 new structural pattern matching feature。 Before we get started a little bit
    about me。 I originally studied computer engineering， in college。 During my last
    two years。 I encountered Python and it taught me that I like developing software。
    a lot more than I like developing hardware。 So I quickly became involved in Python
    core development。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 10个新的结构模式匹配特性。在我们开始之前，简单介绍一下我。我在大学时学习了计算机工程。在最后两年里，我接触到了Python，它让我意识到我更喜欢开发软件，而不是硬件。因此我很快参与了Python核心开发。
- en: I've been a core developer for almost two years now。 And I'm currently working
    at Microsoft as part of the Faster C Python team。 The biggest project that I've
    worked on as a Python core developer has been implementing。 and co-authoring the
    structural pattern matching proposal that we've talked about today。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经担任核心开发者快两年了。目前在微软的Faster C Python团队工作。作为Python核心开发者，我参与的最大项目是我们今天讨论的结构模式匹配提案的实施和共同创作。
- en: And a lot of the work that I did on this proposal was also while I was working
    at Research。 affiliates in Newport Beach， California。 So I think both these companies
    are actually going to be boothing at the job fair。 You should check them both
    out。 So I'm going to start with the history of the match statement as it relates
    to Python。 So this feature probably began the way I imagined most new Python feature
    starting， which is。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这个提案中做的大部分工作也是我在加利福尼亚纽波特海滩的Research Affiliates工作期间完成的。所以我认为这两家公司实际上都会在招聘会上设展。你应该去看看这两家公司。接下来我将谈谈匹配语句与Python的关系。这个特性可能是以我想象的方式开始的，大多数新的Python特性也是如此。
- en: a nerd sniping email from Gito Van Rossum on a Wednesday morning during COVID
    where he。 said something to the effect of a lot of people want to add a match
    statement to Python。 Do you want to help figure out what that would look like？
    And I thought， yeah， that sounds awesome。 I'm stuck at home and locked down and
    I need a good project。 This seems like a good project。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一封来自吉多·范罗苏姆的电子邮件，在COVID期间的一个星期三早晨，他说大概有很多人想要在Python中添加匹配语句。你想帮助我们弄清楚那会是什么样子吗？我想，太好了。我被困在家里，无法外出，需要一个好的项目。这似乎是个不错的项目。
- en: So eventually that work became PEP 622。 And it was early summer at this point
    where targeting Python 3。10 and we had gotten four， other authors by this point。
    And this PEP was a monster。 It was huge。 It didn't really have a clear audience。
    It included a bunch of features and kind of bolted on additions to the feature
    that just。 sort of bloated the proposal and made it harder to actually figure
    out what was important。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 所以最终这项工作成为了PEP 622。此时是初夏，目标是Python 3.10，到了这个时候我们已经有四位其他作者。这份PEP是个巨无霸，内容庞大，没有明确的受众。它包含了一堆功能，并且有些特性像是拼接在一起，导致提案臃肿，使得我们更难判断哪些是重要的。
- en: and wasn't。 And so the steering council read it diligently and came back to
    us and said， hey。 you know， what， can you actually rewrite this thing because
    this is a very big decision for us。 to make and you're not making it very easy
    for us to make it。 So we did。 We rewrote it as PEP 634 and we split it up into
    three new PEPs。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是。因此指导委员会仔细阅读了这份提案，并回来告诉我们，嘿，你们知道吗，可以请你们重写这份文件吗？因为这是我们需要做出的一个非常重要的决定，而你们并没有让我们更容易做出这个决定。所以我们做了，我们将其重写为PEP
    634，并分拆成三个新的PEP。
- en: And this was great because it allowed us to present the proposal for three different。
    intended audiences。 And so each different person who had curiosities about what
    exactly we were proposing had different。 places where they could find it。 So it
    was a fall at this point。 We still targeted Python 3。10。 But now the three proposals
    were as follows。 We had PEP 634。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这很好，因为它让我们能够向三个不同的预期观众展示提案。因此，每个对我们所提议内容感到好奇的人都有不同的地方可以找到它。所以在这一点上，我们仍然针对 Python
    3.10。但现在这三个提案如下：我们有 PEP 634。
- en: which is a very dry specification of the feature。 I don't recommend reading
    it。 It's mostly just for maintainers like me who are actually implementing the
    thing。 We had PEP 635。 which was intentionally written for the steering council。
    So this basically explained why we felt the feature deserved to be added to the
    language。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一份非常干燥的功能规范。我不推荐阅读它。这主要是为了像我这样的维护者实际实施这个东西。我们有 PEP 635，它是专门为指导委员会写的。所以这基本上解释了我们为何觉得这个功能值得被添加到语言中。
- en: and backed up each of the different design decisions that we made along the
    way。 And then finally。 we have the most important PEP in my opinion， PEP 636。
    If you take nothing else away from this talk。 it's to read PEP 636。 It's awesome。
    It's a really in-depth tutorial of how to use pattern matching in your own code。
    It's better than anything I could present to you today。 Check it out。 It's great。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 并支持我们在过程中做出的各种设计决策。最后，我认为最重要的 PEP 是 PEP 636。如果你从这次演讲中只带走一点，那就是阅读 PEP 636。它太棒了。它是一个关于如何在自己的代码中使用模式匹配的深入教程。比我今天能呈现的任何内容都要好。快去看看。真棒。
- en: You basically write a text adventure game using pattern matching。 One other
    thing that I want to highlight from this period was our use of a dedicated。 repository
    to facilitate collaboration on this project。 So it's on GitHub。 It's public。 It's
    still available。 It's GitHub account， G Van Rossum/patma， that's short for pattern
    matching。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你基本上是在使用模式匹配编写一个文本冒险游戏。我要强调的另一个方面是我们使用了一个专用的。代码库来促进这个项目的协作。所以它在 GitHub 上。是公开的。仍然可用。它的
    GitHub 账户是 G Van Rossum/patma，代表模式匹配的简称。
- en: And this was great because it gave us a few things。 It gave us an issue tracker
    where we could basically track all of the different parts。 of the feature and
    bugs in the implementation， et cetera， in real time。 So what we wanted to accept。
    what we had rejected， and what we're still figuring out。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这很好，因为它给了我们几件事。它给了我们一个问题跟踪器，基本上可以实时跟踪功能的不同部分和实现中的错误等。所以我们想要接受的，拒绝的，以及仍在研究的内容。
- en: It also gave us a collaborative environment。 So this was a place where we could
    work on draft PEPs。 have early prototype implementations， and we even had several
    medium sized apps that extensively used pattern matching。 So each time we changed
    the syntax or added or removed a feature， we're able to see whether。 that made
    pattern matching easier to use， harder to use， et cetera。 And finally。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 它还给了我们一个协作环境。这是一个我们可以共同研究草案 PEP 的地方，进行早期原型实现，我们甚至有几个中型应用广泛使用模式匹配。因此每当我们更改语法或添加或移除功能时，我们能够看到这是否让模式匹配更易于使用或更难使用等。最后。
- en: and most importantly， it was a source of information that is searchable。 So
    if you're curious why we made a decision that we made， or what alternatives we
    considered。 or why we didn't include a specific feature， all the conversations
    that led to it。 Every single decision we made are there， and they're well tagged，
    they're well titled。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 而且最重要的是，它是一个可以搜索的信息来源。所以如果你想知道我们为什么做出某个决定，或者我们考虑了哪些替代方案，或者我们为什么没有包含特定的功能，所有导致这些决定的对话都在这里。我们所做的每一个决定都在那里，并且标记清晰，标题明确。
- en: they're very searchable。 And you can see how we went back and forth on different
    proposals。 how the authors might， have been split at different points， what steering
    council's input was。 So this was huge， and I used it when preparing this talk
    today just because all that information。 is very valuable， and it's nice to have
    it there all in one place。 Okay， so that's the history。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 它们非常可搜索。你可以看到我们如何在不同的提案之间反复讨论，作者在不同时间点可能分歧，指导委员会的意见是什么。所以这非常重要，我在准备今天的演讲时使用了它，因为所有这些信息都非常有价值，能集中在一个地方真是太好了。好的，这就是历史。
- en: Obviously， the proposal was eventually accepted， yay。 It's in Python 310， you
    can go to Python。org。 download it now with the big yellow download， button。 So
    let's talk a little bit about the design。 I feel like a lot of people introducing
    structural pattern matching have oversimplified it to。 the point of sort of defeating
    the purpose of the proposal itself。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，这项提案最终获得了批准，太好了。它在 Python 310 中，你可以去 Python.org 现在下载它，点击那个大黄色的下载按钮。那么我们来聊聊设计。我觉得很多介绍结构模式匹配的人将其简化到了几乎削弱提案本身目的的地步。
- en: So my goal is to kind of reset your expectations for what pattern matching is，
    and hopefully。 set you up for success in using it in your own code。 So what is
    structural pattern matching？
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我的目标是重置你对模式匹配的期望，并希望能帮助你在自己的代码中成功使用它。那么什么是结构模式匹配呢？
- en: I bet that's a lot of the reason why many of you are here today。 I'm going to
    start by saying what structural pattern matching is not， by quoting myself。 Structural
    pattern matching is not a switch statement。 I'm going to say it a second time。
    Structural pattern matching is not a switch statement。 It looks a lot like a switch
    statement。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我敢打赌，这也是许多人今天来到这里的原因。我将首先通过引用我自己来说明结构模式匹配不是什麼。结构模式匹配不是开关语句。我再说一次。结构模式匹配不是开关语句。它看起来很像一个开关语句。
- en: It behaves sometimes like a switch statement， but ultimately it's a lot more
    powerful than。 a switch statement。 And I feel that you're doing yourself a disservice
    if you try to use it like a switch statement。 You won't be able to harness its
    full power and you'll be frustrated when it doesn't behave。 the way you expect
    it to。 So my goal today is to basically convince you that structural pattern matching
    is more。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 它有时表现得像一个开关语句，但最终它比开关语句强大得多。我觉得如果你试图把它当作开关语句来使用，你会让自己处于不利境地。你将无法发挥它的全部能力，并且会因它未按预期行为而感到沮丧。所以我今天的目标基本上是说服你，结构模式匹配更。
- en: than a switch statement and then it deserves a place in your code base。 So if
    it's not a switch statement， then what is it？ Well。 it combines two ideas that
    we're all already very， very familiar with。 The first is control flow and the
    second is destructuring。 So I'm going to go through each of these。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 比起开关语句，它在你的代码库中确实值得一席之地。那么如果它不是开关语句，那它是什么呢？嗯，它结合了我们都非常熟悉的两个概念。第一个是控制流，第二个是解构。所以我将逐一讲解这两个概念。
- en: Control flow is basically just branching。 We do this all the time。 So here we're
    branching based on the value of an object， whether it's equal to the string， spam。
    the string eggs， or something else。 But we can also branch on what can more abstractly
    be called the shape of our subject。 So instead of its exact value， we may actually
    care about the length of a sequence or mapping。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 控制流基本上就是分支。我们经常这样做。所以在这里，我们是根据一个对象的值进行分支，无论它是等于字符串 spam、字符串 eggs，还是其他什么。但是我们也可以根据可以更抽象地称为我们主题形状的内容进行分支。所以我们可能关心的不是它的确切值，而是序列或映射的长度。
- en: for example。 These are all valid ways of branching based on the shape of our
    data。 So that's control flow。 What's destructuring？ Well。 destructuring is taking
    structured data and pulling it apart。 So in this example。 we're using iterable
    unpacking。 But there are other ways of destructuring data that we do every day。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这些都是基于我们数据形状的有效分支方式。所以这就是控制流。什么是解构呢？嗯，解构就是将结构化数据拆分开来。所以在这个例子中，我们使用了可迭代的解包。但是我们每天都有其他的解构数据的方式。
- en: You may access elements in a sequence。 You could access key value pairs in a
    mapping。 You can even access arbitrary attributes of arbitrary objects。 These
    are all ways of getting at contained data and actually making it more usable in。
    your own code。 So what structural pattern matching is asking is， well。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以访问序列中的元素。你可以访问映射中的键值对。你甚至可以访问任意对象的任意属性。这些都是获取包含数据并使其在你自己的代码中更可用的方法。那么结构模式匹配所要求的是，嗯。
- en: what if we can branch while we de-structure？ What if we can de-structure while
    we branch？
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在解构的同时可以进行分支呢？如果我们在分支的同时可以进行解构呢？
- en: And the answer to that question is really a very powerful declarative programming
    style。 that creates a new way of viewing a lot of the same problems that we've
    been struggling。 with for a very long time。 So you may have noticed I've gotten
    about a third of the way into this talk and I haven't。 actually shown you a match
    statement yet。 I'm going to fix that。 Here is a match statement。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对这个问题的答案实际上是一种非常强大的声明式编程风格，它创造了一种全新的视角来审视我们长期以来一直在努力解决的许多相同问题。所以你可能注意到，我已经讲了大约三分之一的时间，但实际上还没有给你展示一个匹配语句。我将修正这一点。这里是一个匹配语句。
- en: It's one of the more simple examples。 It looks like this。 It's just the word
    match followed by any expression。 In this case， it's the name meal。 And it's followed
    by one or more cases that are tied top to bottom。 In this case。 we only have one
    case。 So the cases look like the word case followed by a pattern。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这是比较简单的示例。看起来是这样的。它只是单词match后面跟着任何表达式。在这种情况下，是名称meal。后面跟着一个或多个上下文相连的案例。在这种情况下，我们只有一个案例。因此，案例看起来是单词case后面跟着一个模式。
- en: And I really want to emphasize this。 Entre comma side here is a pattern， not
    an expression。 So rather than building a tuple of length two， we're telling Python
    how we want to pull。 apart a sequence of length two if it encounters one， sort
    of like the left-hand side of an。 equal sign。 So to clarify this a little bit
    more， I'm going to put the equivalent Python 3。9 code。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我真的想强调这一点。这里的逗号侧是一个模式，而不是一个表达式。所以我们不是构建一个长度为二的元组，而是告诉Python我们希望如何提取一个长度为二的序列，如果它遇到一个，就像等号左侧那样。为了进一步澄清这个，我将放置等效的Python
    3.9代码。
- en: side by side with each of these examples。 So you can see here that this is matching
    any sequence of length two and then binding。 the first element to Entre and the
    second element to side。 So this is the sequence pattern。 And inside it has two
    capture patterns。 Entre inside are capture patterns。 And patterns can be nested
    arbitrarily。 So you can see here the capture patterns。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 与每一个示例并排展示。因此你可以看到这是匹配任何长度为二的序列，然后将第一个元素绑定到Entre，第二个元素绑定到side。这就是序列模式。内部有两个捕获模式。Entre内部是捕获模式。模式可以任意嵌套。因此你可以在这里看到捕获模式。
- en: That was the end of my sentence。 I just started talking。 Just like interval
    unpacking。 there are a few different equivalent forms for this。 So we saw it un-print
    the size。 It can also be parenthesized。 Or you can use a square brackets。 All
    of these forms are equivalent。 So that's capture patterns and sequence patterns。
    We also have what are called wild card patterns。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这句话的结尾我刚开始说话。就像区间解包一样，对于这个有几种不同的等效形式。因此我们看到了它未打印的大小。它也可以用括号括起来。或者你可以使用方括号。所有这些形式都是等效的。因此，这就是捕获模式和序列模式。我们还有被称为通配符模式的模式。
- en: These are similar to capture patterns in that they match anything。 But they
    don't actually bind any name。 So here that underscore is a wild card pattern。
    So you just use an underscore。 It behaves like a capture pattern where it matches
    anything。 But you're just telling Python that you want to ignore that value。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这些与捕获模式相似，因为它们可以匹配任何内容。但是它们实际上并不绑定任何名称。所以这里的下划线是一个通配符模式。你只需使用一个下划线。它的行为就像一个捕获模式，可以匹配任何东西。但是你只是告诉Python你想要忽略那个值。
- en: So you can see here that we're not actually binding anything from the first
    element of。 the sequence there。 We're only actually binding side there。 And wild
    card patterns， like I said。 can be put anywhere。 So a common idiom is to include
    a case at the end that is just a wild card pattern where。 this matches everything。
    So Python's pattern matching is not exhaustive at runtime。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你可以看到这里我们实际上并没有从序列的第一个元素中绑定任何东西。我们只是在绑定侧。如我所说，通配符模式可以放在任何地方。因此，一个常见的习惯是包含一个仅为通配符模式的案例，这个模式匹配所有内容。因此，Python的模式匹配在运行时并不是穷举的。
- en: If you fail to match each of the cases， it'll just continue execution on the
    next line。 This is really helpful if you want to raise in that case or assert
    false or whatever。 Finally the last pattern that we'll cover today are called
    value patterns。 So in this case。 the string spam is a value pattern。 And value
    patterns just look like atomic literal value。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你未能匹配每一种情况，它将继续执行下一行。这在你想要在那种情况下引发异常或断言为假时非常有用。最后，今天我们要介绍的最后一个模式被称为值模式。在这种情况下，字符串spam就是一个值模式。值模式看起来就像原子字面值。
- en: So we have a string here， but we also support byte strings， integers， floats，
    complex numbers。 bullions， none。 And these basically just match based on equality。
    So here we're expressing a fairly complex condition。 What we're saying is we want
    MEL to be a sequence of length two where the first element。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们这里有一个字符串，但我们也支持字节字符串、整数、浮点数、复数、布尔值和 None。这些基本上只是根据相等性进行匹配。所以在这里，我们表达了一个相当复杂的条件。我们想要的是
    MEL 是一个长度为二的序列，其中第一个元素。
- en: is equal to the string spam。 And if that is the case。 bind the second element
    aside and execute the corresponding case block， below it。 And that would just
    be a list of statements sort of like you would find an if。 Those are the only
    patterns that I'll cover today because it's kind of a good building。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 等于字符串 spam。如果是这种情况，将第二个元素绑定并执行下面相应的 case 块。那将是一些语句列表，类似于你在 if 中找到的。今天我只会涵盖这些模式，因为这是一个很好的基础。
- en: block for examples that will come later。 But one thing that I do want to clarify
    is that there are many more patterns。 And I'm actually not showing you the most
    powerful and exciting ones。 I will give you a little taste though， but again，
    read page 636 if you actually want to。 learn about all these things。 But just
    to kind of peak your interest。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这是稍后将要出现的示例的块。但我想澄清的一件事是，还有许多其他模式。而且我实际上并没有向你展示最强大和最令人兴奋的模式。我会给你一点点尝试，但再次，如果你真的想了解这些事情，请阅读第
    636 页。但只是想引起你的兴趣。
- en: we also have OR patterns which allow you to match， one of several alternatives。
    We have guards which allow you to attach arbitrarily complex expressions to your
    patterns as part。 of the matching logic。 We have mapping patterns so that you
    can destructure arbitrary mappings that have the required。 values。 These are especially
    useful when combined with sequence patterns so that you can。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有 OR 模式，允许你匹配多个选项之一。我们有 guards，允许你将任意复杂的表达式附加到模式中，作为匹配逻辑的一部分。我们有映射模式，以便你可以解构具有所需值的任意映射。这在与序列模式结合时尤其有用，这样你可以。
- en: for example， parse JSON or other nested data structures。 And finally。 my favorite
    and the most exciting are what are called class patterns。 So these are really
    cool。 What I have here is a meal class pattern with two contained food class patterns。
    And what these do is they will match instances of a meal class with two instances
    of food。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，解析 JSON 或其他嵌套数据结构。最后，我最喜欢且最令人兴奋的是所谓的类模式。这些真的是很酷。我这里有一个包含两个食品类模式的餐类模式。这些模式将与两个食品实例匹配餐类的实例。
- en: classes contained within。 So this isn't actually building any instances。 It's
    telling Python how to pull apart these classes if we encounter them。 So this just
    compiles to a bunch of is instance checks and attribute accesses。 Another thing
    that you get here for free is really powerful runtime type parameterization。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 包含在类中。所以这实际上并没有构建任何实例。它告诉 Python 如何在遇到这些类时将它们拆解。因此，这只是编译成一堆实例检查和属性访问。你在这里免费获得的另一件事是非常强大的运行时类型参数化。
- en: So there's a lot of exciting opportunities that you can use this in。 This is
    awesome to use if you are writing AST traversals， for example。 The big aha moment
    for me with pattern matching was when I was writing a red black tree， a。 self-balancing
    binary tree。 That's a structure that I've never really fully understood。 I mean。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你可以在很多令人兴奋的机会中使用这个。例如，如果你在写 AST 遍历，这非常棒。对我而言，模式匹配的重大顿悟时刻是当我在写红黑树，一个自平衡的二叉树时。那是我从未完全理解过的结构。我是说。
- en: I've implemented it before but never really got how it worked。 Using a red black
    tree whether it's insertion， rebalancing， verification， deletion， using。 structural
    pattern matching and specifically class patterns really， really clarifies how。
    the logic works。 Because you get to see the shape of the data that you're working
    with and the different。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我之前实现过，但从未真正理解它是如何工作的。使用红黑树，无论是插入、重平衡、验证还是删除，使用结构模式匹配，尤其是类模式，真的非常清晰逻辑是如何运作的。因为你能够看到你正在处理的数据的形状以及不同的。
- en: pieces that you're using as you're rearranging them。 So those are all the different
    types of patterns。 One thing that I really want to highlight about this is that
    we didn't invent really。 any of this。 Natural pattern matching has been around
    in mostly functional programming languages for。 something like 50 years now， probably
    more。 So we had tons of prior art to draw upon。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在重新排列它们时，你所使用的各个部分。这些就是所有不同类型的模式。我想强调的一点是，我们并没有真正发明这些。自然模式匹配在主要的函数式编程语言中已经存在了大约50年，可能更久。因此，我们有大量的先前艺术可以借鉴。
- en: And to highlight that， I have an example here。 This is just a recursive factorial
    function。 It has a parameter n。 If n is 0 or 1， we return 1， otherwise we return
    the recursive factorial。 And I just want to put this side by side with two other
    modern examples of pattern matching。 in Rust and Scala。 If I reformat the Rust
    and Scala examples to match Python's indentation style。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了强调这一点，我这里有一个例子。这是一个递归阶乘函数。它有一个参数n。如果n是0或1，我们返回1，否则返回递归阶乘。我想将这个与Rust和Scala的两个现代模式匹配示例并排放置。如果我将Rust和Scala的示例重新格式化以匹配Python的缩进风格。
- en: it's very， clear where our inspiration came from here。 One thing that was important
    to us is that people who have used pattern matching in other。 languages find it
    natural to use in Python。 And that people who are using pattern matching in Python
    are well prepared to use it in other。 programming languages as well。 But with
    that said。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的灵感来源非常明确。对我们来说重要的一点是，曾经在其他语言中使用过模式匹配的人能在Python中自然使用。而且使用Python中模式匹配的人也能很好地准备在其他编程语言中使用。但话虽如此。
- en: I think we can all agree that the example on the far right looks and， feels
    the most like Python。 which was equally important to us。 So next， I'm going to
    talk a little bit about the implementation。 I spent something like nine months
    working on this while in lockdown。 So I'm going to talk about it。 The first thing，
    and my favorite part of the implementation， I actually don't get to take。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为我们都同意，最右边的例子看起来和感觉最像Python，这对我们同样重要。接下来，我将谈谈实现的细节。我在封锁期间花了大约九个月的时间来研究这个，所以我想谈谈它。首先，我最喜欢的实现部分，我实际上没有机会去。
- en: credit for this。 It's called soft keywords。 You may be hearing this talk and
    saying， "Well， brand。 this whole pattern matching thing sounds， really cool。 But
    I have a bunch of existing code that uses match in case as identifiers。 This is
    going to break my code， just upgrading to 311。"， And the answer is， "No。"。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这项工作的功劳归于软关键字。你可能在听这个讲座时会说：“好吧，这整个模式匹配听起来真的很酷。但是我有一堆现有的代码使用match和case作为标识符。这会在我升级到311时破坏我的代码。”答案是，“不。”
- en: So that's what soft keywords are。 I have an example here that uses match in
    case as identifiers。 And this is actually a really good example of code that can
    be refactored using pattern， matching。 So this is what that looks like。 It looks
    a little weird， but it does work。 You can see we're using match as a keyword in
    blue， in case as a keyword in blue， and。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是软关键字的定义。我这里有一个例子，使用match和case作为标识符。这实际上是一个非常好的代码示例，可以通过模式匹配进行重构。看起来有点奇怪，但确实有效。你可以看到我们将match用作蓝色关键字，将case用作蓝色关键字。
- en: matching case as identifiers。 Python's parser， since 3。9。 has actually been
    powerful enough to detect based on context。 whether you meant to use it as a keyword
    or as an identifier， since it's never actually， ambiguous。 And this was really
    important to us because even though this is a big new change with a。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配的案例作为标识符。自3.9版本以来，Python的解析器实际上足够强大，可以根据上下文检测出你是想将其用作关键字还是标识符，因为它从未真正模糊。对我们来说这非常重要，因为尽管这是一个重大的新变化。
- en: whole lot of surface area， we were actually able to completely preserve backward
    compatibility。 which was something that was super important and we're glad that
    we were able to do that。 All right。 so next， I'm going to talk about the structural
    pattern matching compiler， or。 since that's a little wordy I like to call it the
    spam compiler。 Just a warning。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 大量的表面积，我们实际上能够完全保持向后兼容。这对我们来说非常重要，我们很高兴能够做到这一点。好的，接下来我将谈谈结构模式匹配编译器，或者说，由于这个名字有点长，我喜欢称它为垃圾邮件编译器。提前警告一下。
- en: I'm going to show you some bytecode disassemblies。 It is not important for using
    the feature。 I think it's interesting。 You might think it's interesting too。 I
    think it makes some good points about the value of native syntax features， but
    you could。 skip the next two minutes of the talk and you wouldn't actually miss
    anything。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我将向你展示一些字节码反汇编。这对于使用这个功能并不重要。我觉得这很有趣。你也可能觉得很有趣。我认为这对本地语法特性的价值提出了一些很好的观点，但你可以跳过接下来两分钟的讲解，你实际上不会错过任何内容。
- en: So this is the same Python 3。10 match statement that I've been showing a couple
    of times now。 Before I show you what Python does when it runs this， I want to
    show you， for context。 what the equivalent Python 3。9 code does when you actually
    run it。 So this is the compiled bytecode output。 And as many of us know。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我之前展示过几次的 Python 3.10 的匹配语句。在我展示 Python 执行这个的方式之前，我想给你一个背景，看看等效的 Python 3.9
    代码在实际运行时的表现。这是编译后的字节码输出。正如我们许多人所知的那样。
- en: C Python uses a stack-based virtual machine， so I'm going to show the， stack
    there on the far right。 So we execute this code， we start by loading three names。
    Is instance， meal， and sequence。 We call is instance on meal and sequence， and
    assuming that's true， we continue execution。 Then we load two more names， Len
    and meal。 We call Len on meal。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: C Python 使用基于栈的虚拟机，因此我将展示右侧的栈。因此我们执行这段代码，首先加载三个名称。是实例、meal 和 sequence。我们在 meal
    和 sequence 上调用是实例，假设这是真的，我们继续执行。然后我们再加载两个名称，Len 和 meal。我们在 meal 上调用 Len。
- en: Load the constant to compare them for equality。 Assuming that that is true，
    then we have a match。 So we load meal a third time， unpack it into two elements，
    store the first element as on， tray。 and the second element as side。 Okay， not
    too bad。 There's a little redundant work happening there。 but for the most part，
    it just clearly， follows from the code that you've sort of prescribed here on
    the left。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 加载常量以比较它们的相等性。假设这是真的，那么我们就有一个匹配。因此，我们第三次加载 meal，将其解包为两个元素，将第一个元素存储为 on，第二个元素存储为
    side。好吧，不算太糟。那里发生了一些多余的工作，但在大多数情况下，它清晰地遵循了你在左边指定的代码。
- en: Compare this to the code emitted for the match statement。 People in the back
    will probably realize it's a fair bit shorter。 The people in the front will probably
    realize that we got into a couple of new opcodes here。 that are purpose-built
    for pattern matching。 So this starts in much the same way we load the name meal。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 将此与为匹配语句生成的代码进行比较。后面的人可能会意识到，这要短得多。前面的人可能会意识到，我们引入了一些专门为模式匹配设计的新操作码。因此，这的开始方式与加载名称
    meal 的方式非常相似。
- en: Next， we execute a new opcode， match sequence。 This is really cool。 It does
    the same instance check that we saw on the Python 3。9 code。 But thanks to some
    work by my colleague Mark Shannon， this is actually about as fast as。 you can
    perform that check。 It's basically reduced to a quick flag check on the type at
    the C level。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们执行一个新的操作码，匹配序列。这非常酷。它执行了与我们在 Python 3.9 代码中看到的相同的实例检查。但得益于我的同事 Mark Shannon
    的一些工作，这实际上是你可以执行的检查中速度最快的。它基本上被简化为在 C 级别对类型的快速标志检查。
- en: And so you get really， really optimized performance out of this simple opcode
    versus the equivalent。 pure Python code。 Assuming that's true， we execute the
    new get-len opcode， which is similar。 rather than loading， the len object and
    going through a chain of calls。 we actually just query the type directly， for
    what the length of our sequence is。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，使用这个简单的操作码，你会获得非常优化的性能，相比于等效的纯 Python 代码。假设这是真的，我们执行新的获取长度操作码，这与加载长度对象并经过一系列调用是类似的。我们实际上直接查询类型，以获取序列的长度。
- en: And then the rest of the code is basically the same。 Compare that equal to two。
    unpack the sequence and store names。 And I think this shows the value of actually
    having this as native syntax。 So， you know， Python's compiler has an extraordinary
    knowledge of context when it's compiling this。 match statement。 It knows exactly
    what you're looking for and exactly what you're trying to match against。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然后其余的代码基本相同。比较等于二，解包序列并存储名称。我认为这展示了将其作为本地语法的实际价值。因此，你知道，Python 的编译器在编译这个匹配语句时对上下文有着非凡的理解。它确切知道你在寻找什么，以及你试图匹配什么。
- en: And that's important because when we're writing this declarative style of code，
    we're trusting。 Python's compiler to generate efficient code for us。 And so this
    is the sort of thing that you only get from native syntax。 You don't get this
    from transpiled languages that emit Python code or maybe pip installable。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这很重要，因为当我们编写这种声明式代码时，我们在信任。Python的编译器为我们生成高效的代码。因此，这种特性只来自于本地语法。你无法从发出Python代码或可能可通过pip安装的转译语言中获得。
- en: packages that have context managers and strings to achieve the same effect。
    And so this is a very valuable thing in terms of， you know， trusting the compiler
    to make。 the right choices for you。 So finally， I want to talk about the future。
    Everything I'm about to show for the rest of the talk， none of it is actually
    in any version。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用具有上下文管理器和字符串的包来实现相同的效果。因此，这在于信任编译器为你做出正确选择方面是非常有价值的。最后，我想谈谈未来。接下来我将展示的内容，在任何版本中都没有实现。
- en: of Python yet。 I have mostly working implementations that aren't PR ready。 So
    maybe 3。12。 We'll see if I find the time。 But the future is faster。 So one thing
    that I'm really excited about is improved control flow。 And I think this is best
    illustrated by an example。 So I have this match statement here。 Briefly。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 目前还没有关于Python的。我主要有一些不是PR准备好的工作实现。因此，可能会是3.12。看看我是否能找到时间。但未来更快。因此，我非常期待改善控制流。我认为通过一个例子可以最好地说明这一点。所以我有这个匹配语句。简要介绍一下它的功能。
- en: just walking through what it does。 If meal is a two-element sequence where the
    first element is equal to spam。 I bind the， second element to side and execute
    the corresponding case block。 If meal is a two-element sequence where the first
    element is equal to the string eggs。 I bind the second element to side and execute
    the corresponding case block。 Finally。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 逐步走过它的功能。如果meal是一个两个元素的序列，其中第一个元素等于垃圾邮件。我将第二个元素绑定为side，并执行相应的case块。如果meal是一个两个元素的序列，其中第一个元素等于字符串鸡蛋。我将第二个元素绑定为side，并执行相应的case块。最后。
- en: if meal is a two-element sequence， then bind the second element to side and
    execute。 the corresponding case block。 Now the design of Python's compiler currently--
    or CPython's compiler currently-- makes it。 so that the way that Python actually
    executes this code is very similar to the way I verbally。 described it。 We check
    whether meal is a sequence three times。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果meal是一个两个元素的序列，则将第二个元素绑定为side并执行相应的case块。现在，Python编译器的设计当前——或CPython编译器的设计当前——使得Python实际执行这段代码的方式与我口头描述的方式非常相似。我们检查meal是否是序列三次。
- en: We check the length of the sequence three times。 We have three separate places
    where we actually bind the name to side。 But what you can see is that we're actually
    only checking if it's a sequence of length。 two one time that we care about。 And
    if that's the case。 then we're obviously going to bind the second element to side。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们检查序列的长度三次。我们在三个不同的地方实际将名称绑定到side。但你可以看到，我们实际上只在乎一次是否是长度为二的序列。如果是这样，那么我们显然会将第二个元素绑定为side。
- en: And it's only after that that we care whether the first element was spam， eggs，
    or something， else。 So this is an exciting optimization opportunity。 And it's
    more general than just this specific example。 So to show you the equivalent code
    here with all the redundant work， all of you， as great。 Python programmers， will
    look at that and say， "Brant， you can refactor this to reduce。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在此之后，我们才关心第一个元素是垃圾邮件、鸡蛋还是其他东西。所以这是一个激动人心的优化机会。它比这个具体的例子更为普遍。因此，给你们展示这里的等效代码，其中包含所有冗余工作，作为优秀的Python程序员，你们会看到，“Brant，你可以重构这个以减少。
- en: repeated work。"， And it might look something like this。 This is a really exciting
    optimization called decision trees。 And there's lots of prior art and research
    on this in languages like OCaml。 Basically the way it works is that you can merge
    overlapping checks and adjacent patterns。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 重复工作。"，它可能看起来像这样。这是一个非常激动人心的优化，称为决策树。关于这方面，OCaml等语言已有大量先前的研究和实践。基本上，它的工作原理是可以合并重叠的检查和相邻的模式。
- en: It's not too difficult to do。 Python throws couple curve balls your way that
    make it non-trivial。 But I do working implementation for this 98% working。 And
    as I said， it's more general。 So this can apply to all sorts of patterns as well。
    One other really cool thing that falls out of this decision tree optimization
    is improved。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是太难。Python会抛出一些曲线球，使得问题变得不那么简单。但我做了一个工作实现，这个实现有98%的效果。正如我所说，它更为通用。因此这可以应用于各种模式。另一个从这个决策树优化中得到的非常酷的东西是改进的。
- en: reachability checks。 So again， I'll leave you with one final example。 Let's
    say that I have some cutting edge program that tells me if a number is divisible
    by， 5， 3， 15。 or none of those。 So this is one possible implementation。 Does anyone
    see the bug？
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 可达性检查。所以，再次，我给你留下一个最终的例子。假设我有一个尖端程序，它告诉我一个数字是否能被5、3、15整除，或者都不能。这是一个可能的实现。有人看到这个错误吗？
- en: I'll give you a second。 So maybe some of you saw it。 The third case is totally
    unreachable。 The first case matches anything divisible by 3。 The second case matches
    anything divisible by 5。 Either of those will catch anything that's divisible
    by 15。 So this actually isn't that easy to catch in the compiler。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我给你一点时间。所以也许你们中的一些人看到了。第三个案例是完全不可达的。第一个案例匹配任何能被3整除的东西。第二个案例匹配任何能被5整除的东西。这两个都能捕捉到任何能被15整除的东西。因此，这在编译器中实际上并不是那么容易捕捉到。
- en: But when compiling efficient decision trees for these two element sequences，
    it actually。 becomes trivial to catch。 And a future version of Python might give
    you a helpful runtime warning or a syntax warning。 letting you know that your
    pattern is unreachable。 And the fix is really simple。 Since cases are tried from
    top to bottom， you simply reorder your cases and it works。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 但是在为这两个元素序列编译高效决策树时，它实际上变得非常容易捕捉。而未来的Python版本可能会给你一个有用的运行时警告或语法警告，让你知道你的模式是不可达的。修复非常简单。由于案例是从上到下尝试的，你只需重新排序你的案例，它就能工作。
- en: So that's all I have today。 Thank you for coming out here。 There was great hiking
    in Salt Lake City。 I didn't realize it was inside the convention center。 So thank
    you for making the track out here。 I'm at Brand Quicker on GitHub。 And you can
    also email me at brandup-pilot。org。 I was told we're not doing Q&A today， so I'll
    be right outside that door。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我今天就这些。感谢你们来到这里。盐湖城有很棒的徒步旅行。我没意识到它是在会议中心内部。所以感谢你们来到这里。我在GitHub上是Brand Quicker。你也可以发邮件给我，地址是brandup-pilot.org。我被告知今天不进行问答，所以我会在那扇门外等你们。
- en: Feel free to ask me any questions or yell at me if we're ruining your language，
    whatever。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有任何问题，或者觉得我们在破坏你的语言，请随时问我或对我喊。
- en: '![](img/1d2c096146578dd9a362e33e9b999f3e_4.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1d2c096146578dd9a362e33e9b999f3e_4.png)'
- en: '![](img/1d2c096146578dd9a362e33e9b999f3e_5.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1d2c096146578dd9a362e33e9b999f3e_5.png)'
