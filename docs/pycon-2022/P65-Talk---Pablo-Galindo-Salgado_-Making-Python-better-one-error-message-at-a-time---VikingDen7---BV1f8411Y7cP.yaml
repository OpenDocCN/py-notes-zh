- en: P65：Talk - Pablo Galindo Salgado_ Making Python better one error message at
    a time - VikingDen7 - BV1f8411Y7cP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P65：演讲 - 巴勃罗·加林多·萨尔加多_ 逐步改善Python的错误信息 - VikingDen7 - BV1f8411Y7cP
- en: Welcome everyone to our second session talk here in the session。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎大家来到我们第二次会议的演讲。
- en: '![](img/0675f7d0d1f76ed0b5504798f42823d4_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0675f7d0d1f76ed0b5504798f42823d4_1.png)'
- en: '![](img/0675f7d0d1f76ed0b5504798f42823d4_2.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0675f7d0d1f76ed0b5504798f42823d4_2.png)'
- en: And today， right now， we really have the privilege of having Pablo here who
    works at Bloomberg。 but he also is a very active C Python core developer。 And
    he has to tell us about improvements to error messages in Python。 So please join
    me in welcoming him。 Hello， hello。 Well， I'm being told that I speak very fast。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 而今天，现在，我们真的很荣幸能请到巴勃罗，他在彭博工作，但他也是一位非常活跃的C Python核心开发者。他要告诉我们Python中错误信息的改进。所以请与我一起欢迎他。你好，大家好。好吧，有人告诉我我说话很快。
- en: so buckle up because this is going to be a， right。 Awesome。 So who I am。 Well。
    thank you for the interaction， so I will keep this brief。 So I see Python core
    developer。 I'm serving on this year Python machine council member。 I'm also the
    310 and 31 release manager and also I work at Bloomberg。 But this is kind of boring。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 所以系好安全带，因为这将会是一次，好的，非常棒的经历。我是谁？谢谢大家的互动，所以我会简短一点。我是Python核心开发者，今年担任Python机器委员会成员。我还是310和31的发布经理，同时我在彭博工作。但这有点无聊。
- en: so let's talk about error messages， right？ Cool。 So let me， you know。 all good
    talks start with a story， so let me tell you a story。 So before joining。 I started
    doing computer science and engineering， I used to be a physicist。 So I was doing
    my PhD and although I'm an theoretical physicist， something that you need。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们来谈谈错误信息，对吧？酷。那么让我告诉你一个故事，所有好的演讲都从一个故事开始，所以让我告诉你一个故事。在加入之前，我开始学习计算机科学与工程，我曾经是一名物理学家。所以我在攻读博士学位，尽管我是一个理论物理学家，某些东西是你需要的。
- en: to do from time to time is that you need to do simulations。 So at that time
    doing those simulations is when I start using Python。 It was this day when some
    friend of mine that was also using Python also doing their PhD in。 physics came
    to us， we were three in the room with one syntax error that they couldn't， figure
    out。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 不时需要做的事情就是进行模拟。在那个时候做这些模拟时，我开始使用Python。那天，一个朋友也在用Python，正在攻读物理博士，来到了我们这里，我们三个在房间里，遇到了一个无法解决的语法错误。
- en: And we spent 15 minutes trying to figure out what was the problem。 Think about
    that， right？
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们花了15分钟试图找出问题所在。想想这个，对吧？
- en: Three physicists doing their PhD。 We had the tools to solve the most deep mysteries
    of the universe。 but we couldn't solve a syntax， error。 Quite bad。 So， you know，
    syntax errors are important， right？
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 三个物理学家在攻读博士学位。我们有工具来解决宇宙中最深奥的谜题，但我们却无法解决一个语法错误。相当糟糕。所以，你知道，语法错误是重要的，对吧？
- en: Because like they impact developer time and other things。 So let me give you
    a tour of how the syntax error were before Python threatened with like。 a fancy
    image there。 Okay， so some of them， for example。 this is the syntax error that
    I couldn't solve back， in the day。 What about that？
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 因为它们会影响开发者的时间和其他事情。那么让我带你参观一下，语法错误在Python之前是怎样的。一个很炫的图像，好吧，例如，这就是我当年无法解决的语法错误。那是什么呢？
- en: What is wrong with that？ Interesting。 So let me give you some context。 Not the
    full program。 but the program looked like this， right？ It was a bunch of things
    there。 And does someone see the error？ So the error is equivalent to this， right？
    You have a dictionary。 you don't close the dictionary， and then you have a function
    definition。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有什么问题吗？有趣。那么让我给你一些背景。不全是程序，但程序大致是这样的，对吧？那里有很多东西。有人发现错误了吗？所以这个错误相当于这个，对吧？你有一个字典，你没有关闭字典，然后你有一个函数定义。
- en: So the parser continues after the dictionary， the tool happened， but it's not
    end。 And then it tries to -- finds the function and says， well， this function
    doesn't fit into。 the dictionary。 And then it says， yeah， that is invalid syntax。
    But if you just see the theme。 it's kind of not good， right？ Like， it's quite
    bad。 So this is just one example。 But there is more。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 所以解析器在字典之后继续，工具发生了，但还没有结束。然后它尝试找到这个函数并说，嗯，这个函数不适合字典。然后它说，是的，这是无效的语法。但如果你只看主题，这种情况就不好，对吧？相当糟糕。这只是一个例子，但还有更多。
- en: Like， for instance， what about this？ What is wrong with that？ Who knows what's
    wrong with that？
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 比如，这个呢？有什么问题？谁知道这有什么问题？
- en: The error is this one。 It's kind of not right。 You want to write a tuple there
    and then a generator comprehension。 But it turns out that you need to parenthesize
    that tuple because otherwise the parser doesn't。 understand what you're writing。
    Not the best。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 错误就是这个。这有点不对。你想在那里写一个元组，然后是一个生成器推导。但是，结果是你需要为这个元组加上括号，否则解析器无法理解你在写什么。这不是最好。
- en: '![](img/0675f7d0d1f76ed0b5504798f42823d4_4.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0675f7d0d1f76ed0b5504798f42823d4_4.png)'
- en: What about this one？ You have a list。 You don't close the list。 And then you
    have a bunch of things。 like， for instance， you are assigning here something，
    like that。 And the parser says， yeah。 that equal -- I don't like that equal。 It's
    invalid syntax。 Or like， what about this？
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这个呢？你有一个列表。你没有关闭这个列表。然后你有一堆东西，比如，你在这里赋值什么的。然后解析器说，是的。那个等号——我不喜欢那个等号。这是无效的语法。或者，像这样，那个呢？
- en: You have a nice dictionary。 So you map， like， core developers to their GitHub
    user names。 And you forget that comma over there。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你有一个漂亮的字典。所以你将核心开发人员映射到他们的 GitHub 用户名。然后你忘了那里那个逗号。
- en: '![](img/0675f7d0d1f76ed0b5504798f42823d4_6.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0675f7d0d1f76ed0b5504798f42823d4_6.png)'
- en: And then the parser says， Google's Langa is an invalid syntax。 If you ask me，
    it's quite rude。 But。 you know， not good。 What about this？ You try to do an exception
    handler。 But with multiple exceptions， you forget the parenthesis around which
    you have to play， there。 And it tells you that that is invalid syntax， which is
    quite confusing。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 然后解析器说，Google 的 Langa 是无效的语法。如果你问我，这相当无礼。但是，你知道的，这不好。那么这个呢？你尝试处理一个异常处理器。但是在多个异常的情况下，你忘了括号，得围绕着它来处理。这告诉你那是无效的语法，这相当让人困惑。
- en: Especially if you're not used to this syntax with multiple exceptions or if
    you are starting。 to learn Python。 What about this？ You are writing a dictionary
    and then you -- I don't know。 You freak out and don't put the value here or something
    like that。 And then you close it and it tells you that， yeah， that bracket， no，
    good。 So invalid syntax。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是如果你不习惯于这种带有多个异常的语法，或者如果你刚开始学习 Python。那么这个呢？你在写字典，然后你——我不知道。你慌了，没有在这里放值或者其他什么的。然后你关闭它，解析器告诉你，是的，那括号，不，不好。所以无效的语法。
- en: And this is the worst one of all。 Like， raise your hand if you have found this
    thing a single time。 Yeah， yeah， I thought about that。 So this is like -- especially，
    like， you know， like， EOF。 Like。 you know， how many times you have explained to
    someone what EOF means。 Yeah。 So the idea here is that， you know， in the previous
    version， we look at these things and。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这是所有中最糟糕的。举手，如果你曾经遇到过这个。是的，是的，我想到了这一点。所以这就像——特别是，你知道，像 EOF。你知道，你已经向多少人解释过 EOF
    的意思了。是的。所以这里的想法是，你知道，在之前的版本中，我们看到了这些东西。
- en: then we say， look， the reason this word here is not because we are， like， lazy
    or something。 like that。 It's because writing these things and integrating these
    things on the machinery of a big language。 like Python， it turns out that it's
    quite hard。 But it turns out that now after Python 3。9。 we have a new parser。
    So I will talk about that in a second。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们说，看看，这个词之所以在这里不是因为我们懒惰或其他什么的。这是因为编写这些东西并将它们整合到一个大语言的机制中，比如 Python，结果是相当困难的。但是，结果是现在在
    Python 3.9 之后，我们有了一个新的解析器。所以我会稍后谈论这个。
- en: And this parser has allowed us to start thinking about， like， how can we solve
    these things？ Like。 can we improve the experience of people writing Python that
    make error messages， like。 they make syntax errors and they don't know what they
    are -- what they mean when they get。 their own messages。 And this is quite important
    because many people think that this is crucial for people learning。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 而这个解析器让我们开始思考，比如，我们怎么能解决这些问题？比如，我们能否改善编写 Python 的人们的体验，使得错误信息更友好，比如，他们出现语法错误时不知道它们的意思是什么。因为这非常重要，因为许多人认为这对学习者至关重要。
- en: the language。 But it turns out that I have a plenty of experience using this
    and I have been extremely happy。 that I have fixed many of these error messages
    since I did。 So， you know。 it's also important for people that are experienced。
    So let's cover， like。 how we fix these errors using the new back parsers。 Many
    of you may not know about these things。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这个语言。但结果是，我有丰富的经验使用这个，我感到非常高兴，因为自从我使用它以来，我修复了许多这些错误信息。所以，你知道，这对有经验的人也很重要。那么让我们谈谈，像，我们如何使用新的反向解析器来修复这些错误。你们许多人可能对这些事情并不了解。
- en: so let me introduce about the back parser。 So the back parser is something that
    we did with the Sandre Sanjido on PEP 617。 And basically， we did replace the parsing
    in C Python， which originally was introduced。 in 1990 -- one of the first comments
    of Python from Gido， this is the old parser。 And the new back parser was made
    30 years after。 So， you know， like。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: the old parser was a very resilient piece of technology， but， you know。 we thought
    that we needed a new parser because there was a bunch of things that we couldn't。
    do with the old one， apart from maintainers-related topics and other things。 So
    things that we can now do with the new parser are things like parenthesized context，
    managers。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: which for technical reasons that I know going to go into detail， we couldn't。
    do this much better because now you can put this kind of like， you know， open
    parenthesis。 and the surface over there。 And also， like， for instance， match statements。
    We like match statements。 Yeah， I thought， yeah， they are cool。 You can match
    all the things。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: So this is only possible with the new parser， which is great。 But there is a
    problem。 Many people see these things and they are quite angry because they think
    that the new。 back parsers is slightly level， right？ Because now we have a lot
    of darkness and horrible conclusions because now the back parser。 actually allows
    us to do super funky syntax and whatnot。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: But one you can convince you that the new back parsers is actually quite helpful
    because， you know。 yes， allow us to do things that you may not know， may like
    or not may like。 but those were possible anyway and we have a process to improve
    Python syntax and that's。 not the back parsers fault， right？ Like， you know， if
    you have a knife。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: the knife can serve multiple purposes。 I will lead you to your imagination what
    you can do with a knife。 But the idea here is that the back parser now finally
    allows us to do these newer messages。 which is quite cool。 So let me convince
    you in case you have not seen them before。 Let me show you some of the newer messages
    that we have in three times。 We have quite a lot of them。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: so I'm not going to cover a lot of them， but some of them。 So for instance。
    newer messages in Python three times。 So in mind that you have this conditional，
    right？
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: And then you forget the colon over there， which is a common mistake for。 especially
    for people learning the language。 So now we tell you the aspect of colon。 That's
    cool。 right？ More things。 So for instance， now similar things that we have before。
    you're writing a dictionary， and you forget to write the value over there。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: And now when you do this thing， the parser says， I actually spread an expression
    after。 the dictionary key and the colon， which is also quite cool。 This is quite
    common， apparently。 Many。 many people were super happy when we saw this one。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0675f7d0d1f76ed0b5504798f42823d4_8.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
- en: You are comparing something and then you forgot here that did you put a double
    equal。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0675f7d0d1f76ed0b5504798f42823d4_10.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0675f7d0d1f76ed0b5504798f42823d4_10.png)'
- en: If you're writing C， this seems to be quite bad because you know you're assigning
    to whatever。 you put on the left in Python is a syntax error。 And now we make
    you a suggestion that you say， oh。 maybe you actually mean like two equals， or
    instead of the single equals。 More things， for instance。 if you forget a comma
    in a dictionary， here is quite obvious。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在写C语言，这似乎是相当糟糕的，因为你知道你正在赋值给左边的任何东西。而在Python中，这是一个语法错误。现在我们建议你考虑，也许你其实是想用两个等号，而不是单个等号。还有其他的情况，比如，如果你在字典中忘记了一个逗号，这里就会很明显。
- en: But like in mind that you have those big configuration dictionaries instead
    of the。 type of py files or elsewhere。 And you forget a comma， which is quite
    common。 So instead of getting Google cache language in valid syntax， you get this
    disorder that， tells you。 oh， maybe you are forgetting a comma there。 This has
    saved me at least 10 times already。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 但要记住，你有那些大的配置字典，而不是py文件或其他地方。你忘记了一个逗号，这相当常见。因此，你不是得到有效语法的Google缓存语言，而是得到这种混乱，告诉你，哦，也许你在这里忘记了一个逗号。这至少已经帮了我十次以上。
- en: So for example， this one as well， if you are writing conditional or many other
    blocks and。 then you don't indent correctly， now we tell you like， oh， we actually
    expected an index， block。 And then we add that the indent block was after the
    if statement on line whatever。 So you have the context， especially if you have
    the block after the if is quite big and。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 所以例如，如果你在写条件语句或其他很多代码块时，你没有正确缩进，现在我们会告诉你，哦，我们其实期望一个索引块。然后我们会补充说明，缩进块是在某一行的if语句之后。所以你会有上下文，尤其是如果if之后的块很大的话。
- en: when you miss the indentation is quite far from where do you write the if。 Now
    we tell you exactly what construct was wrong when you unindented the thing。 And
    of course。 everyone's favorite。 When you don't close a dictionary and you have
    the function。 Now we tell you。 hey， that bracket was not closed， which is very
    cool。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当你错过缩进时，和你写if的地方相距很远。现在我们准确告诉你，当你取消缩进时，哪个结构是错误的。当然，大家最喜欢的，当你没有关闭一个字典，而你有一个函数。现在我们告诉你，嘿，那个括号没有关闭，这非常酷。
- en: This is probably one of the ones that people like the most because this is quite
    common。 And the error is one of these， you know， unexpected in a file or your
    function definition is wrong。 Cool。 So there's a bunch of them， which is nice，
    but turns out that adding error messages is。 quite hard。 Let me show you some
    of the interesting stories that happen while we were developing error messages。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是人们最喜欢的错误之一，因为这是相当常见的。这个错误是这样的，你知道，文件中出现了意外，或者你的函数定义错误。很酷。因此，有很多这样的错误，这很好，但事实证明，添加错误消息是相当困难的。让我告诉你一些在我们开发错误消息时发生的有趣故事。
- en: So let's say， for instance， that you want to develop the following error message，
    like。 the missing comma， right？ So for instance， you say like， I want this， right？
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 假设，例如，你想开发以下错误消息，比如缺少逗号，对吧？所以例如，你说，我想要这个，对吧？
- en: Someone is writing a list and it's missing a comma between two elements。 So
    there is no a comma there。 You want to write this thing。 So you are forgetting
    a comma。 How do we do that？ Because you go to the grammar and then you need to
    teach the part of how the problem looks。 like。 So here we don't forget if you
    don't understand the syntax。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 有人正在写一个列表，并且在两个元素之间缺少逗号。因此这里没有逗号。你想写这个东西。所以你忘记了一个逗号。我们是怎么做到的？因为你去语法那里，然后你需要教会部分如何看待问题的样子。所以在这里，如果你不理解语法，我们不会忘记。
- en: '![](img/0675f7d0d1f76ed0b5504798f42823d4_12.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0675f7d0d1f76ed0b5504798f42823d4_12.png)'
- en: This is the back syntax。 But here we were saying that if you see an expression
    followed by another expression。 then。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这是反向语法。但在这里我们是说，如果你看到一个表达式后面跟着另一个表达式。
- en: '![](img/0675f7d0d1f76ed0b5504798f42823d4_14.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0675f7d0d1f76ed0b5504798f42823d4_14.png)'
- en: you probably are missing a comma， right？ Like thinks about a variable， four。
    you are a variable or one plus one followed by three， or X or something like that。
    In those cases。 you know， that's in valid syntax， but that probably means that
    someone， is missing a comma， right？
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能缺少一个逗号，对吧？比如想一个变量，四。你是一个变量，或者一个加一后跟三，或者X或其他东西。在这些情况下，你知道，这是无效的语法，但这可能意味着某人缺少了一个逗号，对吧？
- en: And then you're happy and then you say， okay， in that case， I need to raise
    this invalid， syntax。 perhaps you're missing a comma and everything is good， right？
    No， no， no， no， no， no， because like。 what about this？ Now someone forgets the
    in keyword and it tells you that perhaps you're missing a comma。 which is wrong。
    What about this？ Someone writes about it in the stream prefix and now it tells
    you that you are missing。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你很高兴，然后你说，好吧，在这种情况下，我需要抛出这个无效的语法。也许你缺少一个逗号，一切都很好，对吧？不，不，不，不，不，因为像这样。现在有人忘记了
    in 关键字，它告诉你你可能缺少一个逗号。这是错误的。那这样呢？有人在流前缀中写了它，现在它告诉你你缺少了。
- en: a comma， which is wrong。 What about this？ You don't close the the tuple here
    and then you put a B after that and it's looking at the。 variable on the next
    line and the two on the previous line and it tells you that you're。 missing a
    comma。 What about this？ This is quite bad， right？ Like， look at this。 It turns
    out that I don't know what is wrong with this， but like apparently I'm missing
    a， comma。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一个逗号，这是错误的。那这样呢？你没有在这里关闭元组，然后在后面放一个 B，它正在查看下一行的变量和前一行的两个变量，并告诉你你缺少一个逗号。那这样呢？这相当糟糕，对吧？看看这个。结果是我不知道这有什么问题，但显然我缺少一个逗号。
- en: It's not good， right？ What about this？ You're writing a bunch of numbers。 I
    mean。 that's how it's crazy， but like it's telling you， this is quite weird。 It's
    telling you that you're missing a comma， but not at the beginning。 It's the last
    one， okay？
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这不好，对吧？那这样呢？你正在写一堆数字。我是说，这真是太疯狂了，但这也在告诉你，这很奇怪。它在告诉你，你缺少一个逗号，但不是在开头。是最后一个，好吗？
- en: So what about this？ It's a soft keyword and now when you do much foo。 it's actually
    two names following together。 That's in my syntax and then it goes and tells you
    that you're missing a comma。 So we broke my statement。 Sorry， Brian。 Not good，
    right？ Turns out that this is actually real。 Here you can see all the peers that
    I fix when I introduce the machine comma thing。 Apparently。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 那这样呢？这是一个软关键字，现在当你做很多 foo 的时候。实际上是两个名字连在一起。这在我的语法中，然后它会告诉你你缺少一个逗号。所以我们破坏了我的语句。抱歉，Brian。不好，对吧？结果这其实是真的。在这里你可以看到我在引入机器逗号时修复的所有对等项。显然。
- en: you know， knowing a lot of our parsers doesn't make you not fail about machine，
    commas。 that's a quite hard thing to do。 What about this？ This is quite funny。
    So it turns out that our parser is a peck parser。 Turns out that by nature they
    run in exponential time。 This means that when they are parsing your input， they
    take a time proportion exponential。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道，知道我们的许多解析器并不能让你不在机器逗号上失败。这是一件相当困难的事情。那这样呢？这相当有趣。所以结果是我们的解析器是一个打包解析器。结果是它们天生以指数时间运行。这意味着当它们解析你的输入时，它们所需的时间是指数级的。
- en: to the number of characters that you input into the parser。 To avoid that。 we
    have something called a packer parser which is basically introducing， memorization。
    It's a cache in a fancy way。 I'm not going to go into details。 But the interesting
    thing is that once you put the cache into the thing， the parser runs。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 对于你输入到解析器中的字符数。为避免这种情况，我们有一个叫做打包解析器的东西，基本上是引入了记忆化。这是一种花哨的缓存。我不打算详细说明。但有趣的是，一旦你把缓存放进去，解析器就会运行。
- en: in linear time and it's very fast and everybody's happy。 But if you forget to
    put the cache。 bad things can happen。 For example， this thing in Python 3。10 takes
    two seconds to parse。 It's a syntax error。 So if you put a bunch of open brackets
    and then you put a column which is bad。 but it， takes two seconds。 The parser
    takes two seconds to realize that this is invalid。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在时间复杂度为线性的情况下，速度非常快，大家都很高兴。但如果你忘了放缓存，糟糕的事情可能会发生。例如，这个在 Python 3.10 中解析需要两秒钟。这是一个语法错误。所以如果你放一堆开放的括号，然后放一个冒号，这是错误的。但它需要两秒钟。解析器需要两秒钟才意识到这是无效的。
- en: If you add a bunch of brackets， it takes over an hour。 So this is fixed。 So
    don't worry about that。 We fixed here。 You know， someone was very happy that we
    fixed that one。 Probably they need to spare one hour after to know that the commit
    syntax error。 But the reason is because you need to be very careful when you add
    error messages。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你添加一堆括号，花费的时间超过一个小时。所以这个已经修复了。所以不用担心。我们在这里修复了。你知道，有人非常高兴我们修复了那个。可能他们需要再花一个小时来知道提交的语法错误。但原因是你在添加错误信息时需要非常小心。
- en: The reason is because we have validated the real grammar of the language many，
    many， many， times。 We know it's fast。 We know it works。 We are quite sure about
    what's going on。 That is great。 But it turns out that adding error messages is
    a whole new word。 The reason is because the grammar。 the parsers like to know
    about what is correct about your， language。 That's what they are made for。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 原因在于我们多次验证了语言的真实语法。我们知道它运行得很快。我们知道它有效。我们对发生的事情非常确定。这很好。但事实证明，添加错误信息是一个全新的领域。原因在于，语法和解析器希望了解你的语言中什么是正确的。这正是它们的用途。
- en: But now you are starting to use a parser into a word which is infinitely big。
    It's the word of things that are not Python。 And that is much， much more tricky。
    especially if you start using some of these invalid rules。 from invalid rules
    and combining them with the real language。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 但是现在你开始使用一个解析器来处理一个无穷大的词。这个词包含了与Python无关的事物。而这要复杂得多，尤其是当你开始使用一些无效规则，并将这些无效规则与真正的语言结合时。
- en: The problem is that validating that those things are correct and they don't
    raise weird。 syntax errors in weird constructs like the comma that you saw before
    or for instance。 these fancy brackets。 It's quite hard。 And it requires what we
    found is that it requires much more effort and much more validation。 Since then
    we have made a lot of improvements to the parser and to the techniques we used。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于验证这些事物是否正确，并且它们在奇怪的构造中不会引发奇怪的语法错误，比如你之前看到的逗号，或者这些奇特的括号。这相当困难。而且我们发现，这需要更多的努力和验证。从那时起，我们对解析器和我们使用的技术进行了很多改进。
- en: to validate these things。 But as you can see sometimes they just leap over and
    people may find out us in Twitter。 So please don't make fun of us in Twitter。
    You can use this as a timer。 So you know if you measure your lunch and it takes
    an hour so you can put this thing。 running and then come back when you finish。
    Which is cool。 Okay。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 去验证这些事物。但是正如你所看到的，有时它们会被跳过，人们可能会在Twitter上发现我们。所以请不要在Twitter上嘲笑我们。你可以把这当作计时器使用。所以你知道，如果你测量你的午餐时间是一个小时，你可以把这个东西打开，然后在你完成后再回来。这很酷。好的。
- en: So these are the syntax errors which is great。 We solve a bunch of them and
    you can see all of the ones that we added in Python 3。10， on the what's new document
    of Python 3。10。 But you can also see the ones that we have added in 3。11 and we
    will add more in the future。 But we have even more things。 For instance we have
    runtime suggestions。 So what are these things？ These are not syntax errors。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是语法错误，这很好。我们解决了一些，你可以在Python 3.10的新功能文档中看到我们添加的所有错误。但你也可以看到我们在3.11中添加的错误，并且我们将来还会添加更多。但是我们还有更多的功能。例如，我们有运行时建议。那么这些是什么？这些不是语法错误。
- en: These are errors that happen at runtime。 For example this one。 If now in Python
    3。10 if you do so in collections is the module collection so if you mistype。 correctly
    some attributes of the module now we have we offer suggestions。 So for instance
    if you say name tople which is not good。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是在运行时发生的错误。例如这个。如果在Python 3.10中，你在collections模块中这样做，如果你拼写错误了模块的一些属性，我们现在会提供建议。所以例如，如果你说name
    tople，这样是不好的。
- en: So now we told you like okay maybe you mean name tople。 And this works with
    everything。 This works with modules， with custom classes， with things in the standard
    library， third， part。 the module， everything。 And this is great。 We not only offer
    this thing on attribute access。 we also offer this thing on name access。 So for
    instance here I'm assigning one variable to a Schwarzschild black hole。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在我们告诉你，也许你是想说name tople。这适用于所有情况。它适用于模块、自定义类、标准库中的事物、第三方模块，等等。这很好。我们不仅在属性访问时提供这种功能，在名称访问时也提供。例如这里我将一个变量赋值为施瓦茨希尔德黑洞。
- en: I pronounce it that correctly I hope so。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望我能正确地发音。
- en: '![](img/0675f7d0d1f76ed0b5504798f42823d4_16.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0675f7d0d1f76ed0b5504798f42823d4_16.png)'
- en: And then you mistype this thing because it's very easy to mistype and then you
    get a correct。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你拼写错误，因为拼写错误非常容易，然后你就得到了一个正确的结果。
- en: '![](img/0675f7d0d1f76ed0b5504798f42823d4_18.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0675f7d0d1f76ed0b5504798f42823d4_18.png)'
- en: suggestion。 Believe me that is the correct version which is very cool。 You know
    it's a small improvement but it turns out that it saves a lot of time especially。
    when you mistype a variable in a big big function because it immediately will
    tell you what's。 going on。 And I have this is one of my favorites because since
    we added this one it has helped myself。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: even when we were developing this one so it's quite cool。 But the question is
    like okay so how this are done because it's a very interesting like。 the check
    of the array of errors right。 So let me explain to you how we did this one。 It's
    very interesting。 The first thing is that now we have extended some exceptions
    in particular attribute error。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: exceptions with two things。 Now these exceptions in three times know the name
    of the attribute that you were trying。 to access and the object in which you were
    trying to access。 So if this was the collection module the object will be the
    collection module and the name。 will be named top ball body written。 And this
    example will be X and something and then which is written there。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: I don't know why I don't bring my own slides。 But then this is an attribute
    that bubbles up and then we run a word distance function。 This is a very simplified
    version that fits into slide。 The one that we use is I don't know 200 lines of
    C code not really great for presentations。 But the idea is that this is a very
    simple algorithm。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: It uses like some version of layman's thing distance to know which are the closest
    strings。 to the one that we provide and then it will tell you okay so maybe you
    know these are。 the ones that we think is the best much。 It looks at the deal
    of the object to distinguish which ones are the great。 So basically the algorithm
    is that once you have this word instance function you do something。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: like okay so I'm going to use the function to know in the exception all the
    possible attributes。 that are in the object and then I'm going to one by one check
    the word distance to that。 one I'm going to pick the smaller one and that's probably
    the suggestion。 We have a ton of extra checks here and there to make sure that
    we don't do weird things。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: with those but this is basically the algorithm。 But wait there is something。
    Think about this right attribute errors are raised all over the place。 If we start
    doing this algorithm to check where the pro exceptions that are closer。 and the
    names this is very very expensive so we don't do this thing on attribute errors。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: because it will make by so much lower right。 So what we do here and basically
    what I'm saying is that this thing needs to be fast。 because if you catch the
    attribute error nobody will see those suggestions and we need to。 make sure that
    this kind of code is still fast right。 So what we do here this is you know this
    is SQL though freak out but I will explain。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: So what we do here in this SQL is basically that instead of doing this thing
    when you raise。 the exception we do this thing on this fancy function that is
    called print exception so。 we only do this thing with exception has bubble up
    to the top level and the interpreter is。 going to crash already because nobody
    has cut to the exception。
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: So when we are printing the trace back and you know all those messages because
    the interpreter。 is going to finish then at that the step the last thing that
    we do is this print exception。 suggestions which runs the function that I just
    saw to you and then it goes and it offers。 you the suggestions that we just do
    so。 So basically that function over there which is very cool and so that way we
    keep Python。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: fast we only do this thing on when the interpreter is going to finalize and
    a code that runs normally。 and catches exception keeps being fast。 This is just
    an example to show you that error message is quite hard because now you can。 try
    to be nice to people but you need to make sure that like normal usage of the language。
    is still is fast and people don't pay the cost of good error messages in normal
    code。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: that doesn't raise error messages。 So more things that we have I'm very excited
    about this one so this is better trace back。 on Python 3。11。 So let me show you
    what this is about。 So this is PEP 657 that I did with a Maras Cara and Batu Chantascaya。
    It has this horrible name including fine grain errors location in trace back but
    I assured。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: you that the thing is actually much more great than the name that we place there
    and it looks。 like this basically。 So if you before have like a bunch of errors
    this is a trace back for some code and here。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0675f7d0d1f76ed0b5504798f42823d4_20.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
- en: it's telling you that in this long expression so absolute value of this error
    is non-type。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0675f7d0d1f76ed0b5504798f42823d4_22.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
- en: object has no actual X。 It means that something in this long line is none but
    which one it is you don't know。 You probably need to touch the bag and know what's
    going on there which is not cool but。 now in Python 3。11 we saw you exactly which
    one of this is none which was this one which。 is much more better we believe and
    we also saw you like in the this fancy underlying credits。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: in all the trace back。 This is also very useful when you do dictionary access
    so before for instance you are actually。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0675f7d0d1f76ed0b5504798f42823d4_24.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
- en: in a big JSON some response and a bunch of things here and the error is non-type
    object。 is not subscriptable which means that in this response some of these levels
    is none but you。
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0675f7d0d1f76ed0b5504798f42823d4_26.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
- en: don't know which one it is but now in 3。11 we told you which one is the one
    that is none。 which is great much better and you know you can see also like in
    the trace back which part。 of the function calls were running because for instance
    in this particular line here。 you could could be this one over here we use one
    or this one here we use a two now you。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 不知道是哪一个，但现在在3.11版本中，我们告诉你哪一个是没有的。这太好了，效果好得多，你知道你还可以在追踪中看到函数调用的哪一部分。因为例如在这一行，你可能会是这里的这个，我们使用了一个，或者这里的这个，我们使用了二。
- en: know which one it is so now you don't need to touch the bag which we think is
    fantastic。 So if you are doing like some heavy math super complicated this division
    thing is quite hardcore。 but now it tells you division by zero which of those
    divisions are zero now in 3。11 we'll。 tell you which one that one so that's great
    so how we do this thing so we do this thing。
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 知道是哪一个，所以现在你不需要去碰那个包，我们觉得这太棒了。如果你在做一些复杂的数学，像这个除法的东西相当复杂。但现在它告诉你除以零，哪些除法是零，现在在3.11版本中。会告诉你是哪一个，所以这很好，那么我们是怎么做到的呢？我们就是这样做的。
- en: basically by injecting into every bytecode instruction extra information like
    for instance。 you do this assemble that dictionary access you will see that is
    made of Python instructions。 which is we call bytecode and what we do is that
    for to every of those instructions we。 attach extra information you can actually
    check this extra information using this module。
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上通过在每条字节码指令中注入额外的信息，例如。你执行这个组装字典访问，你会看到它由Python指令组成。我们称之为字节码，我们对每条指令。附加额外的信息，你实际上可以使用这个模块来检查这些额外的信息。
- en: and it will tell you that for every for instance this binary subscript one of
    these。 acts dictionary access now it has the line number when that happens the
    n line number the。 colon option the n colon option and we use this information
    to know and to show you where。 that happens the actual code to print this thing
    is quite hardcore it doesn't look great。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 它会告诉你，例如，对于这个二元下标之一。每个字典访问，现在它有行号，当它发生时的行号，冒号选项和。我们使用这些信息来知道并向你展示发生的位置。实际打印这个东西的代码相当复杂，看起来并不好。
- en: but it's just that you know it's quite complicated but it's very nice because
    we take into account。 many things like for instance if you have a binary operator
    we point you to the exact。 binary like the plus or the minus or whatever and we
    underline different in both sides so。 this is just to show you that we put all
    of the effort to make sure that those errors。
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 但就是你知道的，这相当复杂，但这很不错，因为我们考虑了。许多因素，例如，如果你有一个二元操作符，我们会指向确切的。二元操作，比如加号、减号或其他什么的，我们在两侧下划线。这样做只是为了让你知道，我们付出了全部努力，确保那些错误。
- en: look nice they are not intrusive and we can highlight as much information as
    is possible。 so basically how we do this thing so imagine that you have this code
    so once we know that。 it's another with this code we analyze the bytecode instructions
    from the bytecode。 instructions of that code with the line numbers and the colon
    options that we have already。
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来不错，它们不具侵入性，我们可以尽可能地突出显示信息。因此，基本上我们是怎么做到的，想象一下你有这段代码，一旦我们知道。它是另一段代码，我们分析来自字节码的字节码指令。与我们已经拥有的行号和冒号选项。
- en: '![](img/0675f7d0d1f76ed0b5504798f42823d4_28.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0675f7d0d1f76ed0b5504798f42823d4_28.png)'
- en: there then we basically reparts that expression because we know that it has
    to be valid because。 it's by Python code we get the abstract syntax tree of that
    expression and then we combine。 these two to offer a customized error messages
    in this case for instance we use the abstraction。 in this tree to know that this
    is a binary operator and then we use the error positions。
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们基本上重新排列了这个表达式，因为我们知道它必须是有效的，因为。它是通过Python代码获取该表达式的抽象语法树，然后我们结合。这两个来提供定制的错误信息，在这种情况下，我们使用抽象。来了解这是一个二元操作符，然后我们使用错误位置。
- en: to know that we need to point here and then we use that information to also
    add this little。 character here apart from the underscores which you know it's
    not easy but it looks very great。 nice so this is all right but now you may be
    thinking you know how can I help this because。 you know I like error messages
    I would like to help developing error messages and making。
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 知道我们需要指向这里，然后我们使用这些信息来添加这个小。字符，除了下划线，你知道这并不简单，但看起来很棒。所以这一切都不错，但现在你可能在想，我该如何帮助这个，因为。你知道我喜欢错误信息，我希望能帮助开发错误信息并制作。
- en: Python great and we will love you to help us so I'm going to teach you how you
    can help。 us do error messages well the first thing as you can do is to open issues
    now Python。 the issue tracker runs on github which is quite nice finally we managed
    to do that more。 in the keynote tomorrow with the same counsel but now you can
    open an issue they have tracker。
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: for C Python telling us suggestions that you think we should look at we will
    tell you sometimes。 that that suggestion is actually very difficult or it will
    mess with other things so you know。 have an open mind don't get frustrated we
    told you that it's very difficult or impossible。 to add your error messages but
    many times this has been happening already people have。
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: come to our issue tracker and have suggested oh what about this particular error
    and we。 have implemented that so if you have ideas especially if you are starting
    to learn Python。 for instance and you have been frustrated with some of these
    error messages it will be super。 useful if you come to us and tell us okay this
    has been super hard you know I struggled。
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: 20 minutes I'm doing a PhD and I wasn't able to do this so that's a good candidate
    right。 also you just an educator or you are teaching Python and then you see out
    of your students。 struggling with error messages we would love to know which ones
    are the ones that you know。 people struggle with the most if you're a bit more
    hardcore I want you to call them yourself。
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: the best place to start is to go to this guy that I wrote in the Python dev
    guide so you。 do Google Python dev guide parser he is this big document called
    guide to see Python parser。 is very technical but I think it's quite nice some
    other developers can validate this assertion。 but the idea is that here you can
    understand how the parser works in very with detail and。
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: at the end of this this guide there is a section about how to add your messages
    and how to。 validate your error messages so you can read that and then you can
    try to add some error。 messages do you add a bunch of test cases and you can submit
    a PR to see Python which。 will be very cool not only that but a lot of people
    have already been doing that this。
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: is a bunch of error messages that have been proposed by members of the community
    not by。 myself and they have improved and some of them except this one which is
    an issue which。 is still open but all of them will see in 3/11 which is super
    great so you can be one of。 these people maybe with cooler avatars but you can
    propose new error messages and I。
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: would love to review your PR it's just that you know you need to get into account
    that。 can we distinguish an open mind because as you saw error messages are quite
    hard and sometimes。 people are very excited and they bring their little error
    message that looks super great。 on some particular cases but it turns out that
    you know we need to turn it down because。
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: it's quite complex so you know how about open mind when you propose these error
    messages。 and that's basically that's basically it I hope that you have learned
    a bit about this。 thing I think the moral of the story is that if you are doing
    your PhD and then you lose。 your bottle against some syntax errors then you can
    study during years about parsing。
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当复杂，所以当你提出这些错误信息时，请保持开放的心态。基本上就是这样，我希望你对这个有一点了解。我认为这个故事的道德是，如果你在攻读博士学位时，因某些语法错误而失去信心，那么你可能会在解析方面研究多年。
- en: grammar you can make a new version of the parser of one of the most popular
    language。 in the world you can join the core of the team and then you can improve
    the situation。 or you can alternative with until someone else does this and then
    you can use it thank。 you very much and I hope you have enjoyed it。 [APPLAUSE]。
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 语法你可以制作一个最流行语言的解析器的新版本。在世界上你可以加入团队的核心，然后你可以改善情况。或者你可以选择等待直到其他人这样做，然后你可以使用它，非常感谢你，我希望你喜欢它。[鼓掌]
- en: '![](img/0675f7d0d1f76ed0b5504798f42823d4_30.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0675f7d0d1f76ed0b5504798f42823d4_30.png)'
