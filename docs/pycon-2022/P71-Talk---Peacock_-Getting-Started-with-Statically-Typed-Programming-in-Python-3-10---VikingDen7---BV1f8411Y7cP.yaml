- en: P71：Talk - Peacock_ Getting Started with Statically Typed Programming in Python
    3.10 - VikingDen7 - BV1f8411Y7cP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P71：演讲 - Peacock_在Python 3.10中入门静态类型编程 - VikingDen7 - BV1f8411Y7cP
- en: \>\> Hello。 Good afternoon， everyone。 Now we will have a talk on getting started
    with statically。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '>> 你好。大家下午好。现在我们将进行一个关于入门静态类型的演讲。'
- en: '![](img/1e529d2d9d577e1bcb9af4d55c63a7b9_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1e529d2d9d577e1bcb9af4d55c63a7b9_1.png)'
- en: '![](img/1e529d2d9d577e1bcb9af4d55c63a7b9_2.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1e529d2d9d577e1bcb9af4d55c63a7b9_2.png)'
- en: typed programming in Python by P。Cock。 And since the code is still a thing，
    we're not doing。 Q and A here。 The speaker will be happy to take your questions
    in the hallway。 Thank， you。 \>\> Thank you。 It is first time speaking for being
    on site in Python， so our first song， is not just。 My talk is getting started
    with statically typed programming in Python 3。0。0。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 用Python进行类型化编程的P。Cock说。由于代码仍然是一个话题，我们不会在这里进行问答。演讲者很高兴在走廊里回答你的问题。谢谢你。>> 谢谢。这是我第一次在Python现场演讲，因此我们第一首歌并不仅仅是。我的演讲是关于在Python
    3.0.0中入门静态类型编程。
- en: Let me self-interlacing。 There is a table of contents。 Okay。 Three-field pictures
    or。 screenshot one。 And the hashtag is Python US 2023。 And slide is uploaded。
    You can also， see there。 Okay。 That is me。 My name is P。Cock。 Social media is
    P。Cock 33S。 And so on。 So my free name is EoTaka but pre-scoring P。Cock。 Okay。
    My hobbies， my favorite is playing。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 让我自我插入一下。有一个目录。好吧。三张图片或截图。主题标签是Python US 2023。幻灯片已上传。你也可以在那儿看到。好吧。那是我。我的名字是P。Cock。社交媒体是P。Cock
    33S。等等。我的自由名字是EoTaka，但预先评分为P。Cock。好吧。我的爱好，我最喜欢的是玩。
- en: me as a client， listening to classical music， skiing， I got it。 I'm 20 years
    old。 This is。 my first trip。 So it's the status。 Thank you。 \>\> Okay。 My last
    comment is there。 My company is CMS code。 First time since 2020。 There is， my
    boss。 I'm a application developer using Flask， Pymeet or Chrome。 I have a few
    areas running。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我作为客户，听古典音乐，滑雪，我明白了。我20岁。这是我的第一次旅行。所以这是状态。谢谢。>> 好吧。我最后的评论是。我的公司是CMS代码。自2020年以来的第一次。那是我的老板。我是使用Flask，Pymeet或Chrome的应用程序开发者。我在几个领域运行。
- en: Haskell on type split。 Now I'm leading program types and programming languages
    as known as， Python。 And my community， I belong to my community。 I'm a member
    of the Python JB and I'm a staff。 of Python JB since 2020。 And this year， 2022
    is a vice chair operating member of Python。 JB association。 I'm director of the
    Python JB TV。 It is YouTube live about local Python。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Haskell在类型分裂上。现在我领导程序类型和编程语言，众所周知，Python。我属于我的社区。我是Python JB的成员，自2020年以来是Python
    JB的工作人员。今年，2022年是Python JB协会的副主席运营成员。我是Python JB TV的主任。这是关于本地Python的YouTube直播。
- en: as an event。 One， three。 There is today's topics。 First， why I look about typing
    this。 is motivational。 And second， I'll introduce basically use this first step
    of typing。 That。 is what I'm most drawn to say。 And then， Gen X and user-defined
    types。 \>\> It is best practice in include。 And last update overview and background
    compatibility， for 3。9。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个活动。一、三。有今天的话题。首先，为什么我会关注类型。这是一个激励因素。其次，我将基本介绍使用这第一步的类型。这是我最想说的。然后，Gen X和用户定义类型。>>
    最佳实践包括。而最后的更新概述和背景兼容性，为3.9。
- en: Last topic， overviews new features on 3。10。 And one topic about 3。11。 Okay。
    This， is my motivation。 It's been seven years since typing in Python 5 at 2015。
    Many backpeps。 adapted and updated over the years。 So even now， I think many people
    don't know where to， start。 Because there is concrete information。 This is what
    I will not talk about。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个话题，概述了3.10的新特性，以及关于3.11的一个话题。好吧。这是我的动力。从2015年开始使用Python 5，已经七年了。许多后端人员随着时间的推移适应和更新。因此，即使现在，我认为很多人不知道从哪里开始。因为没有具体的信息。这就是我不会谈论的内容。
- en: And the last one is configuration of my pie。 So important topic。 But it's so
    long。 So I， skipped。 And for example， CIs， history， implementation and SD。 I will
    not talk about。 And this is my body。 Okay。 Let's start。 Look how it was。 Start
    typing。 Okay。 This is what， makes you happy。 It's not type when you reference
    it in the entire， such as the code。 It gets。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一部分是我的派的配置。这是一个重要的话题，但时间太长了，所以我跳过了。例如，CIs，历史，实施和SD，我将不会谈论。这是我的主题。好吧。让我们开始。看看它是如何开始的。好吧。这就是让你开心的东西。它不是在你引用整个内容时的类型，例如代码。
- en: angry when I try to give it long run。 And that computation will work when accessing
    the value。 of the function using dot。 Okay。 These are typing。 Yes。 We can't know
    the errors。 Yes。 It will occur。 It will occur。 But we can't know。 It's typing。
    But it's typing。 Yes。 Like this。 It's called review。 This is actually -- actually，
    in my -- I had to explain that this -- my voice。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当我试图给它长时间运行时非常生气。而且当使用点访问函数的值时，这个计算会起作用。好的。这些是类型。是的。我们无法知道错误。是的。它会发生。它会发生。但我们无法知道。这是打字。但这是打字。是的。像这样。这被称为审查。实际上，这实际上是--实际上，在我--我不得不解释这--我的声音。
- en: said what types do function returns？ It's strings first or now。 That's the way
    two types。 So it。 is unhappy。 But like this。 Yeah。 But we're typing。 It looks
    like this function may return。 three types。 Isn't that too much？ I see。 That could
    be bad design。 Let me fix it。 Show a， place。 Yes。 Starting this， let's start with
    the function of definitions。 And this is nothing。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 说一下函数返回哪些类型？首先是字符串，还是现在。那是两种类型的方式。所以它。不高兴。但像这样。是的。但我们在打字。看起来这个函数可能返回三种类型。这不是太多了吗？我明白了。这可能是坏设计。让我修复一下。显示一个地方。是的。开始这个，让我们从函数定义开始。这没有什么。
- en: too difficult。 Just the right type。 After the arguments， write column and the
    types。 Before。 the column and end of the function definition， write arrow and
    types。 Okay。 This is standard。 types using to the nothing。 There are bytes， floats，
    int and str。 And now it's used for。 functions that returns nothing。 Yes。 Such
    as main functions。 Yes。 Yes。 This is a very， dangerous。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 太困难了。只是正确的类型。在参数后面，写下冒号和类型。在函数定义的冒号和结束之前，写下箭头和类型。好的。这是标准。使用到无的类型。有字节、浮点数、整数和字符串。现在用于返回无的函数。是的。例如主函数。是的。是的。这是一个非常危险的。
- en: very dangerous， very dangerous。 Any type of instance of any type。 Of course，
    it。 is a very dangerous， very dangerous。 And then you see it。 When you're using
    it， it's very。 dangerous。 Okay。 Since stats from the upper case， as collections，
    it can use without， input。 Yes。 Before the input， you must have to write this
    sentence。 But now it's difficult。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 非常危险，非常危险。任何类型的实例，当然，它。是非常危险，非常危险。然后你看到它。当你使用它时，非常危险。好的。由于大写字母的统计，作为集合，它可以在没有输入的情况下使用。是的。在输入之前，你必须写下这个句子。但现在这很困难。
- en: So you may use dict or list using a start with small case。 And these collections
    can。 be written with square brackets for the type inside。 Other modules are variables
    in standard。 library。 Collection is， for example， a queue or a different tick。
    Collection。avc， the interval。 or the protocol related。 And the re has leg like
    special modules。 And finally， context。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你可以使用以小写字母开头的字典或列表。这些集合可以用方括号书写以表示其中的类型。其他模块是在标准库中的变量。集合，例如队列或不同的计时器。集合.avc，间隔。或相关的协议。而且re有像特殊模块一样的腿。最后，上下文。
- en: leave is context related items such as using data or data leave。 Okay。 There
    are so many。 types in collections。avc。 So it is better to use collections with
    few methods in case， of the data。 And the next figure shows relationships between
    collections of the sequence of the。 virtual types as defined by the methods instance
    methods that are implementation。 It is good。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 留下上下文相关的项目，例如使用数据或数据离开。好的。集合中有很多类型。avc。所以在数据的情况下，最好使用具有较少方法的集合。下一张图显示了由方法实例方法定义的虚拟类型序列的集合之间的关系。这很好。
- en: idea to look at methods here。 Fewer methods。 So narrowing。 Okay。 Let's see。
    Yeah。 This is。 a great method in latency。 So it is complex but do not feel difficult。
    The first of the。 bottom of the year ago， the field method it has on the top side，
    this side。 You just want。 the more method it has。 For example， if you want to
    loop over a sequence of the argument。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里看一下方法的想法。更少的方法。所以缩小。好的。让我们看看。是的。这是一个在延迟中很好的方法。所以它复杂但感觉不困难。第一年底部，字段方法在上侧，这一侧。你只是想要更多的方法。例如，如果你想遍历参数的序列。
- en: in the function， you can use the collections of a vc。iterable。 Yes。 If you run
    a access。 if you need run access， use sequences。 Or if you need to change the
    value， the use type， is mutable。 Yes。 It is。 Or if you simply specify the list
    of the argument type， you will not。 be able to set or it can't。 However， I think
    it is easier to understand using this。 Yes。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数中，你可以使用vc.iterable的集合。是的。如果你运行访问。如果你需要运行访问，使用序列。或者如果你需要改变值，使用的类型是可变的。是的。它是。或者如果你简单地指定参数类型的列表，你将无法设置，或者它不能。然而，我认为使用这个更容易理解。是的。
- en: There are differences between the types of other sequences。 If you also know，
    the number。 is fixed up the length information。 You must specify the type of the
    number of elements。 Yes。 Like this。 Or you can use also mixing types such as type
    of int， str， and float。 Okay。 Our sequences such as list has the same constraints
    for the elements。 Yes。 This is the difference。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 不同序列类型之间存在差异。如果你还知道，数字。是固定的长度信息。你必须指定元素数量的类型。是的。像这样。或者你也可以使用混合类型，例如 int、str
    和 float 的类型。好的。我们的序列如列表对元素有相同的约束。是的。这就是差异。
- en: of the and the tuples。 It can be used regardless of the length sequences of
    setting only one。 Okay。 Next is advanced。 There are a few advanced types。 Okay。
    Looking。 At first is union。 Multiple， types。 Yeah。 Probably it's seen this。 This
    style pipes。 Yes。 It's on a higher scale or， a type script。 Next code。 This top
    code is the example of a function that accepts both integers。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 和元组。它可以在只设置一个的长度序列中使用。好的。下一个是高级。还有一些高级类型。好的。看。首先是并集。多种类型。是的。可能你见过这个。这个样式管道。是的。它是在更高的规模或类型脚本中。下一个代码。这个顶部代码是一个接受整数的函数示例。
- en: or floats and returns or floats。 Next， bottom， bottom examples。 It can be tested。
    Equal weight， so。 First， next is union and flat end。 Next， this type is limit。
    Yes。 This。 Sorry。 This， is limit。 And all that is， you know， you can swap them。
    And combats with typing。union。 Yes。 This is 3。9 or before styles。 And then this
    style is for 3。10。 Okay。 Optional types。 It。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 或浮点数并返回或浮点数。接下来，底部，底部示例。可以进行测试。等权重，所以。首先，下一个是并集和平坦结束。接下来，这个类型是限制。是的。这。抱歉。这是限制。所有这些，你知道，你可以交换它们。并与类型作斗争。并集。是的。这是
    3.9 或之前的样式。然后这个样式是为 3.10。好的。可选类型。它。
- en: is shorthand for the option of t。 It's union with none。 Yes。 So we have strikes
    just like。 union of type or none。 Yeah。 If you type with a function of the value
    of something， it will。 be propagate。 So we careful when use it。 Yes。 Yes。 This
    is a part example for using option， models。 Yes。 It's， it's made returns。 Nance。
    So when use this function， you might be answer， the words。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 是 t 的选项的简写。它与无的并集。是的。所以我们有和。类型或无的并集。是的。如果你用某个值的函数进行类型化，它将。被传播。因此我们在使用时要小心。是的。是的。这是使用选项模型的一个示例。是的。它是，它的返回。Nance。所以当使用这个函数时，你可能会得到答案，单词。
- en: So in this case， it would be cleaner to the later runtime error。 Yes。 The as
    a。 mentioned as a keynote speakers， the cost of the raising exceptions in Python
    is relatively。 you know， yes。 It is little performance impact。 I like Java。 And
    that goes， the new Python。 is also factor。 Java's， Java script has new safe methods。
    Java equations， but no Python。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 所以在这种情况下，后期运行时错误会更干净。是的。作为一位提到的主题演讲者，Python 中引发异常的成本相对较低。你知道，是的。它的性能影响很小。我喜欢
    Java。然后，新 Python。也是一个因素。Java 的 JavaScript 有新的安全方法。Java 方程式，但没有 Python。
- en: But if there's such as methods， that， yeah， there's the upset。 Okay。 And there
    next is， clable。 And since 3。9 using this input。 And it is various function such
    as flask or fast， API。 And yes。 That returns clable。 It is function。 Okay。 Yes。
    It's made it turns。 It's made it， turns this。 This funk is equals this is。 Okay。
    And the next is user defined generic types。 Yes。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果有像方法那样的情况，嗯，是的，有些不顺利。好的。接下来是 clable。自 3.9 以来使用这个输入。它是各种函数，如 flask 或 fast
    API。是的。那返回的是可调用的。它是函数。好的。是的。它使其返回。它使其，这。这个函数等于这个。好的。下一个是用户定义的泛型类型。是的。
- en: It is typically declared by inheriting from the in session of the cross is one
    more， type variables。 Yes。 Using defining and using the kk t and vt and passing。
    And you defining， x and y。 And using this using mapping takes mapping of x and
    y and returns y。 Okay。 Yes。 I talked about some new features。 It is， it is， it
    is， it is， but got compatibility for。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 它通常通过继承在会话中声明，交叉是一个类型变量。是的。使用定义和使用 kk t 和 vt，并进行传递。然后你定义 x 和 y。使用这个映射 x 和 y
    并返回 y。好的。是的。我谈到了一些新特性。它是，它是，它是，它是，但兼容性得到了保留。
- en: all the versions。 Okay。 What is the standard features。 It is using typing new
    features or。 the order versions。 Right。 This import statement。 In action to typing，
    it was also used to call。 it simple x in features in 3。x。 For example， which functions。
    Yes。 That is random modules。 Okay。 Now I talked about， I will talk about a recent
    update。 Yes。 This is overview。 Yes。 3。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 所有版本。好的。标准特性是什么。它使用新特性的类型或。旧版本的顺序。对。这条导入语句。作为对类型的操作，它也用于调用。它简单 x 在 3.x 中的特性。例如，哪些函数。是的。那是随机模块。好的。现在我谈到的，我将谈论最近的更新。是的。这是概述。是的。3。
- en: 7 has data classes。 And 3。8 has the F strings。 It equals in F strings。 Yes。
    It is for debugging。 And 3。9 is union operators in the dict。 And 3。10s are， as
    you know， pattern matching。 And， 3。11 it will release 2000s 22 October。 It's focus
    on performance training。 And new features。 on typing on 3。10。 There is four features。
    Yes。 And there is difficult topic。 Yes。 This is。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 7有数据类。而3。8有F字符串。在F字符串中等于。是的。这是用于调试。3。9是dict中的联合运算符。而3。10，如你所知，模式匹配。而，3。11将于2000年10月22日发布。它专注于性能训练。和新的功能。关于3。10的typing。有四个特性。是的。还有困难的话题。是的。这是。
- en: I'm not sure。 So I can explain where。 Okay。 As you know， new type of union operator
    is， in pipe。 The union of the can be used operator。 You can also， asking instance。
    Yes。 Like this。 Optional of T is also written by the like this type owner using
    this。 Okay。 Yes。 This is the。 very difficult。 But I'm not sure to， I can explain。
    It， it motivation is needed way。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我不确定。所以我可以解释在哪里。好的。正如你所知道的，新型联合运算符是，在pipe中。联合的可以使用运算符。你也可以，询问实例。是的。像这样。T的可选项也可以通过像这样的类型所有者使用这个。好的。是的。这是非常困难的。但我不确定，我可以解释。它，它的动机是需要的方式。
- en: represent functions that returns same arguments as a specified function。 Yes。
    That is， it。 is readability。 But approach is here。 Adding the argument type called
    is like this。 Using。 this to use this， use this import， import from typing。 Yes。
    It can be used with cover to。 behave like a general cover of the X。 Yes。 Before，
    I'm logging to this。 We can't know the argument。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 表示返回与指定函数相同参数的函数。是的。也就是说，它。是可读性。但是方法在这里。添加名为的参数类型是这样的。使用。这个来使用这个，使用这个导入，从typing导入。是的。它可以与cover一起使用。表现得像X的一般cover。是的。在此之前，我在记录这个。我们无法知道参数。
- en: of types。 But after this， yes， like this， you can put， you can know that the
    keyword algorithm。 is dict and this is the top of this and using this。 Okay。 The
    second， third one， type areas。 Motivation is， we consider variable， global bias
    with type in these type areas。 This tends。 to cause problems with what the X events，
    for the reference， scoping and what。 So we are。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 类型。但在此之后，是的，像这样，你可以放，您可以知道关键字算法。是dict，这就是这一点的顶端，使用这个。好的。第二，第三个，类型区域。动机是，我们考虑变量，全局偏差与这些类型区域中的类型。这个倾向。导致与X事件，参考，作用域和什么有关的问题。因此我们是。
- en: going to make it possible， uh， expected， define type areas。 Okay。 Uh， approach
    adding new typing。 to type areas。 Um， you can like just like this， uh， tick column
    type area is equal in。 Yes。 Uh。 you can like， like this， uh， using double code
    for using four differences。 Okay。 Uh。 this is before and after。 Okay。 This is
    the global expressions， uh， is the areas and type， type， uh。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 将使其成为可能，呃，预期，定义类型区域。好的。呃，方法添加新的typing。到类型区域。嗯，你可以像这样，呃，tick列类型区域相等于。是的。呃。你可以像，像这样，呃，使用双代码用于使用四个差异。好的。呃。这是之前和之后。好的。这是全局表达式，呃，是区域和类型，类型，呃。
- en: global expression。 And then， uh， this is using for further references。 Okay。
    This is the last week for the C point 10， uh， user defined type of Gauss。 Yeah。
    Motivation， is， uh。 type check， uh， through the technical called type， not only
    to determine， uh， the。 type of information。 Yes。 Uh， on this line， uh， type of
    var is narrow to SDR。 Uh， next， uh。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 全局表达式。然后，呃，这是用于进一步引用。好的。这是C点10的最后一周，呃，用户定义的Gauss类型。是的。动机是，呃。类型检查，呃，通过称为类型的技术，不仅仅是为了确定，呃，信息的类型。是的。呃，在这一行，呃，var的类型缩小为SDR。呃，接下来，呃。
- en: this line， uh， narrow to SDR。 Okay。 Uh， however， that will not， will not act，
    uh， as， intended as。 uh， if user defined is a function of easiest。 Yes。 Uh， this
    is invite type， uh， uh。 type Gauss allows to define user defined types， uh， Gauss，
    you， you write a new typing。 Okay。 Yes。 Writing the， like this， uh， on the narrowing
    type， works here， like next。 Yes。 Uh。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行，呃，缩小到SDR。好的。呃，但是，那将不会，呃，按预期那样运作。呃，如果用户定义是最简单的函数。是的。呃，这是邀请类型，呃，呃。类型Gauss允许定义用户定义的类型，呃，Gauss，你，你写一个新的typing。好的。是的。写这个，呃，关于缩小类型，在这里起作用，像接下来。是的。呃。
- en: this narrow in top of SDR and SDR。 And next is one or two steps。 Uh， this is，
    uh， this is SDRs。 Okay。 Okay。 This is， uh， this is last topic。 Uh， new features
    on five zone， three point 11。 Uh。 if you're as a note， uh， five zone three point
    11 is focused on the， performance tuning。 But， uh。 there are also a new feature
    on typing。 Yes。 This is， uh， that， uh， six， six， seven， three。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在SDR和SDR顶部缩小。接下来是一到两步。呃，这是，呃，这是SDRs。好的。好的。这是，呃，这是最后一个主题。呃，五区的新功能，三点11。呃。如果你作为注释，呃，五区三点11专注于性能调优。但是，呃。还有新的typing功能。是的。这是，呃，那，呃，六，六，七，三。
- en: safe type。 It's， uh， a way to， uh， uh， way to annotate， the methods that return，
    uh。 instance of the SDR class。 Okay。 Let's see。 Motivation is here。 Uh， the coding，
    uh。 set scale of the self-grace shape， self-grace shape。 Uh， the type， uh， check
    out is， uh。 if I was the lead answer， the shape shape。 Yes。 This is the shape，
    uh， not， not circle。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 安全类型。这是一种，呃，注解返回，呃。SDR 类实例的方法的方式。好的。让我们看看。动机在这里。呃，编码，呃。设置自我优雅形状的比例，自我优雅形状。呃，类型，呃，检查是，呃。如果我是主要答案，形状形状。是的。这是形状，呃，不，不是圆形。
- en: And using this， uh， shape has no other view。 Set radius。 So it occurs。 Uh， yeah。
    There is， uh。 worker， there， there is worker， but， uh， intuitive。 Yes。 Uh， there，
    is， uh， not so， not good。 really， really。 But， uh， using a type in dot-save， uh，
    resolves， that is， uh。 important and using like this。 This， uh， not that this
    self starts with， uh， upper S。 And， uh。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个，呃，形状没有其他视图。设置半径。所以它发生。呃，是的。那里有，呃。工人，那里有工人，但是，呃，直观。是的。呃，那里，呃，不是那么，不好。真的，真的。但是，呃，使用
    dot-save 中的类型，呃，解决了，重要的是，像这样使用。这，呃，不是自我以，呃，大写字母 S 开头。还有，呃。
- en: using the， using self-grace， it will be the circle。 Okay。 This is， uh， But my
    summary is。 I talked-- fast benefits， starting with using， def definitions， build-in
    types。 and using standard collections， since 3。9。 And those collections， unions，
    options。 are defined genetics， and then， updated overview， and standard future
    for compatibility。 And last。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用自我优雅，它将是圆形。好的。这是，呃，但我的总结是。我谈到了——快速的好处，从使用 def 定义、内置类型开始。并且自 3.9 起使用标准集合。而这些集合、联合、选项。是定义遗传的，然后，更新概述和兼容性的标准未来。最后。
- en: new features on 3。10 or on 3。10。 Yes， 3。10 has new type union of data。 parameters
    with efficient variables， type areas， user-defined types， and type gods。 And that's
    a 3。11 has a self-type， annotated。 OK， that is your parentheses。 I want to say
    thank you。 OK。 thank you so much。 Thank you for listening。 See you again next
    time in Japan， middle of October。 OK。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 3.10 版本或 3.10 的新特性。是的，3.10 引入了数据的新的类型联合。具有高效变量、类型区域、用户定义类型和类型神的参数。还有 3.11 版本有一个自类型，带有注解。好的，这就是你的括号。我想说谢谢你。好的，非常感谢你。谢谢你的倾听。下次在日本再见，十月中旬。好的。
- en: see you。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 再见。
- en: '![](img/1e529d2d9d577e1bcb9af4d55c63a7b9_4.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1e529d2d9d577e1bcb9af4d55c63a7b9_4.png)'
- en: '[APPLAUSE]。'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[掌声]。'
- en: '![](img/1e529d2d9d577e1bcb9af4d55c63a7b9_6.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1e529d2d9d577e1bcb9af4d55c63a7b9_6.png)'
