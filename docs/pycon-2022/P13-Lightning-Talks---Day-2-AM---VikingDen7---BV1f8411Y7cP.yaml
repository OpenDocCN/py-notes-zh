- en: P13：Lightning Talks - Day 2 AM - VikingDen7 - BV1f8411Y7cP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P13：闪电演讲 - 第二天上午 - VikingDen7 - BV1f8411Y7cP
- en: Good morning， everybody。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 早上好，大家。
- en: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_1.png)'
- en: Good morning。 Thank you for everyone that decided to come this early to。 The
    first of the lightning talks。 We appreciate it。 We have a couple speakers before
    Emily comes back and we have， Keynotes coming back。 Let's welcome them up to the
    stage to get ready and we can， Kick it off。 Right？ Indeed。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 早上好。感谢每一位决定这么早来参加**闪电演讲**的人。我们非常感激。在艾米莉回来的之前，我们还有几位演讲者，我们会迎接**主题演讲**的回归。让我们欢迎他们上台，准备开始。没错，确实如此。
- en: Everyone is waking up waiting for the coffee to kick in。 First up we have jeff。
    He's giving us a talk on teaching python for community， Outreach。 Let's give him
    a very loud round of applause。 There's not many of us here。 [ Applause ]， Hi。
    everyone。 Thanks for coming up this early。 I'm jeff。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 每个人都在等待咖啡的提神。第一位是杰夫。他将为我们讲授**Python**教学和社区外展。让我们给他热烈的掌声。我们在这里的人不多。[掌声]，嗨，大家好。感谢你们这么早来。我是杰夫。
- en: I'm a bioengineer at the rehab neural engineering labs at the， University of
    pittsburgh。 I'll be talking about teaching python and community outreach。 This
    is a picture of my lab from a couple years ago。 We've grown to this large group。
    I have our lab mission up here but I'm not really going to talk。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我是**匹兹堡大学**康复神经工程实验室的生物工程师。我将讨论教学**Python**和社区外展。这是我几年前实验室的照片。我们已经发展成了这个大团队。我在这里展示了我们的实验室使命，但我不会详细谈论。
- en: About that if those words confuse you a bit。 I'm happy to talk about it if you
    find me later。 I'd like to show that in the past couple of years especially。 My
    lab has formalized a list of both scientific and community， Values。 We've really
    emphasized that it's not just about doing the。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这一点，如果这些词让你有些困惑。如果你之后找到我，我很乐意与您讨论。我想展示的是，在过去的几年中，尤其是我的实验室正式制定了一系列科学和社区**价值观**。我们真的强调这不仅仅是关于做事情。
- en: Technical work and the science but we've emphasized the importance， of dignity
    and respect。 diversity， equity and inclusion。 Actually being anti-racist， not
    just not racist。 There's a difference。 Of course especially in education there's
    always been a big focus。 On mentorship and training。 I think these ideals overlap
    with open source software too。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们强调技术工作和科学的重要性，但同时也强调尊严和尊重的重要性。**多样性、平等和包容性**。实际上要反对种族主义，而不仅仅是不种族主义。这是有区别的。尤其在教育方面，一直以来都有很大的关注。关于指导和培训。我认为这些理想与开源软件也是相重叠的。
- en: We want to share knowledge and provide opportunities to all， With this software。
    These are important things to keep in mind。 I'd also like to talk about the context
    of my university in the。 City that we're in pittsburgh。 If you've never been to
    pittsburgh it's a pretty cool city。 I recommend checking it out。 You're surrounded
    by these three rivers。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望分享知识并为所有人提供机会，借助这款软件。这些是需要牢记的重要事项。我还想谈谈我所在大学在**匹兹堡**这座城市中的背景。如果你从未去过匹兹堡，那是一个相当酷的城市。我推荐你去看看。你被这三条河环绕着。
- en: Most of the city forms this triangle。 On the west side here， we've got downtown。
    That's a really dis-tranghal area。 I've highlighted the university in red in this
    neighborhood called。 Oakland。 We've got Carnegie Mellon University， our neighbors
    to the， West。 It's a really big second downtown area。 It's hub of education and
    technology。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分城市形成了这个三角形。在西侧，这里是市中心。那是一个真正的**商业区域**。我在这个叫**奥克兰**的社区中用红色标出了大学。我们有**卡内基·梅隆大学**，它在我们的西侧。这是一个非常大的第二市中心，是教育和技术的中心。
- en: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_3.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_3.png)'
- en: In between that and the main downtown area is this neighborhood， Called the
    Hill District。 It's actually like this really big hill。 Of course these are our
    literal neighbors in the city。 It's an interesting neighborhood。 Especially in
    the earlier decades of the 20th century。 It was actually known as little Harlem。
    It was this really thriving center of African American culture。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在主市中心和这个邻里之间是**山丘区**。它实际上是一座很大的山。当然这些是我们在城市中的**邻居**。这是一个有趣的社区，尤其在20世纪早期。它实际上被称为“小哈莱姆”。那是一个非常繁荣的**非裔美国人文化中心**。
- en: Especially like jazz and Pittsburgh。 But like many cities in the US。 Unfortunately
    faced a lot of decline in issues later in the 20th century。 I highlighted here
    that they constructed these highways and they put up， Some sports arenas。 They
    actually had the knockdown housing to do that and they kind of， Cut it off from
    downtown。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 特别喜欢爵士乐和匹兹堡。但像美国许多城市一样，不幸的是在20世纪后期面临许多衰退和问题。我在这里强调，他们建造了这些高速公路，还建起了一些体育场馆。他们实际上为了这样拆除了房屋，并把它与市中心隔开了。
- en: Now it's seen as this really disadvantaged neighborhood。 After that it's really
    unfortunate。 But these are our neighbors and we'd like to engage with them and，
    You know。 it'll change things for the better。 So some of the grad students in
    my lab plan this and show the Python course。 The university actually has this
    community engagement center in this neighborhood。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这个社区被视为一个非常不利的邻里。之后，这真的很不幸。但这些是我们的邻居，我们希望与他们互动。你知道，这将会改善情况。因此，我实验室的一些研究生计划了这个，并展示了Python课程。大学实际上在这个社区设有一个社区参与中心。
- en: Something I'd like to emphasize is that the students who put this on， Are not
    expert coders。 I mean they are bioengineering PhD students primarily。 But they
    plan some short lectures to go over the fundamentals of programming。 Things like
    variables。 control flow， loops， functions。 But actually most of the course time
    was spent just doing programming practice。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我想强调的是，参与这个活动的学生并不是专家程序员。他们主要是生物工程博士生。但他们计划了一些简短的讲座来讲解编程的基本知识，比如变量、控制流、循环和函数。但实际上，大部分课程时间都用于编程实践。
- en: And we really emphasize one-on-one help from volunteers。 So we got a big group
    of volunteers from the lab。 You know， we had different people come each week。
    But we tended to have about as many volunteers as students。 Which really meant
    we could do one-on-one time throughout like the whole class。 And you know。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们非常强调志愿者的一对一帮助。因此我们从实验室获得了一大群志愿者。你知道，我们每周都有不同的人来。但我们的志愿者人数通常与学生人数差不多。这意味着我们能够在整个课程中提供一对一的时间。你知道。
- en: we had a lot of interesting students of various ages。 We kind of targeted adults
    but they range from high school age to senior citizens。 Different career backgrounds。
    You know， some had had a little bit of program experience。 Most had none。 You
    know， there was one woman shown here。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有很多不同年龄的有趣学生。我们主要针对成年人，但他们的年龄范围从高中生到老年人。职业背景各异。你知道，有些人有一点编程经验，而大多数人没有。你知道，这里有一位女士。
- en: Actually brought her son with her which was really cool。 She was interested
    as well even though he was very young。 So since we had all these different ages
    and career levels， the one-on-one tutoring really helped。 And the course ended
    with some final projects where they had two weeks to work with us。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 她实际上带着她的儿子来，这真的很酷。尽管他年纪很小，但她也很感兴趣。由于我们有各种不同的年龄和职业水平，一对一的辅导真的很有帮助。课程结束时，他们有两个星期的时间与我们合作完成一些最终项目。
- en: To do something really creative and really impressive considering how little
    time they had to learn。 They did things like creating password generators。 Actually
    creating a Python tutorial and cheat sheet in Python。 Music playlists and games
    like Hangman。 We ended with this graduation little ceremony where they presented
    their final projects。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 他们做了一些非常有创意和令人印象深刻的事情，考虑到他们学习的时间是多么短。比如创建密码生成器、实际制作Python教程和备忘单、音乐播放列表以及像Hangman这样的游戏。我们以一个小毕业典礼结束，他们展示了自己的最终项目。
- en: And you know， the feedback from the course is really great。 They wrote these
    sticky notes。 We tried to teach them how they could learn more in the future and
    keep this going。 And so it was just a really great experience and I hope this
    encourages more people to do something like this。 You don't need to be an expert
    at coding or teaching to do something like this and to give back to your community。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道，这门课程的反馈真的很好。他们写了这些便条。我们试图教他们如何在未来学习更多并保持这个活动的持续进行。所以这真是一次很棒的体验，我希望这能鼓励更多人去做类似的事情。你不需要成为编程或教学的专家，就可以做这样的事情，并回馈你的社区。
- en: So with that I'm out of time。 So thank you。 [applause]， Thanks。 I realize I
    forgot to explain what it was doing up here with my fingers。 If you haven't seen
    the landing talk before I was a tiny clapping which is what we do as the speakers
    get close to their five-minute mark to give them a little signal time to wrap
    it up。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我没时间了。谢谢大家。[掌声]，谢谢。我意识到我忘了解释我手上在做什么。如果你之前没见过这个演讲，我是做一个小小的鼓掌，这是我们作为演讲者在接近五分钟时给他们的一个信号，提醒他们该结束了。
- en: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_5.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_5.png)'
- en: Lorena？ Yeah。 I was going to say as someone from Chicago I can connect with
    the cool Python teaching all that jazz。 So thank you so much for speaking。 And
    up next we have Jessica and I am very intrigued what we're going to hear。 Good
    morning， good afternoon， good evening guys， Gals and non-binary pals。 My name
    is Jessica and I'm a data engineer at Elastic。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 洛雷娜？是的。作为来自芝加哥的人，我能与酷炫的Python教学联系起来。所以非常感谢你的演讲。接下来是杰西卡，我对我们将听到的内容非常好奇。大家早上好，下午好，晚上好，女士们，先生们和非二元的朋友们。我的名字是杰西卡，我是Elastic的一名数据工程师。
- en: I like to call myself a career data pusher but I also do a lot of automation
    engineering and scripting in my current role。 And most importantly I am a devoted
    cat mom which may not be relevant to this talk but is pretty relevant in general
    so you should know that。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢称自己为职业数据推动者，但我在目前的角色中也做很多自动化工程和脚本工作。而且最重要的是，我是一位热衷的猫妈妈，虽然这在这个演讲中可能不太相关，但一般来说是相当相关的，所以你应该知道这一点。
- en: Now over the next few minutes while you're enjoying your coffee here in the
    Python ballroom I am going to change your life。 I'm going to tell you how we're
    moving one word from your vocabulary will not only make you a better developer
    but a better teammate and mentor to those around you。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的几分钟里，当你们在Python大厅享用咖啡时，我将改变你们的生活。我将告诉你，如何移除你词汇中的一个词，不仅会让你成为更好的开发者，也会让你成为更好的团队成员和导师。
- en: This is a personal philosophy of mine but I think it will work for you maybe
    not exactly but I hope you get something out of this。 So a little bit of background。
    My previous job was at a consulting company where I spent most of my career there
    as a data-decent developer in some way shape or form starting in the humble rule
    of data warehouse developer in 2014。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我个人的哲学，我认为这可能对你有用，虽然不一定完全适用，但我希望你能从中获益。所以一点背景信息。我的前一份工作是在一家咨询公司，在那里我大部分时间都是以某种形式做数据开发者，从2014年作为数据仓库开发者的谦卑角色开始。
- en: As a data dev and if there are any data engineers in the audience you may feel
    this as well。 You get a lot of questions along the lines of hey why are the numbers
    like this。 I would just best I could explain how the data pipelines work you know
    but I'm not the business owner of the data so if there's some issue with the source
    data that's not really my purview。 I can only explain how data gets from A to
    B how C is transformed into D but not why the source value N was correct or incorrect。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 作为数据开发者，如果在场有数据工程师，你可能也会感受到这一点。你会收到很多类似“为什么数字是这样的？”的问题。我会尽力解释数据管道是如何工作的，但我不是数据的业务拥有者，所以如果源数据有问题，那并不在我的职责范围内。我只能解释数据是如何从A到B，C是如何转化为D，但不能解释源值N是正确还是错误。
- en: So one day during a stint with my second data warehousing client I was chatting
    with a business analyst about a dashboard and she was confused about a few numbers。
    To her they just did not make sense。 I was as usual explaining limitations of
    what kinds of things I could do like why the source data couldn't fit into the
    report she was expecting but she just looked at me and said why can't you just
    do this thing with the data。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 有一天，在我第二个数据仓库客户的工作中，我和一位业务分析师聊一个仪表板，她对一些数字感到困惑。对她来说，这些数字毫无意义。我像往常一样解释我能做的事情的局限性，比如为什么源数据不能适应她期望的报告，但她只是看着我说：“你为什么不能就这样处理数据呢？”
- en: And make the numbers better which what does better even mean in this case。 Then
    a couple months later I was transitioning off this client and I was handing the
    work off to another consultant as I was explaining a rather complex data pipeline
    which needed much ugly manipulation to even get from source data to a number resembling
    the output。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 还有，如何让数字更好，这里“更好”到底意味着什么呢？几个月后，我在交接这个客户的工作时，正在向另一位顾问解释一个相当复杂的数据管道，需要很多麻烦的处理才能让源数据变成接近输出的数字。
- en: He looked at me and said but why didn't you just insert technical solution that
    obviously works because I don't know the context of anything that you're talking
    about clearly you should have done instead。 I hope you can all see where this
    is going。 Since these two occurrences I have been on a campaign against the word
    just when posing a question with someone I'm working with。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 他看着我说：“但你为什么不直接插入显然有效的技术解决方案呢？”因为我根本不知道你所谈论的任何上下文，显然你应该这样做。我希望你们都能看到这件事的进展。自从这两次事件后，我一直在对抗在与同事提问时使用“只是”这个词。
- en: To me just implies that the person you're asking a question to is missing something
    so obvious so inconceivably unmissable that they should have thought of it in
    the first place。 With the first story the BA was saying it kind of out of frustration
    there was a number she didn't understand and wanted to have me fix it but the
    second one it was definitely with an air of arrogance this idea of like I didn't
    know enough to do the correct solution。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，“只是”暗示着你提问的人错过了某些明显的、不可思议的东西，以至于他们应该一开始就想到它。在第一个故事中，业务分析师出于沮丧说出这个问题，因为有一个数字她不理解，希望我能修正它；但第二个故事则绝对带着一丝傲慢的气息，这种想法是我不知道足够的信息来给出正确的解决方案。
- en: So by phrasing the question away that promotes discussion rather than blame
    or ignorance which in my opinion is what just implies you can go much farther
    and maybe even learn a little something along the way。 So here are a few of my
    favorite ways to rephrase can't you just like what if we tried what if you did
    something have you considered did you know about next time you come across this
    would you be able to explain why。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，通过提问的方式来促进讨论，而不是指责或无知，我认为这能让你走得更远，甚至在这个过程中学到一些东西。那么，以下是我最喜欢的一些重述方式：你能不能像这样，假如我们尝试一下，假如你做了一些事情，你考虑过吗，下一次你遇到这个问题时，你能解释一下为什么吗？
- en: And to me taking the time to rephrase this question may even get you thinking
    about why even came up in your mind in the first place like was there something
    that I missed or is there something I didn't consider。 So to me phrasing questions
    in this way paves away to more understanding teams and colleagues who are willing
    to learn from one another also if you find yourself using it don't worry I caught
    myself using it in this presentation。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 而对我而言，花时间重述这个问题甚至可能让你思考为什么这个问题会出现在你脑海中，是否有我遗漏的东西，或者是有什么我没有考虑到的。因此，我认为以这种方式提问能为理解更多铺平道路，让团队和同事愿意相互学习。如果你发现自己也在使用这个词，不用担心，我在这个演讲中也发现自己使用过它。
- en: So basically be gentle to yourself know that you're all learning as an ex jerk
    programmer every day I'm still thinking about how I can remove this word and be
    kinder to especially the junior devs around me。 There's not we don't know everything
    so if you may all know that XKCD comic of like every day there's like one person
    who's learning something that you thought was very obvious for the first time。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，基本上要对自己温柔，知道你们都在学习。作为一个曾经的混蛋程序员，我每天都在思考如何去掉这个词，对特别是身边的初级开发者更加友善。我们并不什么都知道，所以如果你们可能都知道那幅XKCD漫画，每天都会有一个人第一次学习到你认为非常显而易见的东西。
- en: So I'm here to leave you with this very relevant motivational poster which is
    if your question starts with can't you just the answer is no。 Thank you for listening
    to my talk come find me the elastic booth I'll be there around 11 if you want
    to share cat pics with me all these photos come from the Canadian Internet registration
    authority they have the best Doc photos on the Internet。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我想给你留下这个非常相关的激励海报：如果你的问题以“你能不能只……”开头，那么答案就是“不”。感谢你听我讲的内容，来找我在弹性展位，我大约11点会在那里，如果你想和我分享猫咪照片，所有这些照片都来自加拿大互联网注册局，他们有互联网上最好的文档照片。
- en: and you should use them thank you so much。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该使用这些，感谢你。
- en: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_7.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_7.png)'
- en: I think Lorraine is getting her phone out now to show you cat pics。 I'm sorry
    I'm so sorry。 I love that talk。 Another word I strike from my vocabulary is simply
    nothing is actually simple just stop saying simply。 Alright next up we have Roy
    with biometric attack let's give a hand to Roy。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我想洛琳现在正在拿出手机给你们看猫咪照片。对不起，我非常抱歉。我喜欢那次演讲。另一个我从词汇中去掉的词是“简单”，实际上没有什么是简单的，停止说“简单”吧。好了，下一个是罗伊，讲述生物识别攻击，给罗伊一点掌声。
- en: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_9.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_9.png)'
- en: Hi my name is Roy I'm a security software engineer and today we're going to
    talk about biometric attack。 So is anybody at the audience use face ID like I
    do any other people in technology。 Cool have you ever stopped for a moment and
    thought yourself how this magic actually occur how you can show your face to the
    phone and the phone recognize you as yourself and unlock itself and more importantly
    have you ever thought how secure is it。 So let's dive straight into it when you
    phone see a picture of yourself or any other person it firstly detect where the
    face is inside a picture and using a deep learning algorithm provide us a feature
    vector of the face。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 嗨，我叫Roy，我是一名安全软件工程师，今天我们要谈谈生物识别攻击。所以现场有人像我一样使用面部识别吗？其他技术人员呢？酷，你有没有停下来想过，这个魔法是如何发生的？你如何能将你的脸展示给手机，手机就能识别你并解锁自己，更重要的是，你有没有想过它的安全性如何？那么让我们直接深入其中，当你的手机看到你自己或其他人的照片时，它首先检测照片中面部的位置，并使用深度学习算法提供我们脸的特征向量。
- en: Those features can be anything from the length of your nose or something weird
    as the ratio of your eye length and your mouth。 We don't really know what the
    meaning of those floats but because they are generated by a deep learning algorithm
    but we know that this feature vector which is sized 128 most of the time supposed
    to represent you very well。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这些特征可以是鼻子的长度，或者奇怪的眼睛长度与嘴巴的比例。我们并不知道这些浮点数的含义，因为它们是由深度学习算法生成的，但我们知道这个大小为128的特征向量通常能很好地代表你。
- en: So all your phone has to do is save this feature vector inside of it and compare
    every new photo to that feature vector。 So let's simplify a thing a little bit。
    I will take this 128 feature vector and make it into a 3D vector so our monkey
    brain can comprehend what's going on here。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你所有的手机要做的就是将这个特征向量保存在里面，并将每张新照片与这个特征向量进行比较。所以我们简化一下。我会将这个128维特征向量转换为一个3D向量，以便我们的猴子大脑能理解这里发生了什么。
- en: So point number point A is our first scan when we bought our new iPhone and
    we don't really try to match that exact point because today I'm looking a bit
    different than I look yesterday in my hair is a bit longer。 I didn't shave so
    we're trying to do some circles some sphere around that point that everything
    inside its sphere like point number C which is a big different point number A
    represents me。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: A点是我们购买新iPhone时的第一次扫描，我们并不真正尝试匹配那个确切的点，因为今天我看起来与昨天有些不同，头发稍微长了一点。我没有刮胡子，所以我们尝试围绕那个点做一些圆圈和球体，里面的一切像C点这样的大不同点，A点代表我。
- en: Point number B on the other hand is very far which means it's not me it's probably
    one of you who try to hack my phone。 So now I understand the process we got a
    picture and deep learning algorithm provides us a feature vector out of it。 So
    we've got a set of feature vector which is a representation of our face but is
    this representation any good？
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: B点很远，这意味着不是我，而是你们中的某个人试图黑我的手机。所以现在我了解了这个过程，我们得到了图片，深度学习算法从中提供了一个特征向量。那么我们得到了一个特征向量集合，这是我们脸的表现，但这个表现真的好吗？
- en: Let me show you something a bit with。 So we tried to put many many images of
    many many people into many many iPhones and most of the people got exactly one
    hit。 They were able to open their own phone but this dude here at index number
    27 has something really weird going on with him。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我给你展示一些东西。所以我们尝试将许多许多人的许多许多图像放入许多许多的iPhone中，大多数人只得到了一个匹配。他们能够解锁自己的手机，但这个索引号为27的人身上有些奇怪的情况。
- en: He was able to unlock more than 50 phone with his face。 So let's try to understand
    how is that。 So if we take the example from before about the length of your nose
    most noses are two inches or five centimeters for non-American friends。 And although
    you can have a little bit of bigger nose or smaller nose most noses will be at
    that range of five centimeters。 And we found out that most of those features are
    normally distributed as well。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 他能够用自己的脸解锁超过50部手机。那么我们来理解一下这是怎么回事。如果我们以鼻子的长度为例，大多数鼻子的长度是两英寸或五厘米，对于非美国的朋友们来说。而尽管你可能有稍微大一点或小一点的鼻子，大多数鼻子都在五厘米的范围内。而且我们发现这些特征通常也是正态分布的。
- en: Now let me show you we were able to hack a phone。 Third and times in a middle
    of times which means your phone is secure as in five digit numbers。 So let me
    show you how this attack was there。 We generated here many many faces。 We as a
    human can see that those faces aren't real at all but because we were able to
    generate the distribution map for each feature。 we could create the most generic
    faces from most generic to least generic。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我给你展示我们是如何破解一部手机的。这是第三次，这意味着你的手机就像五位数字密码那样安全。那么让我展示一下这个攻击是如何进行的。我们在这里生成了很多面孔。我们作为人类可以看出这些面孔根本不真实，但因为我们能够为每个特征生成分布图，我们可以从最通用到最不通用创建最通用的面孔。
- en: And during this attack find a face that will be close enough to yours in terms
    of iPhone and unlock your phone。 So no one is safe。 Thank you very much。 This
    is my mail and please feel free to approach me with any question。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在此次攻击中，找到一张与你的 iPhone 足够接近的面孔来解锁你的手机。因此，没有人是安全的。非常感谢。这是我的邮箱，请随时向我提问。
- en: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_11.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_11.png)'
- en: Thank you so much for your talk。 Up next we have Gajandra continuing on a really
    relevant topic on security。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 非常感谢你的发言。接下来我们有 Gajandra，继续讨论一个与安全相关的主题。
- en: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_13.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_13.png)'
- en: Good morning everyone。 My name is Gajinder Deshpande working as a student professor
    at KLS。 Co-ordangest of Technology India。 So I'll be delivering a short talk on
    security considerations in Python packaging。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 大家早上好。我叫 Gajinder Deshpande，是 KLS 的一名学生教授，担任印度科技协调员。所以我将简要讲解 Python 打包中的安全考虑事项。
- en: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_15.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_15.png)'
- en: So in brief we are going to discuss three tools。 One is Bandit。 second one is
    Safety and third one is Samhgre。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，我们将讨论三个工具。一个是 Bandit，第二个是 Safety，第三个是 Samhgre。
- en: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_17.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_17.png)'
- en: So why Haka start targeting Python is that we know that Python is gaining lots
    of popularity and especially in Tobi index it has reached number one position。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Haka 开始针对 Python 的原因是，我们知道 Python 正在获得越来越多的关注，尤其是在 Tobi 指数中，它已经达到了第一的位置。
- en: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_19.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_19.png)'
- en: And even in stack overflow it has been ranked third。 And even in non-Jitup stats
    you can see that in terms of number of active repositories Python is on third
    position。 Now there is this general misconception about the security of the open
    source software。 So some people cite that the major reason is that the code is
    open source。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在 Stack Overflow 上，它也排名第三。在非 GitHub 统计数据中，你也可以看到，在活跃仓库数量方面，Python 排名第三。关于开源软件安全性有一个普遍的误解。有些人认为主要原因是代码是开源的。
- en: The code is available to everyone。 But generally speaking open source software
    are secured by design。 And security issues are mostly due to the lack of understanding
    of secure coding principles。 And Python is secure but vulnerable it is maybe present
    in the Python packages。 So importance of secure package is that in secure package
    will make your application vulnerable and prone to external threats。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 代码对所有人开放。但一般来说，开源软件的设计是安全的。安全问题通常是由于对安全编码原则缺乏理解。Python 是安全的，但它可能在某些 Python 包中存在漏洞。因此，安全包的重要性在于，不安全的包会使你的应用程序容易受到外部威胁。
- en: Compromise and unauthorised disclosure of information may result into personal
    and company reputation and money。 So unsecure code may damage the system of users
    and sometimes it may also lead to the physical damage。 Now these are some of the
    articles which you can go to later。 So these articles have been published recently
    and they have highlighted several security issues such as dependency confusion
    attack mounted by a pipy repository。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 信息的妥协和未经授权的披露可能会对个人和公司的声誉及财产造成影响。因此，不安全的代码可能会损害用户的系统，有时还可能导致实际损害。现在，这里有一些文章你可以稍后查看。这些文章是最近发布的，突出了几个安全问题，例如由
    pipy 仓库发起的依赖混淆攻击。
- en: Then JFrog detects malicious pipy packages， sealing credit cards and injecting
    code。 And potential remote code execution in pipy and supply chain flaws found
    in the Python package。 Let's see the bandit tool。 It's a tool designed to find
    common security issues in the Python code。 So to do this bandit processes each
    file builds an abstract syntax tree from it and runs appropriate plugins against
    AST nodes。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然后JFrog检测恶意pipy包，窃取信用卡和注入代码，以及在pipy中发现的潜在远程代码执行和供应链漏洞。让我们看看bandit工具。它是一个旨在发现Python代码中常见安全问题的工具。为此，bandit处理每个文件，从中构建抽象语法树，并在AST节点上运行适当的插件。
- en: So once bandit finished scanning all the files it generates a report。 So this
    is how you can use it。 You can run it independently。 You can run it against a
    code repository。 You can also specify a profile。 So in this slide the shell injection
    profile has been mentioned。 So you can also write your own custom tests using
    bandit。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦bandit完成对所有文件的扫描，它会生成报告。这是你可以使用它的方式。你可以独立运行它。你可以针对代码库运行它。你还可以指定配置文件。在这一幻灯片中提到了shell注入配置文件。你还可以使用bandit编写自己的自定义测试。
- en: So there are some plugins and these are the various types of tests you can perform
    and there are various tests。 These are the categories。 So these are the tests
    under those specific categories。 The next is the safety check。 So safety checks
    your installed dependencies for non-security vulnerabilities。 By default it uses
    the Python vulnerability database safety db but can be applied to use piup。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些插件，这些是你可以执行的各种类型的测试，还有各种测试。这些是分类。这些是特定类别下的测试。接下来是安全检查。安全检查你安装的依赖项是否存在非安全漏洞。默认使用Python漏洞数据库安全数据库，但可以应用于使用piup。
- en: io safety apis using key option。 It supports Python 3。5 and above versions。
    Now how to test it is by installing an insecure package。 So these are some of
    the commands how you can use it。 So this is the screenshot you can find out。 This
    is the screenshot before installing insecure package。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用密钥选项的IO安全API。它支持Python 3.5及以上版本。现在测试它的方法是安装一个不安全的包。这些是一些你可以使用的命令。这是你可以找到的屏幕截图。这是安装不安全包前的屏幕截图。
- en: And this is the screenshot after installing insecure package and you can see
    that it has appeared here。 But these are the insecure package installed on my
    machine。 Now you can use safety db。 It's a database of non-secure vulnerabilities
    in Python packages。 The data is made up available by piup。io and it is synced
    with the repository once per month。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这是安装不安全包后的屏幕截图，你可以看到它已经出现在这里。但这些是在我的机器上安装的不安全包。现在你可以使用安全数据库。这是一个关于Python包中非安全漏洞的数据库。数据由piup.io提供，每月与仓库同步一次。
- en: So you can visit the URL mentioned here the first URL to see the list of insecure
    Python packages。 It doesn't mean that just because it appears in the list it is
    insecure。 So there are some safety db tools which you can use。 The safety bar，
    pip and check and so on。 The next one is the Samgrep which is the open source
    static analyzer。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以访问这里提到的第一个URL，查看不安全Python包的列表。并不是说只要出现在列表中就不安全。所以有一些你可以使用的安全数据库工具。安全条，pip和检查等。下一个是Samgrep，它是一个开源静态分析器。
- en: It works on mostly 17 plus languages。 It supports Python also。 It is not vendor
    control and thousand plus community rules have been written。 You can write your
    own rules。 It addresses OASP top 10 issues。 And it hunts vulnerabilities by exploring
    code base with light wet queries and repel workflow。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 它主要支持17种以上的语言。它也支持Python。它不是供应商控制的，已经编写了一千多个社区规则。你可以编写自己的规则。它解决了OASP前十个问题。并通过轻量级查询和反弹工作流探索代码库来发现漏洞。
- en: There is a link of playground mentioned here。 You can just visit the link and
    see how it works and you can explore。 Then general guidelines that if you are
    a package maintainer then ensure that the package you are maintaining is secure
    and practice secure coding principles。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这里提到了一个游乐场的链接。你可以访问该链接，看看它是如何工作的并进行探索。然后一般指导方针是，如果你是包的维护者，请确保你维护的包是安全的，并遵循安全编码原则。
- en: So as an application developer follow secure coding principles by writing。 Then
    use to check vulnerabilities。 Then periodically scan your environment。 Sign in
    with your packages using pgp keys。 Use to find for improved security。 Scan packages
    before upgrading。 Ensure that you install code from package from trusted source。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 所以作为一个应用开发者，通过编写代码遵循安全编码原则。然后使用工具检查漏洞。之后定期扫描你的环境。使用 pgp 密钥对你的包进行签名。使用工具以提高安全性。升级前扫描包。确保从可信来源安装代码。
- en: Thank you。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 谢谢。
- en: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_21.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_21.png)'
- en: Great talk。 Next up we have diamond giving us a talk on scaling PyTorch and
    fraud。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒的演讲。接下来我们请 diamond 给我们讲讲 PyTorch 的扩展和欺诈。
- en: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_23.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_23.png)'
- en: Let's give it a wave for diamond。 Hey everyone。 Morning。 I'm diamond。 I'm an
    engineering manager over at meta。 I work on PyTorch which is your favorite machine
    learning framework for Python。 Apologies if we have anyone here from tensorflow。
    It's a great framework。 I'm going to be talking about one of the things near and
    dear to my heart which is scaling this for production use。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为 diamond 欢呼。大家好，早上好。我是 diamond，我在 meta 担任工程经理。我负责 PyTorch，这是你们最喜欢的 Python
    机器学习框架。如果有来自 TensorFlow 的朋友在场，我为此道歉。它是一个很棒的框架。我将谈论一个我非常关心的事情，那就是如何为生产使用扩展这个框架。
- en: Really awesome when people use PyTorch for learning machine learning for research
    for everything like that。 One of the important things to me is that we make sure
    it works really well in production as well。 We're going to be talking about one
    particular aspect of that in this lightning talk。 The solution to the gill problem。
    Solution put in quotes here because we're not actually solving the gill problem。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当人们使用 PyTorch 来学习机器学习、进行研究等时，真的很棒。对我来说，其中一个重要的事情是确保它在生产中也能很好地运行。我们将在这个快速演讲中讨论一个特定的方面。关于“鳃”问题的解决方案。这里用引号括起来是因为我们并不是在真正解决“鳃”问题。
- en: Someone much smarter than me is doing that。 Instead I'm looking at a small part
    of this problem which is if you're running a production scale machine learning
    framework or machine learning system most of the time you actually don't want
    to just write everything in Python。
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 比我聪明得多的人正在做这件事。相反，我关注的是这个问题的一小部分：如果你在运行生产规模的机器学习框架或机器学习系统，大多数时候你其实并不想只用 Python
    来编写所有内容。
- en: There's a bunch of different reasons for that。 I know it's kind of a hard thing
    to say at a Python conference。 Usually you end up writing your service in C++
    or something that is kind of performance。 really highly performant because you
    want really high throughput。 What you want to do is have this model that you've
    trained in Python and use it in this potentially C++ or other faster framework
    service that is very efficient。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这有很多不同的原因。我知道在 Python 大会上说这样的话有点困难。通常你最终会用 C++ 或其他性能较高的语言编写你的服务，因为你想要非常高的吞吐量。你想要的是在
    Python 中训练的模型，并在这个可能的 C++ 或其他更快的框架服务中高效使用。
- en: That's really hard to do unless you take the model and translate it into some
    other language。 Translations are incredibly painful。 Instead you want to be able
    to use Python。 run it with C++ and profit。 How do you do that？ We have two different
    libraries。 two different features that we've actually introduced pretty recently。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这真的很难做到，除非你将模型转化为其他语言。翻译过程极其痛苦。相反，你希望能够使用 Python，将其与 C++ 结合运行并获得收益。你怎么做呢？我们有两个不同的库，两个不同的功能，实际上我们最近才引入。
- en: One is called Torch Package and one is Torch Deploy。 Torch Package lets you
    serialize and de-serialize your Python code。 Keep your model in Python so your
    scientists can be happy。 your machine learning engineers can be happy。 They don't
    have to do all this messy translations where you end up losing functionality of
    Python that you really want because we do love actually keeping the model in Python。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 一个叫 Torch Package，另一个叫 Torch Deploy。Torch Package 让你能够序列化和反序列化你的 Python 代码。将你的模型保持在
    Python 中，这样你的科学家和机器学习工程师都能开心。他们不必进行所有这些麻烦的翻译，因为这样你会失去 Python 中非常想要的功能，而我们确实希望将模型保持在
    Python 中。
- en: running the model in Python， training the model in Python。 But you're able to
    then deploy that and use it in your C++ system。 Under the hood。 the way that works
    for a Torch Deploy is that we have actually an interpreter manager so that you
    have n Python interpreters。 So you're not just running one because if you're just
    running one。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中运行模型，训练模型。但是你可以将其部署并在你的C++系统中使用。幕后运作的方式是，我们实际上有一个解释器管理器，以便你有多个Python解释器。所以你并不仅仅是在运行一个，因为如果你只运行一个。
- en: you run into the guild problem where you have the global interpreter lock that
    makes it so you can only run in one thread。 Instead， if you have an EC2 instance
    or something else that has tons of cores that you're paying for。 you can actually
    use each of those cores。 Each core is able to run a copy of your model and we
    do that with having a separate Python interpreter per core。 An example of this
    is pretty straightforward。 You've got your C++ program。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你会遇到全局解释器锁的问题，这使得你只能在一个线程中运行。相反，如果你有一个EC2实例或其他具有大量核心的东西，你可以实际使用每个核心。每个核心能够运行你模型的一个副本，我们通过为每个核心提供单独的Python解释器来实现。这是一个相当简单的例子。你有你的C++程序。
- en: Once you package up your model， you can make a call straight to it。 We have
    here that you're loading up the model from your package。 Then at the very bottom。
    you can see that we're actually going to run inference with it。 Execute your model
    with the tensor that you're passing。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你打包好模型，你可以直接调用它。我们在这里是从你的包中加载模型。然后在最底部，你可以看到我们实际上将进行推理。使用你传递的张量执行模型。
- en: That tensor represents the data that you have in the real world interaction。
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这个张量表示你在现实世界交互中拥有的数据。
- en: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_25.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_25.png)'
- en: So how do you actually put your model into that state？ You use Torch Package。
    which is part two of this。 It's hermetically sealing dependencies in with your
    source code。 your source model。 It's Pythonic so you can make changes to the dependencies
    that you're covering with it that you're wrapping with it。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 那么你如何将模型放入那个状态呢？你使用Torch Package，这是第二部分。它将依赖项与源代码密封在一起。你的源模型。它是Python风格的，因此你可以对所覆盖的依赖项进行更改。
- en: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_27.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_27.png)'
- en: You have fine grain control of it。 Torch Package example here。 This is in Python，
    not in C++。 so it's not as ugly。 This is something that you can see。 We're packaging
    up the model。 In our situation， we're saying "extern" is really when you're saying。
    "We're going to rely on an external dependency。 We're okay with that。
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 你对此有精细的控制。Torch Package的示例在这里。这是在Python中，而不是C++中，所以看起来不那么丑陋。这是你可以看到的。我们正在打包模型。在我们的情况下，我们说“extern”实际上是当你说“我们将依赖外部依赖。我们对此没有问题”。
- en: It doesn't need to be hermetically sealed。"， Intern is when you're saying we're
    going to actually pull this in as part of our package。 So this is an internal
    package dependency。 A couple different options you have here。 These graphs are
    hard to parse， so apologies。 Real quick。 the main important thing is that there's
    a bunch of different ways， like TorchScript。
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 它不需要完全密封。“Intern”是指我们实际上将其作为我们包的一部分拉入。所以这是一个内部包依赖。你在这里有几种不同的选项。这些图表很难解析，所以很抱歉。很快说一下，主要重要的事情是，有很多不同的方法，例如TorchScript。
- en: which is turning it into another language that you can use to make this much
    faster。 Instead。 we show that you naturally， without having to do any performance
    work。 are able to get higher performance than your single thread for certain types
    of models。 most small to medium-sized models。 The models are a bit more complicated。
    We get some improvements。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着将其转换为另一种语言，从而可以更快地使用它。然而，我们展示的是，你可以自然地，在不进行任何性能优化的情况下，对于某些类型的模型，获得比单线程更高的性能，尤其是中小型模型。这些模型稍微复杂一些。我们取得了一些改进。
- en: but not as much as we'd like。 Yeah， so here's the public docs。 I'm going to
    actually be hosting an open space as well at 5 p。m。 for anyone who wants to talk
    about PyTorch or machine learning in production。 You can come talk to me。 We can
    chat about it。 I love to hear your pain points in particular。
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 但不如我们所希望的那样多。是的，这是公共文档。我将在下午5点举办一个开放空间，欢迎任何想谈论PyTorch或生产中的机器学习的人。你可以来和我聊聊。我特别想听听你的痛点。
- en: I have a whole group that really focuses on how do we make PyTorch better for
    you。 better for production。 So if you are using it or you're using machine learning
    in production。 if you want something from us， come by。 I'm always trying to figure
    out what else we can do to make it easier and better for everyone。 And， you know，
    software is eating the world and ML is eating software。
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我有一个专注于如何让PyTorch对你更好的团队，更适合生产的团队。因此，如果你在生产中使用它或者使用机器学习，如果你需要我们的帮助，请过来。我一直在努力寻找其他方法，让一切变得更简单更好。你知道，软件正在吞噬世界，而机器学习正在吞噬软件。
- en: so please help us make that happen。 Thank you very much。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 所以请帮助我们实现这一目标。非常感谢。
- en: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_29.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_29.png)'
- en: I might be at that open space。 Up next we have Manabu， who's going to。 I think
    it's a really relevant topic， so I'm just going to pass it on to you now。
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我可能会在那个开放空间。接下来我们有Manabu，他将讨论。我觉得这是一个非常相关的话题，所以我现在就把话题转给你。
- en: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_31.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_31.png)'
- en: Hi， good morning。 I will talk about Split Pyzone community with COVID-19 in
    Japan。 My name is Manabu Terada from Tokyo， Japan。 But so I was tough to live
    from overseas。 But I came back to here very nice。 And I bought the photo of PyConJP，
    PyCon Japan Association。 and a PSA forum member。 So we launched the PyConJP， PyCon
    Japan in 2011， about 10 years ago。
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你好，早上好。我将讨论COVID-19对日本Split Pyzone社区的影响。我是来自日本东京的寺田学。不过我曾在海外生活，但我很高兴回到这里。我带来了PyConJP，PyCon日本协会的照片，以及PSA论坛的成员。我们在2011年启动了PyConJP，PyCon日本，至今已有约10年。
- en: At that time， the PyCon community in Japan was very small， so it was an equal
    sign， an e-ansan。 and I took the land。 And as a PyCon user， it was full active
    in Tokyo。 and as a part of Japan started from PyConJP。 At first， it was only 150
    people joined the PyConJP。 Now we are able to help 1，000 people， 1，000 people，
    PyConJP。 Thank you very much。 So of course。
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 那时，日本的PyCon社区非常小，因此是一个平等的标志，一个e-ansan。我接管了这个地方。作为一个PyCon用户，在东京是非常活跃的，作为日本的一个部分，从PyConJP开始。最初只有150人参加了PyConJP。现在我们能够帮助1,000人，1,000人，PyConJP。非常感谢你们。所以当然。
- en: this year we will have an in-person event in October。 If you can come to Japan，
    please join us。 As the activity was being promoted to PyCon all over Japan and
    create more various community in all over Japan。 While those are the tutorial
    event， PyCon Bootcamp。 this could be introduced in the post-accession in the U。S。
    PyCon 2019。
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 今年我们将在十月举行一次线下活动。如果你能来日本，请加入我们。该活动正在向日本各地的PyCon推广，旨在创造更多多样化的社区。虽然这些是教程活动，PyCon
    Bootcamp，但这可以在美国PyCon 2019的后续中介绍。
- en: And we supported PyRE this Tokyo， PyRE this Taliban。 It is making local women's
    community and connecting all over Japan。 However。 you have all know the world
    has changed in the spring of 2020。 But we thought it would not be good to stop
    our activity here。 We made some activities。
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们支持了东京的PyRE，和塔利班的PyRE。它正在建立当地女性社区，连接日本各地。然而，大家都知道2020年春天世界发生了变化。但我们认为不应停止我们的活动。我们开展了一些活动。
- en: So first one， we had PyCon charity talks in Japan。 It was donated to PSA's PyCon
    Software Foundation。 So first time we donated 10，000 dollars。 And total is at
    25，000 dollars。 So we had three times。 And other activity。 So we have YouTube
    live every month。 We share some news。
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们在日本举办了PyCon慈善讲座。它被捐赠给PSA的PyCon软件基金会。第一次我们捐赠了10,000美元。总计达到25,000美元。我们举办了三次。还有其他活动。因此我们每个月都有YouTube直播，分享一些新闻。
- en: news of Python and the community and introducing some events。 And the new future
    for the PyCon 3。10 and more。 Last， we are taking the interview for the next PyCon
    JB TV。 And this is my PyCon JB TV and stuff。 So we have an open space session
    at 250F。 So we started 30。 30， 30。 Please come to the room if you have a message
    to Japanese Python。
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Python和社区的新闻以及介绍一些活动。同时也展望了PyCon 3.10及更多。最后，我们正在进行下一届PyCon JB TV的采访。这是我的PyCon
    JB TV的内容。因此，我们在250F有一个开放空间的环节。我们开始了30，30，30。如果你有消息要传达给日本的Python社区，请来房间。
- en: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_33.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_33.png)'
- en: Thank you， Beatty Matz。 Thank you。 And I want to reiterate that $25，000 donation
    was really awesome。 Really helped out the PSF and the folks at the PyCon JB association
    got a community service。 for many people。 Thanks for that。 So thank you。 Next
    up we have Jay。 who is going to talk to us about DevRel sharing your company's
    skills。
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 谢谢你，Beatty Matz。谢谢你。我想重申，那$25,000的捐款真的很棒。对PSF和PyCon JB协会的朋友们帮助很大，给许多人提供了社区服务。谢谢你。所以谢谢。接下来我们有Jay，他将和我们谈论DevRel分享你公司的技能。
- en: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_35.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_35.png)'
- en: with the world。 Let's give it up for Jay。 All right。 So I'm going to be honest。
    I did this lightning talk for two reasons。 One， a lot of people ask me what is
    DevRel and I go。 And then the other reason is when I talk to all of my friends
    in DevRel， they all say， hey。 do you know anybody that would be interested in
    a job at DevRel？
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 来吧，给Jay一点掌声。好的，我要坦诚。做这个闪电演讲有两个原因。第一，很多人问我DevRel是什么，我就说。然后第二个原因是，当我和所有DevRel的朋友谈话时，他们都说，嘿。你认识对DevRel工作感兴趣的人吗？
- en: It's growing every company that I've talked to。 We're hiring advocates。 We're
    hiring content creators。 So if you've ever thought that getting up on stage and
    giving a lightning talk or going。 to PyCon and getting to walk around and talk
    to your friends and getting paid to do that。 is something that you might be interested
    in。 Hey， let's figure it out。 So yeah， like I said。
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这正在增长，我谈过的每家公司。我们正在招聘倡导者。我们正在招聘内容创作者。所以如果你曾经想过站上舞台做一个闪电演讲，或者去PyCon，四处走走和朋友聊天，并因此得到报酬。这是你可能感兴趣的事情。嘿，让我们搞定它。所以是的，正如我所说。
- en: DevRel。 I don't know。 It's a good thing though。 Don't worry。 Every company that
    tells you what DevRel is， they're telling you what their version of DevRel is。
    It's going to be different every time。 It may change with the seasons。 It may
    change with the weather。 And again， this is a good thing because static sites
    are cool。
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: DevRel。我不知道。这是个好事。别担心。每个告诉你DevRel是什么的公司，他们都在告诉你他们自己版本的DevRel。每次都会不同。可能会随季节变化，也可能随天气变化。而且，再次强调，这是个好事，因为静态网站很酷。
- en: Static teams and companies， not so much。 We have to be flexible。 We have to
    be able to adapt to what is happening in the space。 So your job is to be a communicator。
    Your job is to communicate to the community that you serve。 But it's also your
    job to communicate to your company the needs of your community。
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 静态团队和公司，不太行。我们必须灵活。我们必须能够适应这个领域正在发生的事情。所以你的工作就是沟通。你的工作是与服务的社区沟通。但你也要向你的公司传达你社区的需求。
- en: If you're not doing both， I'm sorry， you're wrong。 Like that。 I'm hoarse。 I
    can't。 I don't have time to argue that point。 If you can't provide value to both
    the community and your company。 then you're doing a disservice to one of those
    two。 So how do you get into DevRel？
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不同时做这两件事，抱歉，你错了。就像那样。我声音嘶哑。我不能。我没时间争论这个观点。如果你不能为社区和你的公司提供价值，那么你对这两者之一都在造成损害。那么你如何进入DevRel？
- en: This is going to be the quick three minute version。 Choose at least one of each
    of these three kinds of things。 If femoral content are recurring presence and
    a longer sustained commitment。 If you do more than one， great， you get bonus points。
    That'll also give you an idea of what type of role in DevRel you want to take
    on。 So we're going to start with the first one。 A femoral content。 This is a Twitter
    space。 That's the new hotness。 I love Twitter spaces。 They're amazing。 I did my
    first one。 I was driving and then I was like， I want to talk， but I also don't
    want to crash。
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是一个快速的三分钟版本。选择至少这三种事物中的一种。如果短期内容是重复出现的，并且是长期的持续承诺。如果你做不止一种，太好了，你会得分加倍。这也会给你一个关于你想在DevRel中承担什么角色的想法。所以我们将从第一个开始。短期内容。这是Twitter空间。那是新的热门。我喜欢Twitter空间。它们很棒。我第一次参加时，我在开车，然后我想说话，但我也不想撞车。
- en: And like that was like， all right， pull over to the side。 Tell everybody why
    this is amazing。 Okay。 then get back on the road。 We'll do safe stuff here。 YouTube
    live。 Twitch。 If you've always wanted to tell people to like， like， follow， hit
    the bell， do all that stuff。 Like。 hey， maybe this is a way that you can do that，
    and not have to A， fight the algorithm or B。
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 就像那样，好的，靠边停下。告诉大家为什么这很棒。好的，然后继续上路。我们在这里做安全的事情。YouTube直播。Twitch。如果你一直想告诉人们“点赞，关注，点击铃铛”，做所有这些事情。就像，嘿，也许这是一种方法，你可以这样做，而不必A，抗衡算法或B。
- en: worry about subscribers， clicks and downloads。 Or TikTok。 I'm not going to do
    a TikTok pants。 You can't make me。 I'm sorry。 IG live， YouTube shorts， all of
    these things。 all of these pieces of content that happen。 They're like a flash
    in the pan。 Then they're gone。 If you like doing that， maybe being a developer
    advocate is for you。 A recurring presence。
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 不用担心订阅者、点击量和下载量。或者TikTok。我不会做TikTok裤子。你不能让我这样做。对不起。IG直播，YouTube短片，所有这些东西，所有这些内容都是短暂的，然后就消失了。如果你喜欢这样做，或许做开发者倡导者适合你。这是一个持续的存在。
- en: Being at meetups。 Being at conferences。 Joining online communities and Discord
    Slack channels。 Appearing on other people's podcasts。 Doing guest posts and things。
    These are things where people in the community will see you or at least hear your
    name。 And you don't have to worry about whether or not you did good。
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 参加聚会，参加会议，加入在线社区和Discord Slack频道，出现在其他人的播客上，做客座文章等等。这些都是让社区的人看到你，或者至少听到你的名字的事情。而且你不必担心自己是否做得好。
- en: because you're going to come back and you're going to do better。 You're going
    to iterate over time。 Just like when you're learning to code。 Your first code，
    your first lightning talk。 You're nervous。 You're scared。 You want to push that
    button and your buddy Seth is like， "Don't worry。 You got this。 That was a true
    story。 That was the story of my first pull request。"， But the more you show up。
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 因为你会回来的，你会做得更好。你会随着时间不断迭代。就像当你学习编程时，你的第一段代码，你的第一次闪电演讲。你紧张，你害怕。你想按下那个按钮，而你的朋友Seth说：“别担心，你能做到。”那是真实的故事，那是我第一次提交请求的故事。但你越多出现在这里。
- en: the better you get at it。 The better you get at it。 the more people notice that
    you're getting better at it。 And then the more people are going to want to talk
    to you because then you go from being the person。 that was learning to the person
    that's not teaching。 And then finally。
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 你越是变得熟练，别人越能注意到你在进步。然后会有更多人想和你交谈，因为你从一个学习者变成了一个教导者。最后。
- en: the longer sustainable commitment。 This is your blog。 This is your podcast。
    This is your personal YouTube channel。 This is your newsletter。 This is you posting
    cat pics on Twitter。 Sorry。 I've been trying to convince some people to get into
    devroll lately。 So anything that allows people to see you， know who you are and
    feel like they can connect with you。
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 更长期的可持续承诺。这是你的博客。这是你的播客。这是你个人的YouTube频道。这是你的时事通讯。这是你在Twitter上发布的猫咪照片。对不起。我一直在试图说服一些人最近进入开发角色。所以任何能让人们看到你，知道你是谁，并感觉可以与你建立联系的事情。
- en: and they know exactly where they can find you。 That is going to be the thing
    that you need to focus on。 And like I said， it's not just being an advocate。 You
    can be a content creator。 You can be a writer。 You can get in the video team。
    You can do all of these things。 But I know what you're going to tell me。 I'm introverted。
    Me too。
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 他们知道在哪里可以找到你。这是你需要关注的事情。正如我所说的，这不仅仅是做倡导者。你可以成为内容创作者，可以成为作家，可以加入视频团队，可以做所有这些事情。但我知道你会告诉我，我很内向。我也是。
- en: I'm going to go home and go to sleep for a few days。 You might have ADHD。 How
    do you focus on all these things？ Me too。 Having a lot of different things to
    focus on actually makes the job fun and easy。 And you can bounce from one idea
    and then when you're tired of that idea。 you put it down and then you pick up
    another one， and then you work on that stuff。
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我打算回家睡几天。你可能有多动症。你如何专注于所有这些事情？我也是。专注于许多不同的事情实际上让工作变得有趣且简单。你可以从一个想法跳到另一个，当你对那个想法感到厌倦时，就放下它，然后再去做另一个，然后继续工作。
- en: And you're not the most tech savvy。 That's fine。 Your job is to learn and to
    show people what you've learned。 There are a lot of people in the Expo Hall。 If
    you're interested。 you can find me or find someone in a booth and ask them。 Your
    favorite part。 your least favorite part。 Thank you。
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 而且你并不是最懂技术的人。没关系。你的工作是学习，并向人们展示你所学到的。在博览会大厅里有很多人。如果你有兴趣，可以找到我或在摊位上找人问问他们。你最喜欢的部分，最不喜欢的部分。谢谢。
- en: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_37.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_37.png)'
- en: '[applause]， So I have two main coons who I''m very， very proud of。 One of them
    is named Percart。 after John Lechbecard。 And all those things。 And yes， I do put
    them on Twitch。 I''m very excited for this next talk and we have Jack。'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '[掌声]，所以我有两个我非常非常自豪的主要伙伴。其中一个叫Percart，灵感来自John Lechbecard。还有其他这些东西。是的，我确实把他们放在Twitch上。我对这次演讲感到非常兴奋，我们还有Jack。'
- en: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_39.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_39.png)'
- en: '[applause]， Yeah， hi。 I''m Jack。 You might be able to tell about a title of
    this talk that it''s going to be a bit different in terms of content from the
    other talks。 But I''ll be talking about what I think is an interesting use of
    binary search。 And I swear this is more interesting than Lechbecard。 Okay， so
    as a quick review。 I''m assuming most of you are familiar with what binary search
    is。'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '[掌声]，是的，嗨。我是Jack。你可能会从这个演讲的标题中看出，内容会与其他演讲有所不同。但我会谈论我认为是二分查找的一个有趣用法。我发誓这比Lechbecard更有趣。好的，作为快速回顾，我假设你们大多数人都熟悉什么是二分查找。'
- en: So we're going to go over an easy problem。 So you have this list of a positive
    number of zeros followed by a positive number of ones。 And your task with binary
    search is to find the index of this first one in the list。 So how we can do this
    is that we have two pointers low and high to indicate the current search range。
    And then in each step we try to reduce the search range by a factor of two until
    eventually we end up our answer。
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论一个简单的问题。你有一个正数量的零，后面跟着一个正数量的一。你的任务是用二分查找找到列表中第一个一的索引。我们可以这样做：我们有两个指针low和high来指示当前的搜索范围。在每一步中，我们试图将搜索范围减少一半，直到最终得到我们的答案。
- en: Okay， so that's pretty simple。 So now we're going to look at how we can apply
    this to solve a harder problem。 And this is the problem statement。 Partition a
    given list with n positive integers into k contiguous segments such that the maximum
    segment sum is minimized。
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这很简单。现在我们来看看如何应用这个方法来解决一个更难的问题。这是问题的陈述。将给定的n个正整数的列表分为k个连续段，使得最大段和最小化。
- en: That's a lot to take in。 So I think this is best explained with an example。
    So we have this list here with ten elements and we want to partition it into four
    parts。 So one way we can do it is like this。 So the sums are ten， eighteen， six
    and eight respectively。 So the maximum segment sum is eighteen。 And this red number
    here is what we want to minimize。
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要消化很多信息。我认为用一个例子来解释会更好。我们有这个包含十个元素的列表，我们想将其分为四部分。因此，我们可以这样做。这样一来，和分别是十、十八、六和八。因此，最大段和是十八。这里的红色数字是我们想要最小化的。
- en: And it turns out that we can actually do better than eighteen。 If instead we
    partition the list like this， where the sums are ten， ten， twelve and eight。 the
    maximum segment is twelve and it turns out this is optimal。 So to get to solving
    this problem。 it isn't very easy。 We have to first make a few observations。
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，我们实际上可以做得比十八更好。如果我们将列表分区为这样，其中和为十、十、十二和八。最大段和是十二，事实证明这是最佳的。因此，要解决这个问题并不简单。我们首先需要做一些观察。
- en: So the first observation is that if we fix the number m。 it's easy to construct
    a partition where no segment has some exceeding m。 So here's this function I have
    called construct partition。 We take in a list k and m and then we either produce
    a partition satisfying these constraints or just for convenience we return none。
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个观察是，如果我们固定数字m，很容易构造一个没有段和超过m的分区。所以我有一个叫做构造分区的函数。我们输入一个列表k和m，然后要么生成满足这些约束的分区，要么为了方便返回none。
- en: I have no partition exists。 So the idea is to just build each segment one by
    one。 And once we get to a point where our segment sum is about to exceed m。 we
    add the segment to the partition。 And we're going to keep doing this through the
    whole list and you get the idea。 So eventually we end up with our partition from
    the previous slide。 Okay。
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我没有分区存在。所以我们的想法是逐个构建每个段。一旦我们的段和即将超过m，我们就将该段添加到分区。我们会一直这样做，直到整个列表，明白这个思路。因此，最终我们得到了前一张幻灯片中的分区。好的。
- en: so now with this function construct partition， we can decide whether or not
    we can partition the list so that the maximum segment sum is at most m。 And we
    can also provide a construction。 But what we want is to partition the list so
    that the maximum segment sum is minimized。
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有了这个函数构造分区，我们可以决定是否可以对列表进行分区，使得最大段和不超过m。而且我们也可以提供一个构造。但我们想要的是对列表进行分区，使得最大段和最小化。
- en: So to do this， we have to make another observation。 And we're going to look
    at this funny looking list comprehension here。 Here we're going to construct a
    partition for just about every possible value of m that might be interesting to
    us。 From zero to the sum of the whole list。 And this list has a few special properties。
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了做到这一点，我们需要做另一个观察。我们将查看这个奇怪的列表推导。在这里，我们将为可能对我们有趣的每一个 m 值构造一个划分。从零到整个列表的总和。这个列表具有一些特殊属性。
- en: First of all is that the last element is not none。 And this is because any partition
    has the property that the maximum segment sum is at most the sum of the whole
    list。 And also the elements in this list which are partitions are topics of the
    list。 So if you think about this list comprehension structurally。
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，最后一个元素不为 None。这是因为任何划分都有一个属性，即最大段和至多等于整个列表的总和。此外，这个列表中的元素是划分，也是列表的主题。所以，如果你从结构上思考这个列表推导。
- en: it's some number of nuns followed by some number of partitions that you can
    construct。 And then if you look at the first partition， it also has maximum segment
    sum of exactly J。 If we say that this partition is at index J。 And then using
    the same proof by contradiction logic。 we can also show that this first partition
    is actually answer。
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一些零后面跟着一些划分，你可以构造出来。然后如果你查看第一个划分，它也具有恰好 J 的最大段和。如果我们说这个划分在索引 J。然后使用同样的反证法逻辑，我们还可以证明这个第一个划分实际上是答案。
- en: It's the partition that minimizes the maximum segment sum。 Okay。 but if we treat
    all the nuns as zero and all the partitions as ones。 this problem of finding the
    first partition is basically the same。 as the problem that discussed earlier of
    finding the first one in this list of zeros and ones。 Okay。
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最小化最大段和的划分。好的，但如果我们把所有的零视为零，把所有的划分视为一。寻找第一个划分的问题基本上与之前讨论的在这个零和一列表中寻找第一个的那个问题相同。好的。
- en: so this is the code。 That's a pretty short code。 And you'll notice that it's
    actually pretty similar to this first problem I described。 And now I want to take
    some time to revisit the title slide。 So actually an hour before this talk when
    I was preparing。 I realize that this is actually a leak code problem。 Yeah。
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这是代码。代码非常短。你会注意到它实际上与我描述的第一个问题相似。现在我想花点时间回顾一下标题幻灯片。实际上，在这次讲座的一个小时前，我在准备时意识到，这实际上是一个
    LeetCode 问题。是的。
- en: but nonetheless I still think it's pretty interesting。 So this is the code problem
    410 if you want to have a crack at it maybe during lunch。 I think it would be
    pretty interesting。 And that's all。 Thank you。 [applause]。
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，我还是觉得这个问题很有趣。这是代码问题 410，如果你想在午餐时尝试一下，我认为这会很有趣。就这些。谢谢。 [掌声]。
- en: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_41.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_41.png)'
- en: Thanks very much。 All right。 Next up we have Henry who's going to give us a
    talk on Scikit HEP developer pages。 Let's give it up for Henry。 [applause]。
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 非常感谢。好吧，接下来我们有亨利，他将为我们讲解 Scikit HEP 开发者页面。让我们为亨利鼓掌。 [掌声]。
- en: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_43.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_43.png)'
- en: Okay， thank you。 So I want to talk about the Scikit HEP developer pages。 So
    Scikit HEP is a GitHub organization that was built around providing energy physics
    packages。 So we have a bunch of energy physics specific packages that have been
    built up over the last few years。 You can see a few of them listed here。 But we
    have also worked on some general purpose packages as well。
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，谢谢你。那么我想谈谈 Scikit HEP 开发者页面。Scikit HEP 是一个围绕提供能量物理包而建立的 GitHub 组织。在过去的几年里，我们建立了一些特定于能量物理的包。你可以在这里看到一些列出的包。但我们也开发了一些通用包。
- en: So we have some packages that are there like Vector for Vector Manipulations。
    Awkward Array for JSON like data structure but NumPy like Access and Histograms。
    But one of the products that has come out of this is the Scikit HEP developer
    pages。 And this is the most general I think of all of these and that's what I
    wanted to talk to you today about it。
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一些包，比如用于向量操作的 Vector、用于类似 JSON 数据结构但 NumPy 访问和直方图的 Awkward Array。但从中产生的一个产品是
    Scikit HEP 开发者页面。我认为这是所有这些中最通用的，这也是我今天想跟你们谈的内容。
- en: So if you want to find these you can just go to Scikit HEP。org。 It's also linked
    for my blog。 I signed up by Dev and you'll get to a page that looks like this。
    You can click on either of these two places and you'll get to the developer pages。
    So when you get to the developer pages you'll be greeted with something that looks
    like this。
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果你想找到这些，可以直接去Scikit HEP.org。我的博客也链接到这里。我通过Dev注册，你将进入一个看起来像这样的页面。你可以点击这两个地方之一，进入开发者页面。当你进入开发者页面时，会看到这样的界面。
- en: You have a variety of different pages there and it will guide sort of walks
    you through the different pages。 These pages can sort of be grouped into these
    areas。 There are some tutorial like pages that sort of tell you how to set up
    a development environment。 use pytest， static typing， things like that。 Cleaning
    a very nice GitHub actions tutorial including how to do binary packages。
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 你那里有多种不同的页面，它将引导你逐步浏览这些页面。这些页面可以分为这些区域。有一些类似教程的页面，告诉你如何设置开发环境，使用pytest、静态类型等。清理一个非常好的GitHub
    Actions教程，包括如何进行二进制包的操作。
- en: regular Python packages and discussion of how you use a task runner like Knox。
    And then there's some specifications。 The packaging is in two different sort of
    groups or a classic packaging and the simple or six。 twenty-one style packaging。
    And then there's a style guide and then there's a couple extra tools which I'll
    show you cookie and repo review that support this。 So this is the simple Python
    packaging page。 It used to be called pure Python packaging but hopefully this
    is sort of growing to include some binary packaging soon。
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 常规Python包和如何使用任务运行器（如Knox）的讨论。然后有一些规范。打包分为两种不同的类别，经典打包和简单或621风格的打包。还有风格指南以及几个额外的工具，我会给你展示cookie和repo
    review来支持这个。因此，这是简单的Python打包页面。以前称为纯Python打包，但希望这将逐步发展以包括一些二进制打包。
- en: And so you have this little toggle here and you can actually just switch this
    toggle from flip to hatched。 PDM set up tools。 The whole page is the same。 All
    this part of the page is the same。 It's really just that tool that changes。 Just
    those two lines which is a really nice feature of PEP 621。 And so this can be
    a guide for any one of those。 For style there's a bunch of different things。
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你有这个小切换按钮，可以实际将这个切换从flip切换到hatched。PDM设置工具。整个页面是相同的。页面的所有部分都是相同的。真正变化的只是那个工具。仅这两行，这是PEP
    621的一个很好的特点。因此，这可以作为任何一个工具的指南。对于风格，有很多不同的内容。
- en: It sort of tells you how to set up pre-commit hooks for all of these different
    tools with recommendations for how you would configure these。 And sort of describing
    sort of what each one is。 Now this all comes together in second-hep cookie which
    is a cookie cutter package。
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 它基本上告诉你如何为所有这些不同的工具设置预提交钩子，并推荐你如何配置这些工具，并描述每个工具的作用。现在，这一切都聚合在second-hep cookie中，这是一个cookie
    cutter包。
- en: It gives you eleven different back-ins to choose from。 So if you want a set
    of tools。 traditional package or if you want a set of tools at 621 or a flit or
    hatch or PDM or several others。 And it even has some binary packaging which you
    don't see very often in sort of a general cookie cutter。 Something with a second
    build or just plain set of tools C++ or even rest is supported there。
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 它提供了十一种不同的后端供你选择。因此，如果你想要一套工具，传统包，或者想要一套621、flit、hatch、PDM或其他几个工具的工具。它甚至有一些二进制打包，这在一般的模板中并不常见。支持第二个构建或纯粹的C++工具，甚至是rest。
- en: So to do this you could just do a PEP X run cookie cutter or however you like
    to run cookie cutter。 And then that's the path that you can put in。 And this is
    all backed by the Psycadep developer guidelines so you're not just thrown at a
    bunch of different styles and things。
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 所以要做到这一点，你可以直接运行PEP X cookie cutter，或者按你喜欢的方式运行cookie cutter。这是你可以放入的路径。这一切都基于Psycadep开发者指南，所以你不会被抛到一堆不同的风格和东西中。
- en: You can actually go look up and see why each choice is made and why each package
    is there。
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 你实际上可以去查看为什么做出每个选择以及每个包的存在原因。
- en: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_45.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_45.png)'
- en: And then there's the Psycadep repo review。 And this is something that I sort
    of wrote for myself。 This is a rich application。 And you can just run this and
    it will see how close a repository is to following these guidelines。 So it will
    go through and check a variety of these different guidelines。 There's lots of
    different ones here。 And tell you if it matches or not。
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是Psycadep repo review。这是我为自己编写的一个应用程序。这是一个丰富的应用程序。你可以运行它，它会检查一个代码库遵循这些指南的程度。因此，它会逐项检查这些不同的指南。这些指南种类繁多。并告诉你是否匹配。
- en: And this is really nice but it's still something you have to go manually run。
    So what I've recently done is written the Psycadep repo review PiDye app。
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这确实很好，但这仍然是你必须手动运行的东西。因此，我最近写了Psycadep repo review PiDye应用程序。
- en: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_47.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_47.png)'
- en: So this PiDye app sits there in the Psycadep developer pages。 It's just one
    of the pages in that list。 You can just type in your repository。 pick a branch
    and click a button and in your browser， Python。 And this is a Python 3。10 application
    that uses pattern matching and things。
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这个PiDye应用程序就坐落在Psycadep开发者页面中。这只是该列表中的一个页面。你只需输入你的代码库，选择一个分支，然后点击一个按钮，在你的浏览器中，Python。这是一个使用模式匹配等技术的Python
    3.10应用程序。
- en: But it's able to just run right there in your browser without installing anything
    and give。 you a report that looks like this in your browser so you don't have
    to leave the Psycadep developer。 pages anymore。 And a day later another HEP user
    took this。 I was also really excited just in this technology and the ability to
    do this。
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 但它能够直接在你的浏览器中运行，无需安装任何东西，并给你提供一个看起来像这样的报告，这样你就不必再离开Psycadep开发者页面了。一天后，另一个HEP用户采用了这个技术。我对这个技术以及实现这一点的能力也感到非常兴奋。
- en: One day later another of our Psycadep developers took this and adapted it to
    one of the other。 packages there。 So that was something that was exactly what
    I wanted to happen from this。 I was really excited to see other applications。
    Okay。 So， Fett， thank you very much。
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 一天后，我们的另一个Psycadep开发者采用了这个并将其调整到其他包中。这正是我希望从中实现的。我真的很高兴看到其他应用程序。好的，Fett，非常感谢你。
- en: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_49.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_49.png)'
- en: '[Applause]， Thank you so much， Henry。 I just want to do a quick plug。 PiLadies''
    auction is tonight。 It''s a really great organization。 Hence the shirt I''m wearing。
    And it helps us raise money for folks to come to PyCon and do really great things。
    And all that being said， you should grab a ticket if there''s still some left。
    Now。'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '[掌声]，非常感谢你，Henry。我想做一个快速宣传。PiLadies的拍卖会今晚举行。这是一个非常好的组织。这也是我穿着这件衬衫的原因。它帮助我们为人们筹集资金，以便他们能来参加PyCon并做出非常棒的事情。说完这些，如果还有票的话，你应该赶快买一张。'
- en: without further ado， Chris。
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 不再赘述，Chris。
- en: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_51.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_51.png)'
- en: Thank you， Lorena。 Before I begin， I want to tell you about these words here。
    They're thanks to a person called Diane， who is a real human being。 She's sitting
    on the other side of an internet and is typing exactly what I say onto this screen
    for your。 benefits。 I watch this， a Septagenarian， a Fantasia， anti-disestablishmentarianism。
    Thank you。
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 谢谢你，Lorena。在我开始之前，我想告诉你们这些话的来源。要感谢一位名叫Diane的人，她是真实的人类。她坐在互联网的另一边，正在将我所说的内容逐字输入到这个屏幕上，供你们受益。我看到了这一切，七十多岁，幻想，反对国教主义。谢谢。
- en: Diane， and our other captioners。 Okay。 Hi。 My name is Chris。 Please tweet me
    at the handle on your screen。 I'm here to tell you to stop running your tests。
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: Diane和我们的其他字幕员。好的，嗨。我的名字是Chris。请在你的屏幕上关注我的推特。我在这里告诉你们停止运行测试。
- en: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_53.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_53.png)'
- en: But， Chris， I hear you saying tests are how I am confident that my code works。
    And that's true。 Having good test coverage is a great way to be absolutely certain
    that your implementations are correct。 And making sure that you don't break things
    as you develop。 But on the other hand。 tests have a lot of problems。 They're slow。
    When you run your full test suite。
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 但，Chris，我听到你说测试是我对代码有效性的信心所在。这是对的。良好的测试覆盖率是确保实现正确的绝佳方式，并确保在开发过程中不破坏任何东西。但是另一方面，测试有很多问题。它们很慢。当你运行完整的测试套件时。
- en: most of the tests you run are irrelevant to the changes you're making。 But your
    test suite is only correct if you run the entire thing。 But you don't run your
    entire test suite except in CI because it's slow。 So， in short。 you have tests，
    but you don't run your tests。 You have no tests。
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 你运行的大多数测试与你所做的更改无关。但只有在你运行整个测试套件时，才是正确的。但你不会在CI之外运行整个测试套件，因为那样太慢。因此，简而言之，你有测试，但你不运行你的测试。你没有测试。
- en: What would be better is if you could keep not running your tests as often as
    you do now。 but still know which of your tests are correct。 That world actually
    exists。 I'm a maintainer on an open source project called PantsBuild。 where a
    tool that orchestrates all the other tools that you use to interact with your
    code。
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的情况是，如果你能够减少运行测试的频率，但仍然知道你的测试哪些是正确的。这样的世界实际上是存在的。我是一个名为PantsBuild的开源项目的维护者，这是一个协调你与代码交互所使用的所有其他工具的工具。
- en: That's everything from linting and formatting through to testing and packaging。
    Our goal is to make the Python tools you already use more efficient than they
    are in their default configurations。 even on huge code bases with complex interdependencies。
    We do that by identifying work that can be run in parallel or redundant or duplicated
    work。
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 从代码检查、格式化到测试和打包，这一切都是我们的目标。我们的目标是使你已经使用的Python工具比默认配置更高效，即使在拥有复杂相互依赖关系的大型代码库中。我们通过识别可以并行运行的工作或冗余、重复的工作来实现这一点。
- en: which will save you from having to run at all。 Watch this。 You can run an entire
    test suite that is not surprising。 You can see we run PiTest under the hood。 and
    it runs all five of these test suites in parallel。 but it only takes 20 seconds
    walk-o clock time to run this 60 second test suite。 That's great。
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这将节省你完全不需要运行的时间。看这个。你可以运行一个完整的测试套件，这并不奇怪。你可以看到我们在后台运行PiTest，并且它会并行运行这五个测试套件，但运行这个60秒的测试套件只需20秒的时钟时间。这很棒。
- en: but not completely surprising。 A lot of test runners do this。 What else can
    we do？ Well。 if we change one of the test files and rerun the entire test suite，
    it looks like this。 It looks like it runs everything， but it actually doesn't。
    Own all of those tests that we ran before and we didn't change get reused。
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 但并不是完全令人惊讶。很多测试运行器都这样做。我们还可以做些什么呢？好吧，如果我们更改了一个测试文件并重新运行整个测试套件，它看起来像这样。看起来它运行了所有内容，但实际上并没有。之前运行的所有测试中，我们没有更改的部分会被重用。
- en: Only the test that we changed gets rerun。 That is because Pants will cache every
    single run down to the process level。 That's what this mean-alise thing means。
    Our 60 second test suite takes only 10 seconds to run now。 That's still not surprising。
    A lot of test runners do this。 Let's reset that change and run those tests again。
    Pants will cache every test run。
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 只有我们更改的测试会被重新运行。这是因为Pants会将每次运行缓存到进程级别。这就是这个mean-alise的意思。我们60秒的测试套件现在只需10秒就能运行。这仍然不令人惊讶。很多测试运行器都是这样的。让我们重置那个更改，再次运行这些测试。Pants会缓存每次测试的运行结果。
- en: not just the most recent one。 If we run a command that's identical to the one
    we've run before。 Pants will pull all of those test results out of the cache and
    reuse them。 Our 60 second test suite will now run instantly。 Now， what if instead
    of changing a test file。 we change an implementation file that is under test？
    We can rerun the entire test suite。
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 而不仅仅是最近的一次。如果我们运行一个与之前运行的命令相同的命令，Pants将从缓存中提取所有这些测试结果并重用它们。我们的60秒测试套件现在将瞬间运行。那么，如果我们更改的是一个正在测试的实现文件而不是测试文件呢？我们可以重新运行整个测试套件。
- en: and this time the only test we rerun， is the one that tests the implementation
    file that we changed that we're testing。 With this， you can make all the changes
    you want to your implementation files that you like。 and you can rerun the entire
    test suite， and Pants will only rerun the tests that run-。 that the tests where
    you change the code。 This is because Pants does automatic dependency inference。
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这次我们重新运行的唯一测试是我们修改并正在测试的实现文件的测试。通过这样，你可以对你的实现文件进行任何想要的更改，并且可以重新运行整个测试套件，而Pants只会重新运行那些你更改了代码的测试。这是因为Pants会自动推断依赖关系。
- en: It will do static analysis on your code base， and it will figure out all of
    your Python codes dependencies automatically。 This Pants dependencies command
    will show that dependency analysis for you， and again。 it has figured all of this
    out automatically。 We didn't need to do any configuration。 This is all the configuration
    we needed to do。 We just said there are some source files。
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 它会对你的代码库进行静态分析，并自动找出所有Python代码的依赖关系。这个Pants依赖命令会为你显示依赖分析，而且，它是自动完成的。我们不需要进行任何配置。这就是我们需要做的所有配置。我们只是说有一些源文件。
- en: said there are some test files。 If you've ever written a build file before。
    you know how short this is。 You don't have to map any dependencies yourself。 Our
    static analysis。 if it misses a dependency， you can add it manually， but normally
    you don't need to。 You don't even have to write this file yourself。 We have scripts
    that will automatically generate all of your build files。
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 说有一些测试文件。如果你之前写过构建文件，你会知道这有多简短。你不需要自己映射任何依赖关系。我们的静态分析，如果漏掉了一个依赖，你可以手动添加，但通常你不需要。你甚至不需要自己写这个文件。我们有脚本会自动生成你所有的构建文件。
- en: If this is interesting to you and you want more of a demo。 or you want to talk
    about how Pants could help in your code base， you can find myself， or Benji。 or
    John。 They're wearing shirts with the Pants logo on it。 I've got a talk on Sunday
    at one o'clock about how Pants does all this fine-grained caching underneath the
    hood。
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对此感兴趣，并且想要更多演示，或者想谈谈Pants如何在你的代码库中提供帮助，你可以找到我，或Benji，或John。他们身上穿着有Pants标志的衬衫。我在星期天一点钟有一个关于Pants如何在后台实现精细缓存的演讲。
- en: and will be sprinting on Monday， where we will help you run Pants on your own
    code base。
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 并且在星期一我们会进行冲刺，我们将帮助你在自己的代码库上运行Pants。
- en: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_55.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_55.png)'
- en: So come find us at the rest of the conference。 That is how you can use Pants
    to stop running your tests unnecessarily。 My name is Christopher Neuigabauer。
    Thank you very much。
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 所以在整个会议期间来找我们。这就是你如何使用Pants来避免不必要地运行测试。我叫Christopher Neuigabauer。非常感谢。
- en: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_57.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dec71df9a9cccc974b7fc9bc0af9e52c_57.png)'
- en: '[applause]， Can''talope！'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '[掌声]，Cantalope！'
