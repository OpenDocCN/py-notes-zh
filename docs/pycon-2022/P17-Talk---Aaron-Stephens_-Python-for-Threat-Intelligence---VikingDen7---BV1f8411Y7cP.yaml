- en: P17：Talk - Aaron Stephens_ Python for Threat Intelligence - VikingDen7 - BV1f8411Y7cP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P17：演讲 - 亚伦·史蒂文斯《威胁情报的Python》 - VikingDen7 - BV1f8411Y7cP
- en: \>\> Our next talk is Python for Threat Intelligence。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '>> 我们的下一个演讲是“威胁情报的Python”。'
- en: '![](img/8edaa77d1bdfb9d80bbdb5c6512d42b5_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8edaa77d1bdfb9d80bbdb5c6512d42b5_1.png)'
- en: '![](img/8edaa77d1bdfb9d80bbdb5c6512d42b5_2.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8edaa77d1bdfb9d80bbdb5c6512d42b5_2.png)'
- en: Everyone please welcome Aaron Stevens。 \>\> Hi， everyone。 Thanks for coming。
    My name is Aaron and this is Python for Threat Intelligence。 A little bit of background。
    I work at a company called Mandiant and we provide cybersecurity， services for
    other businesses。 You may have heard of us before。 We investigate some of the
    most high profile hacks around the world whether that's criminals。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 大家请欢迎亚伦·史蒂文斯。>> 嗨，大家好。感谢大家的到来。我叫亚伦，这是“威胁情报的Python”。我所在的公司叫做Mandiant，我们为其他企业提供网络安全服务。你可能之前听说过我们。我们调查世界上最引人注目的黑客事件，无论是犯罪分子。
- en: looking to get rich or nation states conducting espionage or other intelligence
    operations。 Now。 as you may have guessed， my team focuses on threat intelligence。
    If you're already lost。 don't worry。 I'm going to go over what that means and
    how we do it in the next few slides。 If I had to summarize what my specific role
    is， it's to provide capability and automation。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 可能是希望致富的人，或者进行间谍活动或其他情报行动的国家。现在，如你所料，我的团队专注于威胁情报。如果你已经感到迷茫，不用担心。我将在接下来的几张幻灯片中讲解这意味着什么以及我们是如何做到的。如果要总结我具体的角色，那就是提供能力和自动化。
- en: for my team。 So basically enabling our analysts to do more of the work that
    they do and help them do it。 faster。 Unless a little disclaimer， I'm not a software
    engineer and I never have been。 I'm an analyst myself。 So I'm not here to tell
    you how to write code or to show off some new cutting edge project。 My goal here
    today is to show you a little bit about what threat intelligence is and。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的团队的目标是让分析师能够完成更多的工作，并帮助他们更快地做到这一点。需要说明的是，我不是软件工程师，也从未做过。我本人是分析师。因此，我今天不是来告诉你如何编写代码或展示一些前沿项目的。我的目标是向你们展示一下威胁情报是什么，以及我们如何使用Python来帮助我们实现这一点。
- en: how we use Python to help us do it。 And by sharing some of the things that we've
    had success with on my team。 my hope is that， it might inspire some of you to
    do something similar in your own work。 So what is threat intelligence？ Threat
    intelligence is knowing about adversaries。 what they do and how they do it。 Mandiant
    conducts hundreds of investigations every single year and it's my team's job to。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望通过分享我们团队成功的经验，能够激励你们在自己的工作中做类似的事情。那么，什么是威胁情报？威胁情报就是了解对手，他们做什么以及如何做到这一点。Mandiant每年进行数百次调查，而我们团队的工作是。
- en: look at all of those investigations and keep track of who's doing what and how
    they're， doing it。 Why do we do this？ To help defenders make informed decisions。
    This may sound like common sense but it helps as a defender to know what you're
    defending， against。 right？ So a customer may ask， what are the most common threats
    targeting my industry and what tools。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们查看所有这些调查，跟踪谁在做什么以及他们是如何做到的。我们这样做的原因是帮助防御者做出明智的决策。这听起来可能是常识，但作为防御者，知道自己在抵御什么是很重要的，对吧？所以，客户可能会问，针对我的行业最常见的威胁是什么，使用了哪些工具。
- en: and techniques do they use？ And last but not least， we do this with data， expertise
    and technology。 I know that sounds super vague but I think it's actually really
    important to understand。 that we need all three of these things working together
    in order to be successful。 To illustrate this， let me walk you through an example。
    Say we have an investigation。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 和技术？最后但同样重要的是，我们通过数据、专业知识和技术来实现这一目标。我知道这听起来非常模糊，但我认为理解这三者的结合非常重要。为了说明这一点，让我给你们讲一个例子。假设我们有一个调查。
- en: One of the first things that we want to do is collect data。 Now when I say data。
    I'm talking about things like files， event logs， network telemetry， pretty。 much
    anything that we can use as forensic evidence during our analysis。 At the same
    time。 we're documenting what happened。 I know this sounds similar to collecting
    data but I think that the key distinction is organization。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要做的第一件事是收集数据。现在，当我说数据时，我指的是像文件、事件日志、网络遥测等，几乎任何我们可以在分析中用作取证证据的东西。同时，我们正在记录发生了什么。我知道这听起来与收集数据相似，但我认为关键区别在于组织。
- en: So if the data that we collect are puzzle pieces， then documenting what happened
    is putting。 those pieces together so that we can begin to see the bigger picture。
    That usually means building a timeline of events and doing something that we call
    modeling。 which I'll talk about in the next slide。 And with this bigger picture
    beginning to take shape。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们收集的数据是拼图碎片，那么记录发生的事情就是将这些碎片拼接在一起，以便我们能够开始看到更大的图景。这通常意味着建立事件时间线，并进行我们称之为建模的工作，我将在下一张幻灯片中谈到。而随着这个更大图景的开始成型。
- en: we start applying context to the， data。 This means taking a deeper look at the
    information that we have。 expanding that information with， additional sources
    and beginning to derive meaning from it。 For example， our collected data might
    show a program is being installed or executed but。 we still want to know what
    that program does。 By reverse engineering the file and understanding what its
    capabilities are。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开始对数据应用上下文。这意味着深入查看我们所拥有的信息，利用额外来源扩展这些信息，并开始从中推导出意义。例如，我们收集的数据可能显示某个程序正在被安装或执行，但我们仍然想知道该程序的功能。通过逆向工程文件并理解它的能力。
- en: this can help us， determine whether it's relevant to our investigation。 When
    we do this for every investigation， it helps us identify patterns across them。
    These patterns become the backbone of our analysis which ultimately allows us
    to make。 assessments about the adversary， their tools and their objectives。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以帮助我们判断它是否与我们的调查相关。当我们对每个调查都这样做时，有助于我们识别出其中的模式。这些模式成为我们分析的支柱，最终使我们能够对对手、他们的工具和目标做出评估。
- en: Focusing more now on expertise and technology， I don't think it's news to anyone
    here that。 computers are better at some things than humans and vice versa。 And
    I think this is especially true here。 And the more that I thought about it。 the
    more that I realized there's kind of this， transition between the two as we work
    through this process。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在更加关注专业知识和技术，我认为这里没有人会对计算机在某些方面优于人类这一点感到惊讶，反之亦然。我认为在这里尤为真实。越是思考，我越意识到在我们处理这个过程时，二者之间存在某种过渡。
- en: Computers are really good at collecting and organizing data and they can help
    us apply。 context and identify patterns if we tell them where to look and what
    to look for。 But ultimately in the end， we still need humans with the right expertise
    to analyze the data。 and turn it into knowledge。 And the last point I want to
    make here is that this process is a cycle and when done well。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机在收集和组织数据方面非常擅长，它们可以帮助我们应用上下文并识别模式，只要我们告诉它们该往哪里看和寻找什么。但最终，我们仍然需要具备正确专业知识的人类来分析数据，并将其转化为知识。我想在这里强调的最后一点是，这一过程是一个循环，当做得好的时候。
- en: feeds itself。 The assessments that we make and the patterns that we identify
    allow us to apply more context。 and better informs our collection。 Now I want
    to quickly cover data modeling which I'll define as a framework for documenting。
    both our data and analysis。 Throughout the course of every investigation and research
    project。 our analysts are carefully， modeling key information in trying the work
    that they've done into an ever growing graph。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这一过程是自我滋养的。我们所做的评估和识别的模式使我们能够应用更多上下文，并更好地指导我们的收集。现在我想快速介绍数据建模，我将其定义为记录我们数据和分析的框架。在每一个调查和研究项目中，我们的分析师都在仔细建模关键资料，并试图将他们的工作融入一个不断扩展的图表中。
- en: This graph serves as the authoritative knowledge base for all of Mandiant。 So
    everything that we know about adversaries， what they do and how they do it lives
    here。 Again。 I think it's easiest to talk about via example。 So let's say that
    we start with a Word document that maybe we found attached in an email at。 a customer。
    You might seem harmless but on closer analysis we determine that the document
    contains a。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这张图表作为Mandiant的权威知识库，包含了我们对对手的所有了解，包括他们的行为及方式。再说一次，我认为通过示例来讨论最为简单。假设我们从一个Word文档开始，也许我们是在客户的电子邮件中找到的。这个文档看似无害，但经过更仔细的分析，我们确定该文档包含一个。
- en: macro that when executed installs a malicious file of some sort。 So we model
    that by connecting these two files or nodes with an edge。 And we're already beginning
    to document what we have and apply context。 So let's keep going。 After our reverse
    engineer analyzes the file， they report that it communicates via HTTPS。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一个宏，当执行时会安装某种恶意文件。因此，我们通过用边连接这两个文件或节点来建模。我们已经开始记录我们所拥有的内容并应用上下文。继续吧。在我们的逆向工程师分析文件后，他们报告该文件通过HTTPS进行通信。
- en: to a domain。 And continuing to expand what we know。 we may also notice a code
    signature for the file， and a resolution for the domain thanks to our passive
    DNS source。 Eventually， we have enough information to assess that this file belongs
    to the malware。 family bad apple。 Identifying malware families is often the first
    big step toward attribution as adversaries。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 针对一个域，并继续扩展我们的知识。我们可能还会注意到文件的代码签名，以及通过我们的被动DNS源获得的域解析。最终，我们拥有足够的信息来评估这个文件属于“坏苹果”恶意软件家族。识别恶意软件家族通常是归因于对手的第一步。
- en: tend to use the same malware families across multiple intrusions。 Which makes
    sense when you think about it。 Bad guys are people too and they like to stick
    to what they know。 Like imagine having to learn a new piece of software every
    time you came into work。 It just doesn't really make sense。 So we've applied our
    malware label to the file along with all the data linked to it。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在多个入侵中往往使用相同的恶意软件家族。这很有道理，想一想，坏人也是人，他们喜欢坚持自己熟悉的东西。想象一下，每次上班都要学习一款新的软件，这实在是没有意义。因此，我们将我们的恶意软件标签应用于这个文件，并附上所有相关的数据。
- en: Signifying that each node is a component of the bad apple ecosystem。 Let's keep
    digging。 We know our malware communicates over HTTPS which means a TLS handshake
    and an X509 certificate。 for the domain。 And here's where things get interesting。
    We can't find any more direct relationships to our certificate but we're able
    to identify。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 表示每个节点是“坏苹果”生态系统的一个组成部分。让我们继续挖掘。我们知道我们的恶意软件通过HTTPS进行通信，这意味着有一个TLS握手和一个X509证书，用于该域。这就是事情变得有趣的地方。我们无法找到与我们的证书更多的直接关系，但我们能够识别出。
- en: a pattern softly linking it to another certificate with a similar organization
    name。 Maybe we saw it recently and we just happened to remember or maybe one of
    our teammates。 codified that pattern into a detection which made the link for
    us。 Either way we've just uncovered a big clue because this certificate has already
    been。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一种模式将其柔和地链接到另一个名称相似的证书。也许我们最近看到过它，我们恰好记得，或者可能是我们的某个队友将这种模式编码成了检测，帮我们建立了联系。无论如何，我们刚刚揭开了一个重要线索，因为这个证书已经存在。
- en: attributed to the adversary Dr。 Evil。 Now we have to be careful when we make
    jumps like this just because two things are similar。 doesn't necessarily mean
    that they're related。 But as we continue to traverse the graph we find that this
    certificate is tied to another。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 归因于对手“邪恶博士”。现在，我们在做出这样的跳跃时必须小心，仅仅因为两个事物相似，并不一定意味着它们有关联。但随着我们继续遍历图形，我们发现这个证书与另一个证书有关联。
- en: bad apple sample including a document much like our own。 And I'm simplifying
    here but with all of these identified overlaps we're eventually。 able to attribute
    our activity to Dr。 Evil expanding our knowledge of this particular， adversary。
    And because we modeled all of it our team can now use that intelligence in their
    own analysis。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 坏苹果样本，包括一份与我们自己的文件非常相似的文档。我在这里简化说，但通过所有这些识别出的重叠，我们最终能够将我们的活动归因于“邪恶博士”，扩展我们对这一特定对手的了解。因为我们对所有内容进行了建模，所以我们的团队现在可以在自己的分析中使用这些情报。
- en: and investigations。 Okay now let's talk about Python。 Thinking about what analysts
    need to do how can we enhance or automate parts of that process。 As I mentioned
    before I think collecting data is the easiest our analysts work with。 so much
    data they shouldn't have to wrangle it all manually so we can automate most of。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以及调查。好吧，现在我们来谈谈Python。考虑分析师需要做什么，我们如何能增强或自动化该过程的某些部分。正如我之前提到的，我认为收集数据是分析师最轻松的工作。他们接触的数据量如此之大，不应该手动处理，所以我们可以自动化其中的大部分。
- en: this with some good IO functionality。 And once we have that data we can also
    organize it according to our data model and publish。 it directly to the graph。
    This way analysts don't have to create every single node and edge by hand。 They
    can jump straight to analysis and focus on the really hard questions that require。
    their expertise。 Applying context and identifying patterns gets a little bit harder
    but we can still help。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这涉及到一些良好的IO功能。一旦我们有了这些数据，我们还可以根据我们的数据模型对其进行组织，并直接发布到图形中。这样分析师就不必手动创建每一个节点和边缘。他们可以直接进行分析，专注于那些真正需要他们专业知识的棘手问题。应用上下文和识别模式会变得稍微困难一些，但我们仍然可以提供帮助。
- en: by giving analysts easy access to data sources， extract and model the key information
    we get。 from those sources and generate detections。 And finally our mission is
    to enable analysts but we can't replace them。 They still need to be in the driver
    seat telling us what they need so that we can go and get， it。 In other words we
    need a UI。 So over the next several slides I'll be covering the Python packages
    that we use。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 通过给分析师提供对数据源的便捷访问，提取和建模我们从这些源获取的关键信息，并生成检测。最后，我们的使命是赋能分析师，但我们无法取代他们。他们仍然需要在驾驶座上告诉我们他们的需求，以便我们能够去获取它。换句话说，我们需要一个用户界面。因此，在接下来的几张幻灯片中，我将介绍我们使用的Python包。
- en: the features， we like and some examples of how we use them。 The first one I
    want to talk about is argpars。 We use argpars for all of our command line input。
    We like it because it's part of the standard library。 It's really easy to use
    and it's well documented。 It comes with a ton of default functionality without
    having to write a lot of code but it's。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们喜欢的功能，以及我们如何使用它们的一些示例。我想谈的第一个是argpars。我们使用argpars来处理所有的命令行输入。我们喜欢它，因为它是标准库的一部分。它使用起来非常简单，文档也很好。它提供了大量默认功能，而不需要编写很多代码，但它。
- en: still flexible enough for our various use cases。 You can see here that with
    what is that five lines of code we get a ton of functionality。 telling our analysts
    about the tool and how to use it。 Another thing about argpars that we really like
    is that it allows us to define arguments。 that we can then use across multiple
    argument parsers。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然足够灵活以满足我们的各种使用案例。你可以看到，使用这五行代码，我们得到了很多功能。告诉我们的分析师关于工具及其使用方法。我们非常喜欢argpars的另一个特点是，它允许我们定义参数。然后我们可以在多个参数解析器中使用这些参数。
- en: So for example say we want an argument that allows us to define the log level
    that we。 want to output。 We can store that in say like a core args module and
    then in another module we can just。 import it and stuff it into an argument parser。
    And as you can see it's right there showing us exactly how to use it without any
    extra。 code。 This makes it really easy to have like a good base of arguments that
    we can then use across。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，假设我们想要一个参数，允许我们定义我们想要输出的日志级别。我们可以将其存储在一个核心参数模块中，然后在另一个模块中，我们可以简单地导入它并将其放入参数解析器中。正如你所看到的，它就在那里，向我们展示了如何使用它而无需任何额外的代码。这使得拥有一个良好的参数基础变得非常简单，我们可以在多个地方使用。
- en: our project。 Speaking of logging we try and use a logging package really heavily
    throughout our project。 and not only helps us test functionality in triage bugs
    but it also gives our analysts。 more control over the output that they get。 We
    like to use this for file I/O。 HTTP requests and error handling。 The exception
    method there on the bottom right I think is particularly cool because it not。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的项目。说到日志记录，我们在整个项目中非常频繁地使用日志包。它不仅帮助我们测试功能和解决错误，还让我们的分析师对他们获得的输出有更多的控制。我们喜欢将其用于文件输入输出、HTTP请求和错误处理。右下角的异常方法我觉得特别酷，因为它不仅。
- en: only tells us that we got an error but it also logs the entire trace back for
    us as well。 For console output we really love the package rich and I'm sure a
    lot of you do too。 Rich gives us automatic highlighting， colors， styling and even
    emojis。 And that's really just the surface of it。 It also provides things like
    tables， syntax highlighting。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 它不仅告诉我们发生了错误，还会记录整个追溯信息。对于控制台输出，我们真的很喜欢这个rich包，我相信你们中的许多人也是如此。Rich为我们提供了自动高亮、颜色、样式，甚至表情符号。这只是它表面的一部分。它还提供了像表格、语法高亮等功能。
- en: markdown， better tracebacks， progress bars and so so so much more。 I highly
    recommend checking it out if you haven't already。 And for the specific things
    that we need highlighted that might not be covered by the default。 regex highlighter
    that's included we can make our own。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Markdown，更好的追溯信息、进度条，还有更多更多的功能。如果你还没有使用过，我强烈推荐你去看看。对于我们需要高亮显示的具体内容，如果默认的正则表达式高亮器未能覆盖，我们可以自己制作。
- en: Pretty much anything that you can specify with a regex you can easily make a
    highlighter。 for and then that just becomes automatic when you print things out。
    So you can see here that we've made one for MD5 hashes something that's really
    common。 for us in threat intelligence。 Another feature of rich that we really
    like is the logging handler。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎任何你可以用正则表达式指定的内容，你都可以轻松制作一个高亮工具。然后当你打印东西时，这就变得自动化了。所以你可以看到，这里我们为MD5哈希制作了一个高亮工具，这在威胁情报中是非常常见的。我们非常喜欢rich的另一个功能是日志处理器。
- en: The rich handler by default adds a ton of extra output to logging things like
    time stamps。 a better formatting all of the same highlighting that we get with
    the print statements and。 the location in the file where that log message was
    generated from。 Because we interact with so many different data sources we need
    to be able to make lots。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，丰富的处理程序会向日志添加大量额外输出，例如时间戳。更好的格式化可以保留我们在打印语句中获得的所有相同高亮，以及生成该日志消息的位置。由于我们与许多不同的数据源交互，我们需要能够进行大量的。
- en: of HTTP requests to various APIs both internal and external。 We really like
    to use HTTPX。 One reason is because it's both synchronous and asynchronous so
    depending on our use case。 we don't need multiple packages to do one or the other
    we can just import HTTPX and that's， it。 Also it's really similar to requests
    so if it's something that you're interested in and。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP 请求，涉及各种内部和外部 API。我们非常喜欢使用 HTTPX。一个原因是它既支持同步又支持异步，所以根据我们的用例，我们不需要多个包来完成其中一个，我们只需导入
    HTTPX，便可满足需求。此外，它与 requests 非常相似，因此如果你对此感兴趣。
- en: you're already familiar with requests it makes it a lot easier to port over。
    One particular feature of HTTPX that I think is really cool is the event hooks。
    So for any request or response if we want to do something to that request or response。
    before it goes out or comes in respectively then we can create an event hook to
    make that， happen。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为 HTTPX 的一个特别酷的功能是事件钩子。因此，对于任何请求或响应，如果我们想在请求发出或响应到达之前对其进行处理，我们可以创建一个事件钩子来实现这一点。
- en: For example if we have say like an API that we need specific authorization for
    then we。 can create an event hook that will automatically add like a token in
    when it sees that we're。 making a request to that specific host。 Then we can just
    import that client into another module and we don't have to worry about authorization。
    in our other code。 In thinking back to data modeling we need a way to represent
    data as nodes and edges。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们有一个 API 需要特定的授权，那么我们可以创建一个事件钩子，在发现我们对特定主机进行请求时自动添加一个令牌。然后，我们可以将该客户端导入另一个模块，而不必担心其他代码中的授权。在回顾数据建模时，我们需要一种将数据表示为节点和边的方式。
- en: We do this with simple classes。 So for example we have a class node that it
    might take a type and maybe some properties。 And then we have a method so that
    we can add tags to it aka apply context。 And then on top of building on top of
    that we can also create an edge class that takes。 nodes and relates them together。
    Then we can use those to build a data model which kind of specifies the exact
    types of。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过简单的类来做到这一点。例如，我们有一个类节点，它可能接受一个类型和一些属性。然后我们有一个方法，可以为其添加标签，也就是应用上下文。在此基础上，我们还可以创建一个边类，将节点关联在一起。然后，我们可以使用这些构建数据模型，以指定确切的类型。
- en: nodes and edges that we want to be able to create。 At the same time we can also
    build in some validation here to make sure that we're not。 modeling anything that
    doesn't make sense。 In the same class but I couldn't fit it here so we just pretend
    it's further down。 We also can create a payload which transforms those nodes and
    edges into whatever it is that。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望能够创建的节点和边。同时，我们也可以在这里进行一些验证，以确保我们没有建模任何不合逻辑的内容。在同一个类中，但我无法在这里放下，所以我们假装它在下面。我们还可以创建一个有效载荷，将这些节点和边转换为你已经熟悉的请求，这样可以更容易地移植。
- en: our API accepts say it's JSON and we can use our auth client that we just talked
    about。 from HTTPX and submit that automatically to our graph。 For an example let's
    say that we want to model network scan data。 So we have a function here model
    scans and say it takes an instance of our data model。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 API 接受 JSON，我们可以使用刚才提到的身份验证客户端，通过 HTTPX 自动提交到我们的图形中。例如，假设我们想建模网络扫描数据。这里有一个函数
    model scans，它接受我们的数据模型实例。
- en: and a bunch of scans that maybe we got from an API。 For each scan we pull out
    the IP and the port and we can model that as a node。 And then if we're particularly
    interested in TLS data we can then parse out the certificate。 pull that as a file，
    apply some context for say if it's self-issued and then we can link。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以及从 API 获取的一些扫描数据。对于每个扫描，我们提取 IP 和端口，并将其建模为一个节点。如果我们特别关注 TLS 数据，我们可以解析出证书，将其作为文件提取，应用一些上下文，比如如果它是自签名的，然后我们可以链接。
- en: those two nodes together with an edge。 Then we can display all of that information
    that we've modeled and by the way it looks。 super awesome because of rich and
    then we can submit that to the graph if the user so chooses。 As modeling data
    from sources we also often need to inspect files that we found。 The most common
    type of file that we deal with are PEs so executables on windows。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个节点加上一个边。然后我们可以展示我们建模的所有信息，而这些信息看起来非常酷，因为它丰富，用户可以选择将其提交到图中。作为来自不同来源的数据建模，我们通常也需要检查我们找到的文件。我们处理的最常见文件类型是PE，即Windows上的可执行文件。
- en: One of the packages that we use a law is called PE file。 This package is really
    awesome for parsing pretty much anything and everything that you。 could ever want
    out of a PE。 So for example here we pass it some bytes and then we can pull out
    the things we want like。 the compile time stamp， the rich hash， the import hash，
    so on so forth。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的一个包称为PE file。这个包非常出色，可以解析几乎所有你想要从PE中提取的信息。例如，我们传递一些字节，然后可以提取我们想要的内容，比如编译时间戳、rich哈希、导入哈希等等。
- en: And then going a little bit further we can also parse out the code signature。
    It's not as easy to do but I've got an example here of how to get that done and
    once we have。 the bytes we can hand it off to another package ASN1 crypto which
    will then automatically。 parse all of the certificates for us。 Much in the same
    way we can then pull out the specific data points from those certificates。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 再进一步，我们还可以解析代码签名。虽然这并不是那么简单，但我这里有一个示例说明如何完成，一旦我们有了字节，我们可以将其交给另一个包ASN1 crypto，它将自动为我们解析所有证书。以同样的方式，我们可以从这些证书中提取特定的数据点。
- en: that we're interested in and do whatever we want with them， display them， use
    them for， detections。 all that good stuff。 So when I talk about generating detections
    I think probably the most common one。 not， only for us but across the industry
    are Yara rules。 I've got an example here and a link if you want to check it out。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们感兴趣的事情，随心所欲地处理它们，展示它们，用于检测，所有这些好东西。因此，当我谈到生成检测时，我认为最常见的一个，尤其是对我们和整个行业而言，是Yara规则。我这里有一个示例和一个链接，如果你想查看。
- en: Yara rules like I said are pretty much industry standard。 It's all open source。
    it's extensible and there are a bunch of default modules for things， like PEs。
    things like generating hashes and it has a Yara package， which lets you run。 all
    of your rules against files and all that other good stuff。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Yara规则，如我所说，几乎是行业标准。它完全开源，可扩展，并且有许多默认模块用于诸如PE这样的东西，生成哈希的东西，还有一个Yara包，可以让你在文件上运行所有规则，以及所有其他好东西。
- en: But at the end of the day Yara rules are really just strings and so once we
    have the data from。 these files that we want it makes it really easy to then generate
    these boilerplate detections。 So for example if we have a serial number and a
    common name for a certificate that we're。 interested in we can create a Yara rule
    and then we can look for any PE file that might。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 但归根结底，Yara规则其实就是字符串，因此一旦我们获得了来自这些文件的数据，我们就能轻松生成这些样板检测。例如，如果我们有一个序列号和一个我们感兴趣的证书的常见名称，我们可以创建一个Yara规则，然后查找任何可能的PE文件。
- en: contain that certificate。 Or with a rich hash from a PE we can use the hash
    module and PE modules to look for that。 exact same hash in another file。 These
    are both really good examples of ways that we look for similar malware across
    our。 data set。 And then finally I want to talk a little bit about engineering
    without engineers。 As I explained before we don't have any engineers on my team。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 包含该证书。或者通过PE的rich哈希，我们可以使用哈希模块和PE模块在另一个文件中查找相同的哈希。这两个都是我们在数据集中寻找类似恶意软件的良好示例。最后，我想谈谈没有工程师的工程。如我之前所述，我的团队中没有任何工程师。
- en: We're all just analysts trying to make do with a Python that we know。 And so
    my advice for others who maybe are in a similar situation is to start small。 Think
    about the things that you do every day that take a lot of time that are tedious。
    but that don't require a lot of brain power。 The boring stuff。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都是分析师，尽力使用我们所知道的Python。因此，我给其他可能处于类似情况的人的建议是从小做起。考虑一下你每天做的那些耗时且乏味的事情，但又不需要太多脑力的工作。无聊的东西。
- en: The more that you can automate these things the more that you can focus on the
    stuff that。 really matters the stuff that really needs your attention and honestly
    the stuff that's。 more fun anyways。 Next I would say invest in your environment。
    Get yourself an IDE that really works for you。 I love VS code。 PyCharm is great
    too。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你能自动化这些事情的越多，就能越专注于真正重要的事情，真正需要你注意的东西，老实说，反正这些东西更有趣。接下来，我会说投资于你的环境。给自己找一个真正适合你的IDE。我喜欢VS
    Code。PyCharm也很棒。
- en: There's a lot of like built-in extensions specifically for Python and some of
    the folks。 that work on that are here at the conference。 Then I would say look
    at things like automatic formatting and linting。 Projects like black， like pilot。
    These can really help you catch bugs and make your code more readable。 more understandable。
    Not only for you but for others。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多内置的扩展专门为Python而设，参与这方面的朋友们在会议上。然后我会说看看自动格式化和代码检查的工具。像black、pilot这样的项目，真的能帮助你捕捉漏洞，让你的代码更易读，更易理解。不仅是为了你自己，也为了别人。
- en: And then remember that productivity is better than perfection。 We're not software
    engineers but we don't have to be。 We're not trying to ship a product that needs
    to be absolutely perfect that has no bugs。 We don't want bugs but we're not afraid
    of them either。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然后记住，生产力比完美更重要。我们不是软件工程师，但也不必成为。我们不是在试图推出一个绝对完美、没有漏洞的产品。我们不希望有漏洞，但也不害怕它们。
- en: Any little improvement that we can make in our process is a win。 Any time that
    we can save it allows us again to focus on those things that need our attention，
    more。 That's pretty much it。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在流程中能做出的任何小改进都是一种胜利。任何节省下来的时间都能让我们再次专注于那些需要我们关注的事情，更多。差不多就是这样。
- en: '![](img/8edaa77d1bdfb9d80bbdb5c6512d42b5_4.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8edaa77d1bdfb9d80bbdb5c6512d42b5_4.png)'
- en: Thank you。 [APPLAUSE]， (clapping)。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 谢谢。 [掌声]，（鼓掌）。
- en: '![](img/8edaa77d1bdfb9d80bbdb5c6512d42b5_6.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8edaa77d1bdfb9d80bbdb5c6512d42b5_6.png)'
