- en: P25：Talk - Bianca Rosa_ Observability driven development - VikingDen7 - BV1f8411Y7cP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P25：演讲 - 比安卡·罗莎_ 可观察性驱动开发 - VikingDen7 - BV1f8411Y7cP
- en: Good afternoon everyone。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 大家下午好。
- en: '![](img/afc07cc15714b17c6f06e9f80ab5c779_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/afc07cc15714b17c6f06e9f80ab5c779_1.png)'
- en: '![](img/afc07cc15714b17c6f06e9f80ab5c779_2.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/afc07cc15714b17c6f06e9f80ab5c779_2.png)'
- en: Today we are in room 355 for the 230 talk all the way from Rio Brazil， Software
    Developer， Bia。 with her presentation observability driven development。 Hi， just
    testing。 Hello。 I'm super trillate to be here， Picon， and I'm going to talk about
    observability。 different development， or more like invite you a little bit to
    think about observability。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 今天我们在355号房间进行230场来自巴西里约热内卢的软件开发者**比亚**的演讲，主题是可观察性驱动开发。嗨，只是在测试。你好。我很兴奋能在这里，Picon，我将谈论可观察性，或者更确切地说，邀请你们思考一下可观察性。
- en: before things start to crash in production。 I hope you've all been there。 It's
    a fun ride when things start crashing production。 So first， just like I've been
    presented。 I'm Bianca。 I'm also known as Bia， and from Brazil， Rio more specifically，
    which is like amazing。 city， beautiful if you ever want to meet Rio。 It's going
    to be amazing。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在事情开始在生产环境中崩溃之前。我希望你们都经历过。当事情在生产环境中崩溃时，那是一段有趣的旅程。所以首先，正如我所介绍的，我是比安卡。人们也称我为比亚，来自巴西，更具体地说是里约，那里是一个令人惊叹的城市，风景如画。如果你有机会去里约，绝对会很棒。
- en: And we have an amazing Python community in Rio too。 We use to have meetings
    every last Saturday of the month before the pandemic。 So at some point we're going
    to resume all the meetings and hopefully get back to a more。 active community。
    And right now I'm building something new at a startup called Lumos。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在里约也有一个很棒的Python社区。我们通常在每个月的最后一个星期六举行会议，在疫情之前。所以在某个时刻我们将恢复所有会议，希望能让社区变得更加活跃。而现在我在一个叫做Lumos的创业公司里构建一些新东西。
- en: My focus is engineering， but we are like this super tiny startup， it's still
    in stealth， mode。 We work around the field of productivity， identity， and compliance。
    You're going to hear from us soon hopefully。 And previously I worked at Head Hat。
    building a platform for the Ralph Red Systems， and at， Stone， which is like a
    Brazilian FinTech。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我的重点是工程，但我们是一个超级小的初创公司，目前仍处于隐身模式。我们专注于生产力、身份和合规性领域。希望你们很快会听到我们的消息。之前我在红帽工作，构建Ralph
    Red系统的平台，还在Stone工作，这是一家巴西金融科技公司。
- en: And most of the time I was working as a backend developer， DevOps engineer，
    sometimes leading。 small teams， sometimes doing a little bit of management， but
    that wasn't for me， so I。 came back to an IC role。 So before I dive to Jib， I
    want to talk about how things develop， CI/CD。 Cloud Infrastructure， Observability。
    I also go a lot。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数时候我在作为后端开发者、DevOps工程师工作，有时领导小团队，有时做一些管理工作，但那不是我想要的，所以我回到了个人贡献角色。在我深入Jib之前，我想谈谈事情的发展、CI/CD、云基础设施、可观察性。我也有很多相关经验。
- en: I'm a Go developer just like I am a Python developer。 I'm still a Waterforce
    Crash player。 I grew up playing Pokemon and Ragnarok during countless nights。
    I'm passionate about Coffee and Beer。 When I used to listen， I threw a lot of
    rock 'n' roll。 but nowadays I go and I listen to， pop and rag it on so I don't
    know what happened。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我是一名Go开发者，和我是一名Python开发者一样。我仍然是Waterforce Crash的玩家。我小时候熬夜玩宝可梦和 Ragnarok。我热爱咖啡和啤酒。过去我喜欢听摇滚乐，但现在我听流行音乐，所以我不知道发生了什么。
- en: I think it's the 30s catching up with me。 And I like Wabs， your beauty systems。
    systems architecture， and Python obviously。 Otherwise I wouldn't be here at Python。
    First question is like why do we develop software？ Like why are we software developers？
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我觉得是30岁在追赶我。我喜欢Wabs，你的美丽系统，系统架构，以及Python，显然。否则我不会在Python这里。第一个问题是，为什么我们开发软件？为什么我们是软件开发者？
- en: I know that some of us think this is going to be just a job， but even if it
    is， why do。 we have that job？ Like why is there a need in the market for that？
    Why is it such in high demand？
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道我们中的一些人认为这只是一份工作，但即使是这样，为什么我们会有这样的工作呢？市场上为什么会对它有需求？为什么它如此抢手？
- en: There are many possible answers to that， but one that I particularly like is
    that people。 need it or people want it。 People are the users of first softwares，
    the end users。 We can have a lot of discussion of whether this software is going
    to benefit our society， or not。 but even if it's something super silly， like gamers
    or not， people are going to use。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对此有很多可能的答案，但我特别喜欢的一点是人们需要它，或者说人们想要它。人们是软件的首要用户，最终用户。我们可以讨论这些软件是否能给我们的社会带来益处，但即使是一些非常愚蠢的东西，比如游戏，大家也会使用。
- en: it and you want people to use it。 So someone's needs have to be met。 And software
    is to meet someone's expectations。 Even in machine learning。 when you don't interact
    with it directly， you do want something， out of it。 You want your software to
    learn something and give you a particular output。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想让人们使用它，那么某人的需求必须得到满足。软件是为了满足某人的期望。即使在机器学习中，当你没有直接互动时，你也希望从中获得一些东西。你希望你的软件学习并给你特定的输出。
- en: When you're just studying， you want to get something out of it。 And what happens
    when that expectation is a math？ It's a bit hard to manage。 Sometimes a user wants
    to load a webpage and it can't。 A user expects to do something and they just can't。
    They just couldn't do it because software crashes sometimes。 And not meeting expectations
    generates a lot of frustration。 And business， that means money。 We lose money
    because we're not meeting our users' expectations。 So normally。 there's frustration
    and we enter the problem solving mode and start putting， out fires。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在学习时，你希望从中得到一些东西。如果那个期望是数学问题，情况就有点难以管理。有时用户希望加载一个网页，但无法实现。用户期待做某事，但就是无法做到。他们之所以不能，是因为软件有时崩溃。而未能满足期望会产生很多挫折感。这对商业而言意味着损失。我们因为没有满足用户的期望而失去金钱。因此，通常会有挫折感，我们进入问题解决模式，开始扑灭火灾。
- en: And normally， there's a bug in production。 The developer goes crazy。 goes insane
    and tries to fix it right away， especially when， it's a P0 or one bug。 And we
    often realize that we don't have enough data。 We think of observability way too
    late when there is a problem that is already happening。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，生产环境中会出现一个bug。开发者会变得疯狂，甚至失去理智，尤其是当这个bug是P0级别时。他们会立刻尝试修复，而我们常常意识到数据不足。我们在问题发生时，才过于晚地考虑可观察性。
- en: and it's already hard to figure out what's going on。 So this is sort of an open
    invitation to live in fight or flight mode， the anxious moment。 where you have
    to fix everything super fast because it's broken。 And think about this beforehand。
    What can we do when we're just starting， when we are just creating our POC or
    MVP or studying。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，已经很难搞清楚发生了什么。这就像是一个公开的邀请，生活在战斗或逃跑模式下，那种焦虑的时刻。你必须快速修复一切，因为它坏了。事先考虑这个问题。当我们刚开始时，当我们刚创建我们的POC或MVP或学习时，我们能做些什么？
- en: our app， what can we do so that when it reaches production， it is easier for
    us to figure out。 what's going on。 So I'm going to go through APM logging tools
    and setting up your application。 A small problem。 I'm going to talk about good
    logging practices and a slight more complex performance issue。 I have to fix that
    slide and find the root cause of that problem。 First。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序，我们能做些什么以便在到达生产环境时，更容易搞清楚发生了什么。我将讨论APM日志工具和应用程序的设置。一个小问题。我会谈论良好的日志实践和稍微复杂的性能问题。我必须修复那张幻灯片，找到该问题的根本原因。
- en: when I talk about observability， I think one of the first things that come to。
    my mind when I'm my background is mostly around back-end development focused to
    web。 is that we need an APM logging tool and set up an app。 Most of those apps。
    most of those solutions come with both。 So it's fine to choose one tool or a combination
    of two。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当我谈论可观察性时，我想到的第一件事是我的背景主要集中在以web为中心的后端开发上。我们需要一个APM日志工具并设置一个应用程序。大多数这些应用程序，解决方案都包含这两者。因此，选择一个工具或两者的组合都是可以的。
- en: There are some famous ones over there。 We have LASX， with LASX search。 We have
    New Relic。 We have Datadog。 We have Honecom。 We have LASX tab。 We have Splunk。
    I use the couple over my， my。 my jobs， my， my career。 I don't have like a preference
    and I don't work for any of these companies。 So I also like， I'm going to， I actually
    chose New Relic because it's the one that I have。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 那里有一些著名的工具。我们有LASX，配有LASX搜索。我们有New Relic。我们有Datadog。我们有Honecom。我们有LASX标签。我们有Splunk。我在我的工作生涯中使用过几个，我没有偏好，也不为这些公司工作。因此，我实际上选择了New
    Relic，因为这是我所拥有的。
- en: more experience but I like a particular preference。 It really depends on your
    use case and you have to go through the functionalities。 And if you want something
    to think about and consider like there's open telemetry which。 I highly consider
    if you like open source， if you want to like something that is not going。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 更多的经验让我有了特定的偏好。实际上，这很依赖于你的用例，你必须了解功能。如果你想考虑一些事情，比如开源的开放遥测，我非常推荐，如果你喜欢开源且希望不受限制。
- en: to lock you in particular vendor。 Telemetry is going to be like a collection
    of two export telemetry data and that telemetry。 data is going to go from your
    app to a solution。 So New Relic can consume data from open telemetry。 Datadog
    can probably do the same。 LASX can probably do the same。 So you can just learn
    how to have that data exported in a format that is famous and known， by tools。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 将你锁定在特定供应商。遥测将是导出遥测数据的集合，这些遥测数据将从你的应用发送到一个解决方案。因此，New Relic 可以从开放遥测中获取数据。Datadog
    可能也能做到这一点。LASX 可能也能做到。所以你可以学习如何将这些数据导出为一个知名的格式，供工具使用。
- en: Like I said， New Relic for Datadog。 The reasoning like more。 more experience
    and I didn't want to learn something you just， represent here。 It's anxious。 I'm
    anxious enough just without learning something new。 So let's not do that。 And
    I came up with the most boring example app that I'm learning。 You can come up
    with this。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我所说的，New Relic 针对 Datadog 的原因是更多的经验，我不想学习一些你在这里只是表示的东西。这令人焦虑。我光是没有学习新东西就已经很焦虑了。所以我们不这样做。我想出了一个最无聊的示例应用，我正在学习。你可以提出这个。
- en: So I am going to open that app and I want to go through it and show how New
    Relic set。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我要打开那个应用，想要逐步演示 New Relic 的设置。
- en: '![](img/afc07cc15714b17c6f06e9f80ab5c779_4.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/afc07cc15714b17c6f06e9f80ab5c779_4.png)'
- en: up on it。 So let me do that here。 This is our example app。 And New Relic set
    up here through。 I have a main。py over there。 And you just import New Relic agent
    to your app。 And you initialize it and register。 When you do that in your application。
    New Relic is going to be plug it and going to， look at all of the function calls
    that you have in your app。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 把它启动。所以让我在这里进行。这是我们的示例应用。通过 New Relic 设置。那边有一个 main.py。你只需将 New Relic 代理导入到你的应用中。然后初始化并注册。当你在你的应用中这样做时，New
    Relic 将会连接并查看你应用中的所有函数调用。
- en: It's going to inspect your application when it's running in production mode。
    One thing that I've seen is that there's no reason to not do that when you're
    just starting。 an app like with New Relic or another tool。 Because it's like four
    lines of code sometimes。 So we don't do that because no， we want to do it faster。
    But we end up with less data in production。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的应用在生产模式下运行时，它将检查你的应用。我看到的一件事是，当你刚开始使用像 New Relic 或其他工具的应用时，根本没有理由不这样做。因为有时这只需要四行代码。因此我们不这样做，因为不，我们想要更快。但是我们最终在生产中得到的数据更少。
- en: So here we have a flashcap， very simple one。 Non-production ready code。 Don't
    copy that。 And I also created a database here。 Populated schema。 There are a couple
    of things here。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们有一个非常简单的 flashcap。不是生产就绪代码。不要复制它。我还在这里创建了一个数据库。填充了架构。这里有几个东西。
- en: '![](img/afc07cc15714b17c6f06e9f80ab5c779_6.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/afc07cc15714b17c6f06e9f80ab5c779_6.png)'
- en: And when I run like Docker and Compose here， like right here， that Compose app，
    this application。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当我在这里运行 Docker 和 Compose 时，就在这里，这个 Compose 应用程序，这个应用。
- en: '![](img/afc07cc15714b17c6f06e9f80ab5c779_8.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/afc07cc15714b17c6f06e9f80ab5c779_8.png)'
- en: is going to be up and running。 Your key is like about other things that I have
    here。 It's going to be on GitHub so you can go to later。 And I'm going to just
    make a request to make sure it's working。 We'll bring that here。 You just have
    to figure out the whole monitor setup because options。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这个系统即将启动。你的关键在于其他我这里的事情。它会在 GitHub 上，因此你可以稍后查看。我只是想发出请求以确保它正常工作。我们会把它放到这里。你只需弄清楚整个监视器设置的选项。
- en: So here we have a different kind of postman which is in Sonya。 I really like
    to。 So if you ever want to try it out。 You can do a hell check in our app。 We
    can create a new task。 I have a cat。 His name is Marcellinum。 I bought a leash
    for him and I go out with him。 It's funny。 He has a check talk。 So I can create
    a task to go out with Marcellinum。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们有一个不同的 postman，它在 Sonya 中。我真的很喜欢。所以如果你想尝试一下，可以在我们的应用中进行健康检查。我们可以创建一个新任务。我有一只猫，名字叫
    Marcellinum。我给他买了一条牵引绳，带他出去。这很有趣。他有一段闲聊。因此我可以创建一个任务，带着 Marcellinum 出去。
- en: And there are a couple of things that my app can do。 It's just a to-do list。
    It's a very simple one。 And like I said， we have a new relic setup。 So I'm going
    to move that to a new window。 And I will also move that。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我的应用可以做几件事。这只是一个待办事项列表。非常简单。正如我所说，我们已经设置了 New Relic。因此我将把它移动到一个新窗口。我也会移动它。
- en: '![](img/afc07cc15714b17c6f06e9f80ab5c779_10.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/afc07cc15714b17c6f06e9f80ab5c779_10.png)'
- en: So whenever there's a new request， I just sent one。 A new relic is just going
    to look through my app。 And it's a experimentation platform。 You can see all the
    requests that happen。 The transaction is like， OK， there was a patch。 There was
    a list task。 There was a create task here。 A hundred rate success。 Slowest trace。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 每当有新的请求时，我只发送一个。New Relic将查看我的应用程序。这是一个实验平台。你可以看到所有发生的请求。交易就像，好的，有一个补丁。有一个列表任务。这里有一个创建任务。成功率一百。最慢的跟踪。
- en: which is amazing。 One thing that I really like is service maps。 So if it makes
    external calls。 like to a service or a post， queries database， it has everything
    here。 But I don't work for new relics。 So hope they give me swag after this。 And
    it also shows logs。 like something， that is really cool to you。 You can have like
    infinite point hit。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这太神奇了。我真的很喜欢服务地图。所以如果它进行外部调用，比如调用一个服务或一个POST，查询数据库，这里有所有信息。但我并不为New Relic工作。所以希望他们在之后给我一些周边产品。它还显示日志，像是一些对你来说真的很酷的东西。你可以有无限的点命中。
- en: And have your log here。 We did a couple of cool things。 And let's go back to
    the presentation now。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有你的日志。我们做了一些很酷的事情。现在让我们回到演示中。
- en: '![](img/afc07cc15714b17c6f06e9f80ab5c779_12.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/afc07cc15714b17c6f06e9f80ab5c779_12.png)'
- en: So probably， what happens if a user tries to add a task， without a description，
    something like that？
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如果用户尝试添加一个没有描述的任务，会发生什么呢？
- en: '![](img/afc07cc15714b17c6f06e9f80ab5c779_14.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/afc07cc15714b17c6f06e9f80ab5c779_14.png)'
- en: Let's try that。 I'm going to try to create a task here without a description，
    like just empty body。 I know that normally you want to check for that。 The user
    is going to get feedback。 But what if you forgot what something happened？ Yours
    are got internal server error。 It's complaining。 I cannot create my task。 You
    talk， you're a bad developer。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试试这个。我打算在这里创建一个没有描述的任务，就像是空的主体。我知道通常你会检查这个。用户将会得到反馈。但如果你忘记发生了什么呢？你会遇到内部服务器错误。它在抱怨。我无法创建我的任务。你说，你是个糟糕的开发者。
- en: I'm not going to sign up for you to do listening work。 And when you look at
    the logs。 you just say like， exception。 OK， exception。 Could not create。 What
    happened？ Like。 how can I make that user happy again？ How can I let them know
    that， oh， OK， what happened is。 I had to try to create a task without description。
    I had a problem。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会让你注册来做监听工作。当你查看日志时，你只会说，像是异常。好的，异常。无法创建。发生了什么？我该如何让用户再次快乐？我该如何让他们知道，哦，好的，发生的事情是。我尝试创建一个没有描述的任务。我遇到了问题。
- en: I didn't create my API in a way that you would have a good， feedback about it。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我没有以一种能让你获得良好反馈的方式创建我的API。
- en: '![](img/afc07cc15714b17c6f06e9f80ab5c779_16.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/afc07cc15714b17c6f06e9f80ab5c779_16.png)'
- en: So how can I make this better to actually give a good， feedback to my user？
    We can add logs。 That's what's missing， like logging。 When we talk about good
    logging practices， this is like a。 thing that I really like and I'm very passionate
    about。 So if you ever want to talk about it。 DM me on Twitter， let's talk。 I have
    my very own definition of what's good logging。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我该如何让这个变得更好，实际上给我的用户提供良好的反馈？我们可以添加日志。这就是缺失的，就像日志。当我们谈论良好的日志实践时，这就是我非常喜欢和热衷的事情。所以如果你想谈谈它。请在推特上给我私信，让我们谈谈。我有自己对什么是良好日志的定义。
- en: But I didn't dream about it。 And like， OK， it's a personal opinionated， but
    I was very。 backed up with researches and open to discussions。 So you think that
    I'm talking about something that is not， really--， you don't really agree。 Let's
    chat about it。 Let's fight about it。 I'm happy to do so。 When I talk about logging。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 但我并没有梦想过这个。就像，好的，这是个人意见，但我非常依赖研究并开放讨论。所以你认为我谈论的是一些不是真的——你并不真正同意。让我们聊聊。让我们争论一下。我很乐意这样做。当我谈论日志时。
- en: I like plaintext messages， without variables。 So when you look at the logging
    message that has a。 variable， it's very nice for you to see， like， OK， a， task
    was created with an ID X。 Awesome。 But if you want to group these log messages
    in a tool like， Splunk or New Relic or Elasticsearch。 you should write， those
    logs for a computer to process it， not for a human， to read。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢纯文本消息，没有变量。所以当你查看带有变量的日志消息时，你会觉得很好，比如，好的，一个任务以ID X创建。太棒了。但是如果你想在像Splunk或New
    Relic或Elasticsearch这样的工具中对这些日志进行分组，你应该写这些日志供计算机处理，而不是供人类阅读。
- en: But I also make it so that a human can read and understand。 So your log messages
    should be like plaintext messages， you， should be able to group it。 and you should
    be able to actually， like give me all log messages with that message。 I'm going
    to have like some of operations of test creators。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 但我也确保让人类可以阅读和理解。所以你的日志消息应该像纯文本消息一样，你应该能够将其分组，并且你应该能够实际获取所有与该消息相关的日志消息。我会有一些测试创建者的操作。
- en: that are having my app if I just did that。 But also， you should have enough
    information for him to。 read。 So how can we， like， with plaintext messages without，
    putting the task ID？
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我只是这样做，他们将会使用我的应用程序。但是，你也应该提供足够的信息，让他能够阅读。那么我们如何能用纯文本消息而不放置任务ID？
- en: How can I get that information？ Well， you use extra fields。 So you take Kafka
    variables or messages。 You take something called extra fields that Python， standard
    logging library has。 And you can use those。 You can add like a big dictionary
    of variables that are。 important for that log message。 You put as much info as
    you can。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我如何获取这些信息？嗯，你可以使用额外字段。因此，你需要获取Kafka变量或消息。你使用Python标准日志库所拥有的称为额外字段的东西。你可以使用这些。你可以添加一个包含对该日志消息重要的大字典的变量。你尽可能多地放入信息。
- en: Don't abuse it in the sense that you're going to send， like this huge payload。
    But this user is normally hidden by the full view。 And they are extremely useful。
    So you're like。 put as much info as you can。 Like what customer， what is the request
    ID， all of that。 And speaking of request ID， traceability。 We should have like
    for every web request， we should have。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 不要滥用它，即发送如此庞大的有效负载。但这个用户通常在完整视图中被隐藏，它们极其有用。所以你应该尽可能多地放入信息，比如哪个客户、请求ID是什么，所有这些。说到请求ID和可追溯性，我们应该为每个网页请求准备好。
- en: unique identifier for it。 And this unique identifier should be present in all
    of our。 log messages that are related to that request in order to be。 able to
    trace exactly what happened in a particular， request。 So I've found myself a couple
    of times with a JSON payload and。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为其提供唯一标识符。而这个唯一标识符应该出现在与该请求相关的所有日志消息中，以便能够准确追踪特定请求中发生的事情。因此，我几次遇到JSON有效负载时。
- en: going through my code to understand where the heck this。 code broke because
    I have absolutely no idea。 And I had to like go through read all of the ifs and
    else。 and everything to see what would happen。 So if I had a request ID identifier，
    I would be able to。 like in good logging， I would be able to see every single，
    thing that happened。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览我的代码时，想搞清楚这段代码到底哪里出错了，因为我完全不知道。我不得不逐条阅读所有的if和else，看看会发生什么。如果我有一个请求ID标识符，我就可以在良好的日志记录中看到每一件发生的事情。
- en: I just get the same identifier and get all the messages with， that one。 I can
    see every single thing that happened。 So it's amazing。 And also business traceability。
    What happened with that customer？ What's going on with that customer？
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我只需获取相同的标识符，查看所有与之相关的消息。我可以看到发生的每一件事。这是惊人的。同时也提供了业务可追溯性。那位客户发生了什么？那位客户怎么了？
- en: What's the kind of thing that they use in our app？ So something that is really
    nice to have to。 like， customer identifiers， to exist in all of the requests in
    order。 to measure the experience of a particular customer。 You can also like create
    a particular SLA for a sub， set of customers that you have。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用中，他们使用的是什么样的东西？所以像客户标识符这样的东西确实很不错，应该存在于所有请求中，以衡量特定客户的体验。你也可以为你拥有的某些客户集创建特定的SLA。
- en: So how do you figure out like， OK， what is the time that a。 particular request
    took for a particular customer？ You can do that through logging。 Keeping track
    of IDs is something that I really like to。 Like every time that I save an object。
    I write a log line， about it。 And I also keep the ideas and extra。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如何确定特定客户的特定请求花费了多少时间？你可以通过日志来做到这一点。跟踪ID是我非常喜欢的事情。每次保存一个对象时，我都会写一条日志行。并且我还保留这些想法和额外信息。
- en: field like this allows like using inspection。 Like if I have to ever go through
    like my database and see。 like， OK， was that really added？ What's going on with
    that data and everything？ OK。 So it gives me like a really good overview of things。
    And the last thing is that we normally go like writing a， log line， just whatever。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的字段允许进行检查。如果我必须浏览我的数据库，查看像“好的，这真的添加了吗？这个数据发生了什么？”之类的情况？好的。这让我对事情有了很好的概览。最后一点是，我们通常会写一条日志行，随便写什么。
- en: Just going to go log info， log info， everything。 We should be more intentional
    about logging levels。 Like， you should know what kind of information you want
    to。 see while developing what kind of information is only useful， for production。
    My rule of thumb is that AR is something to pay attention。 Like I should worry。
    Info， exact string。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我只是想记录信息，记录所有内容。我们应该对日志级别更有意图。你应该知道在开发时想看到什么样的信息，而什么信息仅对生产环境有用。我的经验法则是 AR 是值得关注的东西。我应该担心。信息，确切的字符串。
- en: info in production environment and the， bugs just made for my local development。
    That is like my rule of thumb。 But you can also have like different rules across
    your， teams。 Like it's very particular。 But I think that you should be very， very
    intentional。 And like。 how can we apply this to like our problem？ Like， how can
    we literally like get these things that I just。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 生产环境中的信息和仅为我本地开发而设置的错误。这就像我的经验法则。但你也可以在你的团队中有不同的规则。就非常具体而言。但我认为你应该非常非常有意图地去做。那么，我们如何将这应用到我们的实际问题中？我们怎样才能真的把我刚才提到的这些事情搞定。
- en: said and make our customer happy with the tasks that was， created without the
    description？
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 说过让我们的客户对没有描述的任务感到满意？
- en: So there's a cool thing about using a log handler or a， library that is already
    established。 That most of the things like request ID traceability are。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用一个已经建立的日志处理程序或库有一个很酷的特点。大多数请求 ID 追踪等功能都是。
- en: '![](img/afc07cc15714b17c6f06e9f80ab5c779_18.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/afc07cc15714b17c6f06e9f80ab5c779_18.png)'
- en: already set up for us。 So if you look at that log line here that I showed before。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 已经为我们设置好的。所以如果你看我之前展示的那条日志。
- en: '![](img/afc07cc15714b17c6f06e9f80ab5c779_20.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/afc07cc15714b17c6f06e9f80ab5c779_20.png)'
- en: like there is like a trace ID here， I'm going to make it， bigger so you don't
    suffer too much。 There's a trace ID here。 So new runics already， there's a little
    log handler that is。 kind of an adapter of Python's log handler that does that。
    So there are a couple of things that are already hit like， file name where the
    exception happened。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个追踪 ID，我要放大一点，这样你不会太难受。这里有一个追踪 ID。因此，新的 relic 日志处理程序实际上是一个 Python 日志处理程序的适配器。它做到了这一点。所以已经有几个东西被记录下来了，比如异常发生的文件名。
- en: A couple of things that are already like free for us。 That is happening because
    of--。 let me open my to do is that。 That is happening because you don't know，
    raw error API bigger。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 有几件事对我们来说是免费的。这是因为——让我打开我的待办事项。发生这些情况是因为你不知道，原始错误 API 更大。
- en: '![](img/afc07cc15714b17c6f06e9f80ab5c779_22.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/afc07cc15714b17c6f06e9f80ab5c779_22.png)'
- en: We're using a new relic log handler that is actually， imported from the already
    libraries。 So this is something that I don't have to worry about when。 using Flask
    in your relic because it's already like for， free set up for me。 But we talked
    about late。 OK， we lost some information。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用一个新的 relic 日志处理程序，实际上是从现有库中导入的。所以在使用 Flask 时，我不必担心这个，因为它已经为我免费设置好了。但我们之前谈到过，好的，我们丢失了一些信息。
- en: So how can we add that here and have more info？ We can add some logs。 So when
    I create a task--。 that's the small--， but bye。 We're creating， right？ So we can
    just come over here。 We have a logger here。 And I just--， I can just say like，
    logger， info， creating task。 And we said。 like， let's use extra fields instead
    of， putting variables here。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们如何在这里添加更多信息？我们可以添加一些日志。所以当我创建一个任务时——这是小事——但再见。我们正在创建，对吧？所以我们可以直接过来。我们这里有一个记录器。我可以说，记录器，信息，创建任务。我们说过。让我们使用额外字段，而不是在这里放变量。
- en: I'm going to make sure that when creating a task， I'm logging， my body。 OK，
    we can have that here。 And other than that， like， when I save a task， it also，
    like doing the task created。 Instead of doing like， task created with ID， I just，
    did task created。 And then I come here。 I would task ID。 And I can do that。 And，
    wait， in the case of an exception， you can do， like logger。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我将确保在创建任务时，我在记录我的请求体。好的，我们可以在这里有这个。除此之外，当我保存一个任务时，它也会记录任务已创建。与其记录“任务已创建，ID”，我只是记录“任务已创建”。然后我在这里提取任务
    ID。我可以做到这一点。如果出现异常，你可以像这样使用记录器。
- en: exception， but your message。 And we're tempted to do this， aren't we？ Could
    not create that。 And your exception can be an extra field。 I really feel like
    this makes the lot easier。 for us to understand where the exception came from。
    Because you can see， like， OK。 that was what happened when， that error in particular
    happened。 Otherwise。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 异常，但你的消息。我们很想这样做，不是吗？无法创建那个。你的异常可以是一个额外字段。我真的觉得这让我们理解异常来自哪里变得更容易。因为你可以看到，好的。那就是在特定错误发生时发生的事情。否则。
- en: you would have to have like very specific， exceptions for every single thing
    that happened。 So you could see good errors over there。 I think this has auto-reload
    unicorn。 So I can probably。 if the demo gods are with me today， they're not。 Yeah，
    I don't think they are。 Oh， OK， yeah。 because I don't know what I'm doing。 I don't
    know how to write， but I don't anymore。 You see， like。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须为每一件发生的事情设定非常具体的异常。这样你可以在那边看到好的错误。我觉得这有自动重载的独角兽。所以我可能，如果今天演示的神明与我同在，它们不在。是的，我觉得它们不在。哦，好的，是的。因为我不知道我在做什么。我不知道怎么写，但我不再这样了。你看，就像这样。
- en: name is not defining。 I have to wait。 Do that。 OK。 Let's see if it's you， no。
    Wow。 Just taking a while。 It did take a 10 or so long。 Maybe I do want to lock
    that as a new or instead。 an exception。 Oh， no。 I think that's good。 That is OK。
    Let's see the log lines there。 Let's see if we have something new。 We should。
    Yes。 So I'll do a little bit。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 名称没有定义。我得等。这样做。好的。让我们看看是不是你，不是。哇。只是花了一点时间。确实花了十秒左右。也许我想把它锁定为新的，或者相反，作为一个异常。哦，不。我觉得这样很好。没问题。让我们看看那里的日志行。看看我们是否有新的东西。我们应该有。是的。所以我会稍微做一些。
- en: So we do have the same exception that we had before。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们确实有之前遇到的相同异常。
- en: '![](img/afc07cc15714b17c6f06e9f80ab5c779_24.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/afc07cc15714b17c6f06e9f80ab5c779_24.png)'
- en: because it still raises an exception over there。 But we have a message before。
    And these two messages， also， might have my message。 And I can say， oh， OK。 Description。
    violate is not no constraint， because the customer didn't give me the description。
    So I can create a bug。 I can fix that now， and I can actually understand what
    happened。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 因为它仍然会在那里引发一个异常。但我们之前有一条消息。而这两条消息，也可能包含我的消息。我可以说，哦，好的。描述。违反不是无约束，因为客户没有给我描述。所以我可以创建一个错误。我可以现在修复它，我实际上可以理解发生了什么。
- en: And the trace ID here is also equal to the trace， ID over there。 So， oops。 That's
    a good laugh。 It's supposed to be equal to this trace， ID is supposed to be equal
    to that one。 So you can actually look through all log messages， with that trace
    ID， and that should。 give you a good idea of what happened， with that particular
    customer， which is super cool。 So， OK。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 而这里的追踪 ID 也等于那边的追踪 ID。所以，哎呀。这真是个好笑话。它应该等于这个追踪 ID，而这个追踪 ID 应该等于那个。所以你实际上可以通过这个追踪
    ID 查阅所有日志消息，这应该能给你一个关于特定客户发生了什么的好主意，这太酷了。所以，好的。
- en: First thing， we solved。 And did I forget something？ Yeah。 We did plain tags。
    We added extra fields。 New Relic log_h。 Gave us a little bit more traceability。
    We kept track of the IDs。 We used roughly the right log levels， because those
    are logs that I care about。 in a production environment。 I could add even more
    logs， if I wanted more information。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 第一件事情，我们解决了。还有我忘记了什么吗？是的。我们做了普通标签。我们添加了额外字段。新遗产 log_h。给了我们更多的可追溯性。我们跟踪了 ID。我们大致使用了正确的日志级别，因为这些是我在生产环境中关心的日志。如果我想要更多信息，我可以添加更多的日志。
- en: in development mode。 So when we get to a slightly more complex performance，
    issue， like， OK。 I update a task， and it's going to be fine。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发模式下。所以当我们遇到稍微复杂一点的性能问题，比如，好的。我更新了一个任务，一切都会没问题。
- en: '![](img/afc07cc15714b17c6f06e9f80ab5c779_26.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/afc07cc15714b17c6f06e9f80ab5c779_26.png)'
- en: You're going to see that。 And here， OK。 Update a task。 That task。 And it's fine。
    But if I update。 like， a bunch of tasks， it's going to be extra， extra， extra
    slow。 So。 New Relic is going to give us， like， tracing data， for that extra， extra，
    extra slow。 I'm doing something very， very wrong。 Very wrong。 So if you look at
    traces， here you're。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到这一点。然后这里，好的。更新一个任务。那个任务。没问题。但如果我更新像一堆任务，那会非常，非常，非常慢。所以。新遗产会给我们提供关于那非常，非常，非常慢的追踪数据。我做错了很多事情。非常错。所以如果你在这里查看追踪，你会。
- en: going to have a couple of trace transactions， slow transactions。 Didn't show
    yet。 but I do have one that is already--， I have a backup link here。 OK。 And it
    really shows， like。 by segment， like， the direct， [INAUDIBLE]， that I did。 And
    I really did something very。 very common when we do， patches that I did one at
    a time。 So I do 100 select some postgres。
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 将会有几个跟踪事务，慢事务。还没有显示出来。但我有一个已经存在的备份链接。好的。它确实展示了，比如说，按段显示，我所做的直接[无法识别]。我做了一些非常常见的事情，当我们进行补丁时，我一个一个地做。因此，我选择了
    100 个 postgres。
- en: I do 50 updates， a couple of rowbacks。 And I call the logger API for 50 times
    for every log line。 that I did， like， update and task。 So I really did that。 And
    New Relic is giving me， like， the time。 the duration， all of that， which is something
    that 8PMs really do。 And once you learn how to read that， performance issues，
    get， like， super easy to fix on your app。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我进行了 50 次更新，还有几个回滚。我为每一行日志调用了日志记录 API 50 次，就像更新和任务一样。所以我确实做到了。New Relic 给了我时间、持续时间，所有这些，正是
    8PMs 真的会做的事情。一旦你学会了如何阅读这些，性能问题在你的应用程序中变得超级容易修复。
- en: I am not going to have time to call the actual thing that， is going to fix that。
    But there is a branch here。 Like， I'm going to share that。 Ojuna window。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我没有时间去调用实际的修复方法。但这里有一个分支。我将分享这个。Ojuna 窗口。
- en: '![](img/afc07cc15714b17c6f06e9f80ab5c779_28.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/afc07cc15714b17c6f06e9f80ab5c779_28.png)'
- en: There are a couple of problems here。 One of them， like we said， like， postgres，
    was actually--。 we're adding a select and an update for each task。 So actually
    updating your patch to do a bulk save would be， like， the thing to fix here。 So
    we get many instead of getting just one。 We do a bulk save here。 That also fixed
    the 50 updates。
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有几个问题。就像我们所说的，postgres 实际上是——我们为每个任务添加了选择和更新。因此，实际更新补丁以进行批量保存将是这里的解决方案。因此，我们得到的是许多，而不是仅仅得到一个。我们在这里进行批量保存。这也修复了
    50 次更新。
- en: And we do just one update on postgres， which is awesome。 And for the log--，
    for the calling the log。 New Relic log， a couple of times， we're still going to
    call the API 50 times。 But we could make it a sync。 So I actually made the log
    handler asynchronous。 by creating a sync New Relic log handler。 So the response
    is going to come back to the user。
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 postgres 上只进行一次更新，这太棒了。对于日志——调用日志。New Relic 日志，几次，我们仍然会调用 API 50 次。但我们可以让它同步。因此，我实际上使日志处理程序变为异步，通过创建一个同步的
    New Relic 日志处理程序。因此，响应将返回给用户。
- en: The response time is going to be lower。 And the log is going to be sent to New
    Relic。 in a different sync。y。y。 So I'm going to open that PR and leave it right
    there。 if you want to check in a little bit。 And let me go back to the presentation。
    We found the root calls。 It was nice。 I once had this problem and I had to process
    like a roughly。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 响应时间会更低。而且日志将会以不同的同步方式发送到 New Relic。所以我要打开那个 PR，就放在那里。如果你想稍后查看一下。让我回到演示中。我们找到了根调用。这很不错。我曾经遇到过这个问题，我不得不处理大约。
- en: 8 million messages a day and write for Firestore database。 We had a couple of
    transactions。 like 132 per second。 And that was a performance issue because it，
    was supposed to be real time。 New Relic showed really easily to me， that my issue，
    my bottleneck， was a commit on Firestore。 So that was like a re-okay or Firestore。
    I was doing a bunch of updates on Firestore。
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 每天处理 800 万条消息，并为 Firestore 数据库写入。我们有几个事务，像是每秒 132 次。这是一个性能问题，因为它应该是实时的。New Relic
    很容易向我展示，我的问题，我的瓶颈，是 Firestore 上的提交。所以这就像是重新确认 Firestore。我在 Firestore 上进行了大量更新。
- en: and doing like too many commits。 And that took a lot of time。 When I saw that
    on New Relic， I。 was able to do a book update on Firestore。 And that brought it
    up my performance。 to like eight times faster。 And it was like great。 It was one
    of the best feelings in my life。 I think that's because I'm an nerd。 So in this
    particular problem， it。
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 并且进行太多的提交。这花费了很多时间。当我在 New Relic 上看到这些时，我能够在 Firestore 上进行书籍更新。这使我的性能提升了大约八倍。这感觉真棒。这是我人生中最好的感觉之一。我想这是因为我很宅。所以在这个特定的问题上，它。
- en: took us like two months to solve this。 Because we just didn't have the data。
    So I always develop a few of these good login practice， APM monitoring， if you
    turn down by a flag。 They often grow too fast。 And observability becomes an issue。
    Faster than we are able to foresee。 So thank you。 Follow me on Twitter for random
    things in English， Portuguese， sometimes Spanish。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们花了大约两个月来解决这个问题。因为我们没有数据。所以我总是开发一些好的登录实践，APM 监控，如果通过一个标志关闭。它们常常增长得太快，而可观测性就成了一个问题。比我们预见的要快。因此，谢谢你。关注我的推特，获取英语、葡萄牙语，有时西班牙语的随机内容。
- en: I own super dams very， very slow， but I was dry。 Slides are here， colds are
    here。 Thank you so much。 It was a great talk in here。 [APPLAUSE]。
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我拥有超级大坝，非常，非常慢，但我已干涸。幻灯片在这里，寒冷在这里。非常感谢。这是一次很棒的演讲。[掌声]。
- en: '![](img/afc07cc15714b17c6f06e9f80ab5c779_30.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/afc07cc15714b17c6f06e9f80ab5c779_30.png)'
- en: (applause)。
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: （掌声）。
