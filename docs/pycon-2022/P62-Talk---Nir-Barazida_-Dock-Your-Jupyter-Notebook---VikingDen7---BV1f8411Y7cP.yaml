- en: P62：Talk - Nir Barazida_ Dock Your Jupyter Notebook - VikingDen7 - BV1f8411Y7cP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P62：演讲 - Nir Barazida_ 停靠你的 Jupyter Notebook - VikingDen7 - BV1f8411Y7cP
- en: All right， everyone。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，大家。
- en: '![](img/4976e943d2b0ee9827511476e430a0ef_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4976e943d2b0ee9827511476e430a0ef_1.png)'
- en: '![](img/4976e943d2b0ee9827511476e430a0ef_2.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4976e943d2b0ee9827511476e430a0ef_2.png)'
- en: Thanks for your patience。 Please join me in welcoming Nia from DAGsHub。 who
    is going to talk about docking Jupyter， and load books。 Thank you。 And thank you
    so much。 everyone， for waiting。 I'm sorry for the technical issue。 And I must
    say that this is awesome to see everyone here。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢大家的耐心。请与我一起欢迎来自 DAGsHub 的 Nia，她将谈论 Docker 和加载书籍。谢谢你。感谢大家的等待。对于技术问题，我深表歉意。我必须说，看到大家在这里真是太棒了。
- en: It's been two wild years doing virtual conferences and finally seeing all of
    your faces and even。 some familiar faces that I already met during the conference。
    This is absolutely awesome and I want to thank you for joining me today。 And I'd
    like to start our session today by asking you a few questions。 So we'll be more
    data-driven。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这两年来进行虚拟会议非常疯狂，终于见到了大家的面孔，甚至还有一些我在会议期间已经见过的熟悉面孔。这真是太棒了，感谢大家今天的参与。我想通过问几个问题来开始今天的会议，这样我们可以更加数据驱动。
- en: The reason why we want to use Docker for Jupyter and NodeBook。 So I'll start
    by asking what type of operation system are you using？ So with a show of hands。
    who is using here， MacOS？ Whoa， okay， quite a lot。 Nice。 I love it。 It gave me
    a few issues just now。 What about Linux？ Nice。 Wow， quite a few。 Windows。 Ooh。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为什么想在 Jupyter 和 NodeBook 中使用 Docker？我首先想问一下，大家使用的是什么操作系统？举手吧，谁在用 MacOS？哇，哦，很多人。很好。我喜欢它。刚刚遇到了一些问题。那
    Linux 呢？不错。哇，挺多的。Windows 呢？哦。
- en: coding with Windows？ Oh， that's working for you。 No， I'm kidding。 I used to
    work with Windows but then I discovered Mac and coding with Mac， it's the best。
    So are you using any type of special hardware？ Any specific like GPs， powerful
    GPUs。 very powerful clusters？ Anyone are using special hardware here for training
    their machine learning models？
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上编程？哦，这对你有用。开玩笑的。我以前用 Windows，但后来发现 Mac，使用 Mac 编程是最好的。你们使用什么特殊硬件吗？例如
    GPU，强大的 GPU，非常强大的集群？在这里有没有人使用特殊硬件来训练他们的机器学习模型？
- en: Okay， see quite a few。 Nice。 Awesome。 So I'd like to ask all the people in this
    room。 what do you think if I'm going to ask， you to collaborate on the same machine
    learning project altogether？
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，看到很多人。很好。太棒了。我想问一下在座的所有人，如果我提议大家一起合作一个机器学习项目，你们觉得怎么样？
- en: Do you think it's going to be even possible？ Well， probably it's going to be
    very challenging。 You're going to have a lot of different dependencies， operation
    system that you're using。 You're going to have problems like it works on my machine
    but it won't work on your machine。 and those are a lot of challenges that are
    hard to overcome。 And by the end of this talk。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你觉得这可能吗？嗯，可能会非常具有挑战性。你会面临很多不同的依赖项，使用的操作系统会有问题，比如“在我的机器上可以工作，但在你的机器上不行”，这将是许多难以克服的挑战。在这次演讲结束时。
- en: we'll make it possible for all the people in this room to。 collaborate together
    on the same machine learning project together regardless of their operation。 system
    or the tools that they're using only by using Docker。 So you're going to become
    a super woman or a man of Docker。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使在座的所有人能够在同一个机器学习项目中共同合作，无论他们使用的是什么操作系统或工具，只需使用 Docker。因此，你们将成为 Docker 的超级英雄。
- en: And this talk is going to focus on the very basic concepts of Docker。 What is
    Docker？
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这次演讲将专注于 Docker 的基本概念。什么是 Docker？
- en: Why do we actually need it and what are the different components that it has？
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为什么真的需要它，它有哪些不同的组件？
- en: So if you are not familiar with it by the end of this session， you will be。
    And if you are familiar with Docker and you know how to use it， this is going
    to be a。 very good refreshment for you。 And my name is Nio Balazita。 I'm an MLOps
    researcher at DAGsub。 which is the GitHub for machine learning。 It does the DevOps
    heavy lifting for you。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果到会议结束时你对它不熟悉，你将会熟悉。如果你已经熟悉 Docker 并知道如何使用它，这将对你是一个很好的复习。我的名字是 Nio Balazita。我是
    DAGsub 的 MLOps 研究员，DAGsub 是机器学习的 GitHub。它为你完成 DevOps 的繁重工作。
- en: And in my research， I focus on machine learning workflows， which in my opinion
    has the perfect。 balance between machine learning， DevOps and people。 And when
    I'm off the clock。 I do a different kind of heavy lifting。 And with that， I think
    we're ready to start。 So what is Docker？ Docker is an open source software packaging
    tool for building isolated environment and。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的研究中，我专注于机器学习工作流程，在我看来，它在机器学习、DevOps和人之间有着完美的平衡。当我下班时，我会进行另一种类型的重工作。对此，我认为我们准备开始了。那么，Docker是什么？Docker是一个开源软件打包工具，用于构建隔离环境和。
- en: running applications with their dependencies。 So we're able to wrap our application。
    our project to the OS level and run it on different。 machines without worrying
    on the dependency that it has。 It's one of the most widely adapted tools in the
    industry。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 运行具有其依赖关系的应用程序。因此，我们能够将我们的应用程序和项目打包到操作系统级别，并在不同的机器上运行，而不必担心它所拥有的依赖关系。这是业界最广泛应用的工具之一。
- en: And it's used throughout the development and production lifecycle of a project。
    And why do we really need Docker for machine learning？ So generally。 the main
    advantage that Docker provides is tenderization。 And this gives us first and foremost
    reproducibility， which is very valuable for data scientists。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 并且它在项目的开发和生产生命周期中得到广泛使用。那么，为什么我们真的需要Docker来进行机器学习呢？一般来说，Docker提供的主要优势是标准化。这首先给我们带来可重复性，这对数据科学家来说非常重要。
- en: So everyone are using the same operation system， the same tools， the same dependencies。
    Which means that if we want to reproduce previous results， we can do it very easily。
    We can simply use our Docker container to run it on a local machine and， start
    building our model。 And it also provides us the ability to move our application
    or。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，大家使用的是相同的操作系统，相同的工具，相同的依赖关系。这意味着如果我们想要重现之前的结果，我们可以非常轻松地做到。我们可以简单地使用我们的Docker容器在本地机器上运行，并开始构建我们的模型。它还为我们提供了移动应用程序的能力。
- en: our training of our model from one machine to the other。 And if you can think
    about it。 most of the people who are using or， are training machine learning models
    use heavy computing power。 So they do need to move their projects from their local
    machine to their remote cluster or。 to a powerful GPU machine。 So this is very
    important。 And some of you might ask。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的模型训练需要从一台机器迁移到另一台。如果你想一想，大多数使用或训练机器学习模型的人都使用大量计算能力。因此，他们确实需要将项目从本地机器迁移到远程集群或强大的GPU机器。这一点非常重要。有些人可能会问。
- en: why not simply use call up for that task？ Well， call up does provide an isolated
    environment that has all the dependencies。 that you need for the rest of your
    team。 And that might be a bit of a harsh slide。 so I'm sorry for that。 Because
    Docker is good and it does provide some valuable capabilities。 But when you're
    gonna try to productionize your work and move to production。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么不简单地使用Colab来完成这个任务呢？好吧，Colab确实提供了一个隔离环境，其中包含团队所需的所有依赖项。这可能有点过于严厉，我为此感到抱歉。因为Docker很好，并且提供了一些有价值的能力。但是，当你试图将工作投入生产并迁移到生产环境时。
- en: it's gonna be harder because you don't know which operation system that a machine。
    used if you and your teammate use the same machine， what tools you use。 So it's
    gonna take much longer to move from your research state to your production state。
    So that's why I wouldn't recommend using call up when thinking about deploying
    to production。 Okay。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这会变得更加困难，因为你不知道机器使用的操作系统。如果你和你的团队成员使用同一台机器，你使用了什么工具。那么，从研究状态迁移到生产状态会花费更长时间。这就是为什么我不建议在考虑部署到生产时使用Colab。好的。
- en: so we're ready to talk about Docker。 And Docker has three main components that
    eventually creates that isolated environment。 And I read a very good blog post，
    reading by our CEO， so I might be biased。 And he compared building that Docker
    container so。 that isolated environment to the process of baking a cookie。 It
    might sound funny。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们准备讨论Docker。Docker有三个主要组件，最终创建那个隔离环境。我读了一篇非常好的博客文章，作者是我们的首席执行官，所以我可能有点偏见。他将构建Docker容器的过程与烘焙饼干的过程进行了比较。这听起来可能有点搞笑。
- en: but I promise you that it will make a lot of sense。 In the next two minutes。
    So the first component the Docker has， it's the Docker file。 And the Docker file
    is basically a file that contains all the commands。 that we want to call when
    we generate the Docker image， which is the next component。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 但我向你保证，这会很有意义。在接下来的两分钟内。所以，Docker的第一个组件是Docker文件。Docker文件基本上是一个包含所有命令的文件。当我们生成Docker镜像时，这些命令将被调用，这是下一个组件。
- en: And it basically has all the commands such as copy or， move files or run some
    sort of installations。 So that file is gonna hold all of those commands。 And in
    our analogy。 the Docker file is the engineer's instructions on how to create。
    our cookie cutter for baking our cookie。 So which height it should be， how strong
    it should be， etc。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 它基本上包含所有命令，如复制、移动文件或运行某种安装。因此，该文件将保存所有这些命令。在我们的类比中，Docker文件是工程师关于如何创建我们的饼干切模的说明。比如应该有多高，应该多坚固，等等。
- en: Next， we have our Docker image。 And our Docker image acts like， and this is
    a very， very big like。 So don't use it outside of this room， including the people
    watching back home。 So the Docker image is like a zip file that holds all of the
    components of our project。 or all of our dependencies in it。 So if you want to
    copy files that you have from your local machine to that Docker image。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有我们的Docker镜像。我们的Docker镜像就像一个非常、非常大的压缩文件。所以不要在这个房间外使用它，包括在家观看的人。所以Docker镜像就像一个压缩文件，保存着我们项目的所有组件或所有依赖项。如果你想将本地机器上的文件复制到该Docker镜像中。
- en: if you want to install the operation system that you want to use， the Nox Ubuntu
    and more。 And in our analogy， our Docker image is basically our cookie。 cutter
    that will create our Docker container。 So basically it has everything that we
    need in order to run our application。 with all of our dependencies。 And last，
    we have our Docker container。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想安装所需的操作系统，如Nox、Ubuntu等。在我们的类比中，Docker镜像基本上是我们的饼干切模，将创建我们的Docker容器。所以它基本上包含了我们运行应用程序所需的一切，配备所有依赖项。最后，我们有我们的Docker容器。
- en: which probably a lot of you heard about it。 And Docker container is basically
    a single instance of our application that is live and running。 And in our analogy，
    our Docker container is actually our cookie。 So what we try to build through that
    entire process。 And where does those container live？
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 许多人可能听说过Docker容器。Docker容器基本上是我们应用程序的一个实例，正在运行。在我们的类比中，Docker容器实际上就是我们的饼干。所以我们通过整个过程尝试构建的东西。这些容器存放在哪里？
- en: So container lives in a container registry， which is a special type of storage。
    And company use different types of storages like AWS， ECR， Azure Container Registry
    and more。 But there is another registry， which is the Docker hub。 And this is。
    you can think of it like the GitHub for Docker。 And it has a lot of Docker images。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 所以容器存放在容器注册表中，这是一种特殊类型的存储。公司使用不同类型的存储，如AWS、ECR、Azure容器注册表等。但还有另一个注册表，即Docker
    Hub。你可以把它想象成Docker的GitHub，它有很多Docker镜像。
- en: So this is important。 All of those registry are holding Docker images。 And those
    images are available for the public use on Docker hub that are for。 various types
    of tasks。 So if you want one for machine learning or for running a flask application。
    if you want to use Windows， Mac OS， different operation system。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这很重要。所有这些注册表都存储着Docker镜像。这些镜像在Docker Hub上可供公众使用，适用于各种任务。因此，如果你需要用于机器学习或运行Flask应用程序的镜像，如果你想使用Windows、Mac
    OS或其他操作系统。
- en: So you're going to find them all on Docker hub。 And now I think we're ready
    to get our hands dirty and。 start building our new Docker container from scratch
    for our machine learning project。 And for that。 I'm going to use my new monoclecification
    project。 Where I try to classify X-ray chest images if they have pneumonia or
    not。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你会在Docker Hub上找到它们。现在我想我们准备好动手，开始为我们的机器学习项目从头构建新的Docker容器。为此，我将使用我的新单分子分类项目。我试图对X光胸片进行分类，看是否有肺炎。
- en: So my DAGs up repository holds both my code and my data。 My code is version
    by Git and my data is version by DVC。 And I'm going to pull all of it to my Docker
    container。 And at this point。 let's say that I'd like to test a new hypothesis。
    So I want to use a different type of backbone model。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我的DAGs up仓库包含我的代码和数据。我的代码由Git版本控制，我的数据由DVC版本控制。我将把所有这些拉取到我的Docker容器中。此时，假设我想测试一个新的假设。我想使用一种不同类型的骨干模型。
- en: Instead of using ResNet， I'm going to use VGG19。 So this is my new hypothesis。
    And for that。 I'm going to create a new Docker。 And I'm going to have all the
    dependencies I need to run that experiment on。 So this is our goal here。 Create
    a Docker container that I'm going to run my experiment on。 which has all the dependencies
    that my team is using。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我将使用VGG19，而不是ResNet。这是我的新假设。为此，我将创建一个新的Docker，并拥有我需要运行该实验的所有依赖项。所以我们的目标是创建一个Docker容器，我将在其上运行实验，包含我的团队正在使用的所有依赖项。
- en: So what would be the first part that we're going to do？
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们要做的第一部分是什么呢？
- en: We're going to start writing our Docker file。 And due to time constraint。 I'm
    not going to cover how to install Docker。 This is a fairly easy process。 This
    is the only process that varies between operation systems。 So there are different
    installation on Mac， Windows， and more。 But this is very。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将开始编写我们的 Docker 文件。由于时间有限，我不会详细介绍如何安装 Docker。这是一个相当简单的过程。这个过程在不同的操作系统之间是有区别的。因此，在
    Mac、Windows 等操作系统上的安装方法各不相同。但这非常。
- en: should be very easy task。 And I'm going to add a link at the last slide with
    a reference on how to install it。 So by starting to work on our Docker file， we'll
    usually base it on a previous image that already has。 some of the base dependencies
    that we're going to need for our project。 Like the operation system that we'd
    like to use， the language that we'd like， we'd want to use。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 应该是一个非常简单的任务。我将在最后一张幻灯片上添加一个链接，参考如何安装它。所以在开始工作我们的 Docker 文件时，我们通常会基于一个已经具有我们项目所需的一些基本依赖项的先前镜像。比如我们希望使用的操作系统，或者我们希望使用的语言。
- en: which is obviously Python。 Some frameworks， so Keras， TensorFlow， PyTorch， etc。
    And if we're not going to base it on a previous image。 we're going to have to
    write everything from scratch， which is going to be very hard to do。 Or it's going
    to be a very long process。 So I highly recommend basing your image on previously
    defined images。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 它显然是 Python。一些框架，比如 Keras、TensorFlow、PyTorch 等等。如果我们不打算基于之前的镜像，我们将不得不从头开始写所有东西，这将非常困难。或者这将是一个非常漫长的过程。因此，我强烈建议你基于之前定义的镜像来构建你的镜像。
- en: So for my project， I will need the following dependencies。 So I need Python
    3 and above。 I'm going to need Git because I want to clone my project to that
    Docker container。 Like to have a Jupyter notebook and TensorFlow as the framework
    to use。 So a quick search on Docker Hub and Voila。 I have a Docker image that
    is maintained by Project Jupyter that probably a lot of you。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我的项目，我需要以下依赖项。所以我需要 Python 3 及以上版本。我需要 Git，因为我想把我的项目克隆到那个 Docker 容器中。我想使用
    Jupyter notebook 和 TensorFlow 作为框架。所以在 Docker Hub 上快速搜索一下，瞧，我找到了一个由 Project Jupyter
    维护的 Docker 镜像，可能很多人都熟悉。
- en: are familiar with， which are maintaining that image for TensorFlow with Jupyter
    notebook。 And a lot of other dependencies that are relevant for data science，
    like pandas， NumPy， etc。 And what do we actually see here？ So first of all。 we
    see the name of the maintainer and then the backslash。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 它们是维护 TensorFlow 和 Jupyter notebook 镜像的。还有许多与数据科学相关的其他依赖项，如 pandas、NumPy 等等。我们实际看到的是什么呢？首先，我们看到维护者的名称，然后是反斜杠。
- en: and then the name of the image that we have here。 So the name of the image here
    is actually TensorFlow- notebook。 This is important。 Next， we can see how reliable
    that Docker image is。 So we can see that it has 50 million downloads， which is
    fairly reliable。 We can also see how we can pull it to our local machine。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是我们这里的图像名称。这里的图像名称实际上是 TensorFlow-notebook。这一点很重要。接下来，我们可以看到这个 Docker 镜像的可靠性。所以我们可以看到它有五千万次下载，这相当可靠。我们还可以看到如何将它拉取到我们的本地机器上。
- en: So let's say we don't want to create to reinvent the wheel。 And we want to use
    that exact image that already exists。 So all we need to do is pull it to our machine
    and we can start using it。 Next。 we're going to see here the tag。 So the tags
    are basically the version of that Docker image。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们不想重新发明轮子。我们想要使用那个已经存在的图像。所以我们所需要做的就是将它拉取到我们的机器上，然后我们可以开始使用它。接下来，我们要查看标签。标签基本上是该
    Docker 镜像的版本。
- en: You can， it will be updated as the dependencies are updated。 So let's say TensorFlow
    releases a new version。 Then probably Jupyter notebook or the Project Jupyter
    are going to create a new version。 And you can see that there is a special type
    of tag here， which is the latest。 And latest means the newest version of that
    image。 Next。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 它会随着依赖项的更新而更新。假设 TensorFlow 发布了一个新版本。那么可能 Jupyter notebook 或 Project Jupyter
    也会创建一个新版本。你可以看到这里有一个特殊类型的标签，即 latest。而 latest 意味着该镜像的最新版本。接下来。
- en: we can see the operation system that it used。 So here it's， it uses Linux and
    it has it's 3。1 gigabyte weight。 So let's take this information and put it in
    our Docker file。 So for that。 we're going to use the from command， which is going
    to state the base。 image that we're going to use。 Next， we're going to state the
    maintainer backslash。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到它所使用的操作系统。所以这里它使用的是 Linux，重量为 3.1 吉字节。让我们把这个信息放入我们的 Docker 文件中。为此，我们将使用
    from 命令，它将说明我们将使用的基础镜像。接下来，我们将说明维护者反斜杠。
- en: the name of the image that we'd like to use。 And last， we're going to state
    the tag name。 So here I use latest， but if you want previous versions of that
    image， you can simply specify， them。 specify it here。 And by running that command，
    when I'm going to build the image。 it's going to simply run， the install command
    and it's going to use the tag latest。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要使用的镜像的名称。最后，我们将说明标签名称。所以这里我使用 latest，但如果你想要该镜像的早期版本，你可以简单地指定它们。在这里指定。当我运行那个命令构建镜像时，它将简单地运行安装命令并使用标签
    latest。
- en: And at this point， I would like to go ahead and go to my DAGSA repo and see
    what is my， Git remote。 my DVC remote， which is basically my remote storage。 So
    I'll be able to pull off my data。 And where do I store my requirements？ So I would
    like to also install all the relevant requirements for my project。 So I'm going
    to take all of this information and I'm going to put it in my Docker file。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我想继续查看我的 DAGSA 仓库，看看我的 Git 远程和 DVC 远程，基本上是我的远程存储。因此，我可以拉取我的数据。我在哪里存储我的需求？我也希望安装与我的项目相关的所有需求。所以我将所有这些信息放入我的
    Docker 文件中。
- en: And here you see that I'm using the run command， which is basically going to
    run the following。 pipeline。 And next， I'm going to clone my repo。 I'm going to
    change directory to the project。 I'm a true believer in using branches for testing
    new hypothesis。 So I'm switching to VGG19 branch。 Then I'm installing my requirements
    and I'm going to pull all of my data。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里你可以看到我使用了 run 命令，它将基本上运行以下管道。接下来，我将克隆我的仓库。我将目录更改为项目。我坚信使用分支来测试新的假设。所以我切换到
    VGG19 分支。然后我安装我的需求，并拉取我的所有数据。
- en: So this is going to be translated into this。 And a few more commands that I
    think are going to be valuable for you。 So we have the N command， which is simply
    going to set the environment variables。 We have the copy。 which is going to copy
    the files from our local machine to that image。 So to that imaginary zip file，
    if you can think of it。 We have the maintainers。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这将被翻译成这个。还有一些我认为对你有价值的命令。所以我们有 N 命令，它将简单地设置环境变量。我们有 copy，它将把文件从我们的本地机器复制到那个镜像。可以想象成一个虚构的压缩文件。我们有维护者。
- en: so the name of the maintainer of the Docker image。 And the CMD command。 which
    is the default command to run after building the image。 Next。 we're going to want
    to run that Docker file and build our Docker image。 So for that。 we're going to
    use the Docker build command。 We're going to use the pull flag。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这是 Docker 镜像维护者的名字。还有 CMD 命令，它是在构建镜像后默认运行的命令。接下来，我们想要运行这个 Docker 文件并构建我们的
    Docker 镜像。因此，为此，我们将使用 Docker build 命令。我们将使用 pull 标志。
- en: which is simply going to pull all the latest updates， from the remote Docker
    hub。 Next。 we're going to tag it。 So I tagged it as mnemonic classification， which
    is the repository name and。 the VGG19， which is the hypothesis that I'd like to
    test。 And next。 I'm going to specify the path to my Docker file。 And by running
    this command from your terminal。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 它将简单地从远程 Docker hub 拉取所有最新更新。接下来，我们将标记它。所以我将它标记为助记符分类，即仓库名称，以及 VGG19，这是我想要测试的假设。然后，我将指定我的
    Docker 文件的路径。通过从你的终端运行这个命令。
- en: it's going to build a new Docker image。 If it's the first time that you're using
    that base image。 so， the TensorFlow notebook image， it's going to download it
    to your local machine。 Then it's going to run all the relevant commands and。 it's
    going to wrap it up in that Docker image file。 And now let's see all the files
    that we。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 它将构建一个新的 Docker 镜像。如果这是你第一次使用那个基础镜像，那么 TensorFlow notebook 镜像将会下载到你的本地机器。然后，它将运行所有相关命令，并将其包装在那个
    Docker 镜像文件中。现在让我们看看我们所有的文件。
- en: all the images that I have locally。 So by running Docker images。 you're going
    to see all the images that you have。 And here I can see that I have the new monoclecification
    and then the VGG19。 with that Docker image。 And now， we'd like to run our Docker
    container and。 start working on our project。 So for that， I'm going to use the
    Docker run command。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 所有我本地的图像。因此，通过运行 Docker images，你将看到你拥有的所有镜像。在这里我可以看到我有新的单细胞化和 VGG19。接下来，我们希望运行我们的
    Docker 容器并开始我们的项目。为此，我将使用 Docker run 命令。
- en: I'm going to give it a name， so near my name， the port I want to use。 and the
    image that I want to base the Docker container on。 So it's going to use the new
    monoclecification， VGG19。 You can also specify here the Docker image ID and it
    will also work。 And by running that command。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我将给它一个名称，因此我会靠近我的名字，指定我想使用的端口，以及我希望基于的 Docker 容器的镜像。因此，它将使用新的单细胞化 VGG19。你还可以在这里指定
    Docker 镜像 ID，它也会有效。通过运行该命令。
- en: I'm going to see in my terminal the same thing that I。 see when I run a Jupyter
    notebook from my terminal。 So it's going to simply run the Docker container and。
    it's going to provide me with the URLs that I'm going to need to copy to my browser。
    in order to get the Jupyter notebook environment。 And by copying one of those
    URLs。 I'm going to get a fully configured Jupyter notebook environment with。 all
    my project dependencies and files。 So this includes both my code files and my
    data files。 So basically everything that I need in order to start testing that
    new hypothesis。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在终端中看到与我从终端运行 Jupyter notebook 时相同的内容。因此，它将简单地运行 Docker 容器，并为我提供需要复制到浏览器中的
    URL，以便获取 Jupyter notebook 环境。通过复制其中一个 URL，我将获得一个完全配置的 Jupyter notebook 环境，包含所有项目依赖项和文件。因此，这包括我的代码文件和数据文件。基本上，我所需的一切，以便开始测试新的假设。
- en: And let's say that this at this point， I change a few lines of code， I ran the
    experiment。 and now I'm ready to version it and， push it to my Git and DVC remote。
    So I want to push both my Git tract files and my DVC tract files。 So for that。
    I'd like to connect with an SSH to that Docker container。 And how can we do that？
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 假设在此时，我更改了几行代码，我运行了实验。现在我准备对其进行版本控制，并推送到我的 Git 和 DVC 远程库。因此，我想同时推送我的 Git 跟踪文件和我的
    DVC 跟踪文件。为此，我想通过 SSH 连接到那个 Docker 容器。我们该怎么做呢？
- en: So we're going to use the Docker X command， which is going to execute that command。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将使用 Docker X 命令，它将执行该命令。
- en: '![](img/4976e943d2b0ee9827511476e430a0ef_4.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4976e943d2b0ee9827511476e430a0ef_4.png)'
- en: We're going to get an interactive terminal。 And then we're going to take the
    Docker container ID that we'd like to connect to。 And then the command that we'd
    like to run。 And how is it going to look like？
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将获得一个交互式终端。然后我们将获取我们想连接的 Docker 容器 ID，以及我们想运行的命令。这看起来会是什么样子？
- en: Then I'm going to start by taking， by looking for all the containers that I
    have live。 And from that， I'm going to take the container ID that I'd like to
    connect to。 Next。 I'm going to run the command， the Docker execute IT。 And then
    I'm providing it the container name。 And unless I'm going to open a shell script
    in that container。 And as you can see。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我将开始查找我当前正在运行的所有容器。从中，我将获取我想连接的容器 ID。接下来，我将运行命令，即 Docker 执行 IT。然后提供容器名称。接下来我将打开该容器中的
    shell 脚本。正如你所看到的。
- en: I'm inside that my running container。 Next， we can simply run or change directories，
    run Git status。 version our code， and， push it to our remotes。 And as simple as
    that。 you can start building your machine learning project on。 an isolated environment
    with your colleagues without worrying about issues with。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我在我的运行容器内。接下来，我们可以简单地运行或更改目录，运行 Git 状态。对我们的代码进行版本控制，然后推送到我们的远程库。就是这么简单。你可以开始在一个隔离的环境中与同事一起构建你的机器学习项目，而不必担心依赖问题或使用不同类型的工具。
- en: dependencies or using different types of tools。 And by pushing all of those
    files。 I can see that experiment on DAGs up and， compare it to different experiments。
    I can diff my Jupyter notebook and see which cells I modified。 What was the output
    when I modified it？ So if I process my data differently and now what was its output。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 通过推送所有这些文件，我可以看到在 DAGs 上的实验，并将其与不同的实验进行比较。我可以对我的 Jupyter notebook 进行差异比较，查看我修改了哪些单元格。修改时的输出是什么？如果我以不同的方式处理数据，那么它的输出又是什么？
- en: etc。 So reaching to the end of our time together today。 I'd like to have a quick
    recap on what we covered。 So we started by talking about why do we actually need
    Docker for machine learning？
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 等等。所以在今天的时间快要结束时，我想快速回顾一下我们讨论的内容。我们首先讨论了为什么我们实际上需要 Docker 来进行机器学习？
- en: And we understand that this is very valuable for us to collaborate and。 reproduce
    results with our colleagues。 Then we talked about the different components that
    Docker has。 So we have the Docker file， the Docker image， and， eventually we have
    the Docker container。 which is a live app that is fully configured and， running。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们理解，这对我们与同事合作和再现结果非常有价值。然后我们讨论了 Docker 的不同组件。我们有 Docker 文件、Docker 镜像，最终还有 Docker
    容器，这是一个完全配置且正在运行的实时应用。
- en: And last we saw how we can build our Docker container from scratch。 I'd like
    to ask you if you have any questions and before you are going to refer it。 I'm
    going to state one question that I didn't cover。 So how you can share that image
    that we just created with your colleagues。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 最后我们看到如何从头开始构建我们的 Docker 容器。我想问问你们是否有任何问题，在你们提出之前，我将先提出一个我没有涵盖的问题。那么你如何与同事分享我们刚刚创建的那个镜像呢？
- en: So because of time constraint， we can't cover it today。 But it's a fairly straightforward
    task。 which is kind of like Docker push。 It sounds to Docker push。 You simply
    need to set your credentials with Docker Hub and push it to your Docker， registry。
    Once again， I added a link on how to do it in the last slide so you can easily
    do it。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 由于时间有限，我们今天无法讨论这个。但这其实是一个相当简单的任务，就像 Docker push。它听起来像 Docker push。你只需在 Docker
    Hub 中设置你的凭据，然后推送到你的 Docker 注册表。再次说明，我在最后一张幻灯片上添加了一个链接，方便你轻松完成。
- en: And if you have any questions， I'd love to take them。 I think we have a minute
    or you want to take it offline。 \>\> Actually。 we're on sorry for the confusion。
    We can't take questions in the room due to COVID restrictions。 but， feel free
    to come to the front and ask them。 \>\> Awesome。 So we're going to take it offline。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有任何问题，我很乐意回答。我想我们还有一分钟，或者你想把它放到会后讨论。>> 实际上，我们很抱歉让你感到困惑。由于 COVID 限制，我们不能在房间里接受提问，但欢迎你到前面来提问。>>
    太棒了。那么我们就把它放到会后讨论吧。
- en: So I'd like to thank you all for joining me today。 It was awesome。 It's so great
    to finally do live presentations and live talks and， seeing all of your faces
    here。 It's actually wars my heart， so I'm very excited。 And thank you so much
    for joining。 \>\> [APPLAUSE]。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我想感谢大家今天的参与。太棒了。能够进行现场演讲和交流，看到你们每一个人都在这里真是太好了。这真的让我很感动，所以我非常兴奋。非常感谢你们的参与。>>
    [掌声]。
