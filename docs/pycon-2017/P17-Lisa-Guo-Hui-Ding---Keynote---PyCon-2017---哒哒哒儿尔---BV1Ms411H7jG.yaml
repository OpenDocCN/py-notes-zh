- en: P17：Lisa Guo Hui Ding   Keynote   PyCon 2017 - 哒哒哒儿尔 - BV1Ms411H7jG
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P17：郭慧丽   主旨演讲   PyCon 2017 - 哒哒哒儿尔 - BV1Ms411H7jG
- en: of PICON 2017。 (audience applauding)， Because of my bedtime， I wasn't able to
    attend。 how was the testing off？ Six people are excited about that。 So。 I don't
    really have any news or anything， the situation with the trains I described yesterday。
    still seems to be very much the situation， with the trains today。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: PICON 2017。（观众鼓掌）因为我的睡觉时间，我没能参加。测试的情况如何？六个人对此感到兴奋。所以，我没有任何新闻，关于我昨天描述的火车情况，今天的情况似乎依然如此。
- en: always looking forward to tomorrow。 The weather that was supposed to be sunny。
    and really beautiful and warm， Portland， it's not。 (audience laughing)， And so。
    the only thing that falls to me is to introduce， our morning keynote speakers。
    We'll get started with the topic that to me， is of a very green interest now that
    I work at Dropbox。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 总是期待明天。天气本该是阳光明媚，真的很美丽温暖，波特兰却不是。（观众笑）因此，我唯一要做的就是介绍我们的早间主旨演讲嘉宾。我们将开始一个对我来说非常有趣的话题，因为我在Dropbox工作。
- en: It was not until watching Jake's keynote yesterday， that I had ever heard the
    quote from Gito。 about the fact that he had never expected people， to write Python
    programs of more than a few hundred lines。 of code， it explains so much。 (audience
    laughing)， At Dropbox。 (audience laughing)。 We have pushed and indeed gone beyond，
    the few hundred line boundary。 (audience laughing)， As。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 直到昨天看了Jake的主旨演讲，我才听到Gito的那句名言，他从未预料到人们会写出超过几百行的Python程序。这解释了很多。（观众笑）在Dropbox。（观众笑）我们确实突破了几百行的界限。（观众笑）
- en: of course， has Instagram。 So， I was interested and wanted to hear their story。
    of what they have been doing recently with Python。 And so。 I am happy to welcome
    to the stage Lisa Gu， and Huie Ding here to talk to us。 Give them a big welcome。
    (audience applauding)， - Hello。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，Instagram也有。所以，我很感兴趣，想听听他们最近在Python方面的故事。因此，我很高兴欢迎郭丽莎和Huie Ding上台与我们交流。给他们热烈欢迎。（观众鼓掌）-
    你好。
- en: '![](img/711a2f93a070477c7fb7502d1b7813fa_1.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![](img/711a2f93a070477c7fb7502d1b7813fa_1.png)'
- en: Good morning， everyone。 Thank you， Brandon， for the intro。 And thank you， everyone，
    for coming here。 on a Saturday morning。 I know it's a little bit early。 So， my
    name is Huie。 I lead Infrastructure Engineering， at Instagram。 I'm here today
    with my colleague Lisa Guo。 to talk to you about how we've been running Instagram，
    on a Django and Python stack。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 大家早上好。感谢Brandon的介绍。谢谢大家在周六早上来到这里。我知道这有点早。所以，我的名字是Huie。我负责Instagram的基础设施工程。今天我和我的同事郭丽莎在这里，跟大家谈谈我们是如何在Django和Python堆栈上运行Instagram的。
- en: Instagram started coming to Python since 2012， when our first infrastructure
    engineer talks about。 building Pub/Sub systems in Python。 We're excited to be
    part of this community。 and we're honored to have an opportunity， to speak here
    with you all today。 But first of all。 you might wonder what is Instagram？ To many
    people， Instagram is this brunch sharing app。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Instagram自2012年开始使用Python，当时我们的第一位基础设施工程师谈到了如何在Python中构建Pub/Sub系统。我们很高兴成为这个社区的一部分，并且很荣幸能有机会今天在这里与大家讲话。但是首先，你可能想知道Instagram是什么？对许多人来说，Instagram是一个分享早午餐的应用。
- en: (audience laughing)， Which is just what we should use right now， on a regular
    Saturday morning。 It started back in 2010 and has quickly grown worldwide。 to
    become one of the largest social platforms。 Today， over 700 million monthly active
    users。 use Instagram on a regular basis。 So， a few weeks ago， Instagram was actually
    down。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: （观众笑）这正是我们在常规周六早晨应该使用的。它始于2010年，并迅速发展成为全球最大的社交平台之一。今天，有超过7亿的月活跃用户定期使用Instagram。所以，几周前，Instagram实际上是宕机的。
- en: because we were trying to deploy， a Python optimization into production。 I know。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们正在尝试将一个Python优化部署到生产中。我知道。
- en: '![](img/711a2f93a070477c7fb7502d1b7813fa_3.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/711a2f93a070477c7fb7502d1b7813fa_3.png)'
- en: And this is what happened on the news。 (audience laughing)， But in all seriousness。
    Instagram is a social media platform。 And our mission is to help strengthen relationships。
    through shared experiences for people。 Today， you can tell a story of your life
    on Instagram。 You can communicate visually with your friends， and family on Instagram。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这在新闻中得到了报道。（观众笑）但说实话，Instagram是一个社交媒体平台。我们的使命是通过共享体验帮助增强人际关系。今天，你可以在Instagram上讲述你的生活故事。你可以与朋友和家人进行视觉沟通。
- en: You can go live on Instagram。 And more than just brunch photos， you can explore
    about anything。 From animals to nature， from beauty to shopping， from F1 racing
    to paint mixing。 which is something I learned new recently。 Whatever your interest
    is， I guarantee you。 you will be able to find something on Instagram。 So let's
    go back to 2012， sorry， 2015。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在Instagram上进行直播。除了早午餐照片，你几乎可以探索任何事物。从动物到自然，从美妆到购物，从F1赛车到调色，这是我最近学到的新知识。无论你的兴趣是什么，我可以保证，你都能在Instagram上找到相关内容。让我们回到2012年，抱歉，是2015年。
- en: when I first came to PyCon in Montreal。 And we had a beautiful booth and many
    nice works。 And by the way， we still have a beautiful booth， and nice works today。
    and you're welcome to stop by。 So many people came over and asked us the same
    question， Instagram。 what the hell are you doing at PyCon？ And at first， I thought
    they don't know what Instagram is。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当我第一次来到蒙特利尔的PyCon时，我们有一个漂亮的展位和许多优秀的作品。顺便说一下，我们今天依然有一个漂亮的展位和优秀的作品，欢迎你们过来参观。很多人过来问我们同一个问题，Instagram。你们在PyCon干什么？起初，我以为他们不知道Instagram是什么。
- en: so I started repeating myself and told them， that we're a brunch sharing app。
    And I got interrupted really quickly。 No， no， I know what Instagram is。 My friends
    and family talk about it all the time。 My question is。 what are you doing at a
    Python conference？ So once they learn we're a complete Python shop。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我开始重复自己，告诉他们我们是一个分享早午餐的应用。然后我很快被打断。 不，不，我知道Instagram是什么。我朋友和家人一直在谈论它。我的问题是，你们在一个Python会议上做什么？所以一旦他们了解到我们是一个完全使用Python的团队。
- en: the immediate follow-up question usually is， wow， how do you run Django and
    Python at that scale？
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 紧接着的问题通常是，哇，你们如何在如此规模下运行Django和Python？
- en: Or maybe a more debate-provoking question would be， why haven't you rewritten
    everything in Node。js yet？ And if you will， replace Node。js with Rust， or language
    of your preference。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 或许一个更具争议性的问题是，为什么你们还没有把一切重写成Node.js？如果你愿意，把Node.js替换为Rust或你偏好的语言。
- en: '![](img/711a2f93a070477c7fb7502d1b7813fa_5.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/711a2f93a070477c7fb7502d1b7813fa_5.png)'
- en: So why did Instagram choose Python in the first place？ To answer this question。
    we have to go back to 2010， and dig the two co-founders， Kevin and Mike。 Now these
    are two product guys， with no real backend experiences back then。 So naturally。
    when they started， they looked around for the best available framework。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 那么Instagram为什么选择Python呢？要回答这个问题，我们得回到2010年，深入了解两位联合创始人，凯文和迈克。这两位当时没有真正后端经验的产品经理，自然在开始时就寻找最佳的可用框架。
- en: to help them support the product they wanted to build。 And here's what they
    found out。 (audience laughing)， (audience applauding)， It turns out that Django
    and Python framework。 is one of the most popular framework， that the co-founders
    have knowledge of。 So after watching a bunch of tutorials and documentations。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 帮助他们支持他们想要构建的产品。于是他们发现了这些。（观众笑），（观众鼓掌），结果发现Django和Python框架是联合创始人所了解的最受欢迎的框架之一。所以在观看了一些教程和文档后。
- en: they set off on their way to 700 million users。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 他们开始朝着7亿用户的目标前进。
- en: '![](img/711a2f93a070477c7fb7502d1b7813fa_7.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/711a2f93a070477c7fb7502d1b7813fa_7.png)'
- en: Now， what does Instagram love about Python today？ First of all， Python is famous。
    for being a developer-friendly language。 That is really easy to become productive
    with。 In fact。 both Lisa and I had only C and C++ background， and we started serious
    Python development。 after we joined Instagram a few years ago。 Being a popular
    language also means that it's really easy。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，今天Instagram为什么喜欢Python？首先，Python以开发者友好的语言而著称，真的很容易让人提高生产力。事实上，Lisa和我当时只有C和C++的背景，我们是在几年前加入Instagram后开始认真开发Python的。流行的语言意味着，找工作的人非常容易。
- en: to tap into the large pool of talented engineers， who wants to work in Python。
    So after many reasons we heard， that people want to join Instagram， one of the
    frequent ones being。 I want to build stuff using Python。 Even though we were on
    a very ancient version of Django。 for a long time， we were nonetheless able， to
    leverage the maturity of the framework。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 可以接触到大量渴望使用Python工作的优秀工程师。在我们听到的许多想加入Instagram的原因中，频繁的一条是：我想用Python来构建东西。尽管我们在很长一段时间内使用的是非常古老的Django版本，但我们依然能够利用这个框架的成熟性。
- en: and focus ourselves on the business logic， and shipping product。 So as an example。
    for over five years， we used the Django workflow， to manage all of Instagram's
    user information。 That is， we ran out of 32-bit user IDs， way before we ran out
    of the capacity。 the capability provided by the Django framework。 And in fact，
    we've taken Django and Python stack。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 而是专注于业务逻辑和产品发布。因此，作为一个例子，五年来，我们使用Django工作流管理所有Instagram的用户信息。也就是说，我们在能力达到之前，早就用完了32位用户ID，而Django框架提供的能力还没有用完。事实上，我们已经采用了Django和Python的堆栈。
- en: quite far by now。 So very early in the days， we've added sharding support to
    the ORM layer of Django。 in order to scale out the storage needs， for our social
    graph data。 Counterintuitively。 we have disabled garbage collection， in Python
    to improve memory utilization。 in our memory utilization efficiency。 And you can
    follow the details of this。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在已经走得很远。因此，在早期，我们在Django的ORM层中增加了分片支持，以满足我们的社交图数据的存储需求。出人意料的是，我们禁用了Python中的垃圾回收，以提高内存利用率，提升内存利用效率。你可以关注这方面的详细信息。
- en: on our Instagram engineering blog。 We've also expanded Instagram to run across。
    multiple geographically distributed data centers。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的Instagram工程博客上。我们还扩展了Instagram，使其能够运行在多个地理分布的数据中心。
- en: '![](img/711a2f93a070477c7fb7502d1b7813fa_9.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/711a2f93a070477c7fb7502d1b7813fa_9.png)'
- en: And we're comfortable to scale Instagram， to as many users that are interested
    in using it。 as we could find。 And this is our very own Karl Meyer， talking about
    scaling Django。 at the annual Django Underhood Conference。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们很乐意将Instagram扩展到尽可能多的感兴趣的用户。这是我们自己的卡尔·迈耶在年度Django Underhood大会上谈论扩展Django。
- en: '![](img/711a2f93a070477c7fb7502d1b7813fa_11.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/711a2f93a070477c7fb7502d1b7813fa_11.png)'
- en: But it's more than that。 In fact， picking Python as the programming language。
    helps to influence and shape the engineering culture， here at Instagram。 We prefer
    to use proven technologies。 Our co-founder Mike Krieger famously said once。 that
    our users do not care what database， Instagram runs on。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 但这不仅仅是这样。事实上，选择Python作为编程语言，帮助影响和塑造了Instagram的工程文化。我们倾向于使用经过验证的技术。我们的联合创始人迈克·克里格曾经说过，我们的用户并不在乎Instagram运行在什么数据库上。
- en: They certainly don't care what language， Instagram is developed in。 The simple
    and pragmatic nature of Python， allows our engineers， our developers。 to focus
    on scoping and solving the real problems， for our users and our products。 rather
    than getting stuck on some language details。 But you might wonder， Python is still
    slow。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 他们确实不在乎Instagram是用什么语言开发的。Python简单实用的特性，使我们的工程师和开发者能够专注于为用户和产品解决真正的问题，而不是被一些语言细节所困扰。但你可能会想，Python仍然很慢。
- en: right？ Well， if you were here yesterday， you know that Python is not slow。 for
    processing hundreds of petabytes of astronomy data。 It might be slow if you're
    doing high-frequency trading， or low-level bit operations。 But we believe at Instagram，
    our bigger bottleneck is developer velocity。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对吧？如果你昨天在这里，你会知道Python在处理数百PB的天文数据时并不慢。如果你在进行高频交易或低级位操作时，可能会慢。但我们在Instagram相信，我们更大的瓶颈是开发者的速度。
- en: not so much on pure code velocity。 (audience applauding)。 So our conclusion
    for which we're certainly biased。 is that you can get to a few hundred million
    users， with your product using Python。 before worrying about the performance，
    of your framework and language。 Now。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅仅关注纯粹的代码速度。（观众鼓掌）所以我们的结论，虽然我们肯定有偏见，是你可以用Python在不担心框架和语言性能的情况下，获得几亿用户。现在。
- en: that's not to say we don't care about scaling Python。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是说我们不关心扩展Python。
- en: '![](img/711a2f93a070477c7fb7502d1b7813fa_13.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/711a2f93a070477c7fb7502d1b7813fa_13.png)'
- en: At some point， we realized that as we continue， to scale our team and our product。
    our server growth is far outpacing our user growth。 And things would only get
    worse。 as we continue to add more engineers to the team， and ship more product
    to production。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在某个时刻，我们意识到，随着我们团队和产品的不断扩展，服务器的增长远远超过了用户的增长。随着我们继续增加更多工程师和推出更多产品，这种情况只会变得更糟。
- en: '![](img/711a2f93a070477c7fb7502d1b7813fa_15.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/711a2f93a070477c7fb7502d1b7813fa_15.png)'
- en: So here's our strategy to address Python efficiency。 We started by building
    extensive tools。 to profile and understand our performance bottleneck。 We proactively
    push critical but stable components， into native language implementations。 such
    as C and C++， a prime example being the memcache access library。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这是我们解决Python效率的策略。我们开始建立广泛的工具，以分析和理解我们的性能瓶颈。我们主动将关键但稳定的组件推向本地语言实现，如C和C++，一个主要的例子就是memcache访问库。
- en: We've also exploited using scitheinization as a weapon， to dramatically improve
    our performance。 One of our engineers， Alex Olaf， will be talking about this later
    in the afternoon。 And finally。 as we start to look for the next 700 million users。
    we're going to entertain some of the bigger ideas。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还利用了科学化作为武器，显著提升我们的性能。我们的工程师之一，Alex Olaf，将在下午稍晚时分享这方面的内容。最后，随着我们开始寻找下一个7亿用户，我们将考虑一些更大的想法。
- en: maybe making the whole Django stack completely async， or perhaps writing a new
    Python runtime。 So we realized that we have a lot of challenges， and opportunities
    ahead of us。 And we're committed to continue to push the boundaries， of running
    Python at Instagram。 But there is one small problem。 For a very long time， like
    everyone else， we run on Python 2。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 也许会让整个Django堆栈完全异步，或者编写一个新的Python运行时。所以我们意识到，我们面临许多挑战和机会。我们承诺将继续推动在Instagram上运行Python的边界。但有一个小问题。很长一段时间以来，像其他人一样，我们一直在使用Python
    2。
- en: 7 and Django 1。3。 Yes。 And we have a， even our recruiter back in 2015。 knows
    how to say that to potential people。 And we have a list of small but dirty patches。
    sprinkled across our code base。 So we thought to ourselves。 we're going to be
    stuck on this setup forever。 As if we didn't have enough challenges。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 7和Django 1.3。没错。我们甚至在2015年的招聘人员也知道如何对潜在候选人说这件事。我们在代码库中还有一些小但复杂的补丁。我们心想，难道我们会永远停留在这个设置上吗？就好像我们没有足够的挑战一样。
- en: after rounds of investigations and discussions， we actually decided to upgrade
    our entire code base。 to Python 3。 (audience applauds)， Which to some people is
    a whole new programming language。 And after a little bit of work， today I'm happy
    to announce that Instagram。 has been running its entire Django web service fleet，
    and the salary worker fleet on Python 3。6。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 经过多轮调查和讨论，我们最终决定将整个代码库升级到Python 3。（观众鼓掌）对某些人来说，这是一种全新的编程语言。在经过一些努力后，今天我很高兴地宣布，Instagram的整个Django网络服务和薪资工作队伍已经在运行Python
    3.6。
- en: for a few months now。 (audience applauds)， So what happened and how did we get
    here？ With that。 I'm going to hand over to my colleague Lisa， to tell you about
    our road to Python 3。 (audience applauds)， - Thank you， V。 And yes， you heard
    it right。 Instagram has been running fully on Python 3， for a few months。 For
    the rest of the talk。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这已经持续了几个月了。（观众鼓掌）那么，发生了什么，我们是如何走到这一步的？有了这些，我将把时间交给我的同事Lisa，让她告诉你们我们的Python 3之路。（观众鼓掌）-
    谢谢你，V。没错，你听到了，Instagram已经完全在运行Python 3几个月了。在接下来的讲座中。
- en: I'm gonna rewind and go back to over a year ago， and share with you why we moved
    to Python 3。 some of the steps we took to get here， specific challenges we fixed，
    and finally where we are today。 So who was just saying Python is running well
    for us？
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我想倒回到一年前，和大家分享我们为什么转向Python 3，达到这个目标所采取的步骤，解决的具体挑战，以及最终我们今天所处的位置。那么，谁刚才说Python运行得很好呢？
- en: '![](img/711a2f93a070477c7fb7502d1b7813fa_17.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/711a2f93a070477c7fb7502d1b7813fa_17.png)'
- en: Why wrap the boat？ In last year's Python， Grito announced that Python 2 support
    will end in 2020。 And this time it looks like it's gonna stick。 (audience laughs)，
    Fortunately。 we were already moving in that direction， before that。 As Instagram's
    infrastructure team。 our mission is to keep Instagram alive today and tomorrow。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么要包裹船只？在去年的Python大会上，Grito宣布Python 2的支持将在2020年结束。这次看起来真的要结束了。（观众笑）幸运的是，在那之前我们已经朝这个方向迈进。作为Instagram的基础设施团队，我们的使命是让Instagram在今天和明天都能继续运行。
- en: So we're always looking for potential skating bottlenecks， that comes our way
    down the road。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们总是在寻找未来可能出现的瓶颈。
- en: '![](img/711a2f93a070477c7fb7502d1b7813fa_19.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/711a2f93a070477c7fb7502d1b7813fa_19.png)'
- en: six months， one year and beyond。 So here are some of our motivations。 First
    is dev velocity。 Take a look at this very typical Python method， with an ambiguous
    argument， max ID。 It's integer。 string， tuple。 Well， look， our developers have
    actually been very nice。 to put a doc string in there。 This doesn't really scale。
    It's best effort。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 六个月、一年及更长时间。所以这是我们的一些动机。首先是开发速度。看看这个非常典型的Python方法，参数模糊，max ID。它可以是整数、字符串、元组。我们的开发人员实际上非常好，放了一段文档字符串。但这并不真正可扩展。只能尽力而为。
- en: There's no standard tool to enforce the typing。 The comment can also easily
    get out of sync。 with the code itself， worse than no comment。 At Instagram， many
    developers work。 with multiple programming languages， C++， Java， even PHP in its
    modern form of hack supports typing。 So that has been one of the most important
    feature requests， from our product engineers。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 没有标准工具来强制执行类型。注释也很容易与代码本身不同步，甚至比没有注释更糟。在Instagram，许多开发人员使用多种编程语言，包括C++、Java，甚至PHP的现代形式Hack也支持类型。因此，这一直是我们产品工程师最重要的功能请求之一。
- en: It was great to see it standardized in Python 3。 The second motivation is for
    scaling our server performance。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 很高兴看到它在Python 3中标准化。第二个动机是为了提升我们的服务器性能。
- en: '![](img/711a2f93a070477c7fb7502d1b7813fa_21.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/711a2f93a070477c7fb7502d1b7813fa_21.png)'
- en: Let's first take a high level look， at Instagram's building blocks。 User requests
    come into the web server， which accesses various backend services。 to retrieve
    information。 It might also dispatch some tasks to the async tier， to execute。
    for example， notification， et cetera。 By far， the largest tiers that we have is
    the web。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先高层次地看一下Instagram的构建模块。用户请求进入网络服务器，访问各种后端服务以检索信息。它也可能将一些任务调度到异步层执行，例如通知等。目前，我们拥有的最大层是网络。
- en: and async tier where we run Python。 Now let's zoom in on one server。 On each
    web server。 we run N processes， along M CPU cores。 Each process can only process
    one request at a time。 When the process is waiting for external services， to respond
    with various user information。 it cannot execute CPU locally。 So we would configure
    M to be a lot more than M。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以及我们运行Python的异步层。现在让我们聚焦在一台服务器上。在每台网络服务器上，我们运行N个进程，沿用M个CPU核心。每个进程一次只能处理一个请求。当进程在等待外部服务响应各种用户信息时，它无法在本地执行CPU。因此，我们会将M配置得远远超过M。
- en: to avoid CPU starvation。 But the more processes we have also means less memory
    budget。 per process and more frequent process restarts， which in turn will cause
    more CPU consumption。 during the process warmup。 The optimal number of N will
    depend on the CPU architecture。 the current user workload and the ever-changing
    code base。 And it needs continuous tuning。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免CPU饥饿。但是，进程越多也意味着每个进程的内存预算越少，以及更频繁的进程重启，这反过来又会导致更多的CPU消耗。在进程预热期间，N的最佳数量将取决于CPU架构、当前用户工作负载和不断变化的代码库。这需要持续的调优。
- en: to achieve maximum server capacity。 What if we can have fewer processes。 where
    N is equal to M perhaps， but each process can process multiple user requests concurrently。
    While some requests are waiting for external network responses， we can execute
    other。 we can serve other requests， on the Django。 Async。io is very promising
    in this respect。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现最大服务器容量。如果我们可以有更少的进程，N可能等于M，但每个进程可以同时处理多个用户请求。当某些请求在等待外部网络响应时，我们可以执行其他请求，我们可以在Django上服务其他请求。Async。io在这方面非常有前景。
- en: to help us move forward。 And we were very happy to see it natively supported。
    in Python 3 as opposed to the more scattered effort。 and incompatible solutions
    that existed in Python 2。 Third motivation extends beyond Instagram。 Python has
    a very active development community， that continues to approach the programming
    language forward。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 帮助我们向前发展。我们很高兴看到它在Python 3中原生支持，而不是像Python 2中那样散乱的努力和不兼容的解决方案。第三个动机超越了Instagram。Python拥有一个非常活跃的开发社区，继续推动这门编程语言向前发展。
- en: in all aspects thanks to all of you， who are doing great work here。 But it will
    only continue on Python 3， and we want to be part of it。 As we was also saying。
    over the years we have made， various patches to the older versions of Django and
    Python。 but that was very hard to upstream。 So we want to change that by keeping
    up。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在各个方面，多亏了你们所有人，在这里做出出色的工作。但它只会继续在Python 3上进行，我们希望成为其中的一部分。正如我们所说的，多年来我们对旧版本的Django和Python进行了各种补丁，但这很难上游。因此，我们希望通过跟上进展来改变这一点。
- en: with the latest releases of this software， so that we can contribute back to
    the community more easily。 (audience applauding)， So those were great motivations。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 随着这个软件的最新版本发布，我们可以更轻松地回馈社区。（观众鼓掌）所以这都是很好的动机。
- en: '![](img/711a2f93a070477c7fb7502d1b7813fa_23.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/711a2f93a070477c7fb7502d1b7813fa_23.png)'
- en: and we got a green light to move forward with the project。 Let's just drop everything
    and work on Python 3。 Well， that's not gonna happen， right？
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了继续推进项目的绿灯。让我们放下所有，专注于 Python 3。好吧，这不会发生，对吧？
- en: '![](img/711a2f93a070477c7fb7502d1b7813fa_25.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/711a2f93a070477c7fb7502d1b7813fa_25.png)'
- en: So we have two mandates that we need to follow。 One， there shall be no user
    impact。 no service downtime for the upgrade。 Two， there shall be no slowdown of
    product launches。 So our product engineers will continue to ship， richer user
    experience while we move the stack。 to Python 3 under the hood。 How do we make
    that happen？ Well。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们有两个必须遵循的命令。第一，不能影响用户。升级不能有服务停机时间。第二，产品发布不能放慢。所以我们的产品工程师将继续发布更丰富的用户体验，同时我们在后台将堆栈迁移到
    Python 3。我们如何做到这一点？好吧。
- en: before we look at several options that we considered， let's take a look at how
    Instagram ships code。 to production。 Instagram develops code on master with no
    branches。 Our development philosophy is to make small and focused diffs。 even
    for large features and refactors。 During the development phase。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们查看几个考虑过的选项之前，先看看 Instagram 如何将代码发布到生产环境。Instagram 在主分支上开发代码，不使用分支。我们的开发理念是进行小而集中的差异化，即使对于大型特性和重构。在开发阶段。
- en: changes are checked into master。 Typically within an hour， it is pushed to production。
    At this point， the feature may not be visible to the user， hiding behind a gated
    configuration。 When the feature is fully developed and tested， it doesn't go live。
    Commit like this happens on the master， tens of times a day。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 更改会被检查到主分支上。通常在一个小时内，这些更改会被推送到生产环境。此时，这个特性可能对用户不可见，隐藏在一个受限的配置后面。当特性完全开发和测试完毕后，它不会立即上线。这样的提交在主分支上每天发生数十次。
- en: and deployment continues to happen throughout the day。 With that in mind。 let's
    take a look at some options， that we consider for migration。 First option may
    be pretty obvious for a lot of companies， to take。 When you develop a new feature。
    you cut the branch， develop on it， and merge it back。 It doesn't really work well
    for us。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 部署在一天中持续进行。考虑到这一点，让我们看看一些我们考虑过的迁移选项。对于许多公司来说，第一个选项可能很明显。当你开发一个新特性时，你会切分支，进行开发，然后合并回去。这对我们来说并不太适用。
- en: As you saw in the previous slides， we have tons of commits on the master every
    day。 and Python 3 changes really overlaps， with the whole code base。 So there
    will be great branch synchronization overhead， that is error prone。 Also。 if we
    have run this branch， diverge this branch from master for a long time。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在前面的幻灯片中看到的，我们每天在主分支上有大量的提交，而 Python 3 的更改与整个代码库实际上重叠。因此，分支同步的开销会很大，容易出错。此外，如果我们运行这个分支，与主分支长时间分叉。
- en: and haven't run it in production， merging back will be a huge risk。 If only
    a handful of developers work on the branch。 then we lose the opportunity to educate
    other engineers。 who are more than happy to help with the migration。 So this option
    was out。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们还没有在生产环境中运行它，那么合并回去将是一个巨大的风险。如果只有少数开发人员在这个分支上工作，那么我们就失去了教育其他工程师的机会，而他们更乐意帮助迁移。所以这个选项被排除了。
- en: The next observation is that we run the same code， on all of our web servers。
    Any of the web servers can serve any requests。 What if we convert one endpoint
    at a time。 and create a separate pool that runs Python 3， and run those endpoints
    that have been converted？
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的观察是，我们在所有的 Web 服务器上运行相同的代码。任何 Web 服务器都可以处理任何请求。如果我们逐个端点进行转换，并创建一个单独的池来运行
    Python 3，运行那些已经转换的端点，会怎样呢？
- en: That might work well for some applications。 Like at Facebook， each team owns
    a different binary。 and they can migrate at their own pace。 It doesn't really
    work well for us with one binary。 Many of our endpoints share common modules，
    that continue to evolve。 Many of our developers work on multiple endpoints。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这对某些应用程序可能效果不错。例如在 Facebook，每个团队负责不同的二进制文件，他们可以按照自己的节奏进行迁移。这对我们来说并不太适用，因为我们只有一个二进制文件。我们的许多端点共享不断发展的公共模块。我们许多开发人员同时在多个端点上工作。
- en: so they all have context switch between the different Python， versions。 And
    there's overhead in managing different pools， and they keep on shrinking and growing。
    So that option is out as well。 Well， I just mentioned common modules。 What if
    we extract those common modules out， and make them like a microservice？
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，它们在不同的Python版本之间都有上下文切换。管理不同的池也有开销，而且这些池不断缩小和扩大。因此，这个选项也不再可行。好吧，我刚提到的公共模块。假如我们将这些公共模块提取出来，做成微服务呢？
- en: So instead of local function call， when we need to access these services。 we
    just go out and make a remote procedure call， to the microservices。 So that would
    require massive code restructuring， and incur much higher user latency because
    each request。 will now have to make multiple hubs to access these microservices。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，当我们需要访问这些服务时，不再使用本地函数调用，而是直接进行远程过程调用，访问微服务。因此，这将需要大规模的代码重构，并且会导致更高的用户延迟，因为每个请求现在必须经过多个中心来访问这些微服务。
- en: And the deployment is also much more complex， than what we have now。 So that
    option is out as well。 Well， since we're so very good at delivering large changes，
    via small steps。 we decided that we're going to follow， the same practice and
    just make math or compatible。 so that it can run under both Python 2 and Python
    3， virtual environments。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 而且部署也比我们现在的要复杂得多。所以这个选项也不再可行。好吧，既然我们在通过小步骤交付大型变更方面非常擅长，我们决定遵循同样的做法，只需确保兼容，这样它就可以在Python
    2和Python 3的虚拟环境下运行。
- en: So we'll make small changes on master that are both--。 that are version compatible
    when production's still running Python， 2。 And when all the code is ready， we
    switch the virtual M to Python 3， and pray。 [LAUGHTER]， Actually。 we did better
    than that。 We managed not to make headline news during the Python 3。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们将在主干上进行小的更改，这些更改在生产仍在运行Python 2时是版本兼容的。当所有代码准备就绪时，我们将虚拟机切换到Python 3，并祈祷。[笑声]实际上，我们做得比那更好。在Python
    3期间，我们成功地没有引起头条新闻。
- en: migration via these carefully staged phases。 So the first two major pieces of
    work。 were done in parallel， where we handle the third-party packages。 and make
    massive compatible changes in our resource code。 During this stage。 the code changes
    we make， we don't know whether it works for Python 3， because we're not running
    it。
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些精心分阶段的迁移。因此，前两项主要工作是并行完成的，我们处理第三方包，并在我们的资源代码中进行大量兼容性更改。在这个阶段，我们所做的代码更改，不知道是否适用于Python
    3，因为我们没有运行它。
- en: But we know that it works for Python 2， because the code is already running
    in production。 Then we have an intensive， very productive， two-month-of-unit test
    fixes。 followed by a slow and careful， rollout in production。 I'll cover each
    of these stages in more detail next。 Instagram has been using open source packages。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们知道它在Python 2中是有效的，因为代码已经在生产中运行。然后我们进行了为期两个月的密集且高效的单元测试修复，随后在生产中进行了缓慢而谨慎的推出。我将接下来更详细地介绍每个阶段。Instagram一直在使用开源包。
- en: where we can since day one， and we continue to do so。 So the first rule that
    we put in place is when you add a new， dependency to our source code。 it must
    be Python version compatible， so that we stop the bleeding of more Python 2-only
    packages。 in our repository。 Over the years， we have accumulated a number of packages，
    that we no longer use。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 自第一天起我们就能做到，并且继续这样做。因此，我们制定的第一条规则是，当你向我们的源代码中添加新的依赖项时，必须与Python版本兼容，以便我们停止在我们的代码库中引入更多仅支持Python
    2的包。多年来，我们积累了一些不再使用的包。
- en: so it's time to clean them up。 Also， some Python 2 packages are no longer needed
    in Python 3。 because they're natively supported。 So delete them as well。 We then
    make a number of upgrades to the packages。 A bigger one is Django from 1。3 to
    1。8。 It was necessary because Django 1。3 did not support Python 3。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在是清理它们的时候了。此外，一些Python 2的包在Python 3中不再需要，因为它们得到了原生支持。所以也要删除它们。然后我们对包进行了多项升级。最大的一项是将Django从1.3升级到1.8。这是必要的，因为Django
    1.3不支持Python 3。
- en: But also it was a long overdue upgrade， as we mentioned。 But because we had
    sprinkled dips around the code base， that was hard to end-tangle。 there had not
    been enough incentive， to move it forward until now。 With this upgrade。 we managed
    to make the Django code base， completely intact with minimum changes in our code
    base for customization。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 但这也是一个早该进行的升级，正如我们所提到的。但因为我们在代码库中分散了很多依赖，使得其难以解开。直到现在，缺乏足够的激励来推动它的进展。通过这次升级，我们设法使Django代码库保持完好，最小化了我们代码库中自定义的更改。
- en: so that future upgrades of Django will not be as prohibitive。 At the same time。
    we use modernized utility to make massive， modifications to our source code。 We
    would do one fix at a time across many different files。 as opposed to take one
    file at a time and make all the fixes on that file。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这样未来的Django升级就不会太过昂贵。与此同时，我们使用现代化的工具对源代码进行大规模修改。我们会在多个文件中一次性进行一个修复，而不是一次只处理一个文件并在该文件上进行所有修复。
- en: It makes the code review process much easier when the code reviewer。 is only
    looking at one fix at a time。 And here are the changes we made during the modification。
    But as you can imagine， during this process， we are raising with our product。
    engineers who would continue to check in shiny new features。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当代码审查者一次只关注一个修复时，代码审查过程会变得更简单。而这里是我们在修改过程中所做的更改。但正如你所想象的，在这个过程中，我们还在与产品工程师进行沟通，他们将继续提交闪亮的新功能。
- en: but continue to break Python 3 compatibility。 And there was no really good way
    to capture these errors and prevent that from happening。 until we get unit tests
    in place。 I don't have to extort the many merits of unit tests。 but I want to
    say that it has been especially helpful in our Python 3 migration。 With unit tests。
    we don't have to go out and look for problems with Python 3。 They're right there
    staring back at us。
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 但仍然会打破Python 3兼容性。而且直到我们实施单元测试之前，没有好的方法来捕捉这些错误并防止它们发生。我不想强调单元测试的诸多优点，但我想说，在我们的Python
    3迁移中，它们尤其有帮助。通过单元测试，我们不需要外出寻找Python 3的问题，它们就在我们面前。
- en: All we need to do is to fix them。 That's easy for developers。 And unit tests
    are easy to reproduce。 They're easy to iterate with the fixes。 Many engineers
    who don't even own the code would be able to jump in and help with the fix。 So
    for the next two months， we were basically hunkering down。 and had our most productive
    two months in the whole Python 3 migration。 Well。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的就是修复它们。这对开发者来说很简单。单元测试也容易重现，便于与修复进行迭代。许多并不拥有代码的工程师也能跳入并协助修复。因此在接下来的两个月里，我们基本上全力以赴，并在整个Python
    3迁移中度过了我们最富有成效的两个月。
- en: I did mention that our commits will go out to production within an hour of it
    being in master。 I did not mention that each of these commits have to go through
    many thousands of unit tests。 before they can actually land in master。 At the
    beginning of Python 3 project。 only a handful of those tests would pass for Python
    3。 But we don't want them to regress。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我提到过我们的提交将在合并到主分支后一个小时内发布到生产环境。我没有提到的是，每个提交都必须通过成千上万的单元测试，才能真正合并到主分支。在Python
    3项目初期，仅有少数这些测试能在Python 3上通过。但我们不想让它们退步。
- en: So we added an inclusion list where we put in the known passing tests。 and add
    that to the lending process。 So now each diff that comes into the master has to
    pass for both Python 2。 as well as the Python 3 test that should pass。 As we fix
    the unit tests。 the list grew longer and longer。 Until it made sense to switch
    to an exclusion list where we put in the known failed tests。
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们添加了一个包含已知通过测试的列表，并将其纳入流程中。现在，每个合并到主分支的差异都必须通过Python 2和Python 3的测试。随着我们修复单元测试，列表越来越长，直到有意义地转向一个排除列表，将已知失败的测试放入其中。
- en: At this point， any new test that people are adding for their new feature。 or
    further existing feature have to be Python 3 compatible by default。
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，任何人添加的新测试，无论是针对新功能还是现有功能，都必须默认兼容Python 3。
- en: '![](img/711a2f93a070477c7fb7502d1b7813fa_27.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/711a2f93a070477c7fb7502d1b7813fa_27.png)'
- en: With decent test coverage， I was very happy to bring up my Instagram feed on
    my sandbox。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 有了不错的测试覆盖率，我很高兴能在我的沙盒中展示我的Instagram动态。
- en: '![](img/711a2f93a070477c7fb7502d1b7813fa_29.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/711a2f93a070477c7fb7502d1b7813fa_29.png)'
- en: that runs Python 3 and get my daily dose of cat videos。 But this is just a very
    small step to work production。
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码运行Python 3，能让我每天看猫视频。但这只是进入生产的一个非常小的步骤。
- en: '![](img/711a2f93a070477c7fb7502d1b7813fa_31.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/711a2f93a070477c7fb7502d1b7813fa_31.png)'
- en: There are limitations to unit tests。 We're not 100% covered。 That's one of my
    dreams。 Many external services have mocks in tests and data compatibility issues。
    typically don't show up in unit tests where the read and writes are happening。
    with the same software version。 So now it's time to put Python 3 in the real world。
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试有其局限性。我们并未100%覆盖。这是我的一个梦想。许多外部服务在测试和数据兼容性问题上存在模拟，这通常不会在读取和写入相同软件版本时的单元测试中显现。因此，现在是把Python
    3推向现实世界的时候了。
- en: By switching developers sandbox to Python 3。 This is a much more slower and
    painful process than the unit test faces。 Because it's a bit like a peeling audience。
    Until you fix the outer layers of issues。 you're not going to see the issues at
    the next layer。 But we kept on finding issues。 fixing them and adding unit tests
    back， where they should have been exposed in the first place and repeat the process。
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将开发者沙箱切换到Python 3。这是一个比单元测试面对的过程要慢得多且痛苦得多。因为这有点像剥洋葱。直到你修复外层的问题，你才会看到下一层的问题。但我们不断发现问题，修复它们并重新添加单元测试，应该在最初暴露的地方，并重复这个过程。
- en: By switching the sandbox to Python 3， we also made sure that anybody who's developing
    new features。 would have the feature be Python 3 compatible from the get-go。 When
    developers stop reporting issues on their sandbox。 we then expose Python 3 to
    Facebook employees， who use a much wider range of Instagram features than just
    the developers。
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将沙箱切换到Python 3，我们还确保任何正在开发新功能的人，从一开始就使功能兼容Python 3。当开发者停止报告他们沙箱中的问题时，我们就将Python
    3暴露给Facebook员工，他们使用的Instagram功能比开发者更广泛。
- en: '![](img/711a2f93a070477c7fb7502d1b7813fa_33.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/711a2f93a070477c7fb7502d1b7813fa_33.png)'
- en: And then slow rollout to an increasing percentage of our users。 Well。 this doesn't
    actually represent the time we're spending on each of these circles。 In fact。
    we're spent increasingly less time in the outer circles。 Because we found and
    fixed majority of the issues during the developer and employee testing phase。
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 然后慢慢向我们越来越多的用户推出。这并不代表我们在每一个圈子上花费的时间。实际上，我们在外圈花费的时间越来越少。因为我们在开发者和员工测试阶段找到了并修复了大多数问题。
- en: and focused more on the performance tuning during the user rollout phase。 So
    what are the specific changes that we made during unit tests and developer testing？
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在用户推出阶段，我们更多地关注性能调优。那么我们在单元测试和开发者测试中具体做了哪些改变？
- en: '![](img/711a2f93a070477c7fb7502d1b7813fa_35.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/711a2f93a070477c7fb7502d1b7813fa_35.png)'
- en: There are too many to enumerate。 And most of this is pretty boring to everybody。
    So I'm just going to list a few examples that captures the major categories of
    problems that we hit。 First， I'm loosely using Unicode to refer to Unicode string
    by string-related problems。
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这太多了，无法一一列举。而且大部分对大家来说都相当无聊。所以我将列举一些能够捕捉到我们遇到的主要问题类别的示例。首先，我粗略地使用Unicode来指代与字符串相关的Unicode字符串问题。
- en: '![](img/711a2f93a070477c7fb7502d1b7813fa_37.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/711a2f93a070477c7fb7502d1b7813fa_37.png)'
- en: At the beginning of the Python 3 migration project。 most people would basically
    add those four lines of code， at the top of each of your source file。 Well， we
    decided that we would skip the last two lines because they would cause subtle
    behavior differences for Python 2。 And in accordance with our mandate， we need
    to keep Python 2 completely sane and safe and error on making explicit changes
    for Python 3。
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python 3迁移项目的开始，大多数人基本上会在每个源文件的顶部添加这四行代码。我们决定跳过最后两行，因为它们会对Python 2造成微妙的行为差异。根据我们的指令，我们需要保持Python
    2完全安全，并在对Python 3进行显式更改时出错。
- en: '![](img/711a2f93a070477c7fb7502d1b7813fa_39.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/711a2f93a070477c7fb7502d1b7813fa_39.png)'
- en: So Unicode is the most prolific issues that were existing in our code base。
    And this is just one typical example。 We're creating a made HMAC new object with
    a string that should have been byte-string that creates a Python 3 exception。
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 所以Unicode是我们代码库中存在的最常见问题。这只是一个典型例子。我们用一个应该是字节字符串的字符串创建了一个新的HMAC对象，这会产生Python
    3的异常。
- en: '![](img/711a2f93a070477c7fb7502d1b7813fa_41.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/711a2f93a070477c7fb7502d1b7813fa_41.png)'
- en: The fix is just to convert the string to byte-string before you create the object。
    Well。 it's a little bit verbose， but more importantly， the developer has to think，
    "Am I running Python 2？
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 修复的办法是在创建对象之前将字符串转换为字节字符串。这有点冗长，但更重要的是，开发者必须思考，“我在运行Python 2吗？”
- en: Should I decode， encode my Python 3？ Decode encode after a while you get brain
    damage。"， So instead。 we created a number of helper functions with the purpose
    of the function in this name。
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我应该对我的Python 3进行解码和编码吗？经过一段时间后解码和编码你会脑袋疼。因此，我们创建了多个辅助函数，函数名即其目的。
- en: '![](img/711a2f93a070477c7fb7502d1b7813fa_43.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/711a2f93a070477c7fb7502d1b7813fa_43.png)'
- en: So it's easier to understand what it's trying to do and not the mechanism for
    us to get there。
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 所以理解它的目的更容易，而不是我们到达目的的机制。
- en: '![](img/711a2f93a070477c7fb7502d1b7813fa_45.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/711a2f93a070477c7fb7502d1b7813fa_45.png)'
- en: With that， the fix looks like this。 It's more succinct and it's much easier
    to understand。 Last time I checked， we had over 500 uses of these helper functions。
    so they were very helpful in improving the productivity in the Python 3 project。
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 修复的代码看起来是这样的。它更简洁，也更容易理解。上次我检查时，我们有超过500个使用这些辅助函数的案例，因此它们在提高Python 3项目的生产力方面非常有帮助。
- en: '![](img/711a2f93a070477c7fb7502d1b7813fa_47.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/711a2f93a070477c7fb7502d1b7813fa_47.png)'
- en: The next big challenge is data compatibility issue， especially with pickle。
    We use pickle to -- one of the use cases for pickle is to store data in memcache。
    and we use a highest protocol to encapsulate the data。 So when I converted my
    own sandbox to Python 3 and tried to reach my whole feed。
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个大挑战是数据兼容性问题，尤其是与pickle相关的问题。我们使用pickle，其中一个使用案例是将数据存储在memcache中。我们使用最高协议来封装数据。因此，当我将自己的沙盒转换为Python
    3并尝试访问我的整个数据流时。
- en: my fellow coworkers started to complain about exception that's happened in your
    own sandbox。 It turns out that highest protocol is 4 in Python 3 and 2 in Python
    2。 Oh， no problem。 It's easy fix that's hard-coded to 2， this common denominator。
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我的同事开始抱怨在你自己的沙盒中发生的异常。结果发现，Python 3中的最高协议是4，而Python 2中的最高协议是2。哦，没问题。这个简单的修复是硬编码为2，这是一个共同的基准。
- en: '![](img/711a2f93a070477c7fb7502d1b7813fa_49.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/711a2f93a070477c7fb7502d1b7813fa_49.png)'
- en: Coming from networking background， if you're speaking IPv4 or I'm speaking IPv4，
    we can communicate。 If I write with Python 2， with a simple dictionary， with a
    Unicode value。 I get an exception in Python 3 decoding。 Vice versa， if I encode
    the same data in Python 3。 the decoded result in Python 2 is different than the
    original data。
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 来自网络背景，如果你在讲IPv4或者我在讲IPv4，我们就可以通信。如果我用Python 2写一个简单的字典，包含一个Unicode值。我会在Python
    3解码时遇到异常。反之亦然，如果我在Python 3中编码相同的数据，那么在Python 2中的解码结果与原始数据不同。
- en: That's bad news for us because we use quite a few places pickle for exchanging
    information between different entities。 So we looked at several different options。
    Thrift is used in Facebook extensively for serialization and deserialization between
    different entities and has great backward compatibility support。
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这对我们来说是坏消息，因为我们在多个地方使用pickle来在不同实体之间交换信息。因此我们查看了几种不同的选择。Thrift在Facebook中广泛用于不同实体之间的序列化和反序列化，并具有很好的向后兼容性支持。
- en: It does incur higher schema definition overhead as well as encoding decoding
    costs。 Message pack on the other hand is comfortable performance-wise to pickle
    with very simple to use API。 But it lacks universal support for all kinds of data
    types。 In the end。 we looked at each of the pickle use cases and had to come up
    with different solutions with each of them。
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这确实会增加更高的模式定义开销以及编码解码成本。另一方面，消息打包在性能方面对简单使用的API的序列化非常友好。但它缺乏对所有类型数据的通用支持。最后，我们查看了每一个pickle的使用案例，并不得不为每个案例提出不同的解决方案。
- en: '![](img/711a2f93a070477c7fb7502d1b7813fa_51.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/711a2f93a070477c7fb7502d1b7813fa_51.png)'
- en: With memcache， what we decided to do is to cut the key space into two。 So Python
    2 and Python 3 never communicate with each other in that case。
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 对于memcache，我们决定将键空间分成两个。因此在这种情况下，Python 2和Python 3之间不会相互通信。
- en: '![](img/711a2f93a070477c7fb7502d1b7813fa_53.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/711a2f93a070477c7fb7502d1b7813fa_53.png)'
- en: Next up is iterators。 In Python 3， some of the methods that used to return lists
    have now become iterators such as these。 What's great performance-wise because
    when you don't have to compose a new list。 it's better performing。 But it creates
    subtle behavior differences。 When you walk through an iterator and consume those
    elements in the iterator， it disappears from it。
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是迭代器。在Python 3中，一些以前返回列表的方法现在变成了迭代器，例如这些。性能上很棒，因为当你不需要组成一个新的列表时，性能更好。但这也产生了微妙的行为差异。当你遍历一个迭代器并消费这些元素时，它们会从迭代器中消失。
- en: So you can really only use the iterator once。 Here in the example that bid us。
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你实际上只能使用迭代器一次。这里的例子正好说明了这一点。
- en: '![](img/711a2f93a070477c7fb7502d1b7813fa_55.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/711a2f93a070477c7fb7502d1b7813fa_55.png)'
- en: As you know， we use Python to optimize our runtime performance。 But Python files
    need to be pre-compiled。 So this is part of the script that does that。 Line 1
    has a list of Python files to compile。 Line 2 maps them to a particular class，
    instance。 that helps us in this process。 Line 3 checks if any of these files are
    still to be compiled and line 4 creates a pending list of them to work out。
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所知，我们使用 Python 来优化我们的运行时性能。但 Python 文件需要预编译。因此，这是执行该操作的脚本的一部分。第一行有一个待编译的
    Python 文件列表。第二行将它们映射到一个特定的类实例，这在这个过程中对我们很有帮助。第三行检查这些文件中是否还有未编译的文件，而第四行创建了一个待处理的文件列表以进行处理。
- en: While it works well for Python 2， when we converted to Python 3。 we found that
    the first file is never compiled。 Why is that？
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在 Python 2 中运行良好，但当我们转换到 Python 3 时，我们发现第一个文件从未被编译。为什么会这样？
- en: It's because line 2's map function has now become an iterator。 So when we're
    checking if any of the file is not compiled in line 3。 it consumes at least the
    first file from the iterator。 And line 4's build never has a 。pyx in it。 So the
    fix is pretty easy。 You just convert map back to a list。 Okay。
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为第二行的 `map` 函数现在变成了一个迭代器。所以当我们在第三行检查文件是否未编译时，它至少消耗了迭代器中的第一个文件。而第四行的构建中从来没有
    `.pyx` 文件。所以修复方法很简单。你只需将 `map` 转换回列表。好的。
- en: bugs like this can be very hard to spot。 If the picture that should have been
    on the top of my feed doesn't show up at all。 it's going to take a while to find
    out。 But it can be more serious for other problems。 So when you're converting
    your Python 3 project， always run。 futurize or modernize utility and convert all
    of your iterators back to Python 3's list。
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 像这样的错误可能很难发现。如果我信息流顶部应该出现的图片根本没有显示，那么找到问题将需要一段时间。但对于其他问题，这可能会更严重。因此，当你转换你的 Python
    3 项目时，始终运行 `futurize` 或 `modernize` 工具，并将所有的迭代器转换回 Python 3 的列表。
- en: And then you can walk through the diff and see where you can optimize if you're
    not using the iterator more than once。
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可以查看差异，看看如果你没有多次使用迭代器，哪里可以优化。
- en: '![](img/711a2f93a070477c7fb7502d1b7813fa_57.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/711a2f93a070477c7fb7502d1b7813fa_57.png)'
- en: Last one is not really Python 3 specific。 But you will most likely hit the problem
    when you're converting to Python 3。 So it's a simple dictionary with keys A， B，
    C。 What do you think the JSON dump output is？ Well。 it varies based on Python
    version as well as different runs for the same Python version。 So if your application
    really depends on the order of the JSON output。
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个问题并不特别针对 Python 3。但在你转换到 Python 3 时，你很可能会遇到这个问题。所以这是一个简单的字典，键为 A、B、C。你认为
    JSON 转储的输出是什么？好吧。这会根据 Python 版本以及同一 Python 版本的不同运行而有所不同。所以如果你的应用程序确实依赖于 JSON 输出的顺序。
- en: then you need to make it explicit。 We got bitten by this in the form of a severe
    performance regression when we determine if a configuration has changed based
    on the JSON output。 It took us a while to find the problem， so keep that in mind
    when you're debugging some tough issues。
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你需要明确指出。我们在根据 JSON 输出确定配置是否已更改时，遭遇了严重的性能回退。我们花了一段时间才找到这个问题，所以在调试一些棘手的问题时请记住这一点。
- en: '![](img/711a2f93a070477c7fb7502d1b7813fa_59.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/711a2f93a070477c7fb7502d1b7813fa_59.png)'
- en: Well， with those fixes and a whole number of others， we are ready to roll。 But
    something is still bugging us， performance。 At Instagram。 we use two metrics to
    measure web efficiency。 The first is CPU instructions per request。 the less the
    better。 And the second is maximum request per second that a server can support。
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，经过这些修复以及其他许多修复，我们准备好开始了。但有一件事仍然困扰着我们，性能。在 Instagram，我们使用两个指标来衡量网络效率。第一个是每个请求的
    CPU 指令，越少越好。第二个是服务器可以支持的最大请求数每秒。
- en: the more the better。 Typically， the two metric correlates。 So when we saw very
    happily that the first metric had a 12% decrease。 which is an improvement in our
    case， we expected to see a 12% improvement in a second metric。 But we didn't。
    What happened？ We know that memory configuration can have an impact on the second
    metric。
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 越多越好。通常，这两个指标是相关的。因此，当我们很高兴地看到第一个指标下降了 12%，这在我们的情况下是一个改进时，我们期待看到第二个指标也有 12%
    的改善。但我们没有。发生了什么？我们知道内存配置会对第二个指标产生影响。
- en: So did we have a different memory configuration？ Not that we know of。 We use
    Ewiskey。ini to configure it。
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 那我们有不同的内存配置吗？我们知道并没有。我们使用 `Ewiskey.ini` 来配置它。
- en: '![](img/711a2f93a070477c7fb7502d1b7813fa_61.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/711a2f93a070477c7fb7502d1b7813fa_61.png)'
- en: And this is the code that checks the configuration。 So why did the condition
    not meet for Python 3？
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这是检查配置的代码。那么为什么条件在 Python 3 中没有满足呢？
- en: It's unicoat but it's till the end。 So this is the single most significant letter
    in our whole code base。 making a 12% capacity difference。
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这是unicote，但它持续到最后。因此，这是我们整个代码库中最重要的一封信，带来了12%的容量差异。
- en: '![](img/711a2f93a070477c7fb7502d1b7813fa_63.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/711a2f93a070477c7fb7502d1b7813fa_63.png)'
- en: Finally， in February 2017， we dropped Python 3 to 2 traffic to zero and moved
    to Python 3。5。 Within the next couple of months， we moved forward with Python
    3。6。 What do we get from it？
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在2017年2月，我们将Python 3到2的流量降低到零，并迁移到了Python 3.5。在接下来的几个月里，我们又向前推进到了Python 3.6。我们得到了什么？
- en: We had -- thank you。 [ Applause ]， We had a CPU win of 12% on our Django tier
    and a saving of 30% on the salary tier on memory。 What about the mandates we had
    in the beginning？ No slow down of product launches。 During this Python migration
    process， we had an accelerated rate of monthly active users。
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有过——谢谢大家。[掌声]，我们在Django层面实现了12%的CPU提升，在内存的薪资层面节省了30%。那么一开始的要求呢？没有拖慢产品发布的速度。在这个Python迁移过程中，我们的月活跃用户增长速度加快了。
- en: '![](img/711a2f93a070477c7fb7502d1b7813fa_65.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/711a2f93a070477c7fb7502d1b7813fa_65.png)'
- en: '![](img/711a2f93a070477c7fb7502d1b7813fa_66.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/711a2f93a070477c7fb7502d1b7813fa_66.png)'
- en: We also have seen an unprecedented number of feature launches， including live。
    story and a number of safety features。
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到了前所未有的功能发布数量，包括实时故事和许多安全功能。
- en: '![](img/711a2f93a070477c7fb7502d1b7813fa_68.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/711a2f93a070477c7fb7502d1b7813fa_68.png)'
- en: Coming back to our original motivation to move to Python 3。 our early adopters
    have moved over 2% of our functions with type hints。 We're developing tools to
    collect data in production to help bootstrap the type hint process。 We have also
    made some contributions to MIPI and the type chat。 On the async。io friends。
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们最初迁移到Python 3的动机，我们的早期采用者已经将2%的功能迁移到了带有类型提示的版本。我们正在开发工具来收集生产中的数据，以帮助启动类型提示的过程。我们还对MIPI和类型聊天做出了一些贡献。关于async。io的朋友们。
- en: we have accelerated async。io adoption across our end points。 reducing the user
    request latency up to 30， 40%。 We're also developing tools to help us understand
    and debug async。io issues easier。 We have yet to support multiple requests during
    -- within a process。 That's something we're looking forward to explore very soon。
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在各个终端加速了async。io的采用，将用户请求延迟减少了30%到40%。我们还在开发工具，以帮助我们更容易地理解和调试async。io问题。我们尚未在一个进程内支持多个请求。这是我们期待很快探索的内容。
- en: On the community friends who are working with Intel to benchmark a web workload
    so that Python performance engineers can use that as a metric reference。 We're
    also looking into all kinds of runtime optimization opportunities as well as memory
    profiling effort。
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 关于与英特尔合作对网络工作负载进行基准测试的社区朋友们，以便Python性能工程师可以将其作为度量参考。我们也在寻找各种运行时优化机会以及内存分析的努力。
- en: To sum it up， the Python 3 effort gave us better than expected performance boost。
    improved developer productivity， and set us on a solid foundation for growing
    in the next few years。 It can be done。 It's worth it。 Make it happen。 And make
    Python 3 better。 Thank you。 [ Applause ]。
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，Python 3的努力为我们带来了超出预期的性能提升，提高了开发者的生产力，并为我们未来几年的增长奠定了坚实的基础。这是可行的。这是值得的。让它发生。让Python
    3变得更好。谢谢大家。[掌声]。
- en: '![](img/711a2f93a070477c7fb7502d1b7813fa_70.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/711a2f93a070477c7fb7502d1b7813fa_70.png)'
- en: Thank you very， very much。 That was fascinating。
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 非常非常感谢。这真是令人着迷。
- en: '![](img/711a2f93a070477c7fb7502d1b7813fa_72.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/711a2f93a070477c7fb7502d1b7813fa_72.png)'
