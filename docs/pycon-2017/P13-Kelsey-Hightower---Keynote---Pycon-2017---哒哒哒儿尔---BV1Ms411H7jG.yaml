- en: P13：Kelsey Hightower - Keynote - Pycon 2017 - 哒哒哒儿尔 - BV1Ms411H7jG
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P13：凯尔西·海塔尔 - 主题演讲 - Pycon 2017 - 哒哒哒儿尔 - BV1Ms411H7jG
- en: Welcome back for our final plenary session of PyCon 2017。 The candle has burned
    low。 but there is still a flame left。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎回来参加PyCon 2017的最后一个全体会议。蜡烛的火焰已经微弱，但仍然还有一丝火光。
- en: '![](img/9619658629589a41f3618dae125dd6d7_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_1.png)'
- en: What was initially measured in days， then in hours， now is best measured in
    the minutes。 we have left together。 I am very happy， very excited to announce
    our closing keynote speaker。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 最初以天为单位测量，后来以小时，现在最好以我们一起度过的分钟来衡量。我非常高兴，也很兴奋地宣布我们的闭幕主题演讲嘉宾。
- en: '![](img/9619658629589a41f3618dae125dd6d7_3.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_3.png)'
- en: Please help me with a big hand to welcome to the stage Mr。 Kelsey Heitauer。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 请大家热烈欢迎凯尔西·海塔尔先生上台。
- en: '![](img/9619658629589a41f3618dae125dd6d7_5.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_5.png)'
- en: So this is really an honor for me because my very first speaking opportunity
    was in Atlanta。 at Georgia Tech and I went to go see what smart people do when
    they get off work。 Apparently they go and they continue talking about technology
    at meetups。 I was learning Python at the time and this is when you went to the
    bookstore for some。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这对我来说真的很荣幸，因为我第一次演讲的机会是在亚特兰大，乔治亚理工学院。我去看看聪明的人下班后会做什么。显然，他们去聚会继续讨论技术。那时我正在学习Python，这时你会去书店买些书。
- en: of the younger people here， there is this place you go and you buy these things
    called books。 The bigger the book， the more knowledge in there。 All the Python
    books are like ten pounds。 I bought one of these books and I was like I am going
    to learn Python and I am going to。 go to a meetup because that is what smart people
    do。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里的年轻人中，有一个地方，你可以去买一些叫做书的东西。书越大，里面的知识就越多。所有的Python书都像十磅重。我买了其中一本，心想我要学习Python，我要去参加一个聚会，因为这就是聪明人所做的。
- en: I am sitting there as you guys are sitting here and I am watching the speakers
    like。 I can totally do that。 I email the organizer and there is this guy named
    Brandon Rhodes。 I was like I want to give a talk。 Have you spoken before？ Nope。
    I can totally do it。 You do a lightning talk or something。 To be smart。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我坐在这里，你们也坐在这里，看着演讲者，心想我完全可以做到。我给组织者发邮件，那个叫布兰登·罗德斯的家伙。我说我想做一个演讲。你之前演讲过吗？没有。我完全可以做到。你可以做个闪电演讲之类的。为了显得聪明。
- en: the first topic I picked was comparing Python list comprehension with Haskell，
    list comprehension。 No one knows Haskell。 So if I show up， I am just going to
    be the smartest person there。 I was like I have never seen this。 So when Brandon
    reached out again and said hey。 Kelsey I want you to come speak at this， event
    that I am running。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择的第一个主题是将Python列表推导与Haskell列表推导进行比较。没有人知道Haskell。所以如果我出现，我就是那里最聪明的人。我当时心想，我从未见过这种情况。所以当布兰登再次联系我，说嘿，凯尔西，我希望你来参加这个我在办的活动时。
- en: I was like well how big is the meetup？ I am like damn this is a big meetup。
    So for a lot of you meetups do change or can change your life。 The Python community
    has changed my life。 My very first conference was Python in Atlanta and it ruins
    you because trust me。 you guys， should clap for that。 The thing about Python that
    is amazing is really the community。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我心想这个聚会有多大？哇，真是个大型聚会。所以对你们很多人来说，聚会确实会改变或能够改变你们的生活。Python社区改变了我的生活。我第一次参加的会议是在亚特兰大的Python会议，这彻底改变了我，因为相信我。你们应该为此鼓掌。Python的神奇之处在于它的社区。
- en: A lot of people here actually heard pay their own way to be here。 The number
    of people that stick around for the sprints are amazing。 So my first contributions
    to Python were pip， virtual inf and dishy tills。 And since then I have grown on
    and the world of technology。 Oh yes， those are fantastic things。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有很多人实际上是自费来到这里的。坚持参加冲刺的人数真是惊人。所以我对Python的第一次贡献是pip、virtualenv和dishy tills。从那以后，我在技术世界中不断成长。哦，是的，那些都是了不起的事情。
- en: So last night I want to write some Python to remind myself of why I fell in
    love with， the language。 After about three or four hours I tried to deploy the
    thing that I wrote and find out。 the things I didn't like about Python。 So we
    are going to talk about Kubernetes for Python。 The root of this talk， I am not
    going to try to do with all of the things Kubernetes can。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 所以昨晚我想写一些Python代码，以提醒自己为什么我爱上了这门语言。经过三四个小时，我尝试部署我写的东西，发现了我不喜欢Python的地方。所以我们将讨论Python中的Kubernetes。此次演讲的核心，我并不会尝试讲述Kubernetes的所有功能。
- en: do but I want to educate you a little bit on what containers are and why they
    are important。 to people especially in Python。 Many of these languages have very
    complex dependency systems and it could be a barrier。 of entry especially if you
    are building or distributing software。 So we are going to go through this and
    think about this from the very beginning of how you。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我想稍微教育你一下容器是什么以及它们为什么对人们，特别是在Python中重要。许多这些语言都有非常复杂的依赖系统，这可能成为一个进入的障碍，尤其是当你在构建或分发软件时。因此，我们将从一开始就深入探讨这个问题。
- en: think about containers helping you。 Now I heard this was a technical conference
    so this is my last slide if that is okay。 Let me know， I can find a lot of cat
    pictures on the internet。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 想想容器是如何帮助你的。现在我听说这是一个技术会议，所以如果可以的话，这是我的最后一张幻灯片。告诉我，我可以在网上找到很多猫的照片。
- en: '![](img/9619658629589a41f3618dae125dd6d7_7.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_7.png)'
- en: So we are going to be in this mode for a while。 So when I first started learning
    programming I was about 24 years old and I had that book。 and I wrote my first
    Hello World program。 Kind of like this one。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们会在这个模式中待一段时间。当我第一次学习编程时，我大约24岁，我有那本书。我写下了我的第一个“你好，世界”程序。大致像这样。
- en: '![](img/9619658629589a41f3618dae125dd6d7_9.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_9.png)'
- en: And Python is like magic。 You write a few lines and you really believe you are
    a real developer。 I started applying for jobs immediately after this was done。
    Senior developer Python five minutes of experience。 And you look at this code
    and you are like wow this is pretty awesome。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 而Python就像魔法一样。你写几行代码，你真的相信自己是个真正的开发者。我在完成后立即开始申请工作。高级开发者Python五分钟的经验。你看着这段代码，想，哇，这真不错。
- en: '![](img/9619658629589a41f3618dae125dd6d7_11.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_11.png)'
- en: So I am going to run it and you always automatically should know what this does。
    So we will say Python and then we will say our app， py。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我要运行它，你总是应该自动知道这会做什么。所以我们会说Python，然后我们会说我们的app，py。
- en: '![](img/9619658629589a41f3618dae125dd6d7_13.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_13.png)'
- en: Okay。 This is sweet。 And then you go to your browser。 This is where your life
    changes for the first time。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。这真不错。然后你去浏览器。这是你人生第一次改变的地方。
- en: '![](img/9619658629589a41f3618dae125dd6d7_15.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_15.png)'
- en: If you are new and you see this， this is when you run around your house and
    your spouse。 is like what are you doing？ That is not impressive。 Like I said，
    what world。 I can do that on a piece of paper。 But it is important。 Okay。 Now
    I got brave。 My first Unix machine， free BSD。 Right？ Free BSD people are serious。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是新手，看到这个时，你会在家里跑来跑去，你的配偶会问你在干什么？这并不令人印象深刻。就像我说的，什么世界，我可以在一张纸上做到。但这很重要。好吧，现在我变得勇敢了。我的第一台Unix机器，Free
    BSD。对吧？Free BSD的人可认真了。
- en: They have tattoos of the mascot。 I am like you know that is not ever coming
    off。 Right？
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 他们身上有吉祥物的纹身。我想，你知道，这永远都不会消掉，对吧？
- en: So we got this hello world thing going。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们已经有了这个“你好，世界”的例子。
- en: '![](img/9619658629589a41f3618dae125dd6d7_17.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_17.png)'
- en: So I was like you know what I am going to do？ I am going to run it on my server。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我想，我要怎么做呢？我打算在我的服务器上运行它。
- en: '![](img/9619658629589a41f3618dae125dd6d7_19.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_19.png)'
- en: This should be easy。 I got this one file， this app py。 So you copy it to the
    server。 And it is tiny。 And then you go to type Python and nothing is there。 And
    then you become a sister admin。 In free BSD you do not install Python the easy
    way。 You have to hit your whole house from the server。 You compile from scratch。
    This is what you do。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该很简单。我有这个文件，这个app py。所以你把它复制到服务器上。它很小。然后你去输入Python，但什么都没有。然后你成为了系统管理员。在Free
    BSD上，你不能简单地安装Python。你必须从服务器上击中整个房子。你从零开始编译。这就是你要做的。
- en: So after about six months I got Python on my machine。 And the app didn't run。
    And then I needed pip。 Two years later my app was running。 It wasn't that bad。
    But this is what we are asking people to do when we write code。 We are asking
    them to go and figure out what version of Python they have。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 所以经过大约六个月，我在我的机器上安装了Python。应用程序没有运行。然后我需要pip。两年后，我的应用程序终于运行了。其实并没有那么糟糕。但当我们写代码时，这就是我们要求人们去做的。我们在要求他们去弄清楚他们有哪个版本的Python。
- en: Got forbid if you are using some C extension。 And trying to use that on a Chromebook
    is funny seeing that in an airport。 Your computer is going to run in about 30
    seconds。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 祝你好运，如果你在使用一些C扩展。试着在Chromebook上使用，这在机场看到会很搞笑。你的电脑将在大约30秒内运行。
- en: '![](img/9619658629589a41f3618dae125dd6d7_21.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_21.png)'
- en: So we have all these dependencies and packaging has come a long way in Python。
    So we have this ability now to say hey here is what my app requires。 And I can
    just do pip install。 And I just did a little tweet and I will show you guys what
    it looks like。 So I am on my Mac and I am writing this test app for the demo。
    I do pseudo pip install。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们有了所有这些依赖关系，打包在 Python 中已经走过了很长一段路。现在我们可以说，嘿，这就是我的应用所需的。我只需运行 pip install。我刚刚发了一条小推特，我会给你们看看它的样子。所以我在我的
    Mac 上，正在为演示编写这个测试应用。我执行伪 pip install。
- en: You guys are already like what the hell are you doing？ So I am like yeah what
    could go wrong。 I have Python prebuilt on my machine。 They are like dude。 The
    first rule of Python is you don't use system Python。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你们已经在想，你到底在干什么？所以我在说，是啊，可能会出什么问题。我机器上预装了 Python。他们说，伙计，Python 的第一条规则是你不使用系统
    Python。
- en: '![](img/9619658629589a41f3618dae125dd6d7_23.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_23.png)'
- en: I am like hold my keyboard。 Enter。 You type in your password right？
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我在说，等着，我来打字。你输入你的密码，对吧？
- en: '![](img/9619658629589a41f3618dae125dd6d7_25.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_25.png)'
- en: And then it is like your info set team is like what the hell are you doing？
    Nothing works anymore。 But I have flask and everything I need on my machine。 So
    we are winning。 I have to do this。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然后就像你的信息集团队在想你到底在干什么？什么都不管用了。但我有 Flask 和我机器上需要的一切。所以我们在赢。我必须这样做。
- en: '![](img/9619658629589a41f3618dae125dd6d7_27.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_27.png)'
- en: So we have our app now。 And we start to ask ourselves that there has to be a
    better way of doing this。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们现在有了我们的应用。我们开始问自己，必须有更好的方法来做到这一点。
- en: '![](img/9619658629589a41f3618dae125dd6d7_29.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_29.png)'
- en: So when I used to contribute to Python I told you we had disk utils and there
    used to be。 a war set up tools。 And then we made peace and the whole goal was
    not to reinvent the wheel。 Listen。 prove what we have。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 所以当我之前为 Python 做贡献时，我告诉过你我们有磁盘工具，曾经有过战斗设置工具。然后我们达成了和平，整个目标就是不去重新发明轮子。听着，证明我们已有的东西。
- en: '![](img/9619658629589a41f3618dae125dd6d7_31.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_31.png)'
- en: So last night I was like what is the state of the art in Python？
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 所以昨晚我在想，Python 现在的最前沿是什么？
- en: And it turns out we literally reinvented the wheel。 I thought this was a joke。
    I was like no no no。 It is not actually called wheels。 I was like no this is what
    you do。 And I was like okay。 Wheels it is。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 结果我们真的重新发明了轮子。我以为这是个笑话。我说不不不，这实际上不是叫轮子。我说不，这就是你该做的。我说，好吧，就叫轮子。
- en: '![](img/9619658629589a41f3618dae125dd6d7_33.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_33.png)'
- en: So the truth is packaging is a pain point for all languages。 It is a pain point
    for all software。 Things that work well are like your mobile device。 You go to
    an app store。 You bring the whole package down。 And the reason why we can have
    a billion devices is because we do not ask users to go and install。 other software
    to use the software that they are interested in。 It is simple as that。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 事实是，打包对所有语言来说都是一个痛点。对所有软件来说都是个痛点。运作良好的东西就像你的移动设备。你去应用商店。你把整个包下载下来。我们能够拥有十亿个设备的原因是因为我们不要求用户去安装其他软件以使用他们感兴趣的软件。就这么简单。
- en: But we do the opposite when it comes to servers。 We are making everyone's life
    difficult。 Anyone have ever heard of DevOps？ Anyone know what DevOps is？ I take
    a stab at it。 DevOps is group therapy for system。 And we needed it largely because
    of packaging。 It is not just Python。 All of those packages need to be maintained。
    They need to be updated。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 但是在服务器方面我们却做了相反的事情。我们让每个人的生活变得困难。有人听说过 DevOps 吗？有人知道 DevOps 是什么吗？我来试试。DevOps
    是系统的团体治疗。我们主要需要它是因为打包。这不仅仅是 Python。所有这些包都需要维护。它们需要更新。
- en: You write a Python app and say hey install this and all of the systems just
    sleep。 So how do we make this better？ And this is where I think containers become
    interesting。 How many people think static linking is a good idea？ How many people
    like containers？
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你编写一个 Python 应用并说，嘿，安装这个，所有系统就会休眠。那么我们如何让这变得更好呢？这就是我认为容器变得有趣的地方。多少人认为静态链接是个好主意？多少人喜欢容器？
- en: It is amazing to me that so few people think static linking is a good idea but
    they like。 containers。 This is static linking on steroids。 It is a big tar ball
    with everything。 A full operating system is in there。 You are linking everything。
    I saw one container and had a chrome browser in it。 What are you doing？
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: So what we want to do is how can we leverage these containers in a smart way。
    So just so everyone is on the same page。 A container， there are two parts to this。
    There is a packaging format。 The goal is we package all of our dependencies into
    a tar ball。 It is actually a tar ball。 It is a tar ball with a specific format
    so we know how to download it。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: extract it， and， be very efficient with layers。 So what we are going to do is
    build one of these things。 Now I have cached most of this because these days no
    matter what app you build， for some。 reason it downloads like two thirds of the
    internet in order to work。 I will show you what one of these looks like。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9619658629589a41f3618dae125dd6d7_35.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
- en: So we have our application。 So what we are going to do is start with this Docker
    file。 So the Docker file here is， you will see the first line there。 It says from
    Ubuntu。 Yes。 that is an entire operating system to put our 2K application into。
    Now there is a reason for this。 How many people here would say they honestly know
    all their software dependencies？ Exactly。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: So when you don't know， you just bring in everything until it works。 And then
    we get DevOps。 So the next thing I do here is there is a couple of things happening
    though。 We take all the tribal knowledge from wikis and runbooks and we put them
    in the Docker， file。 Now this is not the best we can do， but it is a good stepping
    stone for the majority of。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: the people building software。 And we can do clever things like cache some of
    the layers。 So even though that first layer is pretty big， it is actually only
    about 70 or so megs。 we can cache that on the servers so we don't have to copy
    it once for our apps。 So the next thing we are going to do here is do app get
    install， Python 3。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Everyone is using Python 3 by now。 Please tell me it happened。 All right。 just
    clap in case it just for tins。 And then we copy our requirements。txt into place。
    Now the goal of this whole thing is that now everyone has a very sane and clean
    build。 environment and they can build their application。 You can either give people
    the raw Docker file and they can build it themselves or you。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: can build it and store the artifact。 So if you have ever built any package of
    any kind。 the goal here is to build an artifact， and we will store it somewhere。
    Now once we have the artifact， we can give someone the image name and they can
    run it。 So we will just build this here so we can see what we are talking about。
    Now my Python is rusty。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: So if you see any bad code today， please give me a pass。 Do not put it on Twitter。
    I promise to follow Pepe later。 Okay， so we have this entry point。 So this is
    basically going to do the same thing I was doing on my command line and we。 are
    just going to set that in an entry point。 All right， so we are going to make a
    tarball now。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果你今天看到任何糟糕的代码，请给我个通融。不要在 Twitter 上发布。我答应稍后会关注 Pepe。好的，我们有这个入口点。基本上这将做我在命令行上做的同样的事情，我们只是将其设置为入口点。好的，我们现在要创建一个
    tar 包。
- en: This is a very fancy way of doing it。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种非常花哨的做法。
- en: '![](img/9619658629589a41f3618dae125dd6d7_37.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_37.png)'
- en: So we will just do this Docker build command。 So here what I am doing is saying
    hey。 I want to build this image and I want to run， that command but what I want
    to do is have all of the requirements be pulled down and。 run inside of a charroot
    environment so I have a clean build that is reproducible。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们只需执行这个 Docker build 命令。所以这里我在说，嘿。我想要构建这个镜像，我想运行那个命令，但我想要所有的依赖项被拉下来，并在 charroot
    环境中运行，这样我就有一个干净的可重现的构建。
- en: '![](img/9619658629589a41f3618dae125dd6d7_39.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_39.png)'
- en: So we will run this now。 Okay， so the luckily thing is here is that I am having
    a bit of caching。 So I did not change any of the lines at the top。 Now you can
    run into issues with some of this caching but the nice thing is when you are。
    building and writing applications and you want to iterate fast， you do not need
    to run。 the whole entire app get command or the pip command again。 Those live
    as separate layers。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们现在就运行这个。好的，幸运的是，我有一些缓存。因此，我没有更改顶部的任何行。现在，你可能会在某些缓存上遇到问题，但好的一点是，当你在构建和编写应用程序并想要快速迭代时，你不需要再次运行整个应用程序的
    get 命令或 pip 命令。这些作为单独的层存在。
- en: So once you have that we can just copy in our application and then we can run
    it。 How many people think is really easy to run multiple copies of an app on your
    machine？
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 所以一旦你有了这个，我们就可以复制我们的应用程序，然后运行它。有多少人认为在你的机器上运行多个应用程序的副本是非常简单的？
- en: Not a lot of hands。 How many people are using virtual m to solve this problem？
    Okay。 so if you are familiar with virtual m to give us multiple Python environments
    you。 can look at this run time so this is the other part of the equation。 Once
    we have this tarball we can run it under a run time。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 举手的人不多。有多少人在使用虚拟机来解决这个问题？好的。如果你熟悉虚拟机，可以给我们多个 Python 环境，你可以看看这个运行时，这就是方程的另一部分。一旦我们有了这个
    tar 包，我们就可以在运行时下运行它。
- en: '![](img/9619658629589a41f3618dae125dd6d7_41.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_41.png)'
- en: So let's do this really quick。 So we will say Docker run。 All right。 so what
    we are going to do here is we are just going to run our app to make， it a little
    bit easier。 So we are just running on 5，000 to 5，000。 So I am just doing a bit
    of port mapping so I can get to it。 We are going to run this hello world app and
    it is going to run in the background。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们来快速完成这个。我们将使用 Docker run。好的，我们在这里要做的就是运行我们的应用程序，这样会简单一些。我们正在将其运行在 5000 到
    5000 的端口上。我正在做一点端口映射，以便我能访问它。我们将运行这个 hello world 应用，它将在后台运行。
- en: '![](img/9619658629589a41f3618dae125dd6d7_43.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_43.png)'
- en: So at this point I should be able to hit it in my browser and there it is。 Now
    I can run as many copies of this as I want。 Maybe map to different ports。 But
    this only solves the laptop problem。 We have this thing packaged。 It is easy to
    distribute。 It is easy to run as many copies as I want。 But what happens if I
    have 5 or 20 servers that I need to push this to？
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我应该能够在浏览器中访问它，这就是了。现在我可以运行任意数量的副本。也许映射到不同的端口。但这仅仅解决了笔记本电脑的问题。我们把这个东西打包了，分发起来很简单。我可以运行任意数量的副本。但如果我有
    5 或 20 台服务器需要推送这个怎么办？
- en: How many people are familiar with scheduling？ Every hand should be up。 Every
    device that you have has probably more than one CPU core and when you launch an
    application。 there is a kernel that has to figure out where this thing runs。 So
    you have a really effective scheduler there。 But most people are doing these days
    and letting you have a scheduler we call it the。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 有多少人熟悉调度？每个人的手都应该举起来。你拥有的每个设备可能都有不止一个 CPU 核心，当你启动一个应用程序时，内核需要弄清楚这个东西在哪里运行。所以你会有一个非常有效的调度程序。但大多数人现在做的事情是让你有一个我们称之为调度程序的东西。
- en: meet cloud。 This is where you say run this application and a human decides where
    it runs。 And sometimes we track in a very fancy database， aka spreadsheet。 And
    the problem with this is if one of the machines dies they have this thing called，
    an on call。 Machine goes down and you get a call and you get to put the app back
    on the machine。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: So what we want to do is solve this problem in a way that goes a little bit
    further than， a laptop。
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9619658629589a41f3618dae125dd6d7_45.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
- en: So we have a tool called Kubernetes。 There are other tools that do very similar
    things but we are going to work with this for。 now。 So I have about 5 nodes in
    my cluster。 Now the goal with this is that I do not want to statically assign
    my apps and machines。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: They are designed to go away。 I want to treat each machine as one collective
    or like a multi-CPU system and treat the whole。 cluster like a single machine。
    So we need a new API。 We need some abstractions。 So once I have this abstraction
    we can package our container and what we call a deployment。 So let's look at this
    really quick。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9619658629589a41f3618dae125dd6d7_47.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
- en: So we have this deployment object。 So here is the container we built and we
    have it hosted somewhere。 So anyone that wants to run this app can pull this particular
    container image。 Now some of you are like well how does the system know where
    to put this？
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Since a lot of people didn't raise their hands about what a scheduler is I am
    going to explain， it。 Now the fastest way I have done this without diving too
    deep into computer science and。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9619658629589a41f3618dae125dd6d7_49.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
- en: hijacking my whole talk we play a game of Tetris。 So how many people here say
    they have fully automated deployments？
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Okay。 Now this is a worthy goal to get to。 You click a button and your app installs
    to specific machines。 I'm going to show you what that looks like。 You do that
    in Tetris。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9619658629589a41f3618dae125dd6d7_51.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
- en: I'll show you。 It looks like it's amazing by the way if you can get to this
    point。 So the goal is we want one click deployment of all of our apps。
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9619658629589a41f3618dae125dd6d7_53.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
- en: Now you need to know a whole bunch of information ahead of time in order for
    this to work。 You need to know all error scenarios。 You need to know if a machine
    is in maintenance or not。 And you need to make sure there is no network issues
    because you need to be able to route。 around them all in bash。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9619658629589a41f3618dae125dd6d7_55.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
- en: Python if you're lucky。 So what we're going to do is this is one click deploy。
    This is the DevOps holy grail I'm about to show you。 Be ready。
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9619658629589a41f3618dae125dd6d7_57.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
- en: You ready？ One click deployment。 Bam。 One click。 And then you leave。 It's fully
    automated by the way。 But the problem here is your memory and CPU is just on the
    floor and you're losing。 Now we're at a cloud provider this is pretty good actually。
    Spend up more VMs。
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9619658629589a41f3618dae125dd6d7_59.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_59.png)'
- en: '![](img/9619658629589a41f3618dae125dd6d7_60.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_60.png)'
- en: So what does the scheduler do？ So here's the difference。 The scheduler has to
    actually examine every workload as it comes in。
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 那么调度器做什么呢？这里的区别是，调度器必须在每个工作负载到来时进行检查。
- en: '![](img/9619658629589a41f3618dae125dd6d7_62.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_62.png)'
- en: Now this is the like x86 architecture you're not doing anything that fancy。
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这就像 x86 架构，你并没有做什么花哨的事情。
- en: '![](img/9619658629589a41f3618dae125dd6d7_64.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_64.png)'
- en: But things are slightly different so they have different shapes and sizes。 The
    goal is we look at these workloads as they come in and then we make a decision。
    So what Kubernetes does out of the box is what we call bin packing。
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 但事情稍有不同，因为它们有不同的形状和大小。目标是我们在这些工作负载到来时进行观察，然后做出决定。因此，Kubernetes 默认执行的就是我们称之为的箱子打包。
- en: '![](img/9619658629589a41f3618dae125dd6d7_66.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_66.png)'
- en: So let's look at what that looks like。 So here we see a workload and the goal
    is just to place it by examining it。 Now we look at these workloads as they come
    in and what we're doing now is just scheduling。 in a way that we try to utilize
    all of our resources。 So this is memory and CPU。 I'm looking at all of these workloads
    coming in。 Now happy you're like wow this dude is really good at Tetris。
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 那么让我们看看这是什么样子。所以在这里我们看到一个工作负载，目标就是通过检查它来放置它。现在我们在观察这些工作负载到来时，我们所做的就是调度。以一种尽量利用我们所有资源的方式进行调度。这就是内存和
    CPU。我在观察这些工作负载的到来。现在很开心，你会觉得这个家伙在俄罗斯方块方面真的很厉害。
- en: If you can totally talk and play Tetris at the same time。 But this is still
    bin packing that's happening here。 Now you ask why is the scheduler doing this？
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你可以同时交谈和玩俄罗斯方块。但这仍然是在进行箱子打包。现在你要问，调度器为什么要这样做？
- en: Well when we examine all the pieces here what we want to do is make sure that
    we allocate。 things in a way that imagine a machine learning job comes that needs
    that CPU。 And you've been reserving that special machine because it costs a lot
    more than run things， on it。 So right workload shows up you can place it there。
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们检查所有这些片段时，我们想确保以一种方式分配。想象一下，一个机器学习工作需要那台 CPU。你一直在预留那台特殊的机器，因为它的运行成本远高于其他机器。因此，当合适的工作负载出现时，你可以把它放在那儿。
- en: And then when it's done you get back all the CPU and memory。 You got a Tetris
    on Twitter。 So that's kind of the difference between just automation and this
    idea of orchestration。 We want to have this online examination of every workload
    so we can actually use our。 machines effectively。 And the goal here is that we
    want to be able to reuse CPU and memory the best what we can。
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 然后当完成时，你会获得所有的 CPU 和内存。你在 Twitter 上有个俄罗斯方块。所以这就是自动化与编排之间的区别。我们希望对每个工作负载进行在线检查，以便有效利用我们的机器。目标是我们希望能够尽可能好地重用
    CPU 和内存。
- en: '![](img/9619658629589a41f3618dae125dd6d7_68.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_68.png)'
- en: So it's part orchestration。
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这是部分编排。
- en: '![](img/9619658629589a41f3618dae125dd6d7_70.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_70.png)'
- en: So how do we do that for our own applications？ So for our own apps we have to
    make this the deployment descriptor。 Now it's a big yaml file and it's declarative。
    But what you'll see here is that we have our app name is called hello world。 And
    then we're saying Kubernetes when you run this thing I want you to go grab this
    particular。 image。 And when you grab that image I want you to extract it and run
    whatever the entry point。
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们如何为自己的应用程序做到这一点？对于我们自己的应用程序，我们必须制作这个部署描述符。现在这是一个大型的 yaml 文件，并且是声明式的。但你会看到我们的应用名称是
    hello world。然后我们告诉 Kubernetes，当你运行这个东西时，我希望你抓取这个特定的镜像。当你抓取那个镜像时，我希望你提取并运行任何入口点。
- en: was Python at py。 And then I want you to also shape this workload。 Now the thing
    you got to think about in order for us to schedule these things properly we。 need
    to know the shape of the piece。 This is why we have our memory and our CPU requests
    so we know where it fits in the cluster。 Okay。 So once we have this we can actually
    give it to Kubernetes。 So kuptl get pods。
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 是 Python 在 py。然后我希望你也能形状这个工作负载。为了让我们能正确调度这些事情，你需要考虑这个片段的形状。这就是我们有内存和 CPU 请求的原因，以便知道它在集群中的适配位置。好的。一旦我们有了这些，我们就可以把它交给
    Kubernetes。因此 kuptl get pods。
- en: So what we'll do is we'll create this deployment object。 Now can anyone tell
    me what machine did it landed on？ There's a brave guy like ah number four。 Like
    no the scheduler is going to figure out at runtime。 The only thing we are asking
    is that we declare that we want one of these things running。
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们要做的是创建这个部署对象。现在有谁能告诉我它落在哪台机器上了吗？有个勇敢的人说是四号。不是，调度器将在运行时确定。我们唯一要要求的是我们声明想要运行其中一个。
- en: '![](img/9619658629589a41f3618dae125dd6d7_72.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_72.png)'
- en: So I say kuptl get pods。
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我说 kuptl get pods。
- en: '![](img/9619658629589a41f3618dae125dd6d7_74.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_74.png)'
- en: We'll see that it's running somewhere。 Now nice thing about this let's look
    at what machine it's on。
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会看到它在某个地方运行。现在这件事的好处是，我们来看看它在哪台机器上。
- en: '![](img/9619658629589a41f3618dae125dd6d7_76.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_76.png)'
- en: So it's on nf6p。 And it has it's on ip address dot 90 but what happens if we
    were to destroy it？
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 所以它在 nf6p 上。它有自己的 IP 地址 dot 90，但如果我们销毁它会发生什么？
- en: We're going to destroy the workload。
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要销毁工作负载。
- en: '![](img/9619658629589a41f3618dae125dd6d7_78.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_78.png)'
- en: Now depending on where you work you're either fired or you're going to get a
    call。
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，取决于你工作的地方，你要么被解雇，要么会接到电话。
- en: '![](img/9619658629589a41f3618dae125dd6d7_80.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_80.png)'
- en: So we delete the workload and this is what we expect。 We expect it to be replaced
    quickly and it has a new IP。 And a nice thing about a system like this is when
    we replace the workload we keep track， of it。 We know it's IP address so we can
    hook it up to the low balancer automatically。
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们删除工作负载，这是我们所期望的。我们希望它能快速被替换，并且它有一个新的 IP。像这样的系统的一大优点是，当我们替换工作负载时，我们会跟踪它。我们知道它的
    IP 地址，因此可以自动将其连接到负载均衡器。
- en: Now if you've been doing this kind of work this is just from decades of people
    doing。 these patterns and now we've just baked it into the infrastructure itself。
    It's kind of like the Python standard library。 It's massive because there's no
    reason for people to rewrite these things over and over。 again。
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你一直在做这种工作，这只是几十年来人们在做这些模式的结果，现在我们已经将其固化在基础设施中。这有点像 Python 标准库。它庞大无比，因为没有理由让人们一次又一次地重写这些东西。
- en: '![](img/9619658629589a41f3618dae125dd6d7_82.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_82.png)'
- en: So these are things of pretty standard issue。 If I look here get SVC we'll see
    that we have a low balancer that's routing traffic。
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是相当标准的问题。如果我查看 get SVC，我们会看到有一个负载均衡器正在路由流量。
- en: '![](img/9619658629589a41f3618dae125dd6d7_84.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_84.png)'
- en: to all of those。 So no matter what I do I have this stable endpoint where I
    can hit my application and。
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 对所有这些而言。无论我做什么，我都有一个稳定的端点，可以访问我的应用程序。
- en: '![](img/9619658629589a41f3618dae125dd6d7_86.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_86.png)'
- en: there we go。 It's up and running。 Then it gets really complex。 You're just like
    you can't run production Python by just using Flask。 Anyone know why？
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。它已经启动并运行了。然后事情变得非常复杂。你就像无法仅使用 Flask 运行生产级的 Python。有人知道为什么吗？
- en: One requests at a time。 I spent the hour figuring that out。 I was like why is
    my show hanging？
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 一次请求。我花了一个小时才弄明白这一点。我在想，为什么我的演示卡住了？
- en: Won't request at a time。
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 不会一次请求。
- en: '![](img/9619658629589a41f3618dae125dd6d7_88.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_88.png)'
- en: So what do we do？ So in the Python world it's common to pair it with maybe some
    whiskey server or NGINX。 So what does that look like in Kubernetes？ Now I'm about
    to show you a lot more on the screen so be prepared。
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 那我们该怎么办？在 Python 世界中，通常将它与某个威士忌服务器或 NGINX 配对。那么在 Kubernetes 中看起来如何呢？现在我即将给你展示更多的内容，请做好准备。
- en: '![](img/9619658629589a41f3618dae125dd6d7_90.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_90.png)'
- en: So in the container world one would say you build an even bigger Docker file
    and you install。 NGINX in there。 You put your whiskey in there and then you take
    a script to launch all of that in the。 background。 Great。 You just invented an
    init system。 There's no reason to do that。 What's a better approach？ Well， we
    don't want to pack NGINX inside of our apps container。
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 所以在容器世界中，人们会说你构建一个更大的 Docker 文件，然后在里面安装 NGINX。你把你的威士忌放进去，然后用脚本在后台启动这一切。太棒了。你刚刚发明了一个初始化系统。这样做没有任何意义。更好的方法是什么？我们不想把
    NGINX 打包在我们的应用容器里。
- en: We want those to be separate。 So what does that look like if you separate them？
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望它们是分开的。那么如果你把它们分开看起来如何？
- en: So here's another deployment object。 And this time we'll do things and this
    is a lot here。
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这是另一个部署对象。这次我们将做一些事情，这里有很多内容。
- en: '![](img/9619658629589a41f3618dae125dd6d7_92.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_92.png)'
- en: I'm going to walk us through it really quick so we all can understand。 This
    has multiple containers in them that we can stack。 Think of it like a virtual
    machine。 We're just going to run as processes that are co-located together to
    form the logical app。 So at the top we have NGINX。 We're using NGINX graceful
    shutdown。
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我会很快带大家了解一下，这里有多个容器可以叠加。可以把它想象成虚拟机。我们只是作为共同位置的进程运行，以形成逻辑应用。因此在顶部，我们有NGINX。我们正在使用NGINX优雅关闭。
- en: And then what we also are telling NGINX to do， you'll notice here in this particular，
    line。
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们还告诉NGINX要做的事情，您会注意到在这一特定行中。
- en: '![](img/9619658629589a41f3618dae125dd6d7_94.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_94.png)'
- en: Here we're going to share this particular path。 And what's going to be there
    is going to be our whiskey Unix socket that is exported。 from our app so we can
    actually send traffic to it in the way proposed by their。
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将共享这条特定路径。那里的内容将是我们应用程序导出的威士忌Unix套接字。这样我们就可以按照他们提出的方式向其发送流量。
- en: '![](img/9619658629589a41f3618dae125dd6d7_96.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_96.png)'
- en: particular docs。 So here we are sharing a file system。 One container is going
    to write its socket there and another container is going to pick。 it up and send
    traffic to it。 But the nice thing about this is everyone knows how your infrastructure
    is composed。 NGINX stands alone and the app stands alone。
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 特定文档。因此在这里我们共享文件系统。一个容器将在那里写入其套接字，另一个容器将拾取它并向其发送流量。但这件事的好处在于每个人都知道您的基础设施是如何组成的。NGINX独立，应用程序独立。
- en: '![](img/9619658629589a41f3618dae125dd6d7_98.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_98.png)'
- en: So at this point we can actually have Kubernetes manage this force as well。
    Kuberc。tl。 Create-f deployments。
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 所以此时我们实际上可以让Kubernetes管理这个强制行为。Kuberc。tl。创建-f部署。
- en: '![](img/9619658629589a41f3618dae125dd6d7_100.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_100.png)'
- en: All right， so once this is online， get pods。
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，所以一旦上线，获取pods。
- en: '![](img/9619658629589a41f3618dae125dd6d7_102.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_102.png)'
- en: Great。 And you'll see that there's two of two ready。 So we can actually compose
    these things。 If you need any helpers， you can run your helper scripts as well。
    Now once you have infrastructure like this， you start to think about why do I
    need to。 use conventional ways of interacting with it？ I've been using command
    line tools this whole time。
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 很好。您会看到两个中的两个已就绪。因此我们实际上可以组合这些东西。如果您需要任何帮助，可以运行您的助手脚本。一旦您拥有这样的基础设施，您开始思考为什么需要使用传统方式与其互动？我一直在使用命令行工具。
- en: So in the Python world， one thing that has been amazing over time in Python，
    Python has。 been used as a facade for more complex systems like TensorFlow， most
    big data stacks。 Python makes it super easy to interact with things。 So if I were
    building new tools。 how would I interact with this？ Now I think if more Python
    people showed up to the Kubernetes community。
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 因此在Python世界中，随着时间的推移，Python有一件事非常惊人，Python一直被用作更复杂系统的外观，比如TensorFlow，大多数大数据堆栈。Python使得与事物交互变得超级简单。所以如果我在构建新工具，我该如何与之交互？现在我认为如果更多的Python人加入Kubernetes社区。
- en: they would also， look to simplify things。 So I found a really good Python library。
    So I wrote a new interface to Python。 And this is the first time I'm going to
    show it to anybody。 OK？ So if it doesn't work， remember， I wrote this yesterday。
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 他们还会考虑简化事物。所以我发现了一个非常好的Python库。因此我为Python写了一个新接口。这是我第一次向任何人展示它。好吗？所以如果它不起作用，记住，我是昨天写的。
- en: '![](img/9619658629589a41f3618dae125dd6d7_104.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_104.png)'
- en: So bear with me。 So what we're going to do is we're going to clean up here a
    little bit。
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 所以请耐心等候。我们要做的是稍微清理一下这里的内容。
- en: '![](img/9619658629589a41f3618dae125dd6d7_106.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_106.png)'
- en: Keep pods。 Keep CTO。 We're just going to delete these deployments。 So it's really
    easy to spin these things up and down。 Let's clear them out。 And keep in mind
    the frame of reference I'm coming from。
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 保留pods。保留CTO。我们将删除这些部署。因此，启动和关闭这些东西真的很简单。让我们把它们清理掉。请记住我所处的参考框架。
- en: '![](img/9619658629589a41f3618dae125dd6d7_108.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_108.png)'
- en: I've been watching Star Trek the Next Generation for some reason on Netflix。
    So I really believe I'm living in the future right now。
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我不知道为什么，我在Netflix上看《星际迷航：下一代》。所以我真的相信我现在生活在未来。
- en: '![](img/9619658629589a41f3618dae125dd6d7_110.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_110.png)'
- en: So when I went to go build this thing， I wanted something that felt like that。
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9619658629589a41f3618dae125dd6d7_112.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
- en: So let's just do a watch on here。 I'm going to show you my new tool。 As you
    can tell。 I'm a bit shy here。 So please don't laugh at me if this doesn't work。
    All right。 so this should terminate。 Let's clean things up。 Man， do you know what
    it's doing？
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9619658629589a41f3618dae125dd6d7_114.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
- en: It's trying to gracefully shut down。 All right， we're down。 OK， so we're going
    to try this thing。 So in the app， I'm using what's shipped on Wednesday。 So this
    is just double， not smart。 On conference Wi-Fi。 OK， Google， talk to Kubernetes。
    We may have to go to an airplane mode because I might need to bandwidth， OK？ OK，
    Google。
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: you better work as people are watching。 I spent all night on this， too。 So talk
    to Kubernetes。 No way。 Hold on。 We're not going to abandon ship on this。 I will
    be up here for six hours if I have to。 You just ignore the whole speaker timer。
    OK， Google。 talk to Kubernetes。 What？ It's sitting here like， hahaha。 Oh， oh，
    oh， oh。 Oh， oh， oh， oh， oh。
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9619658629589a41f3618dae125dd6d7_116.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
- en: I got it。 Let's do this。 Let's do this。
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9619658629589a41f3618dae125dd6d7_118.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
- en: Maybe we have to hit the test button。 Maybe we need that。 Don't you guys like
    when the live demo doesn't go well？ You're like， he's going to fail。 I know it。
    My apologies。 I don't understand。 [LAUGHTER]。
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9619658629589a41f3618dae125dd6d7_120.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
- en: Talk to Kubernetes。 This is the top result。 Talk to Kubernetes。 Here's the top
    search result。 It's trolling me。 OK， Google。 Talk to Kubernetes。 Sure。 here is
    the test version of Kubernetes cluster。 Hello， Kelsey。 Hi。 Looks like you have
    a large crowd this time。 I hope the demo gods are on your side。 [LAUGHTER]。
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: What's my cluster status？ The PyCon cluster is running with 10 CPUs and 37。5
    gigs of RAM。 Run the Hello World application。 What image tag would you like to
    deploy？ 1。0。 Deploying Hello World 1。0 into the PyCon cluster。
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9619658629589a41f3618dae125dd6d7_122.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
- en: '[APPLAUSE]， So we''ve got an app running。 Scale the Hello World deployment。
    How many replicas would you like？ [INAUDIBLE]， 500 divided by like 10 minus 40
    minus 5。 [LAUGHTER]。 5。 Scaling the Hello World deployment to 5。'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9619658629589a41f3618dae125dd6d7_124.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
- en: '[APPLAUSE]。'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9619658629589a41f3618dae125dd6d7_126.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
- en: Now， here's the thing。 It's easy to do deployments。 How many people have ever
    done zero downtime deployments？ You liars。
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9619658629589a41f3618dae125dd6d7_128.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
- en: You still got on call。 But no， it's a tough thing to do。
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9619658629589a41f3618dae125dd6d7_130.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
- en: So the holy grail is to do these。
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9619658629589a41f3618dae125dd6d7_132.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
- en: downtime， zero downtime deployments。 So we have 1。0 running right now inside
    of our cluster。 And the goal is we want to upgrade this。 So this is the nice thing
    about this fully API driven world。 from the networking to the stores to the app
    itself。 Also around auto-scaling。 So what we want to do here is see if we could
    update this in place without dropping any of the packets here。
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 零停机时间部署。因此我们现在在集群中运行的是 1。0。我们的目标是升级它。这就是这个完全 API 驱动世界的美好之处。从网络到存储再到应用本身。此外，还有自动扩展。因此，我们希望看看是否可以在不丢失任何数据包的情况下就地更新它。
- en: OK？ Update the Hello World deployment。 What version of the application would
    you like to deploy？ 2。0。 Updating the Hello World deployment to version 2。0。 [APPLAUSE]，
    Thank you。 OK。 I got to admit that was pretty dope。 [LAUGHTER]， And with that。
    I would like to end the presentation。 Thank you so much。 [APPLAUSE]， OK。
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 好吗？更新 Hello World 部署。你想部署哪个版本的应用？2。0。将 Hello World 部署更新到版本 2。0。[掌声]，谢谢。好的。我得承认这真的很酷。[笑声]，所以到这里。我想结束演示。非常感谢。[掌声]，好的。
- en: I got to admit that was pretty dope。
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我得承认这真的很酷。
- en: '![](img/9619658629589a41f3618dae125dd6d7_134.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_134.png)'
- en: '[APPLAUSE]， Another round of applause for Kelsey Heitauer。'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '[掌声]，请再为 Kelsey Heitauer 鼓掌。'
- en: '![](img/9619658629589a41f3618dae125dd6d7_136.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9619658629589a41f3618dae125dd6d7_136.png)'
