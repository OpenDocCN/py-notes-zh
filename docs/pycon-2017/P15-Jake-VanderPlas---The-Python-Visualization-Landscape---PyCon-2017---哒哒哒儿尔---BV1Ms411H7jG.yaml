- en: P15：Jake VanderPlas   The Python Visualization Landscape   PyCon 2017 - 哒哒哒儿尔
    - BV1Ms411H7jG
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P15：Jake VanderPlas   Python可视化领域   PyCon 2017 - 哒哒哒儿尔 - BV1Ms411H7jG
- en: And he's going to talk about Python visualization landscape。 Give a hand to
    him。 Thank you very much。 [APPLAUSE]， All right。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 他将谈论Python可视化领域。给他点个掌声。非常感谢。[掌声] 好吧。
- en: '![](img/681a82ee3c4a5710d519f19d5a32a373_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/681a82ee3c4a5710d519f19d5a32a373_1.png)'
- en: Thanks very much。 Thanks for coming。 And for many of you listening to me a second
    time。 in a couple of days， I'm going to talk about Python's， visualization landscape。
    And so back in whatever the fall， I wrote this abstract and said， I'm。 going to
    give an overview of the landscape of data， as tools in Python。 And then a month
    or so ago。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 非常感谢。感谢你们的到来。对于许多二次收听我的人，我将在几天后谈论Python的可视化领域。因此，在某个秋天，我写下了这个摘要，表示我要给出Python中数据工具的全景概述。大约一个月前。
- en: I thought， oh， I should figure out what that is。 So as I usually do， I tweeted
    and said， hey。 these are the tools that I'm thinking of talking about。 Are there
    any others I should consider？
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我想，哦，我应该弄清楚那是什么。因此，像我通常做的那样，我发了推文，说，嘿。这些是我考虑讨论的工具。还有其他我应该考虑的吗？
- en: And Twitter came back with this whole thing。 So like totally changed what I
    was going to do for my talk。 But I want to take this time to make sense of this
    deluge。 of visualization tools that are out there in the Python world。 There's
    tons out there。 as you'll see。 And I think each one is kind of specialized。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Twitter回复了这一整件事。这完全改变了我讲座的内容。但我想利用这段时间来理清在Python世界中存在的大量可视化工具。这些工具有很多，正如你将看到的。我认为每一个工具都有其专业化。
- en: for its own unique application or its only unique strengths。 And I'm hoping
    what each of you will take away from here， is the ability to look out there and
    say。 given my problem， that I want to do， my visualization task。 I know what package
    I should use in Python。 So let's get started。 It all starts with Matplotlib。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 其独特的应用或独特的优势。我希望每个人都能从这里带走一种能力，即能够观察并说出，鉴于我想要解决的问题，我的可视化任务。我知道在Python中该使用哪个包。所以让我们开始吧。一切都始于Matplotlib。
- en: Matplotlib has been around for over a decade now， almost two decades now。 And
    it's kind of the core tool。 And there's lots of things that have， been built around
    Matplotlib。 There's this base map， cardopi thing， for geographical visualization。
    Pandas and Seaborn have some tie-ins to Matplotlib。 We have things like GGPie。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib已经存在十多年了，几乎快二十年了。它是核心工具，围绕Matplotlib建立了许多东西。有这个基本地图、卡多比（cardopi）用于地理可视化。Pandas和Seaborn与Matplotlib有一些关联。我们还有像GGPie这样的东西。
- en: which gives a GGplot interface， on top of Matplotlib。 NetworkX gives you network
    visualizations。 Yellowbrick and scikit plot。 These are some things that I learned。
    about that do visualization for machine learning。 So this is kind of like the
    Matplotlib cluster of tools。 that I think of。 And I'll go into some of these a
    little bit later。 On top of that。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 它提供了一个基于Matplotlib的GGplot接口。NetworkX为你提供网络可视化。Yellowbrick和scikit plot。这些是我了解到的一些用于机器学习可视化的东西。因此，这就像我想到的Matplotlib工具集。我会稍后深入讨论其中一些。此外。
- en: you have JavaScript。 And in the last few years， a lot of these Python libraries。
    have started to depend on JavaScript， and use JavaScript to get some great interactive
    visualization。 And probably the two biggest of those， are Plotly and Boke。 And
    I'll talk about each of those later。 But there are more。 There's this toy plot
    and Bq plot， which you may not have heard of。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你有JavaScript。在过去的几年中，许多Python库开始依赖JavaScript，并使用JavaScript获得一些很棒的交互式可视化。可能其中最大的两个是Plotly和Bokeh。我稍后会谈到这两个。但还有更多。有这个toy
    plot和Bq plot，可能你没有听说过。
- en: But they're really， really fun libraries to try out。 And you have things that
    are tied to the Jupyter notebook， like IPy Volume， IPy Leaflet， Py3。js。 They let
    you take advantage of different aspects of JavaScript。 to do interactive visualization
    in the notebook， which is pretty cool。 So there's other things。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 但它们真的非常有趣的库，值得尝试。你还有与Jupyter notebook关联的东西，如IPy Volume、IPy Leaflet、Py3.js。它们让你利用JavaScript的不同方面，在notebook中进行交互式可视化，这真是很酷。所以还有其他东西。
- en: Cufflinks is built on top of Plotly。 So that's kind of like the JavaScript cluster。
    of visualization tools。 And of course， there's more， right？
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Cufflinks建立在Plotly之上。因此，这有点像JavaScript的可视化工具集。当然，还有更多，对吧？
- en: You want a link JavaScript in Matplotlib。 So there's this D3。js is a thing。
    And I wrote a package called MPLD3 that links Matplotlib and D3。 It's not super
    well supported anymore， but it's kind of a fun thing if you。 want to turn your
    Matplotlib plots into D3。 And there's even more built-on D3。js。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你想在Matplotlib中链接JavaScript。所以有这个D3.js的东西。我写了一个叫做MPLD3的包，它链接了Matplotlib和D3。虽然现在支持不太好，但如果你想把Matplotlib图表转换成D3，这也是个有趣的东西。还有更多基于D3.js的工具。
- en: are these image specification languages， Vega and Vega Lite。 And there's some
    Python libraries。 Altair， Vincent， and D3PO that give you a Python interface，
    to all these tools。 Are you starting to get overwhelmed yet？ You can link all
    these together。 There's tools like Data Shader， which， is kind of a bokeh tool
    that also works with Matplotlib。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这些图像规范语言，Vega和Vega Lite，以及一些Python库，如Altair、Vincent和D3PO，提供了一个Python接口，连接所有这些工具。你开始感到不知所措了吗？你可以把这些都链接在一起。还有像Data
    Shader这样的工具，它是一种bokeh工具，也可以与Matplotlib一起使用。
- en: I'll show you an example of that later。 There's this thing called Vix， which。
    is very similar to Data Shader that， can render to all these three platforms。
    You have this tool。 Hall of Use， that links Data Shader， and bokeh and Matplotlib。
    And then there's this whole OpenGL cluster， with Glumpy and VisPy。 And there's
    graph visualizations。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我稍后会给你举个例子。这里有个叫做Vix的工具，它与Data Shader非常相似，可以在这三个平台上进行渲染。你有这个工具Hall of Use，它链接了Data
    Shader、bokeh和Matplotlib。然后还有一个完整的OpenGL集群，包括Glumpy和VisPy。还有图形可视化。
- en: And there's all these ones that I don't even， know how to categorize， to deal
    with big data。 So we just have this huge landscape of Vis tools。 And how do you
    make sense of this？ Well。 I'm hoping that this talk will， help you make sense
    of this a little bit just。 by color coding these clusters so that when you go
    out， and you Google each of these later。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 还有很多我甚至不知道如何分类的工具，用于处理大数据。所以我们就有了一个庞大的可视化工具的生态系统。你该如何理解这些呢？好吧，我希望这次演讲能通过对这些集群进行颜色编码，帮助你稍微理解一下，以便你之后去Google每一个工具。
- en: and check out the examples， you'll， kind of know how they relate together。 But
    for the rest of the talk， I want to dive into a few of these。 and show you some
    quick examples of what they look like。 So you'll kind of have an idea of what
    you can do with them。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 查看这些例子，你大概会知道它们之间的关系。但在接下来的演讲中，我想深入探讨其中的一些，给你展示一些它们的快速示例，让你了解你可以用它们做什么。
- en: '![](img/681a82ee3c4a5710d519f19d5a32a373_3.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/681a82ee3c4a5710d519f19d5a32a373_3.png)'
- en: So of course， we feel like this。 So how did we get here？ It all goes back to
    Matplotlib。 That's what I started with。 And Matplotlib， for all the flak that
    it gets。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们觉得这个工具很重要。那么我们是如何走到这一步的呢？这一切都归结于Matplotlib。这就是我开始使用的工具。尽管Matplotlib受到了很多批评。
- en: '![](img/681a82ee3c4a5710d519f19d5a32a373_5.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/681a82ee3c4a5710d519f19d5a32a373_5.png)'
- en: in the last few years， it really is a pretty incredible tool。 It's strengths。
    It was designed to be basically just like MATLAB。 And this was key to all the
    scientists and engineers who。 were transitioning to Python back 10， 15 years ago，
    end， of the '90s and end of the 2000s。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去几年里，这确实是一个相当不可思议的工具。它的强项在于，它的设计基本上就像MATLAB。这对所有在10到15年前、90年代末和2000年代末转向Python的科学家和工程师来说是至关重要的。
- en: '![](img/681a82ee3c4a5710d519f19d5a32a373_7.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/681a82ee3c4a5710d519f19d5a32a373_7.png)'
- en: It has a huge amount of rendering backends。 This is underappreciated。 If you
    make a plot in Matplotlib， you can render it on almost any visualization back
    end。 You can export PNG， PDF， EPS， SVG， all these different outputs。 And that's
    not trivial to do。 to make all of those different， outputs look the same for the
    code that you write。 And really。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 它有大量的渲染后端，这一点常常被低估。如果你在Matplotlib中制作一个图表，你几乎可以在任何可视化后端上进行渲染。你可以导出PNG、PDF、EPS、SVG等各种输出。而这并不简单，要让你写的代码在所有这些不同的输出中看起来相同，真的很不容易。
- en: it's powerful。 It can reproduce just about any plot。 It takes a little bit of
    effort to make most of these plots， even the most simple ones。 And it's well tested。
    This is almost a 13， 14 year history of Git commits。 And it's really been battle-dressed
    and bomb-proof over， the course of all that time。 So MATplotlib。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这个工具很强大。它几乎可以复现任何图表。制作大多数图表，即使是最简单的，也需要一点努力。而且它经过了良好的测试。这几乎是13到14年的Git提交历史。在这段时间里，它真的经过了实战考验，坚如磐石。所以是MATplotlib。
- en: I wouldn't discount it。 It's a really powerful tool。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会低估它。这是一个非常强大的工具。
- en: '![](img/681a82ee3c4a5710d519f19d5a32a373_9.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/681a82ee3c4a5710d519f19d5a32a373_9.png)'
- en: But you can do all these different things with it。 But it does have its weaknesses。
    And if you've tried to do statistical visualization。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 但你可以用它做所有这些不同的事情。不过它确实有一些弱点。如果你尝试进行统计可视化。
- en: '![](img/681a82ee3c4a5710d519f19d5a32a373_11.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/681a82ee3c4a5710d519f19d5a32a373_11.png)'
- en: with MATplotlib， you run into this。 So let's say you have some data， like this
    data frame of the。 IRIS data set， which you've probably run into if you've， done
    any machine learning tutorials。 It's a relatively simple data set。 And let's say
    you want to scatter petal length versus。 sepal length and color by species。 You
    can say that in a sentence fragment。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**MATplotlib**时，你会遇到这个问题。假设你有一些数据，比如这个**IRIS**数据集的数据框，如果你做过任何机器学习教程，你可能已经接触过。它是一个相对简单的数据集。假设你想要绘制花瓣长度与萼片长度的散点图，并按物种上色。你可以用一个句子片段来表达这一点。
- en: How many lines of MATplotlib does it take？ Any guesses？
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**MATplotlib**需要多少行代码？有什么猜测吗？
- en: This is kind of like the best way to do that。 Scatter one variable by another
    variable and color it by a。 third。 You have to do all this kind of boilerplate
    code。 And the thing is that MATplotlib is powerful as it is， is not， very expressive
    in a lot of cases。 So these are one of the weaknesses。 That the API can be pretty
    verbose。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这算是做这件事的最佳方式。用一个变量来散点图展示另一个变量，并用第三个变量上色。你必须写出所有这些样板代码。问题是，尽管**MATplotlib**强大，但在很多情况下并不是很具表现力。这些都是其弱点之一。API可以非常冗长。
- en: Sometimes the stylistic defaults are poor。 It was based on MATLAB circa 2001。
    So if you want plots that look like MATLAB circa 2001。 But I should say that in
    MATplotlib 2。0 recently released， the stylistic defaults have been updated。 So
    it's a lot better recently。 It doesn't really support web or interactive graphics，
    which。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 有时样式默认值较差。它基于2001年的**MATLAB**。所以如果你想要看起来像2001年**MATLAB**的图形。但我应该说，在最近发布的**MATplotlib
    2.0**中，样式默认值已经更新了。所以最近好多了。它并不真正支持网页或交互式图形，这。
- en: is what a lot of people want these days。 And it can be slow for large data sets。
    So everyone's goal。 the reason we have， in my mind， the， reason where we have
    this huge network of competing libraries。 is that everyone wants to improve on
    these weaknesses of， MATplotlib。 hopefully without sacrificing those strengths。
    And one way you improve on MATplotlib without。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这是很多人如今想要的。而且在处理大数据集时可能会比较慢。所以每个人的目标，我认为，正是我们拥有这个庞大的竞争库网络的原因，都是因为每个人都希望改善**MATplotlib**的这些弱点，同时希望不牺牲其优势。而改进**MATplotlib**的一种方法是。
- en: sacrificing the strengths is you use MATplotlib。 So all this kind of MATplotlib
    cluster here。 what these， tools have in common is that they are keeping MATplotlib
    at， the core。 So you have all those output backends， all that， versatility， all
    that power。 But you put a new API on top。 So you address that weakness。 And you
    say， I can use MATplotlib。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 牺牲优点的是你使用**MATplotlib**。所以所有这些**MATplotlib**工具在这里。它们的共同点是将**MATplotlib**作为核心。因此你拥有所有输出后端，所有的多样性和强大功能。但你在上面放置了一个新的API。这样你就可以解决那个弱点。你可以说，我可以使用**MATplotlib**。
- en: but I can make it， easier to generate those plots。 And the two that I want to
    highlight here are pandas and， seaborn。 These have been big in the Pi data ecosystem
    recently。 So pandas， as you probably know。 is a library that's meant to， make
    data frames， store labeled data， labeled columns of data。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 但我可以让生成这些图形变得更简单。我想在这里强调的两个工具是**pandas**和**seaborn**。它们在**Python**数据生态系统中最近非常流行。你可能知道，**pandas**是一个旨在创建数据框、存储带标签数据和标签列数据的库。
- en: And it has actually some built-in plotting functions。 If you do take any data
    frame like this iris handle and do， dot plot and then dot something else。 there's
    all these， different ways of plotting the data in there that are built， in。 So
    here we have just in one line， we can scatter plot two， columns of that data frame。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 它实际上有一些内置绘图函数。如果你对任何这样的**iris**数据框使用点图，然后点出其他东西，那里面有很多不同的绘图方式都是内置的。所以在这里，我们只需一行就可以绘制该数据框的两个列的散点图。
- en: You can even do more complex things。 There are more sophisticated statistical。
    visualizations in there。 This is one that I discovered recently that I've never，
    heard of before。 but I think it's pretty cool。 It's a way of taking all the columns
    of the data frame and。 turning them into a Fourier series and plotting them as
    lines。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你甚至可以做更复杂的事情。那里有更复杂的统计可视化。这是我最近发现的一个我以前从未听说过的可视化，但我觉得很酷。这是一种将数据框的所有列转化为傅里叶级数并将它们绘制为线条的方法。
- en: so that each individual line is a row of the data frame。 It's an object。 And
    in some ways。 those curves encode the values in all， the columns。 So you can see
    just by looking at this that there are three。 very distinct types of objects in
    there。 And you get a sense of the relationship。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 每一行都是数据框中的一行。它是一个对象。在某种程度上，这些曲线编码了所有列中的值。因此，仅通过查看这一点，你就能看出其中有三种非常不同类型的对象。你能感受到它们之间的关系。
- en: So these Andrews curves things are kind of fun。 I'm looking forward to using
    them in my own work。 So the other one I wanted to mention is Seaborn。 And this
    is a library that was explicitly designed to make。 statistical visualization and
    more complex statistical， visualization easy in Matpotlib。 It wraps Matpotlib。
    It gives it a nice set of style defaults and color palettes。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这些安德鲁曲线有点有趣。我期待在自己的工作中使用它们。还有一个我想提的是Seaborn。这是一个专门设计用于使统计可视化和更复杂的统计可视化在Matplotlib中变得简单的库。它封装了Matplotlib，提供了一套不错的样式默认值和颜色调色板。
- en: And you can do things in a few lines。 It's kind of a higher level language，
    so you need to。 memorize more things。 You don't have as many little composable
    chunks。 But if you know what function you're looking for， you can do。 things in
    very short number of lines of code。 So for example。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 而且你可以用几行代码完成这些事情。这是一种更高级的语言，所以你需要记住更多的内容。你没有那么多可组合的小块。但如果你知道要找什么函数，你可以用非常少的代码行完成事情。例如。
- en: you can call the pairplot function and get， this pairwise comparison of all
    the columns in the entire。 data frame。 So Seaborn is really， really nice of you
    if you want to do。 statistical data exploration in Python using Matpotlib。 OK，
    so then there's this JavaScript cluster。 And the reason everyone loves JavaScript
    is because it's， the lingua franca of the web these days。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以调用pairplot函数，获取整个数据框中所有列的成对比较。因此，如果你想在Python中使用Matplotlib进行统计数据探索，Seaborn真的是非常不错的选择。好的，那么还有这个JavaScript集群。每个人都喜欢JavaScript的原因是它现在是网络的通用语言。
- en: So you can do incredible things in JavaScript because it， brings that interactivity
    to your browser。 And everybody has a browser。 You don't have to worry anymore
    about these cross。 platform rendering backends。 You just render to the browser。
    And the browser developers have taken care of all the hard， parts。 So the key。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你可以在JavaScript中做令人惊叹的事情，因为它将交互性带入你的浏览器。每个人都有浏览器。你不必再担心这些跨平台的渲染后端。你只需渲染到浏览器。浏览器开发者已经处理了所有的困难部分。因此，关键在于。
- en: the common idea here is that you basically， build an API in Python that generates
    some sort of。 serialization of the plot that can then be passed over to， the browser。
    And inside the browser。 you have a corresponding JavaScript， library that reads
    that serialization and renders the， plot。 That's kind of what every one of these
    tools does in some， manner or another。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的共同点是，你基本上是在Python中构建一个API，生成某种可序列化的图形，然后可以传递给浏览器。在浏览器内部，你有一个相应的JavaScript库，读取该序列化并渲染图形。这大致是这些工具以某种方式所做的事情。
- en: And I want to focus real quick here on Plotly and Bokey。 which I think are the
    most developed of this， cluster of tools。 And they're both really nice。 They give
    you this interactive feel that's really missing， from that plotlib。 So this is
    plotting with Bokey。 The same data。 I'm just taking the columns and doing a circle
    plot and then。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我想快速关注一下Plotly和Bokeh，我认为它们是这个工具集群中最成熟的。它们都非常出色。它们为你提供了一种互动感，而这是Matplotlib所缺少的。所以这是使用Bokeh绘制的相同数据。我只是提取了列并做了一个圆形图，然后。
- en: showing it。 And you have all this interactivity you can click and you。 can zoom
    and you can pan around。 And if you go a little deeper， you can start doing things。
    like adding controllers and you can add tooltips to the， points and things like
    that。 Bokey is this really incredible language that lets you do， these sorts of
    visualizations。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 显示它。你可以进行所有这些交互，可以点击，可以缩放，可以平移。如果你深入一些，可以开始做一些事情，比如添加控制器，还可以为点添加工具提示等等。Bokeh是一种非常棒的语言，它让你可以进行这些类型的可视化。
- en: If you look at the gallery of Bokey， you go online to， Bokey。pydata。org。 And
    you can click on each one of these。 Since it's browser based， each one of these
    examples in the。 browser is interactive。 And you can start clicking and dragging
    and get a feel for， how it works。 So Bokey is out of Continuum。io， the people
    who brought you， Anaconda， Numba。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看Bokey的图库，去在线访问Bokey.pydata.org。你可以点击每一个示例。因为它是基于浏览器的，每个示例都是互动的。你可以开始点击和拖动，感受它的工作方式。所以Bokey是来自Continuum.io的，他们带来了Anaconda，Numba。
- en: and some of these other great tools。 So I'd really suggest taking a look at
    this。 You guys had advantages。 You have this interactivity。 You have several different
    layers and different APIs for， generating things。 The disadvantage is you don't
    have the same array of， outputs that Matplotlib has。 So at the moment。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些其他很棒的工具。所以我真的建议你们好好看看这个。你们有优势，你们有这种交互性，有多个不同的层次和API来生成内容。缺点是你没有Matplotlib那样多样的输出。因此，目前来看。
- en: unless I'm mistaken， you still can't do， PDF or EPS outputs。 And so if you're
    a scientist who was writing a paper for a。 journal that requires PDF or vector
    based graphics， you're， out of luck。 And it's also a slightly newer tool。 It doesn't
    have as much of a user base。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 除非我记错了，否则你仍然无法输出PDF或EPS。因此，如果你是一个为需要PDF或矢量图形的期刊写论文的科学家，你就麻烦了。而且这也是一个稍微新一点的工具，用户基础并不多。
- en: It's not as battle tested as Matplotlib， but it's really， getting there。 It's
    an awesome program。 So Plotly is quite similar。 The story with Plotly is it's
    actually a startup out of， Montreal。 And they have this interesting open source/close
    source， model。 where a whole lot of the Plotly tool is open source。 BSD license。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 它没有Matplotlib那样经过严格测试，但确实正在朝着这个方向发展。它是一个很棒的程序。因此Plotly与之非常相似。Plotly的背景其实是一个来自蒙特利尔的初创公司。他们有一个有趣的开源/闭源模式，其中大量的Plotly工具是开源的，采用BSD许可。
- en: you can use it for whatever you want。 But there are a few features that they
    use to make their。 money， and they charge you if you want a little bit more。 And
    that tends to be things like automatically hosting the。 plots on a website with
    some sort of server back end， that， sort of stuff。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用它来做任何你想做的事情。但是他们用来赚钱的一些功能，若你想要更多，就要收费。这通常是自动将图表托管在某种服务器后端的网站上，类似的东西。
- en: But I know a lot of people who are using Plotly， the free， version of Plotly。
    for some very nice visualizations and， for even scientific visualization。 They
    can do all sorts of different things。 They have some things that Boke doesn't
    like 3D plotting。 and animations built in。 I might be wrong there。 I think you
    can do animations in Boke。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 不过我知道很多人使用Plotly的免费版本进行一些非常不错的可视化，甚至是科学可视化。他们可以做各种不同的事情。他们有一些Boke没有的功能，比如3D绘图和内置动画。我可能错了，我觉得在Boke里也能做动画。
- en: but it's not， quite as easy as Plotly。 But it's a very， very nice visualization
    framework。 And the cool thing here is it's not only a Python library， it's also
    an R library。 it's a Julia library。 They have these different ways to target the
    JavaScript。 back end from different languages。 So like I said， the advantages
    are similar to Boke， it has。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 但是它并不像Plotly那么简单。不过这是一个非常，非常好的可视化框架。这里有个酷点是，它不仅是一个Python库，还是一个R库，甚至是一个Julia库。它们有不同的方式来从不同的语言针对JavaScript后端。所以，正如我所说的，优势与Boke相似。
- en: all this web view interactivity， multi-language support， has 3D plotting。 Some
    features require a paid plan。 And depending on your kind of software philosophy，
    that may。 or may not be a turn off to you。 I know some people who go either way
    on that。 But I think it's a great library。 And I would suggest checking it out
    if you're interested in。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些网页视图交互性，多语言支持，具有3D绘图功能。一些功能需要付费计划。根据你的软件哲学，这可能会让你失望。我知道有些人对此态度不同。但我认为这是一个很好的库。如果你感兴趣，我建议你去看看。
- en: these interactive visualizations。 So the next thing that comes up， MatpotLib
    is not very。 good for these visualizations of larger data。 And there's a bunch
    of these libraries that address that。 deficiency of MatpotLib。 And they do things
    like relying on OpenGL， this VisPy and。 Glumpy right there。 Glumpy or Glumpy，
    I don't know how to pronounce it。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这些互动可视化。所以接下来提到的是，Matplotlib对于更大数据的可视化并不好。有很多库专门解决Matplotlib的这个缺陷。它们依赖于OpenGL，比如VisPy和Glumpy，我不确定该怎么发音。
- en: The things like Data Shader and Vioxx， these are interesting。 ones that actually
    use really efficient code so that rather。 than delivering data points to the GPU
    or to the computer， to render。 they pre-aggregate all the data and deliver， pixel
    basically bitmaps to the computer to render。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 像Data Shader和Vioxx这样的工具都很有趣。它们使用非常高效的代码，因此不需要将数据点传递到GPU或计算机进行渲染，而是预先聚合所有数据并将像素位图发送到计算机进行渲染。
- en: And so when you have a billion points， there's no point in。 sending a billion
    points to your visualization screen。 because there's not a billion pixels to work
    with。 So you can pre-aggregate those and do kind of heat maps。 And that's the
    strategy these use。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当你有十亿个点时，发送十亿个点到你的可视化屏幕是没有意义的，因为没有十亿个像素可用。因此，你可以预先聚合这些数据，制作热图。这是它们所采用的策略。
- en: And then these other tools down here， they're really nice。 I wish I had time
    to go into them。 A few of them come out of the astronomy community for。 visualizing
    large three-dimensional data sets。 So if you're interested in that。 check out
    the gray zone， down in the left corner。 But I want to take a look really quick
    at Data Shader。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 而这些其他工具真的很好。我希望我有时间深入讨论它们。部分工具来自天文学社区，用于可视化大型三维数据集。如果你对此感兴趣，可以查看左下角的灰色区域。但我想快速看看Data
    Shader。
- en: because I think this is a nice project。 It's still in pretty active development，
    but there's some。 impressive demos。 And I have to apologize。 My plan was to do
    a live demo of Data Shader， because I。 think it's so awesome。 But then all of
    a sudden， I had a kid in the keynote。 It didn't really happen。 So I have screenshots。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我认为这是一个不错的项目。它仍在积极开发中，但有一些令人印象深刻的演示。我必须道歉。我原计划做Data Shader的实时演示，因为我认为它非常棒。但突然间，我在主题演讲中有了孩子，这个计划没能实现。因此，我有一些截图。
- en: '![](img/681a82ee3c4a5710d519f19d5a32a373_13.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/681a82ee3c4a5710d519f19d5a32a373_13.png)'
- en: So yeah， Data Shader， what it allows you to do is these， fast server side things。
    So it's a fast server side engine that does dynamic data， aggregation。 So you
    can take things like the census data， where you have， 200， 300 million points。
    And in real time， you can visualize those on a map。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，Data Shader使你能够进行快速的服务器端处理。这是一个快速的服务器端引擎，进行动态数据聚合。因此，你可以处理如人口普查数据这样的内容，其中有2亿、3亿个点。在实时中，你可以在地图上可视化这些数据。
- en: And the live demo I could do here is you zoom in and out。 And in real time。
    it's actually calculating the bounds that， you're looking at， figuring out what
    subset of the data。 matches that， and then re-aggregating it， and sending， it
    to the screen。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以在这里做的实时演示是你可以放大和缩小。实际上，它会实时计算你所查看的边界，确定哪些数据子集与之匹配，然后重新聚合并发送到屏幕上。
- en: '![](img/681a82ee3c4a5710d519f19d5a32a373_15.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/681a82ee3c4a5710d519f19d5a32a373_15.png)'
- en: So if you want to work with hundreds of millions or， billions of points， Data
    Shader is awesome。 So this is a zoomed-in view。 You can smoothly zoom in on Lake
    Michigan and Chicago， and。 get a more detailed view of the points inside there。
    So you zoom in even farther。 and you see kind of like， neighborhood level data。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果你想处理数亿或十亿个点，Data Shader非常棒。这是一个放大的视图。你可以平滑地放大密歇根湖和芝加哥，获取更详细的点数据。因此你再放大，便可以看到社区级别的数据。
- en: So I would really suggest playing with this if you want， to visualize really
    large data sets。 You can go and download their demo notebooks。 The installation
    instructions are pretty easy。 and it's a， fun package。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想可视化非常大的数据集，我真的建议你尝试一下。你可以下载他们的演示笔记本，安装说明相当简单，而且这是一个有趣的包。
- en: '![](img/681a82ee3c4a5710d519f19d5a32a373_17.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/681a82ee3c4a5710d519f19d5a32a373_17.png)'
- en: So another class of algorithms here that I think is really。 interesting is the
    ones that start to tie these all， together， and in particular。 hollow views up
    there， and then， I'll tear down in the bottom right。 These are like new kind of
    declarative language， specifications that target different backends within the。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这里还有另一类算法，我认为它们非常有趣，尤其是将这些内容结合在一起的算法，特别是在上方的空视图，以及右下角的剖面。这些是针对不同后端的新型声明式语言规格。
- en: system。 They might target bokeh or matplotlib or d3。 And they let you be。 create
    plots in a very expressive way， and in a very powerful way。 So the first one is
    hollow views。 and this is a really， interesting project。 It's worth watching。
    I first heard about it a couple years ago when they gave a， demo at the SciPy
    conference。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 系统。他们可能会对接Bokeh、matplotlib或d3。让你以非常表达的方式和强大的方式创建图形。因此，第一个是hollow views，这是一个非常有趣的项目，值得关注。我几年前在SciPy会议上听到过他们的演示。
- en: And the initial philosophy of this was that data sets should。 have kind of intrinsic
    teach data set is the best way to， visualize it。 So if you have a data set consisting
    of columns of， certain numbers。 there is an intrinsic way that it should， be visualized。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这最初的理念是数据集应该有一种内在的教导，数据集的最佳方式是进行可视化。因此，如果你有一个由某些数字的列组成的数据集，就有一种内在的方式去可视化它。
- en: And we as programmers shouldn't have to think about that and。 twiddle the x-axis
    and the y-axis and the labels and the， ticks and the colors。 The computer should
    just know how to visualize this data。 So what all of you started as is a way to
    wrap data sets in。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 作为程序员，我们不应该考虑这些，调整x轴和y轴、标签、刻度和颜色。计算机应该知道如何可视化这些数据。因此，你们开始的就是一种将数据集包装起来的方法。
- en: an object that when you do a representation of that object， in the notebook。
    it gives you the visualization。 So rather than saying this is a data frame， it's
    such and。 such address， it actually gives you a picture of the data， and they've
    built in all sorts of really。 really interesting， interactivity on top of that。
    And you can do things like map data。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在笔记本中对那个对象进行表示时，它会给你可视化的对象。因此，与其说这是一个数据框，地址是某某某，不如说它实际上给你展示了数据的图像，并在此基础上构建了各种有趣的交互性。你可以做一些诸如映射数据的事情。
- en: And from what I've heard， I was talking to some of the， bokeh developers。 It
    sounds like all of you is going to be kind of wrapped into。 bokeh and is going
    to become their sort of declarative layer， for visualization within bokeh。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我所听到的，我与一些Bokeh开发者交谈过。听起来所有这些都将被整合到Bokeh中，并将成为他们的可视化声明层。
- en: '![](img/681a82ee3c4a5710d519f19d5a32a373_19.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/681a82ee3c4a5710d519f19d5a32a373_19.png)'
- en: But all of you is also， you can see the links I put here。 It also can target
    map plotlib。 It can target data shader。 It sort of works seamlessly with all of
    those tools。 So no matter what back end you need， if you need an， interactive
    back end。 if you need a big data back end， or if， you need a back end that can
    output every plot file or a。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 但你们也可以看到我在这里放的链接。它也可以与mapplotlib对接。它可以与data shader无缝协作。无论你需要什么后端，如果你需要一个交互式后端，或者大数据后端，或者一个可以输出每个图形文件的后端。
- en: figure file imaginable， you can use the same system。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 想象中的图形文件，你可以使用相同的系统。
- en: '![](img/681a82ee3c4a5710d519f19d5a32a373_21.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/681a82ee3c4a5710d519f19d5a32a373_21.png)'
- en: So I think that's a really powerful way of going about it。 The last project
    that I want to talk about is kind of my pet。 project that I've been working on
    for a little while。 It's this library called Altair。 And the idea here is that
    what if instead of passing， around pixels。
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为这是一个非常强大的方法。我想谈的最后一个项目是我一直在努力的宠儿项目。这是一个叫做Altair的库。这里的想法是，如果不是传递像素。
- en: we actually pass around the data itself with， the metadata that describes what
    kind of plot that we want。 This is something that's been really exciting。 The
    underlying library underneath Altair is called。 Vega and Vega Lite。 And this has
    been starting to be adopted by things like。 Wikipedia and saying we don't want
    to just save a bitmap。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实际上传递的是数据本身，带有描述我们想要什么样图形的元数据。这是非常令人兴奋的事情。Altair底层的库叫做Vega和Vega Lite。这已经开始被像维基百科这样的东西采纳，他们不想只保存位图。
- en: We want to save the data and we want to save the， specification that tells the
    web page how to visualize that。 data。 And I think this is a really powerful idea
    because it can， be adopted widely。 We'll be able to use all that whole ecosystem
    of tools and。 say have Bokeh output of Vega Lite specification that could。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想保存数据，并希望保存说明，告诉网页如何可视化这些数据。我认为这是一个非常强大的想法，因为它可以广泛采用。我们将能够使用整个工具生态系统，并能够让Bokeh输出Vega
    Lite的规范。
- en: then be read in by Matplotlib and could be passed on to， something else。 And
    I've been talking with academic journals and the。 astronomy community about the
    possibility of having。 scientists submit their figures in the form of these。 sort
    of specifications so that then the journal could。 generate a PDF to be printed
    but it could also generate an， interactive plot。 equivalent interactive plot to
    be on， their web page。 So I really think this is the future and this is kind of
    my， soap box that I'm pushing。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以被Matplotlib读取，并可以传递给其他东西。我与学术期刊和天文学界讨论过，可能让科学家以这些规范的形式提交他们的图形，这样期刊就可以生成PDF进行打印，同时也可以生成相应的交互式图形，放在他们的网页上。因此，我真的认为这是未来，这是我所推动的理念。
- en: But so what we're pushing here is this idea of declarative， visualization。 And
    this is a project that's in collaboration with my， colleagues at the eScience
    Institute。 the Jupyter Project， and also the Interactive Data Lab at UW which
    is the。 people behind tools like D3 which you might know about。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们在推动这个声明式可视化的概念。这是一个与我在eScience Institute的同事、Jupyter项目，以及华盛顿大学的互动数据实验室合作的项目，后者是你可能听说过的D3工具的开发者。
- en: So what's the difference between declarative and， imperative？ Imperative visualization。
    think Matplotlib。 You can say in one sentence what you want the plot to be。 and
    then you write 50 lines of code to make it happen。 Declarative visualization is
    trying to make the code as。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 那么声明式和命令式之间有什么区别？命令式可视化，例如Matplotlib。你可以用一句话说明你想要的图形，然后写50行代码来实现。声明式可视化则试图让代码尽量简洁。
- en: close to that one sentence description as possible。 You say， I want X to be
    this variable。 Y to be that， variable， and color to be this variable， and show
    me the， result。 So imperative。 you're specifying how something should be， done，
    all the little steps。 All the manuals。 plotting steps， and the specification and，
    the execution are intertwined。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 尽量做到与那一句话描述尽可能接近。你可以说，我希望X成为这个变量，Y成为那个变量，颜色成为这个变量，并显示结果。因此，命令式是你在指定某些事情该如何完成，所有的小步骤、手动绘图步骤、规范和执行是交织在一起的。
- en: In declarative visualization， you specify what should be， done。 And the details
    should be determined automatically by， the system。 This is quite similar to if
    you're used to database， languages。 Like the difference between doing things by
    writing a。 Python script to sift through data and writing a SQL query。 The SQL
    query is a declarative specification of what you， want the system to do。 And the
    system can find the most efficient path to doing that。 So the key here is that
    this lets you think about data and。
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在声明式可视化中，你指定应该做什么，细节则应由系统自动确定。这与使用数据库语言相似，就像通过编写Python脚本处理数据与编写SQL查询之间的区别。SQL查询是你希望系统执行的声明性规范，系统可以找到执行的最有效路径。因此，关键在于这让你可以专注于数据和。
- en: relationships rather than these incidental details。 And Brian Granger。 who's
    one of the IPython developers， actually used this library Altair to teach an。
    Intro Data Science class this last semester。 And he's really excited about moving
    forward with that。 So I think what we're trying to do is free students to， start
    thinking about relationships and data。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 关系，而不是这些偶然的细节。布莱恩·格兰杰是IPython开发者之一，他实际上在上个学期使用这个库Altair来教授入门数据科学课程。他对未来的进展感到非常兴奋。因此，我认为我们努力的方向是让学生开始思考数据和关系。
- en: rather， than thinking about syntax and libraries。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是考虑语法和库。
- en: '![](img/681a82ee3c4a5710d519f19d5a32a373_23.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/681a82ee3c4a5710d519f19d5a32a373_23.png)'
- en: So where does this come from？ You've probably seen the D3 language。 I'm going
    to click over here and go to the live version。 If you go to the New York Times
    and see any of these。 really interesting interactive demos where you hover and，
    you see different things。
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 那么这一切来自哪里？你可能见过D3语言。我会点击这里查看实时版本。如果你去纽约时报，看到这些非常有趣的交互式演示，当你悬停时，你会看到不同的内容。
- en: basically anything at the New， York Times that looks like this is written in
    D3。 And that's because the New York Times graphics editor is， Mike Bostock who
    wrote D3。 So he uses it a lot。 And he makes all his people use it a lot。 And I
    just killed my full screen。 How do I get it back？ Yeah。 So D3 is super powerful
    and you can do these amazing。
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，纽约时报上看起来像这样的任何东西都是用D3写的。这是因为纽约时报的图形编辑是Mike Bostock，他写了D3。所以他使用它很多。他让他的所有人都使用它。我刚刚关闭了全屏。怎么恢复？对。所以D3超级强大，你可以做这些惊人的事情。
- en: interactive graphics， right？ But if you've ever tried to use D3， you figure
    out that it's。 so ridiculously low level that unless you're Mike Bostock。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 交互式图形，对吧？但如果你曾经尝试使用D3，你会发现它是如此低级，除非你是Mike Bostock。
- en: '![](img/681a82ee3c4a5710d519f19d5a32a373_25.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/681a82ee3c4a5710d519f19d5a32a373_25.png)'
- en: you can't do anything with it。 So here's the example。 This is literally like
    the example from the D3 example， page of how to do a bar chart， right？ Like。 OK，
    I'm going to do a histogram to see。 This makes you wish for Matplotlib， which
    is crazy。 But so after Bostock went to the New York Times， his advisor， Jeff Hare。
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你无法用它做任何事情。这里有一个例子。这字面上就像D3示例页面上如何制作柱状图的例子，对吧？就像。好的，我要做一个直方图来看看。这让你想起Matplotlib，真是疯狂。但在Bostock去了纽约时报后，他的顾问Jeff
    Hare。
- en: who was down at Stanford and helped develop D3， moved to University of Washington。
    And he thought about this and said， we need a better way for。 actual scientists
    and statisticians to visualize their data。 So they wrote this specification language
    called Vega。 And Vega improves on this a little bit。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在斯坦福大学，帮助开发了D3，后来搬到了华盛顿大学。他考虑到这一点，说，我们需要一种更好的方式让真正的科学家和统计学家可视化他们的数据。所以他们写了这种规格语言叫做Vega。Vega在这方面有所改进。
- en: It's no longer this imperative list of commands for creating， axes and things
    like that。 It's a declarative specification that says， this is my data。 This is
    what I want linked to the x-axis and the y-axis， and things like that。 But it's
    powerful。 Still， you're not going to sit down and write this JSON。
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这不再是创建轴等命令的强制列表。它是一种声明式规格，说明，这是我的数据。这是我想链接到x轴和y轴的内容。但它依然强大。你不会坐下来写这个JSON。
- en: structure to see a bar chart of some data you're exploring， right？
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 结构以查看你正在探索的一些数据的柱状图，对吧？
- en: So once they got Vega working-- this is powerful， powerful。 thing that's underlying
    a lot-- they said， we need it to be， simpler。 So they made Vega light。 right？
    And Vega light is-- this is almost getting to the point。 where you could just
    sit down and type this in a text， editor and make it happen， right？
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦他们让Vega工作起来——这是一种强大、强大的东西，许多基础都在这里——他们说，我们需要让它变得更简单。所以他们做了Vega light，对吧？而Vega
    light几乎到了你可以坐下来在文本编辑器中输入它并使其生效的地步，对吧？
- en: You're basically saying， these are my data。 I want a bar marking。 and I want
    the x to be a and the y to be b。 And it spits out that output。 So what we're doing
    in Altair， what the Altair library does。 fundamentally is it's a Python API that
    creates these outputs， creates these JSON specifications。
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你基本上是在说，这些是我的数据。我想要一个条形标记。我想要x是a，y是b。然后它会输出这个结果。所以我们在Altair中所做的，Altair库基本上是一个Python
    API，创建这些输出，生成这些JSON规格。
- en: Because I like writing Python。 I don't like writing JSON by itself。 So Altair。
    this is what it looks like。 You have the data in a data frame， and you say， I
    want to。 chart with that data， I want a mark bar， and I want x to be a， and y
    to be b。 So all of a sudden。 you're literally just telling the， computer what
    you want to be shown， and the computer figures。
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我喜欢写Python。我不喜欢单独写JSON。所以Altair，这就是它的样子。你在数据框中有数据，你说，我想用这些数据制作图表，我想要一个条形图，x是a，y是b。所以突然之间。你实际上只是在告诉计算机你想要显示什么，计算机会弄明白。
- en: out how to display it。 And the output of this code is basically exactly this，
    little JSON object。 And now you can start passing that around to other libraries，
    and other places。 And so you've separated the specification of the plot， from
    the execution of the plot。 And I really think I'm hopeful for this as a model
    moving。
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如何显示它。而这段代码的输出基本上就是这个小JSON对象。现在你可以开始把它传递给其他库和其他地方。所以你已经将图表的规格与图表的执行分开了。我真的很希望将这个作为一种模型。
- en: forward for interoperability between all these Python。 libraries and also between
    libraries and other languages， in R and Julia。 So here's another more complicated
    example。 Going back to our original plot that we did in Matplotlib。 we want to
    say that x is the petal length， y is， sepal width， and color is the species。
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有这些 Python 库之间以及与 R 和 Julia 等其他语言的库之间，实现互操作性。因此，这里是另一个更复杂的示例。回到我们在 Matplotlib
    中做的原始图表。我们想说 x 是花瓣长度，y 是萼片宽度，颜色是物种。
- en: And you basically just write that out， and you can start。 adding things like
    the opacity of the circle。 And if you do this to a dictionary， which is Python's。
    basically JSON representation， you get a dictionary that， describes the plot。
    That's everything you need to know about the plot in order， to recreate that。
    So this is really fun。
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你基本上只需写出这些，然后你可以开始添加一些属性，比如圆的透明度。如果你把它应用于字典，实际上是 Python 的 JSON 表示，你会得到一个描述图表的字典。这就是重现图表所需的一切信息。因此，这真的很有趣。
- en: and you can do some incredibly， powerful things with Altair。 These are some
    of the more advanced examples that we have。 for doing different types of data
    visualization。 I especially like this。 Does anyone recognize this kind of yellow
    and blue plot in， the left middle？
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用 Altair 做一些非常强大的事情。这些是我们为不同类型数据可视化提供的一些更高级的示例。我特别喜欢这个。左中间的这种黄蓝图，大家有认识吗？
- en: That's the plot of measles incidents over the course of， time。 And there's this
    cutoff right there。 and that's when the， measles vaccine was introduced。 So you
    can see in the historical data。 each row is， state， and each box is a year of
    a number of people who had， measles。 And you can see the effect of this vaccine。
    It just works really well。 So you can check that out。
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这是麻疹发病率随时间变化的图表。那里有一个截断，那是麻疹疫苗引入的时间。所以你可以在历史数据中看到。每一行是一个州，每一框是一年中感染麻疹的人数。你可以看到这个疫苗的效果，效果真的很好。你可以查看一下。
- en: I'll tear， I think it's Altairvis。github。io and see， that。 And I should say
    that this is under a pretty active， development。 One thing that has just happened
    is Altair 2。0， or， Vega-Lite 2。0 has come out。 And this is incredibly exciting。
    You know， the grammar of visualization is not a new， thing。
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为 Altair 的网址是 Altairvis.github.io，去看看。我还要说这在积极开发中。刚发生的一件事是 Altair 2.0 或 Vega-Lite
    2.0 发布了。这令人非常兴奋。你知道，可视化的语法并不是一个新概念。
- en: Other people have done that before。 But what they just added is a grammar of
    interaction。 So you can build up these little-- these interactions， from basic
    building blocks。 And we don't have that in Altair yet。 But my project for June，
    as soon as I'm finished with。 parental leave， is to finish this and get Altair
    out there， so that you can start doing interactive。
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 其他人以前也这样做过。但他们所增加的只是交互的语法。所以你可以从基本构件构建这些小的交互。目前在 Altair 中还没有这个。但是我六月份的项目，等我结束带薪假期后，就是完成这个并将
    Altair 发布出去，这样你就可以开始进行交互式操作。
- en: declarative， plots。 But anyway， this is how you can try it， conda install， pip
    install。 You can get a tutorial。 You can go to the website。
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 声明式图表。不过无论如何，你可以尝试这样做，conda install，pip install。你可以获得一个教程。你可以访问网站。
- en: '![](img/681a82ee3c4a5710d519f19d5a32a373_27.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/681a82ee3c4a5710d519f19d5a32a373_27.png)'
- en: And that's the visualization landscape。 I have my contact info， but I'll leave
    that up there and。 take a couple questions。 So thank you。 Do we have time for
    questions？ Yeah。 two minutes for questions。 Yeah， if you'd like-- if someone would
    like to go up to the， mics。 we can do that。 I can also talk to folks afterwards。
    Oh， we got a bokeh developer coming up。 Uh-oh。
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是可视化的全景。我有我的联系信息，但我会把它留在这里，接受几个问题。谢谢大家。我们有时间问问题吗？有的，留出两分钟问问题。如果有人想上麦克风，我们可以这样做。我也可以在之后与大家交流。哦，有一位
    bokeh 开发者上来了。糟糕。
- en: My last commit to bokeh， I committed directly to master， an example。 and I broke
    master with my example。 So I don't commit to bokeh anymore。 But I have a statement
    of the form of a question。 But first， I want to thank you very much for this。
    comprehensive。 It's not an easy thing to put together。
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我上一次对 bokeh 的提交是直接提交到 master，一个示例。我用我的示例破坏了 master。因此，我不再提交到 bokeh 了。但我有一个形式如同问题的声明。但首先，我非常感谢你提供的这一切。内容非常全面。这并不是一件容易的事情。
- en: And thank you so much for doing the work here。 But my question was。 did you
    know that bokeh actually also， has an R interface？ So it is also--， I actually--
    yes。 I did know that。 I should have mentioned that。 But thank you， Jake， for a
    great presentation。 That was phrased as a question。 [INAUDIBLE]， Thank you very
    much for putting this together。
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 非常感谢你在这里做的工作。但我想问的是，你知道bokeh其实也有R接口吗？所以它也是——我确实知道这一点。我应该提到这一点。但谢谢你，Jake，做了一个很棒的演示。那是以问题的形式提出来的。[听不清]，非常感谢你整理这一切。
- en: Regarding Altair， I'm very interested。 But I invested， like a few years of my
    life a little。 while ago， in learning Ggplot2。 I'm just wondering when you were
    looking at your grammar。 have you looked at things like Ggplot2， which were very。
    successful using the grammar of graphics of others？ Yeah。
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Altair，我非常感兴趣。但我花了几年的时间学习Ggplot2。我只是在想，当你查看你的语法时，你是否考虑过像Ggplot2这样非常成功的图形语法？
- en: I'm hoping your API is influenced by them so that I won't have。 done all that
    work for nothing in the past。 Yeah， yeah。 So it's quite similar。 And our API in
    Altair is really influenced not as much by， any of that work。 but by the VEGALITE
    specification itself。 Our API is-- 95% of it is automatically generated by just。
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你的API受它们的影响，这样我过去的努力就不会白费。是的，是的。所以这很相似。我们的API在Altair中主要受到VEGALITE规范的影响。
- en: reading the VEGALITE schema and creating a Python， object hierarchy。 And then
    a few little bells and whistles on top of that。 And one of the things-- I didn't
    put this slide in， but one。 of the things I'm most proud of is we have two way
    back and。 forth-- or actually three way conversions。 So I can take Altair code
    and generate VEGALITE specs and。 then go from VEGALITE specs back to the Altair
    code。 So I can do this round trip thing。 And literally our unit test suite that
    tests every。 conceivable thing is like 12 lines of code that just does。
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 读取VEGALITE架构并创建一个Python对象层次结构，然后在此基础上添加一些小功能。我没有放这张幻灯片，但我最自豪的一点是，我们有双向甚至三向转换。我可以将Altair代码生成VEGALITE规范，然后再从VEGALITE规范回到Altair代码。这样我就可以进行这样的往返旅行。我们单元测试套件测试每一个可能的情况，代码只有12行。
- en: this round trip on all the VEGALITE examples。 But I was totally geeking out
    about that。 I was smiling for like three days。 [LAUGHTER]， Thanks。 I happened
    to use the VEGALITE before。 So since the Altair applies the Python API， does that
    mean。 that I still need the web browser to see the graphics？ Yeah。
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 所有VEGALITE示例的这个往返旅行让我感到非常兴奋。我笑了三天。[笑声]，谢谢。我之前恰好使用过VEGALITE。所以既然Altair应用了Python
    API，这是否意味着我仍然需要web浏览器来查看图形？是的。
- en: you need the web browser to see it because it's a。 JavaScript library that finally
    renders the graphics。 That's not a fundamental limitation。 Someone-- there's work
    on creating a VEGALITE renderer in， Matplotlib， for example。 But right now we
    have it tied to the Jupyter project and， JupyterLab， and it's kind of seamless。
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要web浏览器才能看到它，因为这是一个最终渲染图形的JavaScript库。这并不是一个根本限制。有些人正在开发在Matplotlib中创建VEGALITE渲染器的工作。但现在我们将其与Jupyter项目和JupyterLab结合在一起，几乎是无缝的。
- en: You just create the VEGALITE object and Jupyter knows how， to render it in the
    browser。 OK。 Thanks。 Maybe one more question。 Yeah， I guess。 Can I ask a question？
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 你只需创建VEGALITE对象，Jupyter就知道如何在浏览器中渲染它。好的。谢谢。也许还有一个问题。是的，我想我可以问一个问题？
- en: So the question is how do you solve for the I/O problem？
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 问题是你如何解决I/O问题？
- en: Because it looks like the billion data set that you're， showing。 Was it in memory？
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 因为看起来你展示的亿级数据集是在内存中吗？
- en: If it is in memory， how do you get into the， memory from database？
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它在内存中，如何从数据库进入内存？
- en: So this is a question about data shader。 I'm going to defer that to people like
    Peter who asked。 the first question because they can answer a little bit more。
    about data shader and some of those things going on。 I'll take one last question。
    I can take it offline if we need to wrap this up。 Is it a quick one？ Moderate。
    Yeah， I think so。
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这是关于数据着色器的问题。我会把这个问题交给像Peter这样的人，因为他们可以更好地回答有关数据着色器和其他相关内容的问题。我会接受最后一个问题。如果我们需要结束的话，我可以线下进行。这个问题快吗？中等。我想是的。
- en: Right。 So as far as interactive graphs， you showed a lot of， options there。
    but mostly it's centered around zooming and， what was zooming in geographical
    constraints。 What about slicing data？ Say， for instance， the census by income
    or race， which would。 require some user boxes？ Yeah。 Are any of these tools set
    up for that？
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 对于交互式图表，你展示了很多选项，但主要集中在缩放和地理约束的缩放上。切片数据呢？比如，按收入或种族的人口普查，这需要一些用户框？是的。这些工具中有哪个是为此设置的吗？
- en: Or do you have to pass it a different JSON？ They are。 Yeah。 If you look at the
    Bokeh project in particular， they have this。 way of creating dashboards that are
    really， really powerful。 They can either be client side or server side dashboards。
    And if you look at the Bokeh examples of all of those， there。 are examples of
    using sliders in conjunction with visualizations， and things like that。 So I'd
    check out Bokeh for that。 Thanks。 And we're hoping to get there with all territory。
    So thanks very much， everyone。
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 还是说你必须传递一个不同的JSON？它们是的。如果你特别查看Bokeh项目，它们有这种创建仪表板的方式，真的非常强大。它们可以是客户端或服务器端的仪表板。如果你查看Bokeh的所有示例，就会看到有使用滑块与可视化结合的示例之类的东西。所以我建议看看Bokeh。谢谢。我们希望能在所有领域实现这一点。非常感谢大家。
- en: '![](img/681a82ee3c4a5710d519f19d5a32a373_29.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/681a82ee3c4a5710d519f19d5a32a373_29.png)'
- en: '[APPLAUSE]， [BLANK_AUDIO]。'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '[掌声]，[空白音频]。'
- en: '![](img/681a82ee3c4a5710d519f19d5a32a373_31.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/681a82ee3c4a5710d519f19d5a32a373_31.png)'
