- en: P2：Andrew T  Baker   5 ways to deploy your Python web app in 2017   PyCon 2017
    - 哒哒哒儿尔 - BV1Ms411H7jG
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P2：Andrew T Baker 2017年部署你的 Python Web 应用的五种方式 PyCon 2017 - 哒哒哒儿尔 - BV1Ms411H7jG
- en: Good？ Cool。 And once we get that GIF back up there。 Thank you， Drake。 Thank
    you， folks。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 好吗？酷。等我们把那个 GIF 再放上去。谢谢你，Drake。谢谢大家。
- en: '![](img/3af7feeef4580813d521a21bcafafe0c_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3af7feeef4580813d521a21bcafafe0c_1.png)'
- en: '![](img/3af7feeef4580813d521a21bcafafe0c_2.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3af7feeef4580813d521a21bcafafe0c_2.png)'
- en: Hopefully the wait was worth it for that one。 That is my favorite GIF of all
    time。 My name。 is Andrew Baker， and I'm here to talk to you today about deploying
    your Python web apps。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这个等待是值得的。这是我一生中最喜欢的 GIF。我的名字是 Andrew Baker，今天我来跟你们谈谈如何部署你的 Python Web 应用。
- en: '![](img/3af7feeef4580813d521a21bcafafe0c_4.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3af7feeef4580813d521a21bcafafe0c_4.png)'
- en: in 2017。 So we'll put Drake aside for the moment。 Thank you for your service。
    A little。 bit about me。 So my name is Andrew Baker。 I'm a Python web developer。
    That's what I've。 been doing for most of my career。 These days I work at Twilio。
    If you haven't heard of， us before。 Twilio is a company that makes it easy for
    developers like you to put communications， in your apps。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2017 年。因此，我们暂时把 Drake 放在一边。谢谢你的服务。关于我的一点小介绍。我的名字是 Andrew Baker。我是一名 Python
    Web 开发者。这是我大部分职业生涯中一直在做的事情。现在我在 Twilio 工作。如果你之前没有听说过我们，Twilio 是一家让像你这样的开发者在应用中轻松实现通信的公司。
- en: So by communications， I mean things like phone calls， text messages， video，
    chat。 And I work on the documentation team at Twilio。 And I don't know。 That's
    enough， about Twilio。 If you want to know more， stop by the booth and I have to
    talk to you more， about it。 But today we're here to talk about deployments。 So
    what we're going to try and。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我所说的通信是指电话、短信、视频、聊天等内容。我在 Twilio 的文档团队工作。我不知道，这就是关于 Twilio 的足够多的信息。如果你想了解更多，请到展位来，我会跟你详细谈谈。但今天我们要讨论的是部署。因此我们将尝试。
- en: do in the next 30 minutes is cover five different ways that you can take code
    that you've got。 running locally on your machine and get it up and running in
    the cloud。 And rather than。 tell you how to do this， I'm figured it would be more
    fun if I tried to show you。 So in the。 next 30 minutes， we're going to try and
    take the same sample code and deploy it to the。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的 30 分钟里，我将介绍五种不同的方法，让你能够将本地机器上运行的代码上传到云端。与其告诉你怎么做，我觉得如果我尝试给你展示会更有趣。因此在接下来的
    30 分钟里，我们将尝试使用相同的示例代码并将其部署到。
- en: web five times over。 Sound good？ Alright， let's give it a shot。 So our sample
    app today is。 a flask application。 I imagine most of you in the room are familiar
    with flask already。 but if you're not， it's a micro framework that makes it really，
    really easy to bootstrap。 a Python web application。 So we've got the little Hello
    World code right here。 And indeed。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络上五次展示。听起来不错吧？好的，让我们试试。所以我们今天的示例应用是一个 Flask 应用。我想在座的大多数人对 Flask 应该已经熟悉了，但如果你不熟悉，它是一个微框架，使得启动一个
    Python Web 应用变得非常、非常简单。所以我们这里有一个小小的 Hello World 代码。确实如此。
- en: '![](img/3af7feeef4580813d521a21bcafafe0c_6.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3af7feeef4580813d521a21bcafafe0c_6.png)'
- en: that looks very similar to the sample code that we're going to be using in our
    app today。 So we've just got one route， the root route， and it's just going to
    spit on H1 tag with。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来非常类似于我们今天在应用中使用的示例代码。所以我们只有一个路由，根路由，它会返回一个 H1 标签。
- en: '![](img/3af7feeef4580813d521a21bcafafe0c_8.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3af7feeef4580813d521a21bcafafe0c_8.png)'
- en: a Hello World there。 So the first technique we're going to talk about today
    is engrock。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们要谈的第一个技术是 ngrok。
- en: '![](img/3af7feeef4580813d521a21bcafafe0c_10.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3af7feeef4580813d521a21bcafafe0c_10.png)'
- en: You could even call this technique number zero because it's not really deploying
    so much。 as it is a really， really handy tool that I think should be in every
    developer's tool。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你甚至可以称这个技巧为零号技术，因为它并不是在真正部署，而是一个我认为每个开发者工具箱中都应该有的，真的非常、非常方便的工具。
- en: '![](img/3af7feeef4580813d521a21bcafafe0c_12.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3af7feeef4580813d521a21bcafafe0c_12.png)'
- en: belt。 So engrock， if you check out their website， it is Secure Tunnels 2 local
    hosts。 So the quote says it all， I want to expose my local。 server behind a NAT
    or firewall to the internet。 And if you click that download button， you。 go over
    to the engrock download page， download that file， which I've done already。 And
    you。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 所以 ngrok，如果你查看他们的网站，就是为本地主机提供安全隧道。所以这句话说得很清楚，我想将我的本地服务器暴露在 NAT 或防火墙后面到互联网。如果你点击那个下载按钮，你会进入
    ngrok 下载页面，下载那个文件，我已经下载过了。
- en: really just need to do two things。 First， I'm going to fire up that flask app
    that we had， before。 and we'll make sure that's working on local host 5000 Hello
    World， digging it。 And then I'm just going to go over to another window here and
    do engrock HTTP 5000 to tell。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 其实我只需要做两件事。首先，我将启动之前的flask应用，确保它在本地主机的5000端口上正常工作，Hello World，挖掘它。然后我会打开另一个窗口，运行engrock
    HTTP 5000来告诉。
- en: '![](img/3af7feeef4580813d521a21bcafafe0c_14.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3af7feeef4580813d521a21bcafafe0c_14.png)'
- en: engrock that I want it to route to port 5000 on my local host。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: engrock我希望它能路由到我本地主机的5000端口。
- en: '![](img/3af7feeef4580813d521a21bcafafe0c_16.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3af7feeef4580813d521a21bcafafe0c_16.png)'
- en: engrock is going to fire up here。 It's going to give me this weird gobble to
    gooke URL。 I'm just going to paste that into my browser and Hello World。 That
    is it。 Your app is now。 live for the world to see。 engrock is a really， really
    great tool for just getting something。 up in a pinch。 One thing that even folks
    who have used engrock before might not be aware。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: engrock将在这里启动。它会给我一个奇怪的随机URL。我只需将其粘贴到浏览器中，Hello World。就是这样。你的应用现在对全世界可见。engrock真的是一个非常好的工具，可以在紧急情况下快速上线。甚至使用过engrock的人可能并不知道。
- en: of is it also has this awesome request inspector。 So if you go to local host
    4040 while you've。 got engrock running， you can click around， see the request
    that we're coming in， see the。 response that your app was putting back。 If you
    can go over to the status page here。 you can get some performance information
    on how your app is doing locally。 So engrock。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 它还有这个很棒的请求检查器。因此，如果你在运行engrock时访问localhost 4040，你可以点击查看传入的请求，以及你的应用程序的响应。如果你查看这里的状态页面，你可以获取一些关于你的应用在本地运行情况的性能信息。所以engrock。
- en: is the simplest way to get your app running in the cloud。 So after each of these
    techniques。 we're going to do a brief breakdown of the pros and cons， of each。
    The pros for engrock。 it is fast and easy。 There's no way that it's faster or
    easier。 It's really handy for demos。 So if you're just going to a meeting with
    some code that， you've been working on。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 是将你的应用运行在云中的最简单方式。因此，在每种技术之后，我们将简要分析每种技术的优缺点。engrock的优点是速度快且简单。没有比这更快或更简单的了。它对于演示非常方便。所以如果你只是去参加一个会议，带着你正在工作的代码。
- en: you haven't really showed it to anyone else yet， but you want。 some of the people
    in that meeting to be able to play with it。 engrock is a great tool for， that。
    And it's also really great for hacking on web hooks。 So if you haven't heard of
    web， hooks before。 a great example is with Twilio。 If when your Twilio phone number
    has an incoming。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你还没有真正向其他人展示它，但你想让会议中的一些人能够试用。engrock是一个很好的工具，非常适合这个。它也非常适合进行网络钩子的黑客实验。如果你之前没听说过网络钩子，一个很好的例子就是Twilio。当你的Twilio电话号码接到来电时。
- en: phone call from somewhere in the outside world， Twilio will send your server
    a HTTP request。 asking you how you want to handle the phone call。 And that's great
    when your server is。 live and running and prod， but when you're just working locally，
    you don't actually have。 that URL that you can point Twilio to get those instructions。
    engrock is the way that。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 来自外部世界的电话，Twilio会向你的服务器发送HTTP请求，询问你希望如何处理电话。这在你的服务器在线且正常运行时很不错，但当你只是本地工作时，你实际上并没有那个可以指向Twilio获取指令的URL。engrock就是这样。
- en: we recommend doing it， and that's why it's an indispensable part of my toolkit
    now。 The cons。 obviously， it stops when you close your laptop。 So as soon as your
    screen goes， black。 that URL is gone。 And every time you fire it up， you're going
    to get a different， random domain。 You can upgrade to a paid version， of course，
    and it's a great product。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们推荐使用它，这就是为什么它现在是我工具包中不可或缺的一部分。缺点显然是，当你关闭笔记本电脑时它就停止工作。因此，一旦你的屏幕变黑，那个URL就消失了。每次你重新启动它时，你都会得到一个不同的随机域名。当然，你可以升级到付费版本，这也是一个很棒的产品。
- en: so I support paying developers who do cool stuff。 But if you're just sticking
    with a free， one。 you're going to get a random domain each time。 And it definitely
    doesn't scale。 So even。 on the free tier， if you have， like， maybe 12 people in
    a meeting and you're trying to。 point them at your engrock URL at the same time，
    your requests may get throttled。 So be， careful。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我支持支付那些做酷炫事情的开发者。但是如果你只是坚持使用免费的版本，你每次会得到一个随机域名，并且确实无法扩展。因此，即使在免费层，如果你有大约12个人在会议上，同时尝试让他们访问你的engrock
    URL，你的请求可能会被限制。所以要小心。
- en: Be careful with how many people you send that URL out to at once。 Awesome。 All。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 注意不要同时将那个 URL 发给太多人。太棒了。所有人。
- en: '![](img/3af7feeef4580813d521a21bcafafe0c_18.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3af7feeef4580813d521a21bcafafe0c_18.png)'
- en: right， moving on。 Technique number two is Heroku。 So Heroku is a platform as
    a service。 and in my opinion， today it's still the easiest way to get your code
    running in the Cloud 24/7。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，继续。第二个技术是 Heroku。Heroku 是一种平台即服务，在我看来，今天它仍然是让你的代码 24/7 在云中运行的最简单方式。
- en: '![](img/3af7feeef4580813d521a21bcafafe0c_20.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3af7feeef4580813d521a21bcafafe0c_20.png)'
- en: So if you pop over to Heroku's website， they've got lots of interesting language
    here， which。 explains what it does， but for me， Heroku isn't really so easy to
    explain as it is easy， to show。 So we're going to pop back over to our Flask app。
    Still got that running there。 I'm going to close down engrock， stop my local server，
    and we need two things to get an app。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你访问 Heroku 的网站，他们有很多有趣的语言来解释它的功能，但对我来说，Heroku 并不是那么容易解释，倒不如直接展示。我们将返回到我们的
    Flask 应用，仍然在运行。我将关闭 engrock，停止本地服务器，我们需要两件事来获取一个应用。
- en: running on Heroku。 The first thing we need to do is create this file called
    a proc file。 A proc file tells Heroku how it should run our app in production。
    And then we need to。 actually create a Heroku app， which is going to give us the
    URL where our app is going， to live。 So we'll start with a proc file first。 And
    the proc files are a pretty simple syntax。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Heroku 上运行。我们需要做的第一件事是创建一个叫做 proc 文件的文件。proc 文件告诉 Heroku 如何在生产中运行我们的应用程序。然后我们需要实际创建一个
    Heroku 应用，它将给我们应用将要存在的 URL。所以我们先从 proc 文件开始。proc 文件的语法相当简单。
- en: '![](img/3af7feeef4580813d521a21bcafafe0c_22.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3af7feeef4580813d521a21bcafafe0c_22.png)'
- en: You just do web， and then the command you want Heroku to run when it starts
    your service。 Now if you look at the Flask development docs， they will tell you
    do not run the development。 server in production， never ever run the development
    server in production。 So for the rest of this。 talk today， we're going to use
    a Python HTTP server called G Unicorn to actually run our。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你只需输入 web，然后是你希望 Heroku 在启动服务时运行的命令。如果你查看 Flask 开发文档，他们会告诉你不要在生产中运行开发服务器，绝对不要在生产中运行开发服务器。因此，在今天的讨论中，我们将使用一个叫做
    G Unicorn 的 Python HTTP 服务器来实际运行我们的。
- en: app when it's out in the world for everyone to see。 And so the command to do
    that is G Unicorn。 and then the path， Python path to where our app is defined。
    So that's inside hello。py， module。 and then we have a variable in here called
    app。 And then there's a couple other。 options that we like to pass Heroku。 This
    one just tells G Unicorn， hey， don't store。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序，让每个人都能看到。因此，执行这个操作的命令是 G Unicorn，然后是定义我们应用的 Python 路径。所以在 hello.py 模块内部，我们有一个变量叫做
    app。然后还有一些我们希望传递给 Heroku 的其他选项。这一选项只是告诉 G Unicorn，嘿，不要存储。
- en: your logs locally on the server。 Instead， pass them back to Heroku so that Heroku
    can give。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要将日志保存在服务器本地。相反，将它们传回 Heroku，以便 Heroku 能够给我。
- en: '![](img/3af7feeef4580813d521a21bcafafe0c_24.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3af7feeef4580813d521a21bcafafe0c_24.png)'
- en: them to me。 So once we've got our proc file， when you create your Heroku account，
    they。 will tell you to download this thing called the Heroku tool belt， which
    is basically their。 command line interface。 And after you log into that， all you
    have to do is type Heroku， create。 And it's going to go ahead and give us that
    unique URL right on the spot。 It's。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了 proc 文件，当你创建 Heroku 账户时，他们会告诉你下载一个叫做 Heroku 工具包的东西，这基本上是他们的命令行界面。登录后，你只需输入
    Heroku，create。它将立即给我们那个独特的 URL。
- en: also going to add a new remote to our repository that ties to that unique URL。
    So if I was just。 pushing my changes up to GitHub， I would do git push origin
    master。 If I'm pushing my。 changes up to Heroku， I'm going to do git push Heroku
    master。 And so what's happening。 now is Heroku has accepted our source code。 It
    is looking at the requirements that are。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 还会向我们的代码库添加一个新的远程，连接到那个独特的 URL。因此，如果我只是将更改推送到 GitHub，我会执行 git push origin master。如果我将更改推送到
    Heroku，我将执行 git push Heroku master。现在发生的事情是 Heroku 已接受我们的源代码。它正在查看要求。
- en: inside our requirements。txt file。 It's going to go ahead and install all those
    requirements。 It's really， really fast because Heroku servers are pretty close
    to where PIPI servers are。 At least a lot closer than where our laptop is。 Then
    it's going to bundle it all up and。 shoot it out on that URL and launching。 Cool。
    So if we do Heroku open， which is a nice handy。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 requirements.txt 文件内部。它会继续安装所有那些依赖项。速度真的很快，因为 Heroku 服务器距离 PIPI 服务器相对较近。至少比我们的笔记本电脑要近得多。然后它会将所有内容打包并通过那个
    URL 发射出去并启动。太酷了。所以如果我们执行 Heroku open，这个功能非常方便。
- en: little shortcut they give us， we'll hit that URL。 It's making all the pipes
    line up for。 us and Hello World。 Cool。 So now we are up and live with Heroku。
    So what exactly does， this mean？
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 小快捷方式他们提供给我们，我们会点击那个 URL。它为我们整理所有的管道，Hello World。太酷了。所以现在我们在 Heroku 上已经上线了。那么这到底意味着什么呢？
- en: To me， my favorite part about Heroku is that it's like the easiest way to get
    an。 app that's running in the cloud 24/7 for free。 So Heroku's free tier is a
    little more complicated。 than it used to be， but the last time I did the math，
    you can basically have one app per。 account running all the time without any serious
    consequences。 There's zero server management。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，我最喜欢 Heroku 的地方是，它是让应用程序在云中 24/7 免费运行的最简单方式。Heroku 的免费层比以前复杂了一些，但上次我做数学时，你基本上可以在每个账户下运行一个应用程序，而没有任何严重后果。完全不需要服务器管理。
- en: We didn't have to access any machines， open any terminals， any remote servers，
    anything， like that。 And Heroku has a really interesting add-ons ecosystem where
    they partner with。 other companies to make it easy for you to add things like
    logging， monitoring and databases。 caches， things like that to your application。
    The content of this one， the scaling is really。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要访问任何机器，打开任何终端，任何远程服务器，之类的。Heroku 有一个非常有趣的附加组件生态系统，他们与其他公司合作，使你能够轻松地向你的应用程序添加日志记录、监控和数据库、缓存等内容。这部分的内容，扩展性真的很重要。
- en: really easy， but it can also get pricey。 So if you just have a big event for
    your organization。 and you need to pop on some extra demand for just one day or
    an afternoon， Heroku is probably。 still a great choice。 If you need to be running
    your app at more than one server on Heroku for。 a sustained period of time， you
    might want to start looking at other options。 Server customization。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 非常简单，但也可能变得昂贵。所以如果你只是为你的组织举办一个大型活动，需要在一天或下午提供额外的需求，Heroku 可能仍然是一个不错的选择。如果你需要在
    Heroku 上长期运行多个服务器的应用程序，你可能需要开始考虑其他选项。服务器定制。
- en: is harder， so if you need some sort of OS library to make your application work，
    there's。 a way to get it in there with Heroku， but you have to do a little bit
    more like work to do， it。 And some of those add-ons are better than others。 Some
    of those add-ons are maintained。 by Heroku itself。 Some of them are maintained
    by third-party vendors。 Those third-party。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 更困难，所以如果你需要某种 OS 库来使你的应用程序正常工作，有办法通过 Heroku 将其添加进去，但你需要做更多的工作。而且那些附加组件的质量有好有坏。有些附加组件是由
    Heroku 自身维护的，有些则是由第三方供应商维护的。那些第三方。
- en: vendors can vary in their reliability and in their quality of their documentation。
    All right。 number three， server lists。 In quotes。 That's pretty much the only
    way you can。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 供应商的可靠性和文档质量可能会有所不同。好吧，第三点，服务器列表。在引号中。这基本上是你能做到的唯一方式。
- en: '![](img/3af7feeef4580813d521a21bcafafe0c_26.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3af7feeef4580813d521a21bcafafe0c_26.png)'
- en: talk about server lists is in quotes。 So this is one of the newest hottest techniques
    to。 get your app out there in the world。 The idea is that instead of like Heroku，
    where Heroku。 managed all the server stuff for us， but we still have our process
    running in Heroku's。 cloud all the time。 With server lists， the idea is that our
    code is only going to be running。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 讨论服务器列表是在引号中。所以这是最新、最热门的技术之一，用来将你的应用程序推向世界。这个想法是，与 Heroku 不同，Heroku 为我们管理所有的服务器事务，但我们的流程始终在
    Heroku 的云中运行。使用服务器列表的想法是，我们的代码只会在实际需要使用时运行。
- en: when someone actually needs to use it。 And most of the time it's going to be
    sleeping。 and as soon as someone sends a request to our website， the server lists
    provider is。 just going to flip a switch and get our process running again quick
    enough to respond。 So today I'm going to show you how to use AWS Lambda， but all
    the big cloud providers。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数时候它会处于休眠状态。当有人向我们的网站发送请求时，服务器列表提供商会快速切换开关，使我们的进程再次运行，以便作出响应。所以今天我将向你展示如何使用
    AWS Lambda，但所有大型云服务提供商。
- en: have their own serverless feature。 Azure has one， Google Cloud has one， so I'm
    just showing。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 各大云服务平台都有自己的无服务器功能。Azure有一个，Google Cloud也有一个，所以我只展示Zappa。
- en: '![](img/3af7feeef4580813d521a21bcafafe0c_28.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3af7feeef4580813d521a21bcafafe0c_28.png)'
- en: you AWS， for example， sake。 When you look at Lambda， you can see pay for only
    the compute。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，AWS。当你查看Lambda时，可以看到只为计算付费。
- en: '![](img/3af7feeef4580813d521a21bcafafe0c_30.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3af7feeef4580813d521a21bcafafe0c_30.png)'
- en: time you consume， and we'll talk more about the pricing on the pros and cons
    list。 But。 when I've used Lambda before， you can log into your AWS console， copy
    and paste some code。 get things set up and working pretty well。 I find it a little
    cumbersome， so I like to。 use one of the third-party frameworks that sprung up
    around the serverless movement， and。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你消耗的时间，我们将在优缺点列表中详细讨论定价。但当我以前使用Lambda时，你可以登录到你的AWS控制台，复制粘贴一些代码，设置并运行得相当不错。我觉得这有点繁琐，所以我喜欢使用围绕无服务器运动出现的第三方框架之一。
- en: the one I'm going to show you how to use today is called Zappa。 So Zappa is
    basically just。 a wrapper around AWS Lambda that makes it easier for me to take
    my existing Flask application。 and fit it inside Lambda。 So to get Zappa working，
    I already did a pip install Zappa before I。 got up here， so what we need to start
    with here is Zappa and NIT。 And Zappa is just going。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我今天要向你展示的框架叫做Zappa。Zappa基本上是AWS Lambda的一个封装，使我能够更方便地将现有的Flask应用程序放入Lambda中。因此，为了让Zappa工作，我已经在来之前安装了Zappa，所以我们需要从Zappa和NIT开始。
- en: to ask me a few questions about how I want my app to run inside Lambda。 First
    it's going， to say。 "What do we want to call this environment？" So I'm just going
    to say production。 Which。 AWS credentials do we want to use？ I'll say personal。
    And Zappa creates a S3 bucket。 Lambda。 also creates an S3 bucket for where you're
    going to store your source code before it， gets deployed。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 先问我一些关于我希望应用在Lambda中运行方式的问题。首先它会问：“我们想给这个环境起什么名字？”我会说生产。我们想使用哪个AWS凭证？我会选择个人。Zappa会创建一个S3桶。Lambda也会创建一个S3桶，用于存储你的源代码，之后再进行部署。
- en: So I'm just going to go with the default name there。 Don't really care。 It found
    that hello。app is the right path to get our application started。 So I'm going，
    to stick with the default there。 Do we want to deploy it globally？ Though it would
    be the， best way to say hello world。 It also costs a little more。 So I'm going
    to say no。 Everything， look okay。 Yes it does。 Thank you。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我会使用默认名称，不太在意。它发现hello.app是启动应用的正确路径。因此，我将保持默认设置。我们想要全局部署吗？虽然这是问候世界的最好方式，但这也会稍微贵一些。所以我会说不。一切看起来都不错。是的，没问题。谢谢。
- en: Zappa。 And then to get things rolling， we just say， Zappa deploy production。
    So right now Zappa is making a whole bunch of API calls to Amazon。 Web Services
    underneath the scenes。 It's giving me a warning here because my virtual。 end and
    my Zappa project have the same name。 That's probably something we should all fix，
    next time。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然后为了开始，我们只需说，Zappa deploy production。目前Zappa正在对亚马逊网络服务进行大量API调用。这里给我一个警告，因为我的虚拟环境和Zappa项目同名。这可能是我们下次都应该修复的事情。
- en: The interesting thing about Zappa and Lambda is all of it is mostly a recombination。
    of other Amazon Web Services products。 And because all those products are products
    you。 can use in their own right， you can access them and poke around your Amazon
    Web Services。 console after you've already set it up。 So after you deploy a Zappa
    project， you should。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Zappa和Lambda的有趣之处在于，所有这些主要是其他亚马逊网络服务产品的重新组合。由于所有这些产品本身都可以单独使用，你可以在设置后访问它们并浏览你的亚马逊网络服务控制台。因此，部署Zappa项目后，你应该。
- en: log into your AWS console and kind of poke around and see all the things that
    are made， for you。 You're going to want to look at this thing called API Gateway。
    That's basically。 the way that you tell Amazon Web Services that you want to accept
    traffic from the outside， world。 That's also where you're going to go in and set
    up your own custom domains and。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 登录到你的AWS控制台，随便看看为你创建的所有内容。你需要查看一个叫做API Gateway的东西。基本上，这是你告诉亚马逊网络服务要接受外部流量的方式。这也是你设置自定义域名的地方。
- en: SSL and all sorts of things like that。 Like I mentioned before， there's also
    a tie-in。 with the S3 bucket。 So that's what's happening right now is AWS Zappa
    just zipped up all。 of our source code and is dropping it in that S3 bucket。 And
    this is a little bit different。 than Heroku because when we pushed our code up
    to Heroku， Heroku just looked at our source， code。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: SSL和其他各种东西。正如我之前提到的，还有与S3存储桶的关联。所以现在发生的事情是AWS Zappa刚刚将我们的源代码压缩，并放入那个S3存储桶。这与Heroku有些不同，因为当我们将代码推送到Heroku时，Heroku只是查看我们的源代码。
- en: took a peek inside our requirements。txt and then pulled all of our dependencies
    onto。 Heroku servers。 With Lambda， you have to basically bundle up your dependencies
    locally and then。 upload them all to Amazon Web Services。 So a small distinction
    but if you see something。 wonky going on that could be part of your trouble。 Alright，
    deployment complete。 Got。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们查看了requirements.txt文件，并将所有依赖项拉到了Heroku服务器上。使用Lambda，你基本上需要在本地打包你的依赖项，然后将它们全部上传到亚马逊网络服务。这是一个小区别，但如果你看到什么奇怪的情况，这可能是你遇到问题的部分原因。好了，部署完成。得到了。
- en: a weird ugly URL。 You know what that means。 Hello world。 Awesome。 Cool。 So talking
    a little。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一个奇怪丑陋的URL。你知道这意味着什么。你好，世界。太棒了。酷。聊聊这个吧。
- en: '![](img/3af7feeef4580813d521a21bcafafe0c_32.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3af7feeef4580813d521a21bcafafe0c_32.png)'
- en: '![](img/3af7feeef4580813d521a21bcafafe0c_33.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3af7feeef4580813d521a21bcafafe0c_33.png)'
- en: bit more about serverless Lambda， it's pretty economical for small to medium
    loads。 If you。 don't need something that's actually available 24/7 but you just
    need it to be quickly available。 at any time of day， this is a really great choice。
    It's also good for spiky traffic。 So。 if you have kind of unexpected bursts of
    traffic to your service and you don't know when they're。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 关于无服务器Lambda的更多信息，它对小到中等负载相当经济。如果你不需要一个实际上24/7可用的服务，但你只是需要在任何时间迅速可用，这真是一个不错的选择。它对突发流量也很有效。所以，如果你有意外的流量激增到你的服务，而且你不知道它们什么时候会来。
- en: going to come， Lambda is a good choice because Amazon is basically going to
    take care of。 all of the scaling for you。 And as you saw， absolutely zero server
    configuration， even。 less than Heroku。 The concept that this is a relatively new
    technique， probably the newest。 one that we're going to talk about today。 So not
    only is it kind of a fast moving ecosystem。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda是一个不错的选择，因为亚马逊基本上会为你处理所有的扩展。如你所见，绝对零服务器配置，甚至比Heroku还要少。这个概念是相对较新的技术，可能是我们今天要讨论的最新技术。所以它不仅是一个快速发展的生态系统。
- en: you're not going to find that much to read out there about it compared to the
    other techniques。 that we're talking about today。 But also the best practices
    are still kind of settling in。 for this one。 So you're going to be a little bit
    more on the bleeding edge。 In my opinion。 this is just an Andrew Baker opinion。
    It's a little bit less fun when you have to work。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这个技术，你在外面找到的阅读资料不会比我们今天讨论的其他技术多。但最佳实践仍在逐步完善。因此，你将会在这个技术的前沿。我认为，这只是安德鲁·贝克的观点。当你必须工作时，它的乐趣就会少一些。
- en: directly with Amazon Web Services or the other cloud providers interfaces。 I
    prefer to use。 these third party frameworks like Zappa or the one that's called
    serverless， but your。 mileage may vary there。 And the other things that they can
    be a little tricky to troubleshoot。 So when something goes wrong with your Lambda
    deployment， like I said， because it's just。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 直接与亚马逊网络服务或其他云提供商的接口进行交互。我更喜欢使用这些第三方框架，比如Zappa或叫做serverless的那个，但你的使用体验可能会有所不同。还有其他一些可能会让人感到有点棘手的问题。因此，当你的Lambda部署出现问题时，正如我所说的，因为它就是。
- en: a combination of other Amazon Web Services products behind the scenes， that
    kind of means。 that you have the ability to go spelunking on your own and figure
    out where things went， wrong。 And you're probably going to have to spelunk inside
    products that you didn't even， know existed。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你在后台结合了其他亚马逊网络服务产品，这意味着你有能力自己去探查，找出问题出在哪里。而且你可能需要探查你甚至不知道存在的产品。
- en: '![](img/3af7feeef4580813d521a21bcafafe0c_35.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3af7feeef4580813d521a21bcafafe0c_35.png)'
- en: All right， technique number four， virtual machines。 So this is where we get
    to the workhorse of。 the internet。 This is the way that most big organizations
    run their code in the cloud。 And today we're going to be taking a look at Google
    Compute Engines virtual machines。 but all the big cloud service providers have
    their own VM service。 So for Amazon， it's easy。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，技术第四点，虚拟机。这是我们进入互联网的主力军。这是大多数大型组织在云中运行代码的方式。今天我们将查看谷歌计算引擎的虚拟机，但所有大型云服务提供商都有自己的虚拟机服务。因此对于亚马逊来说，简单。
- en: '![](img/3af7feeef4580813d521a21bcafafe0c_37.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3af7feeef4580813d521a21bcafafe0c_37.png)'
- en: to， for example。 And with this one， you are pretty much just getting your own
    tiny corner。 of the cloud and setting it up exactly the same way you would locally。
    So I'm in my Google。 Cloud Platform account now。 I just hit Create a New Instance。
    We'll call this one PyCon 2017。 I'll give it that one V CPU。 That's how much horsepower
    I want on it right now。 I'm going。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，通过这个方法，你基本上是在云端获得你自己的一小块空间，并按照你在本地设置的方式进行设置。因此我现在在我的谷歌云平台账户中。我只需点击“创建新实例”。我们把这个叫做PyCon
    2017。我将给它一个V CPU。这就是我现在想要的性能。我要。
- en: to stick with Ubuntu because that's what I know best。 And we're going to make
    sure we。 allow HTTP traffic。 And so right now Google's going to get started spinning
    up a new virtual machine for me inside。 my Google Compute account。 So virtual
    machines， if you haven't heard of the concept before。 the basic ideas were taking
    the software power of Google's cloud。 And we're basically using。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 坚持使用Ubuntu，因为这是我最熟悉的。我们要确保允许HTTP流量。因此，现在谷歌将开始在我的谷歌计算账户中启动一台新的虚拟机。如果你之前没听说过虚拟机的概念，基本的想法是我们在利用谷歌云的计算能力。我们基本上在使用。
- en: it to create what looks like fake hardware。 And then we're installing another
    operating。 system on top of it。 So the pro is that you get full isolation between，
    say， my virtual。 machine that I'm running on Google Cloud and your virtual machine
    that you're running。 on Google Cloud。 The downside is that it's not quite as efficient
    as if you were just running。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的看起来像假硬件。然后我们在它上面安装另一个操作系统。因此，优点是你可以实现完全的隔离，比如说，我在谷歌云上运行的虚拟机和你在谷歌云上运行的虚拟机之间。缺点是效率不如直接运行一堆sudo命令。
- en: a process without that overhead of virtualization。 We'll talk a little bit more
    about that in a。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有虚拟化开销的情况下进行处理。我们稍后会详细讨论这个。
- en: '![](img/3af7feeef4580813d521a21bcafafe0c_39.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3af7feeef4580813d521a21bcafafe0c_39.png)'
- en: second。 But now that my virtual machine is up， I'm going to use this little
    shortcut in。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我的虚拟机已经启动，我将使用这个小快捷方式。
- en: '![](img/3af7feeef4580813d521a21bcafafe0c_41.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3af7feeef4580813d521a21bcafafe0c_41.png)'
- en: here to copy the command to SSH into it。 We'll see if the box is actually ready
    to accept。 our SSH command now。 All right， cool。 So if we start poking around
    this instance， we'll。 see it looks pretty much what a stock Ubuntu service would
    look like right out the gate。 I'm going to move on over to the var， activate sudo
    mode because we're about to run a whole。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这里复制命令以SSH连接。我们看看这个盒子是否已经准备好接受我们的SSH命令。好吧，太好了。如果我们开始在这个实例中四处探查，我们会发现它看起来几乎像是标准的Ubuntu服务一开始的样子。我将移动到var，激活sudo模式，因为我们即将运行一整套。
- en: bunch of sudo commands。 And we basically need to do three things to get things
    set up here。 One。 we actually need to install pip first。 So I'm going to get that
    started right now。 App install Python pip。 Yes， 192 megabytes。 Let's do it。 After
    we install pip， we're going。 to have to make a virtual end。 And then after we
    make the virtual end， we're going to need。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们基本上需要做三件事来设置这里的环境。第一，我们实际上需要先安装pip。所以我现在就开始安装。应用安装Python pip。是的，192兆字节。我们开始吧。在安装pip后，我们需要创建一个虚拟环境。然后在创建虚拟环境后，我们需要。
- en: to clone our git repository to pull our source code onto the server。 Then we're
    going to install。 our requirements inside that virtual end。 And then we'll finally
    be ready to run our app。 So this one is definitely the most legwork。 So now that
    we've got pip， I can do pip install。 virtual end。 And then I'm going to do virtual
    end dash p。 Luckily， the box comes with Python。
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 克隆我们的git仓库，将源代码拉到服务器上。然后我们将在那个虚拟环境中安装我们的依赖项。最后我们就可以准备运行我们的应用程序。因此，这绝对是最繁琐的一步。现在我们有了pip，我可以使用pip安装虚拟环境。然后我将运行虚拟环境dash
    p。幸运的是，盒子里自带Python。
- en: 3 already。 I'm going to activate that virtual end just like we would locally。
    And then it's。 time to go ahead and grab our repo。 Clone it in。 Pop in there。
    Install our requirements。
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 3已经。我将激活那个虚拟端，就像我们在本地一样。然后，是时候继续抓取我们的代码库了。克隆它，进去，安装我们的需求。
- en: '![](img/3af7feeef4580813d521a21bcafafe0c_43.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3af7feeef4580813d521a21bcafafe0c_43.png)'
- en: just like we would locally。 And then the last thing we need to do to get a running
    is to。 get that same g unicorn command。 But we actually need to make one small
    tweak to it this time。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们在本地一样。然后，我们需要做的最后一件事是获取那个相同的g unicorn命令。不过这次我们实际上需要对它进行一个小的调整。
- en: '![](img/3af7feeef4580813d521a21bcafafe0c_45.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3af7feeef4580813d521a21bcafafe0c_45.png)'
- en: So with g unicorn， by default， it's only going to listen on port 8000。 And it's
    only going。 to listen to requests coming in from local host。 So we need to actually
    pass one more。 command which tells it， hey， listen to requests from the internet
    at large and do it on port。 80 instead。 And so if we pop back over to our compute
    engine， click this little icon here。
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 所以使用g unicorn时，默认情况下，它只会监听8000端口。并且它只会监听来自本地主机的请求。所以我们实际上需要传递一个额外的命令，告诉它，嘿，从互联网整体上监听请求，并在80端口上进行。然后如果我们回到计算引擎，点击这个小图标。
- en: We've got our hello world running there in Google Cloud。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的Hello World已经在谷歌云上运行了。
- en: '![](img/3af7feeef4580813d521a21bcafafe0c_47.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3af7feeef4580813d521a21bcafafe0c_47.png)'
- en: '![](img/3af7feeef4580813d521a21bcafafe0c_48.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3af7feeef4580813d521a21bcafafe0c_48.png)'
- en: So pros and cons on virtual machines， full control， you get to do literally
    anything you。 want on this thing and set it up exactly the way you like。 It scales
    as much as your wallet。 So that's for you to consider。 But it can still be economical
    if you're careful。 So you can。 get a lot of value out of it if you put in the
    time to set things up kind of in the right， way。
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 关于虚拟机的优缺点，完全控制，你可以在这个东西上做任何你想做的事情，并按照你喜欢的方式设置。它的扩展性取决于你的钱包。所以这要你考虑。但是如果你小心，仍然可以经济实惠。因此，如果你花时间以正确的方式设置它，你可以获得很大的价值。
- en: The cons undoubtedly more work for you。 The most work out of any of the options
    that。 we talked about here today。 And there's also a lot more to learn。 So we
    set up this virtual。 machine today using just manual commands on the box。 If you
    really decide to run your。 organization on this in production， you're probably
    going to need to learn about things。
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 缺点无疑是你需要做更多的工作。在我们今天讨论的所有选项中，工作量是最多的。而且还有更多需要学习的内容。因此，我们今天使用手动命令在这个虚拟机上进行了设置。如果你真的决定在生产环境中运行你的组织，你可能需要学习很多东西。
- en: like configuration management， monitoring， you're going to want an alerting
    system for。 when things go down or weird network flips happen。 You are going to
    be in it if you go， this round。 And the last thing is that ultimately it's harder
    to predict the costs， especially。 if you add things like load balancers to your
    stack where you have multiple virtual machines。
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 像配置管理、监控，你会想要一个警报系统，以便在出现故障或网络异常时收到警报。如果你走这条路，你将身临其境。最后一件事是，最终预测成本会更困难，特别是如果你在堆栈中添加像负载均衡器这样的东西，当你有多个虚拟机时。
- en: running at once and you want the cloud provider to balance traffic across them
    evenly。 Those。 prices can come back and bite you on your bill if you're not careful。
    So ultimately with。 virtual machines， most control， most work。 But if you go this
    route， you will be in good。 company because it is the way that a lot of people
    in the world run their software。 Last。
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 一次运行多个实例，你希望云提供商均匀地平衡流量。如果不小心，这些价格可能会在账单上让你吃亏。因此，最终使用虚拟机，控制最多，工作也最多。但如果你走这条路，你会找到良好的公司，因为这是世界上很多人运行他们软件的方式。最后。
- en: piece that we're going to talk about here today is Docker。 So Docker is kind
    of a newcomer。
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们今天要讨论的主题是Docker。所以Docker算是个新手。
- en: '![](img/3af7feeef4580813d521a21bcafafe0c_50.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3af7feeef4580813d521a21bcafafe0c_50.png)'
- en: on the scene maybe a couple years ago。 If most of the techniques we've talked
    about today。 are going from least effort to least control， sorry， least effort
    and least control like。 with Heroku to the most effort and the most control with
    virtual machines， you can kind。 of see Docker as a way of trying to split the
    difference where we're going to set up。
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在现场大约几年前。如果我们今天讨论的大多数技术，从最少的努力到最少的控制，抱歉，最少的努力和最少的控制，像Heroku到虚拟机的最多努力和最多控制，你可以把Docker视为一种试图折衷的方式，我们将设置。
- en: our app just like it was in a virtual machine locally。 When we run our app，
    it's going to。 think that it's in its own personal virtual environment。 But the
    Docker containers that。 we use are going to be a lot more lightweight than a full
    virtual machine and a little easier。
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序就像在本地虚拟机中一样。当我们运行我们的应用程序时，它将会认为它在自己的个人虚拟环境中。但是我们使用的 Docker 容器将比完整的虚拟机轻量得多，并且更容易一些。
- en: '![](img/3af7feeef4580813d521a21bcafafe0c_52.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3af7feeef4580813d521a21bcafafe0c_52.png)'
- en: to manipulate。 So usually I find that with Docker it's easier to show than tell。
    So we'll。
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 来进行操作。所以我通常发现使用 Docker 更容易展示而不是讲述。所以我们将。
- en: '![](img/3af7feeef4580813d521a21bcafafe0c_54.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3af7feeef4580813d521a21bcafafe0c_54.png)'
- en: pop back over to our app here。 We need two things to get our Docker machine，
    our Docker。
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的应用程序。我们需要两个东西来获取我们的 Docker 机器，我们的 Docker。
- en: '![](img/3af7feeef4580813d521a21bcafafe0c_56.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3af7feeef4580813d521a21bcafafe0c_56.png)'
- en: container running in the cloud。 First we need to create this thing called a
    Docker file。
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 容器在云中运行。首先我们需要创建一个叫做 Docker 文件的东西。
- en: '![](img/3af7feeef4580813d521a21bcafafe0c_58.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3af7feeef4580813d521a21bcafafe0c_58.png)'
- en: which is going to tell Docker how it should actually assemble our project inside。
    Oh yeah。
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这将告诉 Docker 应该如何实际组装我们的项目。哦，是的。
- en: '![](img/3af7feeef4580813d521a21bcafafe0c_60.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3af7feeef4580813d521a21bcafafe0c_60.png)'
- en: I'm not on local host。 Get out here， Google Cloud。 Thank you。 That was not the
    time。 Cool。
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我不在本地主机上。走出这里，谷歌云。谢谢。这不是时候。酷。
- en: '![](img/3af7feeef4580813d521a21bcafafe0c_62.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3af7feeef4580813d521a21bcafafe0c_62.png)'
- en: So for this part， Docker files have their own weird syntax。 If those of you
    in the audience。 who know me know that I know this one all too well。 So we're
    going to pull off a start。 of our Docker file by pulling from the Python base
    image。 We do three， five on build。 And。 then we're going to tell it which port
    we wanted to expose in production。 So this time。
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 所以在这一部分，Docker 文件有它自己奇怪的语法。如果在场的你们中有认识我的人，你们就会知道我对此非常了解。所以我们将通过从 Python 基础镜像拉取来开始我们的
    Docker 文件。我们进行三次构建，然后告诉它在生产中我们希望暴露哪个端口。这一次。
- en: I'm going to do 5，000。 And then we tell it what command it should use to actually
    start， things up。 And I'm actually going to go back and grab that same one from
    our proc file。 And then add that bind just like we have before。 0。0。0。 port 5，000
    this time because that's。
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我要使用 5,000。然后我们告诉它应该使用什么命令来实际启动程序。我实际上会回去从我们的 proc 文件中抓取相同的内容。然后像之前那样添加绑定 0.0.0.
    port 5,000，这一次因为这是。
- en: '![](img/3af7feeef4580813d521a21bcafafe0c_64.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3af7feeef4580813d521a21bcafafe0c_64.png)'
- en: the one we're telling Docker to pay attention to。 So before we can actually
    run our project。 inside the Docker container， we need to build it。 So I'm going
    to do Docker build。 I'm going。 to call it 80 baker slash five ways。 And so Docker
    is going to look at our code， take。 a look at our requirements file， install the
    requirements， and then add some metadata about。
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们告诉 Docker 关注的那个。所以在我们实际上可以在 Docker 容器内运行项目之前，我们需要构建它。所以我将执行 Docker build。我将其命名为
    80 baker slash five ways。所以 Docker 会查看我们的代码，查看我们的需求文件，安装需求，然后添加一些关于。
- en: how we want to run the container。 And then to run it， we're going to say Docker
    run， we。 need to tell it that we care about port 5，000。 So I'm going to say take
    port 5，000 from our。 container and expose it on port 5，000 on our host。 And I
    want to run that image 80 baker， five ways。 So we see G unicorn running inside
    the Docker container now。 If we go and check， out localhost 5。
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要如何运行容器。然后要运行它，我们将说 Docker run，我们需要告诉它我们关心的是端口 5,000。所以我将说从我们的容器中取出端口 5,000，并在我们的主机上暴露它。我要以
    80 baker、五种方式运行该镜像。所以现在我们看到 G unicorn 正在 Docker 容器内运行。如果我们去检查 localhost 5。
- en: 000， we've got our hello world。 Awesome。 So the next piece to actually get。
    our Docker image running in the cloud is we first need to push it up to the Docker
    hub。 It's basically like the GitHub of Docker。 So I'm going to do Docker push
    five ways。 You'll。 see a lot of these layer already exists images coming up here。
    And only that first one is。
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 000，我们有了 hello world。太棒了。所以使我们的 Docker 镜像在云中运行的下一步是我们首先需要将它推送到 Docker hub。这基本上就像
    Docker 的 GitHub。所以我将执行 Docker push five ways。你会看到很多“这些层已经存在”图像出现在这里。只有第一个。
- en: the one that it actually had to push up on its own。 That's because Docker is
    kind of smart。 enough to realize， hey， most of the stuff that's inside this image
    is stuff that's being pulled。 from the base Python image， which I already know
    about。 So Docker comes with this extra。 tool called Docker machine， which lets
    you spin up virtual machines really easily and。
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 它实际上必须自己推送上去的那个。这是因为 Docker 足够聪明，意识到这个镜像内部大部分内容是从基础 Python 镜像中拉取的，我已经了解过。因此，Docker
    附带一个额外的工具，叫做 Docker machine，让你能够非常轻松地启动虚拟机。
- en: then SSH into them or sorry， you can't SSH into them， but you can also just
    manipulate。 them as if they were your local host。 So I've already got one running
    here called five， ways。 So I'm going to do the command to apply basically that
    Docker virtual machine instance。 to my local environment by saying Docker machine
    and five ways。 Cool。 So I'm going to kill this。
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 然后 SSH 进入它们，或者说你不能 SSH 进入它们，但你也可以像操作本地主机一样操作它们。所以我这里已经运行了一个叫做 five ways 的实例。因此，我将执行命令，将基本上这个
    Docker 虚拟机实例应用到我的本地环境，命令是 Docker machine 和 five ways。很好。所以我将终止这个。
- en: one that we had locally。 And now to get things working on our machine in the
    cloud， I'm going。 to pull down our five ways。 Start it up just like we did locally。
    5，000， 8th Baker， five， ways。 All right。 And then I'm just going to pop up another
    window here。 And there's a。 handy low command we can run to actually see what
    IP address our Docker machine is running， on。
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在为了让云端的机器运作起来，我将下载我们的 five ways。像我们在本地一样启动它。5,000，8th Baker，five ways。好的。然后我只需在这里再打开一个窗口。还有一个方便的命令可以让我们实际查看我们的
    Docker 机器运行在哪个 IP 地址上。
- en: So grab this guy， pop over port 5，000， hello world。 Cool。 So that one may have
    seemed。 a little bit like dark magic。 It's definitely the most advanced option
    that we talked about， here。 but it does have some of its own pros and cons。 The
    pro is that it helps a lot with。 dev prod parity。 So once you're running your
    app in production， you're going to find that。
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 所以抓住这个，跳转到 5,000 端口，hello world。很好。所以这个可能看起来有点像黑魔法。它绝对是我们在这里讨论的最先进的选项，但它确实有一些自己的优缺点。优点是它在开发和生产环境之间有很大的帮助。因此，一旦你在生产中运行应用程序，你会发现。
- en: a lot of your biggest bugs are happening because something that was set up in
    your local development。 environment is not the same way that that app is actually
    being run in production。 Docker。 is great for helping with that。 It's nice for
    microservices if that's a thing that you're。 looking for。 It's also a great way
    to impress your friends。 I can speak with this personal。
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 你们最大的错误往往是因为你在本地开发环境中设置的内容与应用程序在生产中实际运行的方式不相同。Docker 非常适合帮助解决这个问题。如果你在寻找微服务，这是个不错的选择。它也是一个给朋友们留下深刻印象的好方法。我可以分享我们本地的一个实例。
- en: experience。 The cons is that it's one of the newest techniques out there。 So
    best practices。 are still getting settled， probably less new than serverless at
    this point when you're。 looking at the documentation materials that are out there，
    but still pretty new。 It works。 best when you and all of your team go all in on
    Docker。 And it definitely has its own learning。
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 体验。缺点是这是目前最新的技术之一。因此，最佳实践仍在逐步确定，可能比无服务器架构稍微成熟一些，尤其是在查看现有文档材料时，但仍然相当新。当你和你的团队全力投入
    Docker 时，它的效果最好。而且它确实有自己的学习曲线。
- en: curve besides all the tools that you're actually putting inside these containers
    to run them。 So that's all I got folks。 The five techniques we covered are N。
    Grock， Heroku， serverless。 virtual machines and Docker。 My name is Andrew Baker。
    I'll be hanging at the Twilio booth。 in the Expo Hall all day tomorrow if you
    want to ask some questions。 Thank you。 [Applause]。
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 除了你实际放入这些容器中运行的所有工具外，曲线也很重要。所以这就是我所拥有的，各位。我们讨论的五种技术是 N Grock、Heroku、无服务器、虚拟机和
    Docker。我是 Andrew Baker。明天我会在 Expo Hall 的 Twilio 展位待着，如果你想问一些问题。谢谢。[掌声]。
- en: \>\> Catch him up the booth with questions。 \>\> Cool。 \>\> Very good。 \>\>
    Yeah， thank you。 \>\> Five demos successful。 Not a single error。
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '>> 在展位上与他聊天，提问。 >> 很好。 >> 非常好。 >> 是的，谢谢。 >> 五个演示成功。没有出现一个错误。'
- en: '![](img/3af7feeef4580813d521a21bcafafe0c_66.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3af7feeef4580813d521a21bcafafe0c_66.png)'
- en: \>\> You and I are both surprised。 \>\> I think I'm pretty surprised。 Very good。
    \>\> Thank you。 \>\> Great synopsis。 \>\> The entire DevOps stream the last five
    years。 \>\> Yeah， yeah。 It was fun charting it。 And like I said， hey， Adrian。
    Oh， hey。 Thank you。 Thanks。 Yeah， please do。 I would love to。 Thanks。 Thanks，
    man。 [Applause]， [Applause]， [Applause]。
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: \>\> 你我都感到惊讶。 \>\> 我觉得我相当惊讶。非常好。 \>\> 谢谢。 \>\> 很棒的概述。 \>\> 过去五年的整个DevOps流程。
    \>\> 是的，是的。绘制这个过程很有趣。就像我说的，嘿，阿德里安。哦，嗨。谢谢。谢谢。是的，请这样做。我会很乐意。谢谢。谢谢，伙计。 [掌声]，[掌声]，[掌声]。
- en: '![](img/3af7feeef4580813d521a21bcafafe0c_68.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3af7feeef4580813d521a21bcafafe0c_68.png)'
