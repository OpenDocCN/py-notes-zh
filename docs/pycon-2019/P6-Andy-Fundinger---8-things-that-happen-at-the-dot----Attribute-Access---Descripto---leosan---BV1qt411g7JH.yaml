- en: P6：Andy Fundinger - 8 things that happen at the dot -  Attribute Access & Descripto
    - leosan - BV1qt411g7JH
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P6：Andy Fundinger - 在点上发生的8件事 - 属性访问与描述符 - leosan - BV1qt411g7JH
- en: Everybody， please join me in welcoming Andy Funderinger。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 大家，请和我一起欢迎Andy Funderinger。
- en: '![](img/d9b78ecadbf81eb9828e4c03279b0041_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9b78ecadbf81eb9828e4c03279b0041_1.png)'
- en: '![](img/d9b78ecadbf81eb9828e4c03279b0041_2.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9b78ecadbf81eb9828e4c03279b0041_2.png)'
- en: '[applause]， \>\> Thank you。 So， eight things that happen at the dot attribute
    access and descriptors。 Kind of interesting， this talk is kind of coming full
    circle back to a conversation that。 happened at PyCon Portland where I was talking
    with Guido and I said， what''s a part of Python。 that doesn''t get enough attention
    and he said， well， maybe descriptors。'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[掌声]，>> 谢谢。那么，在点属性访问和描述符上发生的八件事。这个演讲有点回归到我在PyCon Portland与Guido交谈时的对话。我问，Python中哪个部分没有得到足够的关注，他说，也许是描述符。'
- en: And a few months later I said， well， maybe I'll try to make a talk out of that。
    And now， well。 a couple years later， this talk is here。 So， who am I？ I've been
    a Python developer since version 2。4， but descriptors are not something， that
    has changed since Python 2。2 with the new style classes。 Today we're using all
    Python 3， but the difference is basically a bunch of parenthetical objects。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 几个月后，我想，也许我会试着把这个做成一个演讲。现在，几年后，这个演讲终于来了。那么，我是谁呢？我从2.4版本开始就是Python开发者，但描述符自Python
    2.2的新增样式类以来并没有改变。今天我们使用的是Python 3，但差别基本上是一些括号对象。
- en: being removed。 And myself， I've worked in industrial automation。 metaverse development
    and the financial industry。 I've previously spoken about descriptors a few different
    places。 Py Caribbean， Py Gotham， EuroPython， PyCAS， skates and Py Tennessee。 They
    seem to keep creeping into my talks。 I don't know why。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 被移除的。而我自己在工业自动化、元宇宙开发和金融行业工作过。我之前在几个地方谈过描述符，包括Py Caribbean、Py Gotham、EuroPython、PyCAS、skates和Py
    Tennessee。它们似乎总是潜入我的演讲中，我也不知道为什么。
- en: Those are some of them are different talks。 Currently。 I'm working at Bloomberg
    in the data license group。 What we do is we deliver financial data to clients
    in large chunks。 like all the mortgages in North America， all the data about that。
    We use a diverse set of tools to do that。 I pulled out some of them there。 Flask，
    celery， PyCAS， VW。 Redis， Jenna， Hadoop， even some things that are not Python。
    Pearl， JavaScript， CC++， Fortran。 We are enterprise scale， but we are extremely
    agile。 A few of the other things Bloomberg does。 the terminals off in the Expo
    Hall。 We do trading solutions， trade book。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是一些不同的演讲。目前，我在Bloomberg的数据许可证组工作。我们的工作是向客户提供大量的金融数据，比如北美的所有抵押贷款及其相关数据。我们使用多种工具来完成这项工作。我列出了一些工具：Flask、celery、PyCAS、VW、Redis、Jenna、Hadoop，甚至一些非Python的工具：Pearl、JavaScript、CC++、Fortran。我们是企业级规模，但非常灵活。Bloomberg还做的一些事情包括在展览大厅的终端，我们提供交易解决方案和交易簿。
- en: enterprise data is my section。 News， media， law， new energy finance and government。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 企业数据是我的领域。新闻、媒体、法律、新能源金融和政府。
- en: '![](img/d9b78ecadbf81eb9828e4c03279b0041_4.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9b78ecadbf81eb9828e4c03279b0041_4.png)'
- en: The numbers for Bloomberg are pretty large。 We have more than 5，000 engineers。
    3。000 of them are Python developers。 150 data scientists， 150 plus。 And similarly
    staggering numbers in some of the other categories， including the largest。 private
    network in the world。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Bloomberg的数字非常庞大。我们有超过5,000名工程师，其中3,000名是Python开发者，还有150名数据科学家，150名以上。其他类别的数字同样惊人，包括世界上最大的私人网络。
- en: '![](img/d9b78ecadbf81eb9828e4c03279b0041_6.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9b78ecadbf81eb9828e4c03279b0041_6.png)'
- en: Today we are talking about the dot。 Usually we kind of look at the dot sitting
    there between O and X。 We could write a whole bunch of get add or O， X。 That is
    probably just O dundered dict index by X。 And in the simplest case， sure， sure，
    sure it is。 O equals my object and we put the value of X in the dundered dict
    as 3 and we look at dundered dict。 And there it is and O dot X and there's 3 and
    that's exactly what we expect。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 今天我们讨论点。通常我们会看看O和X之间的点。我们可以写一堆get add或O、X。那可能就是O的双下划线字典索引为X。在最简单的情况下，当然，当然，它就是O等于我的对象，我们把X的值放入双下划线字典中为3，然后查看双下划线字典。于是就有O点X，值为3，这正是我们所期望的。
- en: But of course maybe it's coming off the class。 This doesn't surprise us when
    it happens。 So here's a class。 We give my object a class of base object but we'll
    use that next。 And we set Y on my object and we look at the class dict and it's
    a mapping proxy but we。 see that Y is in there but O is still an instance of my
    object and when we do O dot Y， yeah。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 但当然这可能是来自类。这发生时我们并不感到惊讶。所以这里有一个类。我们给我的对象一个基类，但我们将下一个使用它。我们在我的对象上设置`Y`，然后查看类字典，这是一个映射代理，但我们看到`Y`在那里，但`O`仍然是我的对象的一个实例，当我们调用`O.dot
    Y`时，是的。
- en: we went ahead and we found the value of Y from the class。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们继续找到了类中的`Y`的值。
- en: '![](img/d9b78ecadbf81eb9828e4c03279b0041_8.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9b78ecadbf81eb9828e4c03279b0041_8.png)'
- en: But it could also come from the parent class。 And we can look here and we can
    see that T is not in the class dict but it is in the dict。 of the first base class
    along with an increasing number of other things， most of which are。 non because
    I haven't been declaring them。 And when we call for O dot T， we get 4。 So great。
    wonderful。 That's all fairly straightforward and we just wave our hand and assume
    that works。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 但它也可能来自父类。我们可以在这里查看，我们可以看到`T`不在类字典中，但它在第一个基类的字典中，并且还有越来越多的其他东西，大多数是非，因为我没有声明它们。当我们调用`O.dot
    T`时，我们得到4。所以太好了。精彩。这一切都相当简单，我们只是摆摆手，假设这能工作。
- en: '![](img/d9b78ecadbf81eb9828e4c03279b0041_10.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9b78ecadbf81eb9828e4c03279b0041_10.png)'
- en: But this is Python and we know there's way more that we can do。 So we'll take
    one of the old and boring things。 DundergetAdder has been with us for a very long
    time。 I believe this was Python 2。1 even before the new object model。 DundergetAdder
    is called when there is not a definition when an attribute is not defined。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 但这是Python，我们知道我们可以做更多的事情。因此我们将选择一些老旧而乏味的东西。`DundergetAdder`已经伴随我们很长时间。我相信这是Python
    2.1，甚至在新的对象模型之前。`DundergetAdder`在属性未定义时被调用。
- en: on the instance。 And we can see that here I've declared DundergetAdder and I've
    created a class called probe which。 has it defined。 And if I call for P dot R
    before setting a value for R。 then I get back the value that， it returns。 I'm
    sorry。 it's called in prints and it returns this Rett value， getAdder called。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在实例上。我们可以看到这里我声明了`DundergetAdder`并创建了一个名为探针（probe）的类，其中定义了它。如果在设置`R`的值之前调用`P.dot
    R`，那么我得到返回的值。对不起。它在打印时被调用并返回这个`Rett`值，`getAdder`被调用。
- en: But after I set a value in there that print statement is not hit， DundergetAdder
    is not， called。 the access is direct， the whole hook is skipped。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 但是在我设置了一个值之后，那条打印语句没有被触发，`DundergetAdder`没有被调用，访问是直接的，整个钩子被跳过。
- en: '![](img/d9b78ecadbf81eb9828e4c03279b0041_12.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9b78ecadbf81eb9828e4c03279b0041_12.png)'
- en: So there is a matching function on the other side called setAdder just to match
    that up。 SetAdder just lets us say if we're setting a value we'll call this。 And
    we'll just see that for parity。 We define setAdder on a probe。 We set P dot T
    equal to three。 And we see that that print statement is hit。 No magic takes place。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 所以在另一边有一个匹配的函数叫做`setAdder`来匹配这个。`setAdder`只是让我们可以说如果我们正在设置一个值，我们将调用这个。我们只会看到这一点以保持一致性。我们在探针上定义了`setAdder`。我们将`P.dot
    T`设置为3。我们看到那条打印语句被触发。没有任何魔法发生。
- en: The dict does not get this value because I did not write any changes to the
    dict in my， setAdder。 Now getAdder is actually being called by get attribute。
    And we can override get attribute。 And if we do that we can control it regardless
    of whether the value is in the dict。 So here we have probe。 Probe has get attribute
    on it。 And before and after set P is called。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 字典没有获取这个值，因为我在`setAdder`中没有对字典进行任何更改。现在`getAdder`实际上是通过`get attribute`被调用的。我们可以重写`get
    attribute`。如果我们这样做，我们就可以控制它，而不管值是否在字典中。因此这里我们有一个探针（probe）。探针上有`get attribute`，在调用`set
    P`之前和之后。
- en: So P before set we get any var which is a return from get attribute。 And after
    set we also get any var which is also the return from get attribute。 Get attribute
    is actually managing the whole process。 But we'll just gloss over that because
    it's conceptually difficult。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 所以在设置之前的`P`我们得到任何变量，这是来自`get attribute`的返回。在设置之后我们也得到任何变量，这也是来自`get attribute`的返回。`get
    attribute`实际上管理整个过程。但我们只是略过这一点，因为从概念上讲这很困难。
- en: But let's look at more about what get attribute is doing。 Get attribute is actually
    looking at what is found in the class dict before it decides。 what to do when
    it's resolving what's in the class dict。 So if we create this class we'll call
    it probe ND。 And we put a method on here called dunder get。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 但让我们深入了解一下`get attribute`究竟在做什么。`get attribute`实际上是在查看类字典中的内容，然后才决定在解析类字典中的内容时该做什么。所以如果我们创建这个类，叫做`probe
    ND`，并在这里放一个方法，叫做`dunder get`。
- en: And dunder get returns just a little string that says this was hit。 And we put
    that into the class dict of my object。 And then we have an instance of my object。
    And we access o。z on that we don't get the probe ND object back。 We get the result
    of calling dunder get back。 However。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`dunder get`仅返回一个小字符串，说明这个方法被调用了。我们将其放入我的对象的类字典中。然后我们有了我的对象的一个实例。当我们访问`o.z`时，我们不会得到`probe
    ND`对象，而是得到调用`dunder get`的结果。然而。'
- en: if we put a value into the instance dictionary， in this case none， we get that，
    value back。 Just like get add。 However， if we add a dunder set method and do the
    same。 the behavior changes again。 So we put a dunder set method onto that probe
    ND。 we just inherit from it and make probe， dd， which is exactly the same but
    has dunder set。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在实例字典中放入一个值，这里是`none`，我们就会得到那个值。就像`get add`一样。然而，如果我们添加一个`dunder set`方法，并做同样的操作，行为又会发生变化。所以我们在那个`probe
    ND`上放一个`dunder set`方法，我们只是继承它并创建`probe dd`，它完全相同但有`dunder set`。
- en: We put probe dd onto my object， create a new instance and go ahead and put into
    that instance。 dictionary and then access it and it is called despite the fact
    that that dictionary has a。 value for z in it。 Just for completeness， we'll take
    a look here and we'll make sure that dunder set is。 called as a set function。
    So this is the same probe dd， exactly the same。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`probe dd`放入我的对象中，创建一个新实例，然后将其放入那个实例字典中，接着访问它，尽管那个字典中有`z`的值，但它仍然被调用。为了完整性，我们在这里看看，确保`dunder
    set`被称为`set`函数。所以这是同一个`probe dd`，完全相同。
- en: We'll go ahead and put none in as the value of z， except we'll set o。z equal
    to something。 And we can see here that the set function is now finally called
    and we can see that it。 does its print command and prints out set my object and
    something the value that it got。 And if we call o。z， we see that the get function
    still runs and if we check the dunder dicked。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们继续将`none`作为`z`的值，除了我们将`o.z`设置为某个值。我们可以看到这里的`set`函数终于被调用了，并且它执行了打印命令，输出了“设置我的对象”和它得到的某个值。如果我们调用`o.z`，我们看到`get`函数仍然运行，如果我们检查`dunder
    dicked`。
- en: we see that it hasn't even been altered because once again I didn't write anything
    to change。 the dunder dicked。 So set is a set function。 It's called when we set
    on the left side。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到它甚至没有被更改，因为我再次没有写任何东西来更改`dunder dicked`。所以`set`是一个`set`函数。当我们在左侧设置时，它被调用。
- en: '![](img/d9b78ecadbf81eb9828e4c03279b0041_14.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9b78ecadbf81eb9828e4c03279b0041_14.png)'
- en: So now we have our eight things。 The first three are we use resolutions of dunder
    in the dictionary。 So first we look in the instance dictionary， we look in the
    class dictionary， we look in。 the base classes dictionary。 Then items four and
    five are our dunder methods。 dunder get adder and dunder get attribute。 Then items
    six and seven are something that's called the descriptor protocol。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了八件事情。前三件是我们使用字典中的`dunder`解析。首先我们查看实例字典，其次是类字典，最后是基类字典。然后第四和第五项是我们的`dunder`方法，`dunder
    get adder`和`dunder get attribute`。第六和第七项是称为描述符协议的东西。
- en: dunder get， and dunder set and the eighth thing is that dunder get attribute
    raises an attribute error。 which we have surely seen enough times。 Of course this
    is not an order of precedence。 The order of precedence is that get attribute manages
    the whole thing and as we saw whether。 we have get and set on that descriptor
    makes quite a difference。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`dunder get`和`dunder set`以及第八件事是，`dunder get attribute`会引发属性错误。我们肯定见过足够多的这种情况。当然，这并不是优先级顺序。优先级顺序是`get
    attribute`管理整个过程，正如我们所看到的，是否在那个描述符上有`get`和`set`会产生相当大的差异。'
- en: '![](img/d9b78ecadbf81eb9828e4c03279b0041_16.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9b78ecadbf81eb9828e4c03279b0041_16.png)'
- en: So let's take a look at the descriptor protocol。 Again this is initially included
    with Python 2。2's new style classes。 We know those in Python 3 as classes。 A descriptor
    has as many as four methods， dunder get， dunder delete and dunder set name。 starting
    in Python 3。6。 Dunder get is what's accessed when it's found in the class dictionary
    and to retrieve a。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们看看描述符协议。这最初是与Python 2.2的新样式类一起引入的。在Python 3中我们知道这些是类。描述符有多达四个方法，`dunder
    get`、`dunder delete`和`dunder set name`，从Python 3.6开始。`dunder get`是在类字典中找到时访问的，并用于检索一个。
- en: value on the right hand side， dunder set is what's used when you set a value
    to that class。 attribute on an instance。 Dunder delete is called when you delete
    from an instance and dunder set name a new in Python。 3。6 is used during class
    creation to let the descriptor know what class and what name it。 has been assigned
    to。 The signatures here for get。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 右侧的值，`dunder set`是在你为实例的类属性设置值时使用的。当你从实例中删除时调用`dunder delete`，而在Python 3.6中，`dunder
    set name`在类创建时被使用，以便让描述符知道它被分配给了哪个类和名称。这里的`get`签名。
- en: it gets an object which is the object that is the instance it's。 being called
    on and the class for set it only gets the instance and the value that's being。
    set and deleted only gets the instance。 That's because get can be called at the
    class level in which case the instance would be。 none。 The others are only at
    instance level。 There's two kind of sub-protacles here。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 它获得了一个对象，即正在被调用的实例的对象，而对于`set`类只获取实例和正在设置的值，删除时仅获取实例。这是因为`get`可以在类级别调用，在这种情况下实例将为`none`。其他的只在实例级别。这里有两种子协议。
- en: If you only define dunder get an optionally set name you have a non-dated descriptor。
    That's why we had pro-bend。 If you define dunder get and dunder set or dunder
    get and dunder delete optionally set。 of course you have a dated descriptor。 If
    anyone's actually defining dunder delete for purposes please talk to me after
    I would。 like to know about that。 I have not found people implementing that other
    than out of a sense of completeness and obligation。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只定义了双下划线的`get`并可选地设置名称，你就得到了一个非日期描述符。这就是为什么我们有pro-bend的原因。如果你定义了双下划线的`get`和`set`，或者双下划线的`get`和`delete`可选设置，当然你就得到了一个日期描述符。如果有人实际定义了`delete`用于某些目的，请在会后和我聊聊。我想了解那方面的情况。我没有发现除了出于完整性和义务感之外，有人实现这个。
- en: It is there and it does work。 It absolutely works。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 它在那里，并且确实有效。它绝对有效。
- en: '![](img/d9b78ecadbf81eb9828e4c03279b0041_18.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9b78ecadbf81eb9828e4c03279b0041_18.png)'
- en: What is this for？ The biggest thing to understand is this is the only reason
    that instance methods work。 at all in Python。 Grid binding works entirely because
    of the descriptor protocol。 If we define a class， we put a method on a greeting
    and it prints high。 We go ahead and look at what greeting is in the class dictionary。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这有什么用？最重要的是要理解，这是实例方法在Python中能工作的唯一原因。网格绑定完全依赖于描述符协议。如果我们定义一个类，把一个方法放在`greeting`上，并让它打印“hi”，然后我们查看`greeting`在类字典中的情况。
- en: We find it's a function and that doesn't surprise us。 If we look at that and
    we go hey I wonder if that has a dunder get on there we find that。 it does and
    that may or may not surprise us。 But now after going through the previous we'll
    understand that if we create an instance of。 greeter and we access greeting from
    it that dunder get is called， we get a different object。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发现它是一个函数，这并不让我们惊讶。如果我们看看这个，想知道它是否有一个`dunder get`，我们发现它确实有，这可能让我们惊讶，也可能没有。但现在在经过前面的分析后，我们会理解，如果我们创建一个`greeter`的实例并从中访问`greeting`，`dunder
    get`会被调用，我们得到一个不同的对象。
- en: we get the return of dunder get and that is a method and that is what we can
    call。 That is exactly how we bind our methods both in Python 2 and 3。 They were
    called bound and unbound methods there。 So method binding uses it。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们获得了双下划线的`get`的返回值，那是一个方法，我们可以调用它。这正是我们在Python 2和3中绑定方法的方式。在那里它们被称为绑定和未绑定的方法。所以方法绑定使用了它。
- en: '![](img/d9b78ecadbf81eb9828e4c03279b0041_20.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9b78ecadbf81eb9828e4c03279b0041_20.png)'
- en: What else？ Obviously normal method binding。 Variant method binding is also going
    to use it。 This is how you do static methods。 This is how you do class methods。
    This is how properties work。 As soon as we go into frameworks， SQLAlchemy uses
    it。 Flask uses it in their config module。 If you start to try to get tricky there's
    a very good chance you will start using descriptors。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 还有什么？显然是普通的方法绑定。变体方法绑定也将使用它。这就是你如何实现静态方法。这就是你如何实现类方法。这就是属性的工作原理。一旦我们进入框架，SQLAlchemy使用它。Flask在它们的配置模块中使用它。如果你开始尝试变得棘手，你很有可能会开始使用描述符。
- en: as well as whatever else you're using。 Lazy execution， proxy and monitoring。
    runtime type checking is very likely to go into descriptors。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以及你正在使用的其他任何东西。懒惰执行、代理和监控。运行时类型检查很可能会进入描述符。
- en: '![](img/d9b78ecadbf81eb9828e4c03279b0041_22.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9b78ecadbf81eb9828e4c03279b0041_22.png)'
- en: So let's pull up some examples。 Here's an alias descriptor。 Would you like to
    have two names for one attribute？ Sure， wouldn't we all？
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一些例子。这是一个别名描述符。你想为一个属性有两个名称吗？当然，谁不想呢？
- en: I wrote this up as an example for this talk and then I found some code where
    I had to。 rename an attribute。 It didn't have time to go through all the call
    sites so I put it in there。 So this is a descriptor。 When it's created I give
    it the name of the other attribute that should always have the。 same value。 And
    that's stored as alias two and under init。 In under get。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我写这个作为此次演讲的示例，然后我发现一些代码，我不得不重命名一个属性。没时间逐个检查所有调用站点，所以我把它放在那里。这是一个描述符。当它创建时，我给它另一个属性的名称，该属性应始终具有相同的值。这被存储为
    alias two，并在初始化下。在 getter 下。
- en: if instance is none it does something very common for descriptor。 It returns
    itself because it's being accessed at the class level。 Otherwise it does a get
    adder on the instance and the other attribute that it's aliasing。 If it's set，
    it does a set adder and it sets the value of that other attribute。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果实例为 None，它会执行描述符非常常见的操作。它返回自身，因为它在类级别被访问。否则，它会对实例及其别名的其他属性执行 getter。如果设置了，它会执行
    setter 并设置该其他属性的值。
- en: So let's look at a class that uses it。 Name data class， not the new data classes。
    So data x， data y。 data z， they're all aliasing legacy x， legacy y， legacy z。
    The constructor is setting x， y。 and z into those old attributes。 So we'll go
    ahead and construct one with the values of high。 picon 2019。 So and check out
    the values。 So data x and legacy x are both high。 Legacy y is picon。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个使用它的类。命名为数据类，而不是新数据类。因此数据 x、数据 y、数据 z，它们都别名遗留 x、遗留 y、遗留 z。构造函数将 x、y 和
    z 设置为这些旧属性的值。因此我们将构造一个高 picon 2019 的值。然后检查这些值。因此数据 x 和遗留 x 都是高的。遗留 y 是 picon。
- en: That's exactly what we set。 And data z and legacy z are both 2019。 They are
    identical by its operator。 We change the value of data x。 We see the value of
    legacy x has changed exactly to match。 And that's exactly as we would expect。
    Everything else has stayed the same。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是我们设定的。数据 z 和遗留 z 都是 2019。它们通过操作符是相同的。我们更改数据 x 的值。我们看到遗留 x 的值正好匹配。这正如我们所期待的那样。其他一切都保持不变。
- en: '![](img/d9b78ecadbf81eb9828e4c03279b0041_24.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9b78ecadbf81eb9828e4c03279b0041_24.png)'
- en: Let's look at a non-data descriptor example。 I told you they were good for messing
    with method binding。 So this is both a descriptor and a decorator。 That's a fairly
    common pattern。 So in this case。 it's a binding decorator because it's going to
    mess with method binding。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个非数据描述符的例子。我告诉过你，它们在方法绑定方面很有用。所以这是一个描述符和装饰器。这是一种相当常见的模式。因此在这种情况下，这是一个绑定装饰器，因为它将干扰方法绑定。
- en: '![](img/d9b78ecadbf81eb9828e4c03279b0041_26.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9b78ecadbf81eb9828e4c03279b0041_26.png)'
- en: So sorry， didn't want to preview that。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 非常抱歉，不想预览那个。
- en: '![](img/d9b78ecadbf81eb9828e4c03279b0041_28.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9b78ecadbf81eb9828e4c03279b0041_28.png)'
- en: So in init， we're going to get a function and we're going to store that function
    because。 it's a decorator。 And then when we do a get， either we will be given
    an object or not。 This goes to the function of this decorator。 This is handling
    class methods in a different way。 Probably not a good way， but a good way for
    this example。 What this is doing is saying， hey。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 因此在初始化时，我们将获取一个函数，并存储该函数，因为它是一个装饰器。然后当我们执行 getter 时，无论是给我们一个对象还是不。这个函数处理类方法的方式不同。可能不是一种好的方式，但对于这个例子是一个好的方式。它的作用是说，嘿。
- en: if you don't have an instance of the class and you， call this method anyway。
    instead of causing an error about it， just construct one。 Use the default parameters
    and make an instance。 Why not？ Well， probably many reasons。 Why not？
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有类的实例，而你仍然调用这个方法。它不会导致错误，而是构造一个实例。使用默认参数并创建一个实例。为什么不呢？好吧，可能有很多原因。为什么不呢？
- en: But it's doable and in some cases may be adequate to make your process work。
    Again。 this is something you should think about before doing。 So in the case that
    object is none。 that means it's been called at the class level。 And you can see
    that it's creating a partial。 which is equivalent to binding， to bind a， newly
    created instance of the class to the function。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 但这是可行的，在某些情况下可能足以使你的过程工作。再次强调，这是你在做之前应该考虑的事情。所以在对象为 none 的情况下，这意味着它是在类级别被调用的。你可以看到它正在创建一个部分，这相当于绑定，将新创建的类实例绑定到函数上。
- en: constructing it and passing it as， the first argument， which is， of course，
    self。 In the normal case where there's been an instance passed， it will simply
    call get normally using。 the function that it was given and being given the object
    and the class。 So name printer is another simple class。 It takes a name and has
    two functions。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 将其构造并作为第一个参数传递，当然是 self。在正常情况下，传入一个实例时，它将简单地使用提供的函数正常调用 get，并传入对象和类。因此，name
    printer 是另一个简单的类。它接受一个名称并具有两个函数。
- en: name print and print name。 They are entirely identical except one is decorated
    with defaulted method。 The defaulted method decorator is defined before。 When
    we put a name on name printer。 we can see they work identically。 Andy。printName
    and Andy。namePrint， both printout and it's fine。 But if we call it at the class
    level， print name works because the decorator goes in， sorry。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: name print 和 print name 完全相同，除了一个是用默认方法装饰的。默认方法装饰器在前面定义。当我们在 name printer 上放置一个名称时，可以看到它们的工作方式是相同的。Andy.printName
    和 Andy.namePrint 都能正常输出，这没问题。但如果我们在类级别调用它，print name 就能正常工作，因为装饰器进入了，对不起。
- en: the descriptor goes in， hits its dunder get， notices that it's being called
    at the， class level。 constructs an instance， hits the initializer of name printer，
    uses the default。 value of name to go ahead and construct that instance。 And then
    print name is called on that and we get default name and that's fine。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 描述符进入，触发它的 dunder get，注意到它在类级别被调用。构造一个实例，调用 name printer 的初始化器，使用默认的名称值来构造该实例。然后在其上调用
    print name，我们得到默认名称，这没问题。
- en: Or maybe not great but it works。 Name print is a normal instance method and
    you can't call those on a class level。 That is not allowed。 And we get our type
    error as we would。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 或许效果不是很好，但它是可行的。Name print 是一个普通的实例方法，你不能在类级别调用它们。这是不被允许的。我们会如预期那样收到类型错误。
- en: '![](img/d9b78ecadbf81eb9828e4c03279b0041_30.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9b78ecadbf81eb9828e4c03279b0041_30.png)'
- en: Well， the question would be what should we use and when？ These are like many。
    like really any meta programming technique， a class of things that， I call shovels。
    They're good for getting you out of holes。 But you don't want to use them too
    early because if you use a shovel too early。 you will find， yourself at the bottom
    of the hole with a broken shovel。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，问题是我们应该使用什么以及何时使用？这些就像很多，实际上任何元编程技术，是我称之为铲子的一类东西。它们适合于将你从困境中救出来。但你不想过早使用它们，因为如果你过早使用铲子，你会发现自己在洞底，手里还拿着一把坏铲子。
- en: Do not go and use these until you are sure that the benefit is worth the added
    complexity。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 不要去使用这些，直到你确定好处值得增加的复杂性。
- en: '![](img/d9b78ecadbf81eb9828e4c03279b0041_32.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9b78ecadbf81eb9828e4c03279b0041_32.png)'
- en: Breaking down the techniques shown and the different ways of accessing attributes。
    Here's how I would suggest looking at it。 Normal attribute access is of course
    what you should use as long as you possibly can。 And adder is particularly useful
    for caching lazy execution。 It works because once you've set a value it won't
    be called anymore。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 解析显示的技术和访问属性的不同方法。这是我建议的查看方式。正常的属性访问当然是你在可能的情况下应该使用的。而 adder 对于缓存惰性执行特别有用。它之所以有效，是因为一旦你设置了一个值，它就不会再被调用。
- en: Get attribute however is probably something you're going to have to do if you're
    proxying。 access to some unknown remote API that you'll never know what the methods
    are。 You simply want to intercept every access。 Non-data descriptors are fundamentally
    designed for method binding。 And data descriptors， a great example usage for that
    is runtime typing。 And with that。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你在代理访问一些未知的远程 API，可能会需要使用 get attribute，因为你永远不知道那些方法是什么。你只想拦截每一次访问。非数据描述符从根本上是为方法绑定而设计的。而数据描述符的一个很好的使用例子是运行时类型。至此。
- en: I will take some questions。 I will also be at the Bloomberg booth in the next
    break if anyone wants to talk about subjects。 raised here。 Please come up to this
    microphone to ask questions。 Hi， nice talk。 Could a descriptor be designed to
    not be able for the underlying object to be accessed？
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我会接受一些问题。在接下来的休息时间，我也会在彭博展台，如果有人想讨论这里提出的主题，请来这个麦克风提问。你好，演讲很好。描述符能否设计成不让底层对象被访问？
- en: For the underlying object not to be able to access。 What do you mean the underlying
    object？
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让底层对象无法访问。你是什么意思，底层对象？
- en: I mean like you are creating data descriptor objects。 And typically in Python
    you can't have hidden attributes that can't be accessed from outside。 the object。
    Oh， the correct answer is no。 You could do some very weird hacks that inspected
    the stack in ways that you should never ever。 ever do。 But other than that， no。
    The descriptor still doesn't know who's calling it。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我是说你正在创建数据描述符对象。在Python中，通常你不能有无法从外部访问的隐藏属性。哦，正确的答案是不能。你可以做一些非常奇怪的黑客行为，检查堆栈的方式，但你永远不应该这样做。除此之外，不，描述符仍然不知道是谁在调用它。
- en: The descriptor still doesn't have any way to filter so some things could access
    it and。 some couldn't。 What you can do with the descriptor is change where the
    data is stored。 So you can use a descriptor and say this data is stored in a database。
    That's how SQLAlchemy works。 Like the fields in SQLAlchemy are fundamentally storing
    something in a database rather than。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 描述符仍然没有任何过滤的方式，所以有些东西可以访问它，而有些则不能。你可以用描述符改变数据的存储位置。所以你可以使用描述符并说这个数据存储在数据库中。这就是SQLAlchemy的工作原理。SQLAlchemy中的字段根本上是在数据库中存储某些东西，而不是。
- en: actually on the object。 Okay， thank you。 Can you tell me any good resources
    on how to use this when you pull in inheritance into。 the mix basically where
    you want to override the set the descriptors？
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上是在对象上。好的，谢谢。你能告诉我一些好的资源，关于如何在继承混合时使用这个，基本上你想重写描述符的设置吗？
- en: I thought there were some quirky things that happen in some cases， at least
    from my experience。 I was wondering if you have any good resources other than
    the documentation， I guess。 There shouldn't be anything particularly quirky。 I
    mean the descriptor is going to be attached and if you replace it。 you're going
    to be， replacing it with a new behavior for everything up and down the stack。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为在某些情况下会发生一些奇怪的事情，至少从我的经验来看。我想知道除了文档之外是否有其他好的资源。我想应该没有特别奇怪的事情。描述符会被附加，如果你替换它，就是用新行为替换整个调用栈中的内容。
- en: The biggest problem is if something previously accessed it as a normal attribute
    and then。 you put in some behavior that's fundamentally incompatible with that
    or you need it to be。 initialized in order。 So you do have that problem but that's
    depending on what you're doing with your descriptor。 Are there any other questions？
    Can you come on up？
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 最大的问题是，如果之前以正常属性访问过某些内容，然后你添加了一些根本不兼容的行为，或者需要初始化才能使用。这确实是一个问题，但这取决于你对描述符的使用。还有其他问题吗？可以上来问吗？
- en: And I think this will be the last one running out of time。 So I just wondered。
    the examples I've seen for data descriptors for their actual use， of them just
    in an academic sense。 so for validating or maybe manipulating a value that。 you
    supply to an attribute and you may change it to something， maybe， you know， coerce
    it。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我想这将是最后一个，因为时间不够。我只是想知道，对于数据描述符的实际用例，我看到的例子大多是学术性的，可能用于验证或操纵你提供给属性的值，也许会把它更改为某个你知道的类型。
- en: to a certain bounds or something like that。 Is there any other common scenarios
    we want to use data descriptors？
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些界限或类似的情况下。有没有其他常见场景我们希望使用数据描述符？
- en: Yeah， the typing case is a great case but again I'll suggest the SQLAlchemy
    case is。 another excellent case where you're saying what I want to do is actually
    store this value。 in a database or maybe I would like to put it in there。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，typing的案例是一个很好的例子，但我再次建议SQLAlchemy的案例是另一个很好的例子，在这里你可以说我想做的是将这个值存储在数据库中，或者我可能希望将它放在那里。
- en: '![](img/d9b78ecadbf81eb9828e4c03279b0041_34.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9b78ecadbf81eb9828e4c03279b0041_34.png)'
- en: Yeah， maybe I would like to do some additional monitoring so you could conceivably
    put in。 a data descriptor at a critical point and say I would like to have every
    time this value， changed。 write it out to my monitoring system so I don't have
    to put a log statement on。 I don't have to rely on anyone remembering that they
    have to record they change that， value。 Again。
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，也许我想进行一些额外的监控，这样你可以在关键点插入一个数据描述符，并说我希望每次这个值变化时，都将其写入我的监控系统，这样我就不需要放置日志语句了。我不必依赖任何人记得他们必须记录这个值的更改。再次。
- en: you can control where the data goes。 That's another case for that。 Thank you。
    Okay。 well thank you very much。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以控制数据的去向。这是另一个例子。谢谢你。好的，非常感谢。
- en: '![](img/d9b78ecadbf81eb9828e4c03279b0041_36.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9b78ecadbf81eb9828e4c03279b0041_36.png)'
- en: '[APPLAUSE]， (applause)。'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[掌声]，（掌声）。'
