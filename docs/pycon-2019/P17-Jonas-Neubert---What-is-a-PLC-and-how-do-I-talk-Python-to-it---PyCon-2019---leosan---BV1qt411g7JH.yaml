- en: P17：Jonas Neubert - What is a PLC and how do I talk Python to it - PyCon 2019
    - leosan - BV1qt411g7JH
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P17：乔纳斯·诺伊伯特 - 什么是PLC，以及我如何用Python与之沟通 - PyCon 2019 - leosan - BV1qt411g7JH
- en: \>\> Hello， everybody。 So just a quick announcement before we start。 this room
    has occupancy only for as many as。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: \>\> 大家好。在我们开始之前，先快速宣布一下。这个房间的容纳人数有限。
- en: '![](img/f20e69ecd8f31d8536c27fb544d7c024_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f20e69ecd8f31d8536c27fb544d7c024_1.png)'
- en: the chairs are in here。 I know that not all the chairs are filled。 but please
    make sure you get the chairs so， that when the new people come in。 if they have
    an understanding room， they would need。 to leave just due to the fire code just
    to give you guys a heads up。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的椅子不全是满的。我知道不是所有的椅子都坐满了，但请确保你们拿到椅子，以便新来的人进来时，如果他们需要理解这个房间，出于消防法，他们需要离开，这只是给你们的一个提示。
- en: So the next talk is what does the PLC and how do I talk to it with Python？ And
    speakers。 John's new board， please welcome。 \>\> Thank you。 I'm going to start
    with a quick story about myself and why I'm giving this talk。 Back at the turn
    of the century， I was in high school and I managed to talk myself into。 an internship
    at the nearby semiconductor factory。 And this was the coolest thing I had ever
    seen。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 所以下一个演讲是关于PLC是什么，以及我如何用Python与之沟通。演讲者，请欢迎约翰的新板。 \>\> 谢谢。我将从一个关于我自己的小故事开始，讲讲我为什么要做这个演讲。世纪之交时，我还在高中，成功说服自己去了一家附近的半导体工厂实习。这是我见过的最酷的事情。
- en: And since then， I've been fascinated by the role that software plays in building
    these。 amazingly complex machines that we call factories。 But I also sometimes
    feel a little bit like I've stumbled upon this weird niche。 Most software developers
    never even encounter factory automation as a place where you can。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 从那时起，我对软件在构建这些复杂机器中的作用产生了浓厚的兴趣，这些机器我们称之为工厂。但有时我也觉得自己仿佛偶然闯入了一个奇怪的利基市场。大多数软件开发者甚至不会接触到工厂自动化。
- en: apply your skills。 And conferences like this， the topic has a little bit of
    a low profile。 same podcast， blogs， and all the other places where software engineers
    exchange knowledge。 So I thought to myself， I'm going to give a software conference
    talk about a factory。 topic every calendar year。 And you all are here to see 2019
    being checked off the list。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 应用你的技能。在这样的会议上，主题的知名度稍低。同样的播客、博客，以及软件工程师交流知识的其他地方。所以我对自己说，我要每年在软件会议上讲一次关于工厂的主题。你们都在这里，见证2019年被记录在案。
- en: The topic I decided to bring today is PLCs， in that sense， for programmable
    logic controllers。 And if you do a quick survey of people who've worked with PLCs
    before， they usually think。 of factories as the place where they live。 So if you
    had to walk through there。 you would look for the metal enclosure， the electronics，
    cabinet。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我今天决定带来的主题是PLC，即可编程逻辑控制器。如果你快速调查一下之前与PLC合作过的人，他们通常会将工厂视为他们的工作场所。所以如果你必须走过去，你会寻找金属外壳、电子柜。
- en: And if there's a couple of buttons， a couple of readouts and stuff on it， you
    open it up。 You might find a PLC in there。 They're usually hanging out near the
    robots。 also in standalone equipment like the window， tinting machine。 if you
    don't have access to factories， out and about， maybe you're near。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果上面有几个按钮和一些读数，你打开它，可能会找到里面的PLC。它们通常靠近机器人，也在像窗帘着色机这样的独立设备中。如果你没有进入工厂的机会，可能在外面会看到。
- en: Wind energy to have PLCs in the controller cabinet at the bottom， the gearbox
    at the top。 the control， the angle at which the rotor blades are set to the wind，
    construction machines。 theme parks， car washes， public transit vehicles have PLCs。
    Trains often have a network of them。 They're in each carriage doing stuff like
    traction control in AC and in the cockpit at the driver's。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 风能控制柜底部有PLC，齿轮箱在顶部，控制风轮叶片的角度，建筑机器、主题公园、洗车场和公共交通工具上都有PLC。火车上通常有它们的网络。它们在每个车厢里做一些如牵引控制的工作，在驾驶员的驾驶舱。
- en: dashboard。 Buildings like this。 Each track system， the lighting。 the elevators
    are controlled by PLCs。 You go to the roof to get to the control room or to the
    basement。 Sometimes it's at the elevator itself。 There are places where there's。
    where you think there's a PLC， but there isn't one。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 仪表板。像这样的建筑。每个轨道系统、照明和电梯都由PLC控制。你要到达控制室可能要去屋顶，或者到地下室。有时电梯本身就有。有些地方本应有PLC，但实际上并没有。
- en: Like traffic control cabinets at your regular intersection。 There's so many
    of these things and they're pretty simple。 You don't need programmable logic。
    so you just buy off the shelf electronics。 But as soon as you have traffic management
    for the whole city wiring all these intersections。 up or you have a tram crossing
    intersection， it becomes custom logic again。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 就像你常见的交叉口的交通控制箱。这些东西很多，而且相对简单。你不需要可编程逻辑，所以你只需购买现成的电子产品。但一旦你有整个城市的交通管理，连接这些交叉口，或者有电车交叉口，它又变成了定制逻辑。
- en: And more than likely you'll find the PLC in these boxes。 So there's that thing
    where people say when you're in a big city， you're never more than。 10 feet away
    from a rat。 I'm going to add to that urban myth and say you're also never more
    than 50 feet away。 from PLC。 Using that as motivation， this is the outline of
    the talk。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 而且你更有可能在这些箱子里找到PLC。所以人们常说，当你在大城市时，离老鼠从未超过10英尺。我想补充这个城市神话，告诉你离PLC从未超过50英尺。以此作为动力，这是演讲的提纲。
- en: Super simple because it's actually in the talk title。 First we talk about what
    is the PLC。 Second。 we talk about what do we do with Python to interface to them。
    Then at the very end we deal with the dreaded raspberry pi question。 I talk fast。
    Some of my slides are really full because I want you to be able to use them as
    reference。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 超简单，因为实际上在演讲标题中。首先我们讨论什么是PLC。其次，我们谈论如何用Python与它们接口。最后我们处理令人畏惧的树莓派问题。我说得很快。一些幻灯片信息非常多，因为我希望你能将它们用作参考。
- en: material after the talk is over。 So if you want to follow along。 the link to
    the slides is right there。 If that's too much to type， my Twitter， you can look
    up。 I just tweeted out the link to， the slides as well。 And with that， let's dive
    right in。 I'm going to take you along the journey of what happens when you decide
    to use a PLC in。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 演讲结束后的材料。所以如果你想跟着我，幻灯片的链接就在那。如果输入太麻烦，你可以查我的Twitter。我刚刚发了幻灯片的链接。现在，让我们深入探讨。我将带你了解使用PLC时会发生什么。
- en: your project。 Step one， you go to your purchasing department， you get a quote
    and all that stuff。 In the end you order one， you get a package， you open it up，
    you get one of those things。 Depending on how much money you spend， how difficult
    your application is， you get a compact。 form factor which has a limited set of
    features that you can't extend or you go all the way。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你的项目。第一步，你去采购部门，获取报价和所有相关信息。最后你下订单，收到一个包裹，打开后拿出其中的东西。根据你花费的金钱和应用的复杂性，你可能得到一个紧凑的形态，它具有有限的功能集，无法扩展，或者你可以完全扩展。
- en: to the expensive， expandable ones where you just keep adding modules to continue
    expanding。 the PLC to meet your features。 Spend a day or maybe a week on setting
    it up。 It looks like it's grown a ponytail or two。 Those are the wires coming
    out of it。 These are stock photos on the slide。 When I do it。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 到那些昂贵的、可扩展的PLC，你只需不断添加模块以扩展功能。花一整天或许一周来设置它。它看起来像长出了几条马尾辫。那些是从里面伸出来的电线。这些都是幻灯片上的图库照片。当我做的时候。
- en: it looks like one's on the stage here because I actually brought a little。 PLC
    that's already blinking away， waiting to be used in our demo。 Those wires are
    actually a hint about what PLCs do because I haven't， for anyone who hasn't。 used
    the PLC before， I haven't actually mentioned what they do yet。 Those wires are
    a hint。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来这里的一个在舞台上，因为我实际上带来了一个小型PLC，它已经在闪烁，等待在我们的演示中使用。这些电线实际上暗示了PLC的作用，因为我还没有提到它们的功能。这些电线就是一个线索。
- en: They're connected to field devices that are out in the factory or in the wind
    turbine。 or whatever it is you're controlling。 That tells you that the natural
    habitat for PLCs is always right at this boundary where。 the world of software，
    with bits and bytes， meets the physical world with atoms and electrons。 It actually
    makes sense to give a quick intro to field devices and an I/O input output。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 它们连接到工厂或风力涡轮机中的现场设备，或者你正在控制的其他设备。这告诉你PLC的自然栖息地总是在这里的边界上，即软件的世界（比特和字节）与物理世界（原子和电子）相交汇。实际上，给现场设备和输入/输出做一个快速介绍是很有意义的。
- en: so a term that gets used a lot。 Of course， field devices is just a fancy word
    for sensors and actuators。 Sensors， of course， are the devices that look at observable
    phenomena in the physical world。 Turn it into an electrical signal which then
    becomes a variable in your code and actuators。 are the other way around。 They
    take a variable in your code。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这是一个经常使用的术语。当然，现场设备只是传感器和执行器的 fancy 说法。传感器自然是观察物理世界中的可观察现象的设备，将其转化为电信号，然后成为你代码中的变量，而执行器则是相反的，它们接受你代码中的变量。
- en: Turn it into an electrical signal which then becomes an effect in the physical
    world。 Slide is super complicated but it's really just to illustrate that there
    are many different。 kinds of electrical signals out there because physics is hard，
    standardization is hard。 So for your sensors you might have anywhere up to ten
    different signal types and that's。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 将其转化为电信号，然后在物理世界中产生效果。这一幻灯片非常复杂，但其实只是为了说明存在许多不同类型的电信号，因为物理学很复杂，标准化也很难。因此，对于你的传感器，可能有多达十种不同的信号类型。
- en: where those modules I mentioned earlier come in。 You can't just plug any signal
    into any port of your PLC。 You purchase the set of modules that matches the signals
    that you need。 Really the only important distinction for us to understand here
    to follow the rest of。 this talk is that some signals are digital which means
    the physical phenomenon is on or， off。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 那些我之前提到的模块就派上用场了。你不能将任何信号插入 PLC 的任何端口。你需要购买与所需信号匹配的模块集。对我们来说，理解的唯一重要区别是，有些信号是数字信号，这意味着物理现象是开或关。
- en: The electrical signal is high or low and the variable becomes a Boolean variable
    and there。 are analog signals which are things that are continuous variables you
    need to measure the。 electrical signals much more accurately and then it becomes
    a number in your code。 On the slide here I purchased the PLC and I added 1， 2，
    3， 4， 5， 6 modules to deal with。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 电信号是高或低，变量成为布尔变量，还有模拟信号，这些是连续变量，你需要更准确地测量电信号，然后它在你的代码中变成一个数字。在这一张幻灯片中，我购买了 PLC，并添加了
    1、2、3、4、5、6 个模块来处理。
- en: different types of signals both digital input， abbreviated DI and analog inputs
    and stuff。 like that and digital outputs abbreviated DQ。 Wait what？
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 不同类型的信号，包括数字输入，缩写为 DI，以及模拟输入等，和数字输出，缩写为 DQ。等一下，什么？
- en: That seems to be a common thing in automation engineering。 I think it's because
    the O for output would be too similar to the zero so they say DQ and。 you'll see
    that a couple of times in my variable names later。 Cool。 We purchased it， we wired
    it up。 What does it do？
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这似乎是自动化工程中的一个普遍现象。我认为这是因为输出的 O 太像零，所以他们称之为 DQ，你会在我的变量名中看到几次。太酷了。我们购买了它，接线完成。那么它的作用是什么？
- en: '![](img/f20e69ecd8f31d8536c27fb544d7c024_3.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f20e69ecd8f31d8536c27fb544d7c024_3.png)'
- en: Same thing as any compute device in the world that goes through the IPO cycle
    and the first。 step input we read the process variables from the field that basically
    means we look at the。 electrical signals and the PLC turns those into variables，
    stores them in memory in a。 place called the process image in。 Then in step two
    we run some kind of logic。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 世界上任何计算设备都经历 IPO 循环，第一步是从现场读取过程变量，这基本上意味着我们观察电信号，PLC 将这些信号转化为变量，并存储在一个叫做过程映像的内存区域中。然后在第二步中，我们运行某种逻辑。
- en: do some computation and hopefully turn our， input variables into output variables
    because that's what programmers usually do in their。 functions and those get written
    to the process image out。 PLC takes over again。 turns those variables in the process
    image out to electrical signals。 to our actuators which might be a motor or a
    fan or whatever it is that we're controlling。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 进行一些计算，希望将我们的输入变量转化为输出变量，因为这就是程序员在其函数中通常会做的事情，然后这些变量会写入过程映像中。PLC 再次接管，将过程映像中的变量转化为电信号，发送到我们的执行器，这可能是电动机、风扇或我们控制的其他设备。
- en: Obviously the interesting bit to us is step two because that's where we can
    have an effect。 on what's going on in the PLC。 We can program it and that's also
    where the name comes from because that's where the programmable。 logic lives。
    So just a quick recap。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对我们来说，第二步显然是最有趣的部分，因为这是我们可以对 PLC 中发生的事情产生影响的地方。我们可以编程，这也是名称的由来，因为可编程逻辑就在这里。所以简单回顾一下。
- en: '![](img/f20e69ecd8f31d8536c27fb544d7c024_5.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f20e69ecd8f31d8536c27fb544d7c024_5.png)'
- en: We determined that PLCs are the things that interface between the world of software
    and。 the physical world。 They're wired up to field devices that show up as digital
    and analog inputs and the like。 and we can program them to affect their behavior。
    So let's do a quick demo with this guy that I've got here and I'm going to fire
    up my。 favorite text editor and start programming the PLC。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们确定PLC是软件世界与物理世界之间的接口。它们与作为数字和模拟输入等的现场设备连接，我们可以编程来影响它们的行为。那么，让我们快速演示一下我在这里的这个家伙，我将启动我最喜欢的文本编辑器并开始编程PLC。
- en: '![](img/f20e69ecd8f31d8536c27fb544d7c024_7.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f20e69ecd8f31d8536c27fb544d7c024_7.png)'
- en: Just kidding， you don't program PLCs with text and also you don't use your favorite，
    program。 you use the one program that the vendor of your PLC gave you to program
    it。 Actually I selected the PLC that I brought today based on the fact that the
    software。 is sort of like clean enough that I can put it on a presentation screen
    and it's not like。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 开个玩笑，你不能用文本编程PLC，而且你也不用你最喜欢的程序。你使用的是PLC供应商提供给你的那个程序进行编程。实际上，我今天带的PLC是基于软件相对干净的事实选择的，这样我可以把它放在演示屏上。
- en: full of a million images。 And I'm going to do this trick where I zoom in every
    now and then to make it even easier。 for you to see。 So this is the programming
    environment we have。 On the very left we see this big line。 Imagine that's like
    under pressure or there's electricity coming in and the electricity is。 trying
    to travel down those horizontal lines to get to the right and we get to put like。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 充满了数百万个图像。我将做一个技巧，偶尔放大一下，让你更容易看到。所以这是我们拥有的编程环境。在最左边，我们看到这一大行。想象一下，那就像在压力下，或者有电流进来，电流试图沿着这些水平线向右移动，我们可以放置。
- en: electrical circuit elements there and I'm going to put normally open contact
    that looks。 at the variable di1。 What that basically means， it's like an if statement。
    If di1 becomes true。 current is traveling here where my cursor is dancing around
    and， if it stays false， well。 current can't get there。 So we're going to make
    use of that and whenever current gets there we're going to switch dq1。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 电路元件在那，我将放一个常开接触器，观察变量di1。这基本上意味着，就像一个if语句。如果di1变为真，电流就会在我的光标舞动的地方流动，如果它保持为假，那么电流就无法到达那里。所以我们将利用这一点，每当电流到达那里，我们将切换dq1。
- en: to true。 So we really just have sort of the hello world of PLCs。 If di is true，
    make dq true。 otherwise both of them are false。 I'm going to go online with my
    PLC。 which I should have done before the talk。 Now I can program it and I connected
    the two with a network cable here just my laptop's。 connected to the PLC for programming。
    So the program is over there now。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为真。所以我们实际上只是有PLC的问候世界。如果di为真，使dq为真。否则，它们都为假。我将在线连接我的PLC，应该在演讲前完成。现在我可以编程，我用网络电缆将两者连接，这只是我的笔记本电脑连接到PLC进行编程。所以程序现在在那边。
- en: Now we're going to test actually at home， I usually do this with an LED and
    stuff， an。 LED small thing but since you can't see that， I grabbed one of those
    for you。 So those are the digital output and I got the corresponding digital input
    as well and。 we press the button and this is what's happening。 Digital input is
    true。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们要在家里实际测试，通常我会用LED和其他东西，LED很小，但由于你看不到，我给你抓了一个。所以这些是数字输出，我也得到了相应的数字输入。我们按下按钮，这就是发生的事情。数字输入为真。
- en: digital output becomes true and actually I switched us into monitoring。 mode
    so if you watch the screen， you can actually see what those variables are doing
    which is。 really kind of cool。 But then you install it and the kids come and you
    go like that。 So we want to fix that a little bit and instead of the output we
    put a timer here and we say。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 数字输出变为真，实际上我切换到了监控模式，所以如果你看屏幕，你实际上可以看到这些变量在做什么，这真的很酷。但之后你安装它，孩子们来了，你就这样。所以我们想稍微修正一下，而不是输出，我们在这里放一个计时器，并且我们说。
- en: we want to count up to two seconds which in this weird programming language
    is 200 and。 we're going to give it a variable name for the current value and we're
    going to give。 it a variable name for when it's done。 So timer one done will be
    true when timer is finished counting and we add a second rule。 to our set of rules
    and say if timer one is done then we actually want to switch that。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要计时到两秒，而在这个奇怪的编程语言中是200。我们将为当前值提供一个变量名，并且给它一个变量名用于完成时。因此，当计时器完成计时时，计时器一完成将为真，我们为我们的规则集添加第二个规则，并说如果计时器一完成，那么我们实际上想要切换那个。
- en: output dq1 on， program that over to the PLC again and I'm going to do that assuming
    in， trick。 So if I press the button you see the timer starts running but the output
    doesn't come， on yet。 Only if I keep it running for two seconds does the light
    come on。 If I let go the timer resets I press it again the timer starts counting
    again。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 输出 dq1 开启，再次将程序传输到 PLC，我假设在使用这个把戏。因此，如果我按下按钮，你会看到计时器开始运行，但输出尚未开启。只有当我持续运行两秒时，灯才会亮起。如果我松手，计时器重置，再次按下时计时器开始重新计时。
- en: But we already know two little primitives of this language that we're working
    in。 I have one more sort of like party trick here。 I'm going to insert another
    row before。 Second timer which also counts to two seconds and I'm going to call
    this timer two value。 and timer two done and now I'm going to put a couple of
    crazy rules in front of those。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 不过我们已经知道我们正在使用的语言的两个基本原理。我这里还有一种类似的小把戏。我将插入一个新的行，在第二个计时器之前，它同样计时到两秒，我将这个计时器称为“计时器二值”，计时器二完成了，现在我将为这些添加一些疯狂的规则。
- en: I'm going to say a normally closed contact so I want timer two to start counting
    when。 timer one is not done so that little thing with a strike through here that's
    basically。 an if not statement。 Oops thank you windows。 And then I change this
    to say timer one is counting when timer two is done and then I。 want my output
    on when timer two is done。 Look at this for a second。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我将说一个常闭接点，因此我希望计时器二在计时器一未完成时开始计时，这里带有划线的小东西基本上是一个“如果不”语句。哎呀，谢谢你，Windows。然后我将这个更改为当计时器二完成时计时器一正在计时，然后我希望在计时器二完成时输出开启。看一下这个片刻。
- en: I'm going to click program and you have three more seconds to try to figure
    out what this。 is actually doing when it runs。 And we build ourselves a little
    flashing light。 How cool is that？
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我将点击程序，你还有三秒钟的时间去尝试弄明白它运行时实际上在做什么。我们为自己构建了一个闪烁的灯。多酷啊？
- en: Quick pro tip for anyone who's coming to the US from outside the country when
    you see a traffic。 signal like this is actually the equivalent of a stop sign
    you have to stop before you， keep moving。 I lived here for three years I had no
    idea。 And it's a bit distracting so I'm going to stop the PLC if I actually over
    it is network。 table tell the PLC to stop。 I should clarify this all the code
    is running in the PLC my laptop is only connected to the。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何从国外来到美国的人，这里有一个快速的小提示，当你看到这样的交通信号时，实际上相当于停止标志，你必须在继续移动之前停下来。我在这里住了三年，却毫不知情。这有点分心，所以如果我超出它的网络，我将停止PLC。我应该澄清，所有代码都在PLC中运行，我的笔记本电脑只连接到。
- en: programming it's a programming interface and it has this cool monitoring interface
    where。 the PLC reports what's going on inside of it。 My laptop is not running
    any of the code。 What did we just see？ The language we program in and here's a
    little ASCII out representation of the same concept。 is called ladder logic because
    when you add a lot of rules it looks like a ladder and the。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 编程是一种编程接口，它有一个很酷的监控接口，PLC报告内部发生的情况。我的笔记本电脑并没有运行任何代码。我们刚刚看到什么？我们编程的语言，这里有一个相同概念的小ASCII输出表示，被称为梯形逻辑，因为当你添加很多规则时，它看起来像一个梯子。
- en: terminology is kind of cool。 You have a hot rail I told you the analogy is that
    it's under has voltage applied to it。 when you touch it it kind of saps you it
    feels hot。 There's a neutral rail where the current is trying to get to and we
    call those conditionals。 that we place there the contact and the outputs the coils。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 术语有点酷。你有一个“热轨”，我告诉过你这个比喻是它有电压施加在上面。当你触摸它时，它会让你感到很热。还有一个中性轨道，电流试图到达，我们称之为条件。我们将放在那里的是接触和输出的线圈。
- en: The general rule of thumb in textbook 101 is read from left to right top to
    bottom and you'll。 understand what's going on but why are we doing this stuff？
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 教科书101中的一般经验法则是从左到右、从上到下阅读，你将理解发生了什么，但我们为什么要做这些？
- en: That is how you program control systems before PLC's existed。 Those are relays。
    If you go to the top of an old building you might find an elevator control room
    that still。 has this kind of stuff in it and the way people programmed elevators
    production lines everything。 is arranged these relays and wired them up in such
    a way that the logic results in it。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是在PLC出现之前如何编程控制系统的方式。这些是继电器。如果你去一栋旧建筑的顶部，你可能会找到一个仍然有这种设备的电梯控制室，人们以这样的方式编程电梯、生产线等，连接这些继电器，使逻辑结果成立。
- en: And if you've ever used a relay you know that the place where you hook up your
    voltage。 inputs is called the contact like in that programming language which
    is used and you。 energize the coil which means the relay is activated and passes
    current through it acting。 basically like a switch。 So this is where this is coming
    from it's taking inspiration from old relay control logic。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用过继电器，你就知道连接电压输入的地方称为接点，就像在使用的编程语言中一样，你给线圈供电，这意味着继电器被激活并通过它传递电流，基本上就像一个开关。因此，这就是它的来源，它从旧的继电器控制逻辑中汲取灵感。
- en: You can have two views on this you can have the hacker news view where you think
    that。 everything is a start of opportunity and needs to be disrupted and you say
    many other industries。 are stuck in the technological dark ages the industrial
    automation community still programs。 in ladder logic。 Or oh by the way this is
    the only reference to ladder logic in 13 years of hacker news。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对此你可以有两种看法，一种是黑客新闻的观点，你认为一切都是机会的开始，需要被颠覆，并且你会说许多其他行业仍然陷入技术黑暗时代，工业自动化社区仍然在使用梯形逻辑编程。哦，顺便提一下，这是13年来黑客新闻中唯一一次提到梯形逻辑。
- en: Or you can have a slightly more like a different attitude to things and realize
    that this programming。 language has been around for 50 years so it's got to have
    something going for it and maybe。 that something is that it is truly the common
    denominator across all brands of PLC which。 you can purchase and it's part of
    the curriculum for most automation engineers and electricians。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你可以对事物持有略微不同的态度，意识到这种编程语言已经存在了50年，所以它一定有其独特之处，也许这一点就是它是真正所有品牌PLC的共同基础，成为大多数自动化工程师和电工课程的一部分。
- en: in the world they learn this as part of their degrees and that's important because
    as soon。 as this thing is programmed by whoever the automation integrator is it
    gets shipped to。 the factory and ownership transfers to the factory maintenance
    department which is staffed。 with technicians and electricians and they are now
    in charge of keeping this thing running。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个世界里，他们将其作为学位的一部分学习，这很重要，因为一旦这个东西被自动化集成商编程完成，它就会被运送到工厂，所有权转移到工厂维护部门，该部门由技术人员和电工组成，他们现在负责保持这个系统正常运行。
- en: and fixing it when it breaks sometimes for decades。 And if you think about that
    it basically means that ladder logic is a programming language。 that's purely
    designed for debugging and not at all for the person writing it which is。 kind
    of cool like none of the languages I work in every day have that trait。 Cool。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 以及在它出现故障时修复它，有时甚至持续数十年。如果你考虑这一点，这基本上意味着梯形逻辑是一种编程语言，纯粹是为调试而设计，而不是为编写它的人设计，这很酷，因为我每天工作中使用的语言没有这个特点，真不错。
- en: So we've looked at what the PLCs are about halfway point here everyone's like
    where's。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们已经看到了PLC的内容，这里是一个中间点，大家都在问：“在哪里？”
- en: '![](img/f20e69ecd8f31d8536c27fb544d7c024_9.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f20e69ecd8f31d8536c27fb544d7c024_9.png)'
- en: Python。 So second demo and I need to do a little bit of set up so you've got
    to bear with me first。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Python。因此第二个演示，我需要做一点准备，请耐心等一下。
- en: '![](img/f20e69ecd8f31d8536c27fb544d7c024_11.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f20e69ecd8f31d8536c27fb544d7c024_11.png)'
- en: of all I'm going to close this project that we've worked on little hello world
    and I opened。 up a slightly bigger one which I prepared for this talk and I'm
    going to program that。 over to the PLC。 Actually what you see here in the background
    is a bit of a design pattern in ladder logic。 you often use the main program to
    call a couple of sub tasks like subroutines the interesting。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我将关闭我们一起工作的这个小项目“Hello World”，并启动一个为本次演讲准备的稍大项目，我将对其进行编程到PLC上。实际上，你在背景中看到的有一点梯形逻辑设计模式，你经常使用主程序来调用几个子任务，比如子程序，这很有趣。
- en: one really is the pedestrian crossing one here so I switched the PLC to run
    and I switch。 on my monitoring and we'll just quickly run through this program
    as we actually run it。 So I'm going to press the button and you can watch the
    variables change on the screen。 again so we press there's a couple of timers down
    here that go in sequence they all fire。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这个是行人过街的那个，所以我切换PLC到运行状态，并开启我的监控，我们将快速运行这个程序，实际上运行它。所以我将按下按钮，你可以看到屏幕上的变量变化。再次按下，有几个计时器在这里顺序运行，它们全部触发。
- en: and are wired up so that one starts counting when the next one is done and at
    the bottom。 we have a bunch of logic that basically says which light needs to
    come on。 I totally forgot I brought one of those as well。 Now what's different
    about this program compared to the one we had before that if you zoom。 in on what
    this timer is doing earlier we had a constant value here I put 200 for two。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 并且它们是连接的，一个在下一个完成时开始计数，在底部。我们有一堆逻辑，基本上是说哪个灯需要亮。我完全忘了我也带了一个。现在这个程序与之前的程序不同的是，如果你放大。看一下这个计时器早些时候我们在这里有一个常数值，我设置了200。
- en: seconds and now I put a variable there。 It's actually a bit of a luxury that
    we have variable names in PLC some of them used to。 use memory addresses this
    one hopefully has this tag database which lists all the variables。 we have to
    map them to memory address so we have our DI's， DQ's， bunch of like timer。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我放了一个变量在那里。实际上，拥有变量名在PLC中是一种奢侈，有些以前是使用内存地址的，希望这个有标签数据库，可以列出我们所有的变量。我们必须将它们映射到内存地址，所以我们有DI、DQ，还有一堆计时器。
- en: '![](img/f20e69ecd8f31d8536c27fb544d7c024_13.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f20e69ecd8f31d8536c27fb544d7c024_13.png)'
- en: done variables and all the way at the bottom are my timer durations and you
    can see that。 something's different about them they have this mod start and mod
    end which are addresses。 in a protocol called modbus。 So what's going on here
    is that obviously people wanted to wire these controllers together。 so they developed
    a number of protocols where PLC's can write into each other's memory and。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 完成变量，而在底部是我的计时器持续时间，你可以看到它们有些不同，它们有这个mod start和mod end，这是一个名为modbus的协议中的地址。所以这里发生的事情显然是人们希望将这些控制器连接在一起，因此他们开发了多种协议，让PLC可以相互写入对方的内存。
- en: the way this particular protocol works is that you give a numeric address for
    certain。 variables and then they become accessible over the network。 This was
    meant for other PLC's but we have computers now so we can pretend to be a PLC。
    on your computer by doing pip install pi modbus and I came prepared so I have
    it already。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这个特定协议的工作方式是，你给某些变量一个数字地址，然后它们就可以在网络上访问。这是为其他PLC设计的，但我们现在有计算机，所以我们可以通过在计算机上运行`pip
    install pi modbus`假装成PLC。我已经准备好了，我已经安装好了。
- en: so we're going to write a little bit of script to talk to the PLC。 I'm running
    a bit behind so I'm going to use that arrow up trick to autocomplete a number。
    of times here so we get a modbus client we connect to our PLC which is an IP address。
    and then using this client we can do things like read those registers and I just
    know。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们将写一点脚本与PLC通信。我有点落后，所以我将使用向上箭头技巧来自动完成一些数字。我们获得一个modbus客户端，连接到我们的PLC，这是一个IP地址。然后使用这个客户端，我们可以做一些事情，比如读取那些寄存器，我刚知道。
- en: that I have to start at address 0 and go for 12 and voila we have our numbers
    that are。 the durations for our timers。 That's cool we can also write them and
    I'm going to use that feature to fix the traffic。 light because why would pedestrians
    have to wait for two seconds until it even switches。 to yellow let's make that
    100 milliseconds。 By the way that's zero that's kicking around over here that's
    a bit of a quirk of the protocol。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我必须从地址0开始，走12步，瞧，我们有了计时器的持续时间。这很酷，我们还可以写它们，我将利用这个功能来修复交通灯，因为为什么行人要等两秒钟才能切换到黄色呢？让我们把它改成100毫秒。顺便提一下，那边的零是这个协议的一个小怪癖。
- en: I don't have time to explain that we just have to accept that we keep reading
    and writing。 a zero after the numbers we care about。 So now I set the first variable
    to 10 instead of 200 you can read that right back what that。 means you press the
    button and instantaneously goes to yellow that's cool we fix the traffic。 light
    pedestrians are happy but word gets out that we are now the traffic engineer of
    our。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我没有时间解释，我们只需接受我们在关心的数字后面不断读写零。所以现在我将第一个变量设置为10，而不是200，你可以马上读到那意味着什么，你按下按钮，瞬间变成黄色，这很酷，我们修复了交通灯，行人们很高兴，但消息传出我们现在是交通工程师了。
- en: city so the treasurer comes in and says you know we installed that red light
    camera but。 we never catch anyone can we make yellow shorter。 You're like I don't
    know but you're the treasurer you pay my salary so I guess let's make it。 a second。
    Here we go out to test yellow for one second red immediately drivers get caught
    but the。 safety officer comes in and says we keep having all these pedestrian
    accidents can we maybe。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 市财务主管说，我们安装了红灯摄像头，但从未抓到任何人，能不能缩短黄灯的时间？你心想，我不知道，但你是财务主管，你的薪水由我支付，所以我想就缩短一秒。于是我们开始测试，黄灯一秒，红灯立刻亮起，司机被抓，但安全官员进来说，我们不断发生行人事故，能否减少过路车辆？
- en: make the time when the red is on for the traffic and the don't walk is still
    on for the pedestrians。 a little bit longer so that there's a buffer。 So you're
    like I know that's at register address four I'm going to make that four seconds。
    for you got to try it out one second of yellow one two three four pedestrians
    and everyone's。 happy city makes a lot of money from the red light camera no insurance
    claims coming in。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你会想，我知道那是寄存器地址四，我将把它设定为四秒。你得试一下，黄灯一秒，数到四，行人满意，城市从红灯摄像头获得了很多收入，保险索赔没有出现。
- en: from the pedestrian accidents you have money to hire a chief data officer for
    your city。 they come in and they're like hey so there's always these discussions
    about traffic light。 timing can't we use like machine learning and you're like
    oh man so you're like all right。 let's import machine learning let's run some
    machine learning oh these are some good traffic。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 从行人事故来看，如果你有钱雇用一个首席数据官，他们会说，关于红绿灯的时机总是有讨论，难道不能用机器学习吗？你心想，这太疯狂了，于是决定引入机器学习，开始运行一些有用的流量分析。
- en: light times how about we write them to the traffic light so we started address
    zero we。 run machine learning we program into the traffic light we press the button
    oh that must be。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何将红绿灯的时长写入系统，所以我们从地址零开始，运行机器学习，将程序输入交通信号灯，按下按钮，这必须是对的。
- en: '![](img/f20e69ecd8f31d8536c27fb544d7c024_15.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f20e69ecd8f31d8536c27fb544d7c024_15.png)'
- en: a case of bias in machine learning it's biased towards runners because our data
    set was collected。 when the data marathon came through town all right the example
    is getting a bit silly。 but I'm using it to make a point obviously there's a lot
    of discussion in industry right。 now what's the what the right way to connect
    the low level control programs running on a。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在机器学习中出现偏见的一个案例是，它偏向于跑步者，因为我们的数据集是在马拉松比赛期间收集的。这个例子有点搞笑，但我用它来强调一个观点，显然行业内有很多讨论。现在，如何将低级控制程序与现代软件工程连接起来是正确的方式。
- en: PLC how to connect them to the sort of modern innovations in software engineering
    that often。 run in the cloud and the buzz words here are often I IOT industry
    which stands for industrial。 Internet of Things and or if you're in Europe they
    say industry 4。0 but actually mean the。 same thing and one way I like to think
    about is that there are really two control loops。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: PLC如何与现代软件工程的创新连接，这些创新往往在云端运行，这里经常提到的流行词是工业物联网（IOT），如果你在欧洲，他们称之为工业4.0，但实际上是同一回事。可以认为有两个控制循环。
- en: running one is the control loop that controls that runs in the PLC and controls
    the field。 devices and that runs in the sort of millisecond iteration cycle that
    interfaces with the physical。 world and does all the things that are timing critical
    or safety critical and it really。 implements like the loss of nature and the loss
    of the road like don't show a green to。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 运行的控制循环是在PLC中控制现场设备的，采用毫秒级的迭代周期与物理世界接口，处理所有时间关键或安全关键的事情，真正实现像自然法则和道路法则一样的功能，例如，在红灯和行人禁止通行时延长一些时间，以留出缓冲。
- en: both crossing traffic because you will have accidents and you will get sued
    the other control。 loop is the one that is influencing the parameters of the inner
    control loop and can do things。 like adjust to the time of day to the traffic
    situation elsewhere in the city to maybe insights。 gain from data science and
    that control loop is running much less frequently either minute。
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 因为会发生事故，你会被起诉，另一个控制循环是影响内控制循环参数的，它可以根据时间、城市其他地方的交通状况，甚至从数据科学获得的洞察来调整，这个控制循环的运行频率较低，可能是每分钟一次。
- en: sometimes only every couple of months and that's the one that has the ability
    to do non real。 time things things that take an unpredictable amount of time talk
    to databases reach out。 to web APIs and sometimes it fails and it doesn't matter
    because the inner control loop。 keeps running and everyone is safe。 That also
    means that for the control loop the small。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 有时只需每隔几个月一次，而这个可以进行非实时操作，处理耗时不确定的任务，与数据库对接，访问网络API，有时会失败，但这并不重要，因为内部控制循环会持续运行，所有人都安全。这也意味着在控制循环中，你正在进行的工作量较小。
- en: the inner control loop running on the PLC you often have a regulated release
    cycle where。 someone needs to sign off and certifications need to be obtained
    whereas on the one that。 you implement in maybe your Python code in the higher
    level language you can continue。 running your regular software release cycle with
    maybe biweekly sprints or whatever it。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在PLC上运行的内部控制循环通常有一个受监管的发布周期，需要有人签字并获取认证，而在你可能用更高级别语言实现的Python代码中，你可以继续按照常规软件发布周期进行，可能是每两周一次的冲刺，或者其他什么方式。
- en: is you're doing。 Now come a couple of busy slides you're not meant to read all
    of them。 but we looked at modbus and it's an okay protocol you need to know like
    weird numbers。 there's zero floating around but not。 There are many other protocols
    out there in fact。 there's a list of industrial communication protocols in Wikipedia
    which has about I think。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是几张繁忙的幻灯片，你并不需要逐一阅读，但我们看了modbus，这是一种还不错的协议，你需要了解一些奇怪的数字，零在这里徘徊，但没有。实际上还有许多其他协议，维基百科上有一份工业通信协议的列表，大约有。
- en: 50 entries and I what I did here is I listed all the ones for which we have
    Python packages。 on PIPI。 The first slide out of vendor specific ones so if you
    purchase a PLC from one of。 those vendors you are in luck because someone has
    put in the effort to implement this in。 Python and you can just interface with
    it。 If however you do not purchase a PLC that is。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 50个条目，我在这里做的是列出所有我们有Python包的条目，在PIPI上。第一张幻灯片是一些特定供应商的条目，因此如果你从其中一个供应商那里购买了PLC，那你真是幸运，因为有人已经付出了努力在Python中实现了这个，你可以直接与之接口。如果你没有购买PLC，那情况就不同了。
- en: supported by one of those you have to go to this slide which lists all the open
    standards。 that have been developed mostly for machine-to-machine communication
    that we can tap into。 The list。 is significantly longer I only include the ones
    for which Python packages exist and it。 sort of gets the difficulty increases
    from top to bottom。 So at the very top I have modbus。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你支持其中之一，你需要查看这一张幻灯片，上面列出了大多数为机器对机器通信开发的开放标准，我们可以利用。这个列表显著更长，我只包括了那些存在Python包的条目，并且从上到下的难度逐渐增加。因此在最上面我有modbus。
- en: which is like the grandpa of the protocols。 40th birthday is here。 We've covered
    this。 and there are variants for serial port and network port。 Then come the TCPIP
    based standards。 which are affectionately known as the office communications networking
    standards by the。 industrial automation community because you don't really have
    any real time guarantees。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这就像协议的祖父，40岁生日到了。我们已经覆盖了这个，还有串口和网络端口的变种。接下来是基于TCPIP的标准，工业自动化社区亲切地称其为办公室通信网络标准，因为你并没有真正的实时保证。
- en: you don't know how long it takes for the message to arrive。 That protocol has
    been built for。 resilience against error not for time-critical delivery of messages。
    There are a couple of。 industrial standards that do support this。 Three of them
    are listed here。 A couple others。 you might have to put in some extra work to
    build your own library and it's actually not， that hard。
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你不知道消息到达需要多长时间。该协议是为抵御错误而构建的，而不是为消息的时间关键交付而设计。有几个工业标准确实支持这一点。这三种在这里列出。其他几种你可能需要多花一些力气来构建自己的库，但实际上并不难。
- en: You get the standards document， import socket， import C-types and you just。
    start hacking away implementing the right order of bytes to talk to the machines。
    It gets a。 little bit harder in the third box because those are the things where
    you still use the。 ethernet cable but no TCPIP。 No more IP addresses for identifying
    other participants in networking。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你获取标准文档，导入socket，导入C-types，然后你就开始实现与机器通信所需的字节顺序。第三个框中的事情会稍微复杂一些，因为那些仍然使用以太网电缆，但不再使用TCPIP。不再有IP地址来识别网络中的其他参与者。
- en: You can still do that。 First of all， I should say， there's only one protocol
    supported by。 Python package。 There are about 30 others that do not exist on PyPI。
    Some of them you。 can't because you cannot achieve the time considerations but
    the others you could do。 with sockets and C-types。 I actually learned about this
    by reading some of those packages。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你仍然可以这样做。首先，我应该说，只有一个协议是 Python 包支持的。大约还有 30 个其他协议在 PyPI 上不存在。其中一些你无法实现时间要求，但其他的你可以用套接字和
    C 类型实现。实际上，我是通过阅读一些这些包了解这一点的。
- en: mentioned in the small frontier raw socket and Dnet to understand how you do
    networking。 in an environment where IP addresses aren't a thing which was news
    to me。 If you find yourself。 all the way at the bottom， sorry for you because
    those are really standards that require custom。 hardware and sometimes custom
    types of cables and your best shot if you have to tap into。
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 提到在小型前沿原始套接字和 Dnet 中了解如何进行网络连接。在一个 IP 地址并不存在的环境中，这让我感到惊讶。如果你发现自己在底部，对不起，因为那些真的需要定制硬件和有时是定制类型的电缆，而你最好的选择是如果你必须接入的话。
- en: that is to purchase a conversion hardware or a gateway hardware that turns that
    traffic。 into network traffic for you。 Two examples。 PyADS is an implementation
    of。
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要购买一个转换硬件或网关硬件，将这些流量转换为网络流量。两个例子。PyADS 是的实现。
- en: '![](img/f20e69ecd8f31d8536c27fb544d7c024_17.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f20e69ecd8f31d8536c27fb544d7c024_17.png)'
- en: back-offs ADS protocol。 Don't read all of it。 It looks very similar to Modbus
    with one。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 后退 ADS 协议。不要全部阅读。它看起来非常像 Modbus。
- en: '![](img/f20e69ecd8f31d8536c27fb544d7c024_19.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f20e69ecd8f31d8536c27fb544d7c024_19.png)'
- en: difference that you can reference variables by name and you can subscribe to
    changes。 Another one I really have to mention is OPC UA for which the amazing
    free OPC UA project， exists。 OPC UA is really the only one of those standards
    that you and I would recognize as。 having a beautiful API。 One of the cool features
    about it is that it is discoverable。 You point。
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 区别在于你可以按名称引用变量并且可以订阅更改。另一个我真的必须提到的是 OPC UA，令人惊叹的免费 OPC UA 项目存在。OPC UA 实际上是我们可以认可的这些标准中唯一一个拥有漂亮
    API 的标准。它的一个酷功能是它是可发现的。你只需指向。
- en: at the device， you connect to it and you can discover a tree of objects that
    represent。 the variables and methods exposed by the device。 I'm also mentioning
    this because the free。 OPC UA project has a number of Python packages in it that
    implement the standard， a client。 and server。 Another one with client and server
    and pure async IO and one called OPC UA client。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在设备上，你连接到它并可以发现一个代表设备所暴露的变量和方法的对象树。我提到这一点是因为免费的 OPC UA 项目中有许多实现标准的 Python 包，包括客户端和服务器。另一个是带有客户端和服务器以及纯异步
    IO 的，还有一个叫做 OPC UA 客户端。
- en: which is this GUI based thing that I have on the screen here。 It's very actively
    maintained。 and really welcomes participation。 If you're into this kind of stuff，
    you should check it， out。 I reviewed 40-ish packages。 I'm also running out of
    time in this talk so I'm going。 to blast through this。 A couple of things that
    really surprised me。 There's a lot of activity。
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我在屏幕上看到的基于 GUI 的东西。它得到了非常积极的维护，并真正欢迎参与。如果你对这类东西感兴趣，应该去看看。我审查了大约 40 个包。我在这个演讲中也快没时间了，所以我要快速浏览。一些让我感到惊讶的事情是，活动很多。
- en: recently。 Many packages have been started。 In the last year， many of them are
    actively maintained。 Many Python 3 only， very few Python 2 only， which really
    tells me that this is a space。 that's gaining traction compared to when I first
    did automation with Python about five， years ago。 Most of the activity is based
    in Europe which influences which brands are supported。
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，许多包已经启动。在过去的一年中，许多包得到了积极维护。许多仅支持 Python 3，很少支持 Python 2，这让我意识到这是一个正在增长的领域。与我大约五年前用
    Python 进行自动化时相比，大部分活动都集中在欧洲，这影响了支持的品牌。
- en: and which protocols because there are some regional preferences between Europe
    and America。 mostly on what's supported so you might see a preference towards
    things that are popular。 in Europe and just surprising to me a lot of overlap
    with the home automation community。 which I guess I was totally not aware of before
    preparing for this talk。 Cool。 Talked about， Python。
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 而且协议之间存在一些地区偏好，主要是关于支持的内容，所以你可能会看到对在欧洲流行的事物的偏好，这让我感到惊讶的是与家庭自动化社区有很多重叠，我想在准备这个演讲之前我完全没有意识到。酷。谈到了，Python。
- en: So whenever you talk about industrial automation， someone comes out of the woodworks。
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 所以每当你谈论工业自动化时，总会有人突然冒出来。
- en: '![](img/f20e69ecd8f31d8536c27fb544d7c024_21.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f20e69ecd8f31d8536c27fb544d7c024_21.png)'
- en: and asks， "I have a Raspberry Pi at home。 It cost me 30 bucks。 It can do all
    of the things。
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 并问道：“我在家有一个树莓派。它花了我30美元。它可以做所有事情。”
- en: '![](img/f20e69ecd8f31d8536c27fb544d7c024_23.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f20e69ecd8f31d8536c27fb544d7c024_23.png)'
- en: you just said。" And the canonical answer to that is， no， it can't。 Your Raspberry
    Pi will。 probably die in places that PLCs work because it's too cold， too hot，
    too humid， too salty。 It doesn't work next to welding machines because of electromagnetic
    interference。 It。 doesn't have ESD protection so you blow up the chemicals factory，
    plug in the sensor。
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚才说过。“对此的标准回答是，不，它不能。你的树莓派可能会在PLC工作的位置死掉，因为那里太冷、太热、太潮湿、太咸。它无法在焊接机旁边工作，因为有电磁干扰。它没有ESD保护，所以当你插入传感器时，会导致化工厂爆炸。
- en: the wrong way around， you fry your Raspberry Pi。 It doesn't even mount to those
    din rails。 and work with the power supplies always used in most factories。 And
    the manufacturer doesn't。 really give you supply chain guarantees。 If you actually
    buy a PLC， you often have a。 guarantee that spare parts are available for several
    decades。 So currently you see dates。
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用错误，你会烧坏你的树莓派。它甚至不能安装到那些DIN轨道上，也无法与大多数工厂中使用的电源配合工作。而制造商并不真正提供供应链保障。如果你真的购买了PLC，通常会有保证，确保备件在几十年内都能提供。因此，目前你会看到日期。
- en: in the late 2020s and 2030s on manufacturer websites。 That's on the hardware
    side。 On。 the software side， I touched on this whole real-time story a couple
    of times。 PLCs are。 designed such that when you execute the code， no garbage collector
    or any of that nonsense。 comes in。 You have guarantees about how long every instruction
    takes and it's actually。
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在2020年代末和2030年代，制造商网站上出现了这样的情况。这是硬件方面的内容。在软件方面，我提到过这个实时故事几次。PLC的设计是，当你执行代码时，垃圾回收器或任何那种废话不会出现。你可以确保每条指令的执行时间，并且实际上是可以的。
- en: used in the advertisements and data sheets of TLCs for what these cycle times
    are。 All。 the other things are really reliant on the fact that there is this real-time
    guarantee。 and now comes the plot twist。 Maybe your Raspberry Pi is a PLC。 So
    next to two slides。 list a few projects that actually give you trades of PLCs
    in Raspberry Pi。 I should say， first。
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 用于TLC广告和数据表中的周期时间。所有其他内容实际上都依赖于这个实时保障。现在来了剧情反转。也许你的树莓派就是一个PLC。因此在接下来的两张幻灯片中，列出了一些项目，实际上在树莓派上提供了PLC的功能。我应该首先说。
- en: if you don't care about any of the things on the previous slide， I mean use
    your。 Raspberry Pi as is。 If you do care about them though， you might be interested
    in these things。 A very popular one to turn your Raspberry Pi into a PLC at least
    software-wise is CODES。 for Raspberry Pi。 Now， the code is a package that exists
    for many types of PLCs and hardware。
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不在乎前一张幻灯片上的任何内容，我的意思是就按原样使用你的树莓派。如果你在乎这些内容，你可能会对这些事情感兴趣。一个非常流行的方法是将你的树莓派至少在软件层面上变成PLC，即CODES。对于树莓派。现在，代码是一个适用于多种PLC和硬件的包。
- en: and the way it works is that they developed a real-time kernel that lives next
    to your。 main operating system， in this case， Raspbian， that reserves some of
    the CPU capacity for。 real-time computations。 So they can have these real-time
    guarantees。 And then you use their。 free editor to write code that is compatible
    with that real-time environment。 All the other。
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 它的工作原理是，他们开发了一个实时内核，和你的主操作系统（在这种情况下是Raspbian）并行运行，保留一些CPU容量用于实时计算。这样，他们可以提供实时保障。然后，你使用他们免费的编辑器编写与该实时环境兼容的代码。所有其他。
- en: projects on here do the same。 Open TLC is a very cool open source project， actually
    written。 in Python that has an editor and one of those real-time environments。
    So that's worth checking。 out and PiLC is slightly more limited in scope because
    it tries to emulate a proprietary。 Siemens programming language but also has a
    runtime for Raspberry Pi。 If you need the。
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的项目也做同样的事情。Open TLC是一个非常酷的开源项目，实际上是用Python编写的，包含一个编辑器和一个实时环境。因此，这值得检查一下。PiLC的范围稍微有限一些，因为它试图模拟一种专有的西门子编程语言，但也有适用于树莓派的运行时。如果你需要。
- en: hardware stuff， you've got some products too。 Two options really broadly speaking。
    You can。 either take the vanilla Raspberry Pi and add an add-on module to it that
    brings all the。 cool stuff you need like a rugged power supply， isolated IO， very
    supportive， very scan bus。 and stuff like that。 And that's what Pi extend and
    Anduino， which I found out about， really late。
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 硬件产品，你也有一些产品。大致来说有两个选项。你可以选择普通的树莓派，添加一个附加模块，使其具备所有你需要的酷炫功能，比如坚固的电源、隔离的IO、非常支持的总线等等。这就是我了解到的Pi扩展和Anduino，真的很晚才知道。
- en: which there's no details to do。 So they add an add-on to your existing Raspberry，
    Pi。 The other option that I found one manufacturer doing， that's the revolution
    Pi product， they。 actually do not take the standard Raspberry Pi that you can
    order on the internet and instead。 they only take the compute chip from it and
    replace everything else that's on the Raspberry。
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这没有具体细节。所以他们在你现有的树莓派上添加一个附加模块。我发现的另一个选择是一个制造商的产品，即革命Pi产品，他们实际上并不使用你可以在互联网上订购的标准树莓派，而是仅提取计算芯片，并替换掉树莓派上的其他所有组件。
- en: Pi board with components that meet the requirements of a PLC。 So they end up
    with a new single-board， computer that doesn't look like a Raspberry Pi but can
    fit into one of those cool enclosures。 that look exactly like a PLC。 If I had
    time， someone could come up and ask the Arduino question。 I would give a very
    similar answer to that but slightly fewer products on that list。 I'm。
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Pi板配备满足PLC要求的组件。因此，他们最终得到了一块新的单板计算机，看起来不像树莓派，但可以放入那些看起来像PLC的酷外壳中。如果我有时间，可能会有人问Arduino的问题。我会给出类似的回答，但列表上的产品会稍微少一些。我是。
- en: '![](img/f20e69ecd8f31d8536c27fb544d7c024_25.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f20e69ecd8f31d8536c27fb544d7c024_25.png)'
- en: out of time though and everyone says， "Hey， John， let's have lunch。 What should
    I do next。
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 不过没时间了，大家都说，“嘿，约翰，我们去吃午饭。接下来我该做什么？”
- en: '![](img/f20e69ecd8f31d8536c27fb544d7c024_27.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f20e69ecd8f31d8536c27fb544d7c024_27.png)'
- en: if I want to learn more about this PLC stuff？" So I prepared this last slide
    for you which。 on the left lists things that you might want to try out next and
    next to it on the right。 has a couple of products and projects listed that might
    move you in this direction。 Also。 there are a couple of appendix slides that you
    can look up online with longer lists of things。
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我想了解更多关于PLC的内容？因此我为你准备了最后一张幻灯片，左侧列出了你可能想尝试的东西，右侧列出了一些可能会让你朝这个方向前进的产品和项目。此外，还有几张附录幻灯片，你可以在网上查看更长的清单。
- en: It goes from everything like free online simulators for ladder logic to using
    equipment that's。 actually used in real factories which you often can buy on eBay。
    One word of warning on those。 if you want to work with tools from the market leaders
    which in the US is Alan Bradley and。 Europe and most of the rest of the world
    is Siemens and sometimes Mitsubishi， they can。
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这涵盖了从免费的在线梯形逻辑模拟器到实际用于真实工厂的设备，你经常可以在eBay上购买。对此我有一句警告，如果你想使用市场领导者的工具，在美国是Allen
    Bradley，而在欧洲和世界大部分地区是西门子，有时还有三菱，他们可能。
- en: use software as a revenue source so they try to big license fees for the programming
    environment。 If you go for smaller vendors you often get the programming environment
    for free sometimes。 with a simulator。 Alright， that's my last slide。 I don't have
    time for questions but I did schedule。 an open space this afternoon where everyone's
    welcome to stop by， ask questions， play with。
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 使用软件作为收入来源，因此他们会对编程环境收取高额许可费。如果你选择较小的供应商，通常会免费获得编程环境，有时还附带一个模拟器。好的，这是我的最后一张幻灯片。我没有时间回答问题，但我确实安排了今天下午的开放空间，欢迎大家来询问问题，玩玩。
- en: the traffic light and the PLC。 Obviously if you're watching this on YouTube
    you can't come so。 my contact details are also on the slide and one last thing，
    my work has given me a lot。 of slack recently for preparing all this stuff time
    often things。 I lead a team of automation。 engineers using Python to automate
    a biotech factory。 No ladder logic involved and we are。
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 交通信号灯和PLC。显然，如果你在YouTube上观看这个，你无法过来，所以我的联系方式也在幻灯片上，最后一件事，我的工作最近给予了我很多灵活性，以准备所有这些东西。通常我领导一个自动化工程师团队，使用Python来自动化生物技术工厂。没有涉及梯形逻辑，我们正在。
- en: currently five people， we're getting ready to hire our six and we still have
    a slot open。 for a summer intern if you're kind of running late so if that's interesting
    you should also。 come talk to me。 That's all from me， thank you。
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 目前有五个人，我们正在准备招聘第六个人，仍然有一个暑期实习生的名额，如果你有点晚的话，如果这让你感兴趣，你也可以来跟我聊聊。这就是我的全部，谢谢。
- en: '![](img/f20e69ecd8f31d8536c27fb544d7c024_29.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f20e69ecd8f31d8536c27fb544d7c024_29.png)'
- en: '[APPLAUSE]， [BLANK_AUDIO]。'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '[掌声]，[空白音频]。'
