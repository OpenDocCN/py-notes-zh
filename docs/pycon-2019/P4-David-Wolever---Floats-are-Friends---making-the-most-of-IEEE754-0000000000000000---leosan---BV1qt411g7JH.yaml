- en: P4：David Wolever - Floats are Friends - making the most of IEEE754.0000000000000000
    - leosan - BV1qt411g7JH
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P4：大卫·沃利弗 - 浮点数是朋友 - 最大化使用IEEE754.0000000000000000 - leosan - BV1qt411g7JH
- en: Good morning everyone。 We're going to get started。 So today we have David， we
    have David， Wooliver。 He is the founder of PyCon Canada。 He will be talking about
    floats are friends。 making the most of IEEE 754。 We will not be taking Q&A if
    you have questions。 He will。 be outside the door after the talk。 Please give a
    warm welcome to David。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 大家早上好。我们要开始了。所以今天我们有大卫，沃利弗。他是PyCon Canada的创始人。他将讲述浮点数是朋友，最大化使用IEEE 754。如果你有问题，我们将不进行问答。他在演讲结束后会在门外。请热烈欢迎大卫。
- en: '![](img/eedb333dff5ecd91a4f28a1eb20fd5a2_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eedb333dff5ecd91a4f28a1eb20fd5a2_1.png)'
- en: Yeah， hey folks。 My name is David Wooliver and I am super excited to be here
    today to talk。 to all of you about floating point numbers。 I'm curious， though，
    what the heck are you， doing here？
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 嗨，大家好。我是大卫·沃利弗，我非常兴奋今天能在这里和大家谈谈浮点数。不过，我很好奇，你们到底在这里做什么？
- en: There are lots of other great talks。 Why do you want to hear about floats？
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 还有很多其他精彩的演讲。你为什么想听关于浮点数的内容？
- en: If you don't mind sending me a tweet right there and letting me know what brought
    you， to this talk。 as opposed to any other great talks， I would really like to
    hear it。 The。 second small for the folks up front， if you don't mind grabbing
    a photo or two of me。 I would love to have something to show my mom。 Thank you。
    And finally， I need to apologize。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不介意发个推特告诉我是什么让你来到这个演讲的，而不是其他精彩的演讲，我非常想听听。第二个小请求，前面的朋友们，如果你不介意给我拍一两张照片，我会很高兴有一些东西给我妈妈看看。谢谢。最后，我需要道歉。
- en: for the artistic license that I took with the talk title。 754 can be exactly
    represented。 in floating point。 I'm sorry。 So， over the course of this talk， I
    would like to tell。 you a bit more about what floats are， how they work， and why
    they do the weird things， that they do。 because they definitely aren't the best。
    But also， they're not the absolute， worst。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我在演讲标题中所采取的艺术许可。754可以在浮点数中精确表示。抱歉。所以，在这次演讲中，我想多告诉你一些关于浮点数是什么，它们是如何工作的，以及它们为何会做出奇怪的事情，因为它们绝对不是最好的。但同时，它们也不是绝对最糟的。
- en: And regardless of any of that， we are absolutely stuck with them。 So， hopefully。
    by the end of this talk， I don't expect you to like them。 But at least， I hope
    you'll。 understand them a little bit better。 So， to understand floats， we need
    to take a step。 back and look at why floats exist。 And to understand that， we
    need to look at how numbers are。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 不管怎样，我们绝对是要面对它们。所以，希望在这次演讲结束时，我并不期望你会喜欢它们。但至少，希望你能稍微更好地理解它们。因此，要理解浮点数，我们需要后退一步，看看浮点数存在的原因。为了理解这一点，我们需要了解数字是如何的。
- en: represented in computers。 So， whole numbers， integers， those are pretty straightforward。
    We take a chunk of memory， and within that chunk of memory， there's a nice one-to-one。
    mapping between the binary numbers we can represent there and the whole numbers
    that。 we're used to dealing with every day。 Our ones are twos， our fives， et cetera。
    And the way。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机中表示的。所以，整数，这些相当直接。我们取一块内存，在那块内存中，二进制数和我们日常处理的整数之间有一个很好的一对一映射。我们的1是2，我们的5等等。而这个方式。
- en: we do that representation is more or less what you're used to if you've done
    any reading。 on binary notation。 Now， one thing you'll notice is， in this example，
    I'm not including。 any negative numbers。 And those are done with a representation
    called twos complement。 Twos。 complement is， in my opinion， an absolute thing
    of beauty。 And I'd really suggest you。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所做的表示法或多或少是你如果有任何阅读经验的话，所习惯的。关于二进制表示法。有一点你会注意到的是，在这个例子中，我没有包括任何负数。负数是用一种叫做二的补码的表示法来表示的。二的补码，在我看来，是一种绝对的美。真心建议你。
- en: go look it up after the talk。 But， unfortunately， this is about floats， so we
    can't get into。 that here。 Anyway， whole numbers， integers and computers， those
    turn out to work pretty， well。 With a 32-bit int， we get to represent numbers
    between about 2 billion and negative， 2 billion。 And then if we pump that up to
    a 64-bit long， we can go up to 9 quadrillion。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 演讲后去查一下。但不幸的是，这里讲的是浮点数，所以我们不能深入讨论。总之，整数和计算机的整个数字表现得相当好。使用32位整数，我们可以表示大约20亿到负20亿之间的数字。如果我们将其提升到64位长整数，能表示高达9千万亿。
- en: And it turns out that for the integers， for the whole numbers， that we deal
    with data， programmers。 the numbers that occur in the real world， that range is
    actually really， sufficient。 We don't often need to go bigger or smaller than
    that。 When we start moving。 into fractional numbers， though， things get a little
    bit more difficult。 To understand， why。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，对于我们处理的数据的整数，即实际数字，那个范围实际上是相当足够的。我们通常不需要比这更大或更小。然而，当我们开始处理分数数字时，事情就变得有点困难了。想要理解原因。
- en: imagine how you might implement fractional numbers。 Well， we might say we take，
    we got。 that chunk of memory， and let's split it in half， and we'll say， okay，
    the first half。 is going to be the integral component， and the second half is
    going to be the fractional， component。 And that might look a little something
    like this。 So we could have， if we have a one。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下你如何实现分数数字。我们可以说我们取这块内存，将其一分为二，第一半将是整数部分，第二半将是小数部分。这看起来可能像这样。如果我们有一个1。
- en: in the fractional component， that's 1 over 2 to the 8， so 0。125。 If we have
    a two in the。 fractional component， that would give us 1 over 4， 0。25， and so
    on。 But one of the things。 you'll notice here is with this representation， we
    don't actually get a very large range of。 numbers that we can work with。 If we're
    only using 32 bits， the smallest number that we。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在小数部分中，这是2的8次方分之一，所以是0.125。如果我们在小数部分有一个2，那将给我们1/4，0.25，依此类推。但你会注意到，这种表示方式下，我们实际上无法处理很大的数字范围。如果我们只使用32位，最小的数字是。
- en: could represent is 1。5 times 10 to the negative 5， so that's like a decimal
    place， 4， 0s， and。 a 1 and a 5。 And the largest number is a measly 131，000。 We
    could go up and use， say， 64 bits。 instead， where we have 32 bits before the decimal
    place and 32 bits after the decimal， place。 And that will buy us quite a bit more
    space。 We can go down to 10 decimal places。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 可以表示的是1.5乘以10的负5次方，所以这就像小数点前有4个0和一个1和一个5。而最大的数字只是131,000。我们可以使用，比如说，64位，而不是之前的小数点前32位和小数点后32位。这将给我们带来更多的空间。我们可以降低到10位小数。
- en: of precision approximately， and we can go up to numbers as big as about 4 billion。
    But， I mean。 the first caveat there is this is completely ignoring negative numbers。
    And。 the second caveat is in the real world， it turns out that when we're representing
    things。 with real numbers， the things we're representing tend to be on a much
    larger scale。 You know。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 精度大约，我们可以处理的数字可以达到大约40亿。但是，我的意思是，第一个警告是这完全忽略了负数。第二个警告是，在现实世界中，事实证明，当我们用实数来表示事物时，我们表示的东西往往是在一个更大的范围内。你知道的。
- en: we have to deal with things like the distance to Pluto， that's 7。5 billion kilometers。
    And。 we might want to represent things that are really small， like the size of
    a water molecule。 Three tenths of a nanometer。 And in this naive system that we
    had just talked through， this。 system where we're taking a certain amount of bits
    and we're fixing the position of the。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须处理像到冥王星的距离，这是75亿公里。我们可能想表示一些非常小的东西，比如水分子的大小。三分之一个纳米。在这个我们刚刚讨论的简单系统中，这个系统是我们使用一定数量的位来固定位置。
- en: decimal place， a fixed point number， if you will。 We're going to run into some
    problems。 because that range we can represent is fixed。 And it's not going to，
    in practice， be able。 to handle a lot of the numbers that we have to deal with
    in the real world。 So， I'm sure。 you're all smart programmers， your brains are
    wearing， figuring out how you're going， to fix this。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 小数点，固定点数，如果你愿意。我们会遇到一些问题，因为我们可以表示的范围是固定的。实际上，这不能处理我们在现实世界中必须处理的很多数字。所以，我相信你们都是聪明的程序员，你们的大脑正在思考如何解决这个问题。
- en: And probably what you're coming up with is a system that will look a little，
    bit like this。 where we say， "Okay， we've got the number。" And alongside that
    number， let's store a scaling factor。 So， with the distance to Pluto， that's going
    to be 7。5 and， we have a scale factor of 10。 which is going to push that 7。5 all
    the way off to the left。 And then for the very small number。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想到的是一个系统，稍微像这样。我们说，“好吧，我们有这个数字。”在这个数字旁边，我们存储一个缩放因子。所以，对于到冥王星的距离，这将是7.5，而我们的缩放因子是10，这会将7.5推到左侧。然后对于非常小的数字。
- en: like the size of a water molecule， we'll use a negative。 scale factor that'll
    push it off to the right。 So， this would be a system you could say。 this moves
    the decimal place around。 It floats the decimal place around。 It's almost like
    we've。 got a floating point。 And lo and behold， this is what floats do。 Internally
    in the computer。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 比如水分子的大小，我们会使用一个负的比例因子，将它向右推。因此，这可以说是一个系统，这样就可以移动小数点的位置。小数点在浮动。这几乎就像我们有一个浮动点。结果果然是，这就是浮动所做的。在计算机内部。
- en: floating point numbers have three different components。 The first bit in them
    is the sign。 bit that controls whether they're positive or negative。 The second
    set of bits is the， exponent。 That's basically the shifting or scaling factor
    we had just talked about。 And， finally。 the third portion is the fraction。 That's
    the actual number portion。 It's also。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点数有三个不同的组成部分。第一个位是符号位，控制它们是正数还是负数。第二组位是指数。基本上就是我们刚刚讨论的位移或缩放因子。最后，第三部分是小数部分。这是实际的数字部分。它也是。
- en: called the mantissa if you're trying to sound fancy。 So， you calculate the value
    of the floating。 point number by taking the sign， multiplying that by 2 to the
    power of the exponent and。 multiplying that by the fraction。 If you've ever worked
    with scientific notation before。 this is exactly the same thing just in base two。
    This is just base two scientific notation。 So。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要听起来高大上的话，称之为尾数（mantissa）。所以，你通过取符号，乘以指数的2的幂，然后乘以小数部分，来计算浮点数的值。如果你之前接触过科学计数法，这和二进制的情况是完全一样的。这就是二进制科学计数法。
- en: to get concrete with an example here， let's say we want to represent 0。5。0。5。
    It's。 a really nice easy fraction to represent because it's 1 over 2 or 2 to the
    power of， negative 1。 So。 we're going to have a sign of 0 because it's positive。
    And an exponent， of 4。 Now。 the exponent of 4 is a bit weird here。 And that's
    because exponents are what's， called biased。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了具体举个例子，假设我们想表示0.5。0.5。这是一个非常好且容易表示的分数，因为它是1/2，或者是2的负1次方。因此，我们将有一个符号为0，因为它是正数。指数为4。现在，4的指数有点奇怪。这是因为指数是所谓的偏置。
- en: Since we need to represent both positive and negative exponents， there's a。
    fixed bias that we introduced。 In this case， we're going to use 3 and， oh yeah，
    that shows。 up pretty well。 And we deduct whatever exponent is stored in the number
    from that bias to get。 the actual value。 And finally， we just want half， so we
    multiply it by 1。 A couple of。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们需要表示正负指数，因此引入了一个固定的偏置。在这种情况下，我们将使用3，哦，是的，这样显示得很好。我们从偏置中减去存储在数字中的指数，以获得实际值。最后，我们只想要一半，因此乘以1。几次。
- en: other examples。 3。25。 That would be 2 to the power of negative 2。 So， 0。25 times
    13。 Or。 a negative number， we have a 1 in the sign bit。 We're trying to represent
    negative 88。 So。 the exponent is going to be 4， which is just 2 to the power of
    4， 8。 And multiply， that by 11。 Sorry， 2 to the power of 3。 Excuse me。 4。 But
    that's bad。 Anyway， we have， a lot more。 Anyway。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 其他例子：3.25。这是2的负2次方。因此，0.25乘以13。或者，对于负数，我们在符号位上有1。我们想表示负88。因此，指数是4，也就是2的4次方，8。然后乘以11。抱歉，2的3次方。抱歉，4。但这很糟糕。不管怎样，我们有很多更多。不管怎样。
- en: this is neat。 So， we've got this number system。 And you can see how。 we can
    scale to represent numbers that are either very small or very large。 And to give。
    you an idea of the actual practical range of that system， 32-bit floats。 So， these
    are。 the kind of older school floats that systems used to use in the past。 They've
    got an exponent。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这很不错。所以，我们有这个数字系统。你可以看到我们如何缩放来表示非常小或非常大的数字。为了给你一个关于该系统实际范围的概念，32位浮点数。这些是过去系统使用的那种较旧的浮点数。它们有一个指数。
- en: that's 8 bits long and a fractional component that's 23 bits long。 And 64-bit
    floats， doubles。 These are the default whenever you have a float in just about
    any modern computer or。 programming language。 They've got an 11-bit exponent and
    a whole 52 bits of a fractional， component。 So， they can represent numbers that
    are as small as a decimal place with 300， zeros behind it。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 它的长度是8位，分数部分的长度是23位。64位浮点数，双精度。这是你在几乎所有现代计算机或编程语言中使用浮点数时的默认设置。它们有11位指数和52位的分数部分。因此，它们可以表示像小数点后有300个零那么小的数字。
- en: And as large as a one with 300 zeros behind it。 So， this is pretty good。 We've
    got a pretty large range of numbers we can represent there。 But， you know， as
    with。 everything， there is a trade-off here。 And the trade-off that floating point
    numbers。 make is between precision， so that is how small can our numbers get and
    magnitude。 How。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个后面有300个零的数字。所以，这个范围相当不错。我们可以表示一个相当大的数字范围。但是，正如一切事物一样，这里也有取舍。浮点数的取舍在于精度，即我们的数字可以变得多小和数量级。如何。
- en: big can the numbers get？ So， for instance， we can measure the distance to Pluto。
    But that。 measurement won't necessarily be accurate and precise down to the meter。
    And we can also。 very precisely measure the size of a water molecule。 But we're
    going to run into some。 trouble if we need to， say， measure a billion of them
    at the same time。 So， to give you a。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 数字可以变得多大呢？例如，我们可以测量到冥王星的距离。但是，这个测量不一定精确到米。而且我们也可以非常精确地测量水分子的大小。但是如果我们需要同时测量十亿个水分子，就会遇到一些麻烦。因此，给你一个。
- en: concrete example of what that precision error might look like。 Let's say we
    have a， smallish number。 0。1 or 0。1。 And we have a very large number， 1 E20。 Just
    the exponential， notation there， the 1 E20。 means a 1 followed by 19 zeros。 And
    if we try to add 1 to 1 with， 19 zeros after it。 you'll notice that the magnitude
    of that large number just completely。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 精度误差的具体例子可能是什么样的。假设我们有一个小数字0.1或0.1。还有一个非常大的数字1E20。仅仅是指数表示法，1E20意味着1后面跟着19个零。如果我们尝试将1加到后面有19个零的1上。你会注意到这个大数字的数量级完全。
- en: overshadows the precision of the small number。 And the 1 is completely lost。
    In fact， it's。 as if it never existed。 So， what do you， as work-a-day programmers
    who don't want to。 get a degree in numerical analysis just to add some numbers
    together， what are you going。 to do about this？ So， the first rule of thumb that
    I want you to remember is that with a， double。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 它掩盖了小数字的精度。而这个1完全消失了。实际上，仿佛它从未存在过。那么，作为普通程序员的你，不想专门去学习数值分析只为了一起加数字，你该如何处理这个问题？所以，我希望你记住的第一个经验法则是，对于一个。
- en: so that's a 64-bit float， you get 15 significant decimal digits。 That means
    15。 of the digits in your floating point number are generally going to be reliable。
    But you're。 going to lose precision if you try and add or subtract numbers that
    are outside of， that。 have different magnitudes。 So， for example， let's say I
    want， 1， 2， 3， 4， 5 to 1 E15。 So。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 双精度浮点数（64位浮点数），你可以获得15位有效数字。这意味着浮点数中的15位数字通常是可靠的。但是，如果你尝试加减不同数量级的数字，你会失去精度。例如，假设我想将1、2、3、4、5加到1E15。
- en: 1 E15 has 15 digits。 That's safe。 And you'll notice that we get an exact result。
    But as we move up as we move up to 16 significant digits， we're going to start
    losing some。 precision。 And that problem only gets worse as the large number gets
    larger。 It is important。 to note though that multiplication and division are just
    fine。 They're not affected by this。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 1E15有15位数字。这是安全的。你会注意到我们得到一个确切的结果。但是当我们移动到16位有效数字时，我们会开始失去一些精度。这个问题随着大数字的增加而只会变得更糟。值得注意的是，乘法和除法没有问题。它们不受影响。
- en: And finally， if you do， if you are in the unfortunate situation of having to
    sum lots。 of floats together， there are very good libraries to do this。 And to
    show what they do， consider。 first this naive sum。 So， we're going to take a very
    small number， like a very large。 negative number， add 1 to it， and then add a
    very large positive number。 Ideally， we'd， get 1。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果你真的遇到不幸的情况，需要将很多浮点数相加，有一些非常好的库可以做到这一点。为了说明它们的作用，首先考虑这个简单的求和。所以，我们将取一个非常小的数字，比如一个非常大的负数，添加1，然后再添加一个非常大的正数。理想情况下，我们应该得到1。
- en: But because of that floating point rounding error， using Python's built-in sum，
    we get 0。 However。 if we go and we use math。fsum， we're going to get the exact
    result。 And this， is because math。fsum is doing something really neat under the
    hood。 What it's doing is each。 time it performs an addition， it's keeping track
    of the precision that was lost， of that。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 但由于浮点数舍入误差，使用Python内置的sum，我们得到0。然而，如果我们使用math.fsum，我们将得到确切的结果。这是因为math.fsum在内部做了一些非常巧妙的事情。每次执行加法时，它都会跟踪丢失的精度。
- en: round-off error， and storing that in a separate list。 And then once we've summed
    up all the。 numbers in the main list， we go back and sum up all the numbers in
    this round-off list。 and add that in。 So， it's going to get very precise。 The
    trade-off there， of course， is。 a runtime one。 You're doing many more additions，
    and it's more computationally expensive。 The。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 四舍五入误差，并将其存储在一个单独的列表中。一旦我们将主列表中的所有数字求和后，我们再去求和这个四舍五入列表中的所有数字，然后将其加上。因此，它会变得非常精确。当然，这里的权衡是运行时的。你需要进行更多的加法运算，而且计算成本更高。
- en: other interesting one to look at is NumPy's sum。 Now， in this case， NumPy's
    sum actually。 gets it wrong。 And that's because it's using an addition algorithm
    called addition by parts。 where it's going to take chunks of the list and sum
    them up at a time， and then sum those。 sums and sum those sums， kind of a divide-and-conquer
    type algorithm。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有趣的内容是NumPy的sum。现在，在这个例子中，NumPy的sum实际上是错误的。这是因为它使用了一种叫做分块加法的算法，它会将列表分成块并逐个求和，然后再对这些和进行求和，类似于一种分治算法。
- en: It doesn't have the strong guarantees， that Python's fsum has。 but it does have
    the advantage of being much more efficient， which is why they use it by default。
    And finally， if you truly need to do a lot of these， a， my heart goes out to you，
    and b。 you might want to take a look at the AccuPy library because。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 它没有Python的fsum那样强大的保证，但它的效率要高得多，这就是他们默认使用它的原因。最后，如果你确实需要做很多这样的操作，a，我对你表示同情，b，你可能想看看AccuPy库。
- en: they do this very fast and very accurately。 The second trade-off that I want
    to talk about。 here is the fact that every real number can't be represented by
    floating point。 In some， cases。 it's kind of obvious why we have real numbers
    that are infinite like pi or e， and。 obviously we just can't represent infinite
    numbers in a finite amount of memory。 The second。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 他们这样做得非常快且准确。我想谈的第二个权衡是，实际上并不是每个实数都能被浮点数表示。在某些情况下，很明显为什么会有像π或e这样的无限实数，显然我们无法在有限的内存中表示无限的数字。
- en: more tricky kind of number， though， is the fact that since floating point uses
    a binary， fraction。 there aren't binary fractional representations for all of
    the decimal fractions that we expect。 like common decimal fractions， like 0。1。
    0。1 is a good fraction。 But I'm sure this is a。 thing you have all run into。 And
    just if you're curious and playing long at home， when I'm。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 更棘手的数字是，由于浮点数使用二进制分数，并不是所有十进制分数都有二进制分数表示。像常见的十进制分数0.1就是一个很好的例子。但我相信这是大家都遇到过的事情。如果你在家中好奇并尝试时。
- en: showing these， showing these floating point numbers， I'm rounding them to 20
    decimal places。 and this is the code you could use。 So to understand a bit more
    why that， what's going， on here。 consider this number line。 The horizontal line
    is the continuous line of all the real， numbers。 And each of the white vertical
    lines represents a single floating point number that。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在展示这些浮点数时，我将它们四舍五入到20位小数。这是你可以使用的代码。为了更好地理解这一点，考虑这个数字线。水平线是所有实数的连续线，每条白色竖线代表一个浮点数。
- en: can be represented。 So for instance， we might have 0。51， forgive my scale， that's
    way off。 but hopefully you'll understand the idea。 So when we get a real number
    coming in， and。 we need to figure out which floating point number is nearest to
    that number and use that。 nearest floating point as an approximation。 So in the
    case of 0。1， we can't represent that， exactly。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 可以被表示。例如，我们可能有0.51，抱歉，我的比例完全偏差了，但希望你能理解这个概念。当我们得到一个实数并且需要确定哪个浮点数最接近这个数字时，我们就会使用这个最近的浮点数作为近似值。在0.1的情况下，我们无法精确表示。
- en: So we fall over to the nearest float， which is 1。005。 Or if we're representing
    pi。 that might have to round up a little bit to 1。146。 And if you're curious to
    dig into this。 the difference between that real number and the nearest number
    that's being represented， is。 is quantified with using， is measured using a technique
    called， excuse me， is measured。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们取最近的浮点数，即1.005。或者如果我们表示π，那可能需要四舍五入到1.146。如果你想深入了解这个问题，实数与最近表示的数字之间的差异是通过一种叫做技术来量化的，抱歉，我要说的是。
- en: using the relative error。 And you can go and look that up and it's very interesting。
    But， again。 to give you a really concrete example of what's going on here， let's
    say we have， 0。1 and 0。2。 When we add them together though， notice that the floating
    point number we get， by summing 0。1 and 0。2 is different from the floating point
    number that is nearest to 0。3。 Similarly。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用相对误差。你可以查阅这个内容，非常有趣。但再次强调，为了给你一个具体的例子，假设我们有0.1和0.2。当我们将它们相加时，请注意，通过将0.1和0.2相加得到的浮点数与最接近0.3的浮点数不同。同样。
- en: if we try to add 0。1 to itself 10 times， we don't actually get 1。 We get a number。
    that's very close to 1， but it's definitely not 1。 Although fortunately， multiplication。
    does typically work a bit better。 So， what are you going to do about this？ Well，
    the first。 thing that's important to remember is each time you perform a floating
    point operation。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试将0.1加到自身10次，我们实际上得不到1。我们得到的是一个非常接近1的数字，但绝对不是1。幸运的是，乘法通常效果稍好。那么，你该如何处理这个问题呢？首先，重要的是记住每次执行浮点操作时。
- en: some error is being introduced。 You do have that small round off error and it's
    just going。 to accumulate。 The only thing you can really do about that is judiciously
    round your numbers。 and that's the thing I'm going to be talking about in a second。
    The second thing that you。 remember is to be really careful when you're comparing
    floats to other floats and instead。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一些错误正在被引入。你确实会有小的舍入误差，这只是会累积。你能真正做的就是明智地对你的数字进行舍入，这也是我接下来要讨论的内容。第二件你要记住的事情是，在比较浮点数与其他浮点数时要非常小心。
- en: of using double equals equality， use something like numpy is close or even just
    write your。 own is close。 That becomes especially relevant when you're comparing
    numbers to 0。 So for， instance。 if you're taking the dot product of two vectors
    to figure out if they're perpendicular。 the number you get back might not be 0。
    It might be a very， very tiny number， but it's。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用双等于号进行比较时，使用像numpy的close这样的工具，或者自己编写一个close。这在比较数字与0时尤其相关。例如，如果你计算两个向量的点积以判断它们是否垂直，返回的数字可能不是0，而是一个非常非常小的数字，但它的。
- en: distinctly non-zero。 And the third and the very most important thing， if there's
    only。 one thing you take away from this talk， this is the important one。 It's
    that any time you're。 working with floats and you're displaying them， so after
    you've performed computations。 they need to be rounded。 You need to have some
    notion of how many decimal places are relevant。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 明确地非零。第三件也是最重要的事情，如果你只从这次演讲中记住一件事，那就是这一点。每当你处理浮点数并显示它们时，在进行计算后，它们需要被舍入。你需要有一些概念，了解在你的应用中多少个小数位是相关的。
- en: and appropriate to show for your application and any floating point numbers
    need to be。 rounded to that number of decimal places。 I was even talking with
    a friend just over lunch。 yesterday and they were telling me about a whole bunch
    of caching errors they were having。 They were getting a bunch of cache misses
    because they had a system that was caching。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 所有浮点数都需要舍入到那个小数位数。我昨天午餐时甚至和一个朋友谈到过，他们遇到了一堆缓存错误。他们因为有一个缓存系统而出现了很多缓存未命中。
- en: based on a time code and the time code is being stored as a float and that float
    was。 having exactly the kind of computational errors that I've just talked about。
    So that's some。 of the more mathematical parts。 Now I want to get into some of
    the weirder parts。 The。 first weir part of the floating point standard that I
    want to talk about is infinity。 So the。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 基于时间码，而时间码被存储为浮点数，这个浮点数正好存在我刚刚谈到的计算错误。这是一些更数学化的部分。现在我想深入探讨一些更奇怪的部分。首先，我想谈的浮点标准的奇怪之处是无穷大。
- en: floating point standard does define a representation for infinity and negative
    infinity。 That's where， all the exponent bits are set and the fractional component
    is 0。 And it's actually really neat， and kind of useful number。 It does what you
    expect。 Infinity is larger than any other number。 And I have actually used it
    a bunch if I have a loop say that needs to find the smallest。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点标准确实定义了无穷大和负无穷大的表示形式。在那里，所有的指数位都被设置，而小数部分为0。实际上，这个数字非常好用，符合你的预期。无穷大大于任何其他数字。如果我有一个循环需要找到最小值，我实际上用过很多次。
- en: or the largest item in a list and I need a good default initial value。 Infinity
    makes。 a really good default value。 It will also pop up if numbers that are very
    large overflow。 or very large negative numbers overflow negative。 And the last
    kind of exciting thing about。 it is at least according to the standard you get
    infinity or negative infinity if you divide， by 0。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 或者列表中的最大项，我需要一个好的默认初始值。无穷大是一个非常好的默认值。如果数字非常大以至于溢出，或者非常大的负数溢出为负数，它也会出现。最后一件令人兴奋的事情是，至少根据标准，如果你除以0，你会得到无穷大或负无穷大。
- en: Now fortunately Python is got our back here and they do， Python does something
    a little。 bit more sensible。 But this is important to know when you're working
    in other languages。 that aren't quite as careful about raising exceptions。 And
    to understand why it might make。 sense that dividing by 0 gives you infinity。
    I want you to consider if we were writing。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Python在这里保护了我们，它会做一些更合理的事情。但在使用其他语言时，这一点很重要，因为它们在引发异常时并不那么小心。为了理解为什么除以0可能会给你无穷大，我想让你考虑一下如果我们正在编写。
- en: a function that evaluates 1 over x。 So as x is getting smaller and smaller and
    smaller。 the value of 1 over x is getting larger and larger and larger。 And that
    is in math terms。 you say converging to infinity。 So if you imagine we're calculating
    this x and getting。 it smaller and smaller and smaller， at some point that value
    of x might underflow and。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一个评估1/x的函数。因此，当x越来越小的时候，1/x的值变得越来越大。这在数学上，你可以说它趋向于无穷大。所以如果你想象我们正在计算这个x并使其变得越来越小，在某个时候那个x的值可能会下溢。
- en: it might underflow to 0。 And it would be when you squinted it the right way
    natural for that。 underflow to result in infinity as opposed to a math error。
    And that brings us to the。 second interesting part of floating point。 We have
    negative 0。 So if you remember the。 binary representation in memory， we have all
    0s is going to be a 0 but we still have that。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 它可能会下溢为0。而且当你以正确的方式眯眼看时，这种下溢自然会导致无穷大，而不是数学错误。这将我们带到浮点数的第二个有趣部分。我们有负零。所以如果你记得。
- en: sign bit floating around。 And if that sign bit set， we get a negative 0。 It
    basically。 only comes up when you underflow a sufficiently small number。 And it
    can be actually kind of。 useful again when you squint it things the right way
    to have the distinction between negative。 0 and positive 0 because again if you
    consider that 1 over x function， as x is approaching。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 浮动的符号位。如果那个符号位被设置，我们会得到负零。它基本上只有在你发生足够小的数的下溢时才会出现。实际上，它在以正确的方式眯眼看待事情时，区分负零和正零可能是相当有用的，因为再次考虑那个1/x函数，当x接近。
- en: 0 from the negative side， it's going to be converging to negative infinity。
    And when it。 underflows to negative 0， it's kind of useful to have the result
    be negative infinity as。 opposed to positive infinity or something else。 And otherwise
    negative 0 behaves just。 like our good friend normal 0。 Now finally， I want to
    talk about nann is probably my favorite。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 从负侧看，趋向于负无穷大。当它下溢为负零时，得到负无穷大作为结果是有用的，而不是正无穷大或其他东西。除此之外，负零的行为就像我们亲爱的正常零。最后，我想谈谈nann，这可能是我最喜欢的。
- en: part of floating point。 Nann stands for not a number。 And it's a number that
    just like。 it says right there on the box is not a number。 It's defined as being
    the result of mathematically。 undefined operations。 So for instance， dividing
    infinity by infinity， you'll get nann。 It's。 also defined as being the result
    of operations like the square root of negative 1。 Although， again。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点数的一部分。Nann代表“不是一个数字”。而它是一个数字，就像盒子上写的那样，它不是一个数字。它被定义为数学上未定义操作的结果。所以例如，除以无穷大除以无穷大，你会得到nann。它还被定义为像负1的平方根这样的操作的结果。虽然，再次。
- en: Python has got us covered here。 It's going to do something potentially a little，
    bit more helpful。 But nann is really important to know about because it's wild。
    It just breaks， everything。 It's the only value that is not equal to itself。 And
    this is true in every。 programming language in every computer system。 It doesn't
    make any sense to compare it to， things。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Python在这里给我们提供了支持。它会做一些可能更有帮助的事情。但了解nann是非常重要的，因为它很疯狂。它会打破一切。它是唯一一个不等于自己的值。这在每种编程语言和每个计算机系统中都是正确的。将其与其他东西进行比较没有任何意义。
- en: So every comparison will return false。 And every mathematical operation that
    you try。 to perform with a nann is going to give you back nann。 It's kind of infectious
    like a。 sequel null if you're familiar with that。 The one interesting Python tidbit
    that you can。 bust out to have fun at parties is that in some situations testing
    to see if nann is in。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 所以每次比较都会返回假。你尝试用nann进行的每个数学操作都会返回nann。它就像一个传染性的序列null，如果你熟悉这个概念的话。一个有趣的Python小知识是，在某些情况下，测试nann是否存在。
- en: a list with a nann will return true。 That's left as an exercise to the reader。
    And actually。 I kind of like nann。 It can be pretty useful if you have say a large
    data set， maybe you're。 taking measurements from an external system or something
    like that。 And you need to have。 a value in a particular place， but no value makes
    sense。 Using a nann is a place holder。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 带有nann的列表将返回真。这留给读者作为练习。实际上，我挺喜欢nann的。如果你有一个大型数据集，比如说你从外部系统获取测量值之类的，并且你需要在特定位置有一个值，但没有任何值合适。使用nann作为占位符。
- en: kind of like a null is actually kind of useful。 So like in this case， imagine
    we have two。 lists of numbers that we want to divide by each other and then take
    the mean value of， the result。 Because we -- because one of the numbers will be
    nann， it will just be ignored。 when we use nann means。 So nann means is like mean
    except it ignores nanns。 And it's also。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于null的值实际上是有用的。所以在这种情况下，想象一下我们有两个数字列表，我们想将它们相互除以，然后取其平均值。因为其中一个数字将是nann，它将在我们使用nann均值时被忽略。因此，nann均值类似于均值，只不过它忽略nann。它也是。
- en: got nann sum and so on。 So this is really important to know about though。 Because
    especially if。 you're building web systems that accept values from a JavaScript
    front end， if any of you。 have worked in JavaScript， you know that it coughs out
    nanns all over the place。 And now。 you know just how badly it's going to wreck
    all of your numerical code。 So the two best。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 生成nann和其他值的原因。因此，了解这一点非常重要。尤其是如果你在构建接受来自JavaScript前端值的网络系统。如果你有过JavaScript的经验，你知道它会到处输出nann。现在，你知道这将如何严重破坏你的数值代码。因此，最佳的两种。
- en: ways to test for it， either using math。isnann or just checking if a thing is
    not equal to， itself。 Because if a thing is not equal to itself， guaranteed it's
    going to be nann。 So okay， pop quiz time。 How many nanns are there？ One， I've
    heard one。 I'm sorry。 You're。 off by 52 binary orders of magnitude。 There's actually
    two to the 52 nanns。 And that's because。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 测试nann的方法，要么使用math.isnan，要么只是检查一个东西是否不等于它自己。因为如果一个东西不等于它自己，可以保证它是nann。所以好吧，来个小测验。nann有多少个？我听说是一个。抱歉，你错了，少了52个二进制数量级。实际上有2的52次方个nann。这是因为。
- en: they're defined as being any floating point value where the exponent is fully
    set and。 the fractional component is just not zero。 And you know there were some
    smart programmers。 at one point who kind of realized that's a bit of a waste。
    We got all these values that。 are doing nothing。 So why not just stuff some pointers
    in there？ And this is actually what。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 它们被定义为任何浮点值，其中指数完全设置，而小数部分则不为零。你知道，有些聪明的程序员曾经意识到这有点浪费。我们有这么多值，毫无作用。那么，为什么不把一些指针放进去呢？这实际上就是。
- en: happens in every modern JavaScript implementation。 Under the hood when you're
    passing around a。 pointer to an object， that pointer can actually be two things。
    If you mask it properly and。 the mask returns true， then it's interpreted as a
    double。 On the other hand， if the mask， is false。 then it's a pointer。 Which means
    that you can write actually very interesting， efficient code。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况在每个现代JavaScript实现中都会发生。在后台，当你传递一个对象的指针时，这个指针实际上可以是两种东西。如果你正确地掩码，并且掩码返回真，那么它将被解释为双精度数。另一方面，如果掩码返回假，那么它就是一个指针。这意味着你可以编写非常有趣且高效的代码。
- en: So this is a completely fictitious implementation， but it's close enough to
    true。 where if we're adding two JavaScript objects together， the first thing we
    need to do is。 if we can run this quick bit mask to check and see if they're both
    doubles。 And if they， are。 we can add them with just one machine instruction。
    So this is much， much more efficient。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这完全是一个虚构的实现，但足够接近真实。如果我们将两个JavaScript对象相加，首先需要做的是，如果我们可以运行这个快速掩码检查它们是否都是双精度数。如果是，我们可以只用一条机器指令将它们相加。所以这效率高得多。
- en: than Python， say where we'd have to go and unbox those numbers and so on and
    so on。 So okay。 we've talked about how the precision can be lost when numbers
    of different， numbers。 of different magnitude are added and subtracted。 We've
    talked about the problems that come when。 we try to stuff binary decimal numbers
    into binary fractions。 But I do want to offer you， some hope。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 比Python更好地处理，因为我们必须去解包这些数字等等。因此，好吧。我们谈到了当不同数量级的数字相加和相减时，精度可能会丢失。我们谈到了将二进制小数数字塞入二进制分数时出现的问题。但我确实想给你一些希望。
- en: The decimal module。 Per the documentation， the decimal module provides support
    for decimal。 floating point arithmetic。 And hopefully you have a bit of a notion
    of what those words mean。 Because it's doing decimal arithmetic， we have exact
    representations of decimal numbers。 We're still going to have problems with that
    nearest number rounding problem。 We still can't。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 小数模块。根据文档，小数模块提供对小数浮点算术的支持。希望你对这些词有一点概念。由于进行小数运算，我们有小数的精确表示。我们仍然会遇到最接近的数字舍入问题。我们仍然不能。
- en: represent pi exactly。 But at least the representations will be more sensible。
    They'll follow the。 same grade school rounding rules that you're used to。 And
    we still need to specify precision。 We don't have unlimited memory。 But the default
    in decimal is 28 decimal places。 And that's。 probably going to be enough for most
    folk。 And of course， if you need more， you can just。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 精确表示π。但至少这些表示会更合理。它们会遵循你熟悉的那种小学舍入规则。我们仍然需要指定精度。我们没有无限的内存。但小数的默认精度是28位小数。这对大多数人来说可能足够。当然，如果你需要更多，可以随时调整。
- en: turn it up。 So to give a really quick example of what decimal looks like， we
    could， well， import it。 We'll create a decimal value of 0。1。 And notice that when
    we add 0。1 to itself， ten times。 we get the precise exact result of one as we'd
    expect。 Now one interesting。 consequence is that when you load a floating point
    number into a decimal， it will faithfully。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 切换它。所以，为了给你一个关于小数样子的快速示例，我们可以导入它。我们将创建一个小数值0.1。注意，当我们将0.1加到自身十次时，得到的结果正好是我们期望的一。一个有趣的后果是，当你将浮点数加载到小数中时，它会忠实地。
- en: try and read in that entire number。 But at some point， I don't know how well
    you know， pi。 you'll notice that it does diverge。 And that's because the floating
    point number。 can't precisely represent pi。 Now there is， of course， a drawback。
    There is a trade-off， here。 And that's that decimals are significantly slower。
    In a quick test that I did here， just。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试读取整个数字。但在某个时刻，我不知道你对π了解多少，你会注意到它的确会发散。这是因为浮点数不能精确表示π。当然，这里有一个缺点。小数显著较慢。在我这里做的快速测试中，仅此而已。
- en: multiplying a number by itself， comparing a decimal to a float， found the decimal
    was。 about ten orders of magnitude slower。 It's a lot slower。 Also unlike floats。
    Flots are。 going to be the same size they take up exactly 64 bits， no matter how
    big or small the number， is。 That's not true of decimals。 The size of a decimal
    is going to grow as you get more。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个数字与自身相乘，比较小数与浮点数时，发现小数大约慢了十个数量级。这慢得多。而且与浮点数不同，浮点数占用的大小始终为64位，无论数字大小如何。小数的大小会随着数字的增多而增长。
- en: decimal places or as the number gets larger。 But that all said， decimal is great。
    And if。 you're doing computations that need precision， so this is things like
    math， like math， if。 you're doing math， you need numbers。 If you're doing math
    with money， for instance， it's。 absolutely a thing that's worth using。 So thank
    you for coming out and listening to me。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 小数位数或当数字增大时。但话虽如此，小数是很棒的。如果你需要精确计算，比如数学，进行数学运算时需要数字。如果你在做与钱相关的数学时，这绝对是值得使用的东西。感谢大家的到来，听我讲。
- en: You ran to about floats。 If you've got any questions， I'd love to come chat
    with you。 in the back after this talk。 I'll just be hanging it outside the hall。
    And yeah， thank you all。 so much。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你提到了浮点数。如果你有任何问题，我很乐意在这场讲座后在后台和你聊聊。我会在大厅外面等着。谢谢大家。
- en: '![](img/eedb333dff5ecd91a4f28a1eb20fd5a2_3.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eedb333dff5ecd91a4f28a1eb20fd5a2_3.png)'
- en: (applause)， (applause)。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: （掌声），（掌声）。
