- en: P10：Terri Oda - Python Security Tools - PyCon 2019 - leosan - BV1qt411g7JH
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P10：特里·奥达 - Python安全工具 - PyCon 2019 - leosan - BV1qt411g7JH
- en: Make big noise for Terry。 You're going to tell us how we can have better， Python
    security tools。 So this talk is for anyone who's ever done this search。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 为特里欢呼，你将告诉我们如何获得更好的Python安全工具。所以这个演讲适合任何曾经做过这个搜索的人。
- en: '![](img/1b2c871c2097675236688dfc1f217728_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1b2c871c2097675236688dfc1f217728_1.png)'
- en: '![](img/1b2c871c2097675236688dfc1f217728_2.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1b2c871c2097675236688dfc1f217728_2.png)'
- en: And if you haven't done this search lately， let me remind you as to what it
    looks like。 You get a bunch of maybe not the most useful results， like how to
    hide your source code， which。 is a type of security。 As an open source person，
    it's not my favorite type， of security。 but it's a problem that people have。 You
    get that dude who answers every question about security。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你最近没做这个搜索，让我提醒你它的样子。你会得到一些可能不是最有用的结果，比如如何隐藏你的源代码，这是一种安全类型。作为一个开源的人，这不是我最喜欢的安全方式，但这是人们面临的问题。你会遇到那个回答每一个安全问题的人。
- en: to say， oh， I just use "Pilent。"， It's fine。 Or you get， when you're ask around
    in your company。 or whatever， you get the response that， well， Python's inherently
    secure。 It doesn't have buffer overflows， so you don't need any， of that crap。
    Maybe you should just use "Pilent。"， So none of that is really super useful to
    answer your question。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 说，哦，我只是用“Pilent”，这没问题。或者当你在公司问周围时，你会得到这样的回应，嗯，Python本质上是安全的。它没有缓冲区溢出，所以你不需要那些麻烦。也许你应该只用“Pilent”。所以这些实际上并不太有用来回答你的问题。
- en: Unless what you were really deep in your heart of hearts。 hoping for was that
    the answer was that Python was perfect。 Everything was solved， and you did not。
    have to do any more work before you released your product。 Which I admit。 like
    there's a lot of people in this room， were very big Python advocates。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 除非你真正内心深处希望的答案是Python是完美的，所有问题都解决了，你不需要在发布产品之前再做任何工作。我承认，像这个房间里有很多人是非常支持Python的。
- en: I want to believe that everything is perfect and we can move on。 But as a security
    person。 I'm not super comfortable， with that feeling。 And that's the reason that
    I don't even like some of the results。 that are maybe useful。 So up on that first
    page， you'll see some links。 about how we've done work to secure the Python interpreter。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我想相信一切都是完美的，我们可以继续。但作为一个安全专家，我对这种感觉并不太舒服。这也是我不喜欢一些可能有用的结果的原因。因此，在第一页上，你会看到一些关于我们如何保护Python解释器的链接。
- en: which is great if you are a Python developer， a CPython， or a Python developer。
    And if you're not。 you might think， well， oh， all the problems， have been solved
    in the interpreter。 I'm done。 We're good。 And similarly， there's some nice links。
    from OASP on how to secure your Python web application。 And again。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是一个Python开发者，CPython或Python开发者，那就太好了。如果你不是，你可能会想，哦，所有问题在解释器中都已经解决了。我完成了，没问题。类似地，还有一些关于如何保护你的Python网页应用程序的OASP链接。
- en: that's great if that's what you're doing。 And sometimes you'll go， oh， well，
    I'm a data scientist。 As of last year， half of our population， is filled with
    data scientists。 so that's a lot of people here。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在做这个，那很好。有时你会想，哦，我是一个数据科学家。根据去年的数据，我们的人口中有一半是数据科学家，所以这里有很多人。
- en: '![](img/1b2c871c2097675236688dfc1f217728_4.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1b2c871c2097675236688dfc1f217728_4.png)'
- en: And if you see， well， you only need security， for your web application， then
    you're like， eh。 I'm a scientist。 I'm done。 We're good。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只关心你的网页应用程序的安全性，那你就会想，嗯，我是个科学家，我完成了，没问题。
- en: '![](img/1b2c871c2097675236688dfc1f217728_6.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1b2c871c2097675236688dfc1f217728_6.png)'
- en: So none of that makes me super comfortable either。 So why should you listen
    to me？ I mean。 I'm hoping you think that the Python community， wouldn't choose
    someone incompetent to talk to you。 But I'm Dr。 Terri Oda。 I have a PhD in horribleness，
    by which I'm， in computer security。 which is actually kind of horrible。 I specialize
    in web security， so not Python at all。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这些也让我不太舒服。那么你为什么要听我说呢？我的意思是，我希望你认为Python社区不会选择一个无能的人来与你交流。但我叫**特里·奥达博士**，我在计算机安全领域拥有博士学位，实际上这是一门相当可怕的学科。我专注于网页安全，因此和Python没有关系。
- en: But the reason you should trust me is not， that I have an academic degree。 There's
    lots of people in this room who have academic degrees。 I know quite a few of you。
    The reason you should feel that I have， the useful opinions for you is that I've。
    spent most of my adult life focused on security， but also that I've spent many
    years now working。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 但你应该信任我的原因不是因为我有学位。这个房间里有很多人都有学位。我知道你们中的一些人。你应该觉得我有用的意见的原因是我大部分成年生活都专注于安全，并且多年来我一直在工作。
- en: in industry at doing open source security for Intel。 I imagine most of you in
    this room are familiar with Intel。 You may have a processor in your laptop right
    now that， comes from us。 We make most of our money off of hardware， but hardware
    is no good if it doesn't have good software。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在业界为Intel做开源安全工作。我想在座的大多数人对Intel都很熟悉。你现在的笔记本电脑里可能就有我们的处理器。我们大多数收入来自硬件，但如果没有良好的软件，硬件就没有价值。
- en: And so we do a lot of open source work。 And it's my job to make sure that our
    open source work is。 good before it goes out。 I'm not the only one who does this。
    I focus on a couple of different areas。 But I go through probably 10 to 20 projects，
    a year from beginning to end。 helping them with their security， helping them with
    working on their privacy policies。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们做了很多开源工作。我的工作是确保我们的开源工作在发布前是好的。我不是唯一一个这样做的人。我专注于几个不同的领域。但我每年大约会从头到尾处理10到20个项目，帮助他们进行安全审查，帮助他们制定隐私政策。
- en: making sure they do good code review， and understanding what makes security
    hard for them。 what can make security better for them， and what sort of things
    we're doing right and wrong。 As far as Python goes， I did say that my PhD is in
    web security。 which doesn't have much to do with Python。 But hopefully a few of
    you in this room。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 确保他们进行良好的代码审查，并理解是什么让安全对他们来说变得困难。可以改善安全性的因素是什么，以及我们做对和做错的事情。就Python而言，我确实说过我的博士学位是关于网络安全的，这与Python关系不大。但希望在座的几位能有所帮助。
- en: actually recognize me as a mailman developer， which。 if you think of mailman
    is that thing that emails， your password once a month。 maybe you feel less inclined，
    to listen to what I have to say。 And if that's how you feel about mailman， let
    me tell you， you need to upgrade。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 其实把我认作mailman开发者，这样。如果你把mailman想象成每月一次给你发送密码的东西，或许你就不会那么愿意听我说的话。如果你对mailman的看法是这样，那么让我告诉你，你需要升级。
- en: It's going to blow your mind。 It does not do that anymore。 The other thing that
    I do in the Python community。 that you may know me for is Google Summer of Code。
    I run the Summer Mentoring Program for the Python Software， Foundation。 And you
    can ask me all about that later。 It's super cool。 I can't wait to announce our
    new students。 but it's not happening until Monday， so I can't tell you how many
    there are anything right now。 The other cool thing that I do for Intel， is this
    URL in the middle， which I am not。 going to talk about again。 So if you need to
    take a picture of it right now。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这会让你大吃一惊。它现在不再那样工作了。我在Python社区的另一件事，可能你知道我的是谷歌暑期编码。我为Python软件基金会运营暑期辅导计划。你可以稍后问我所有相关问题。这非常酷。我迫不及待想要宣布我们的新学生，但要到周一才会进行，所以我现在不能告诉你有多少人。为Intel做的另一件酷事是中间这个网址，我将不再谈论它。如果你需要现在拍张照片。
- en: you should take a picture of it。 But I'm working on a small Python tool that
    is not。 designed for improving your Python security， but is designed to help you
    figure out。 whether you have known vulnerabilities in your binaries。 So those
    of you who may be working with C libraries， super useful， if you work at a company
    where。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该拍张照片。但我正在开发一个小型Python工具，它并不是为了提高你的Python安全性，而是为了帮助你识别二进制文件中是否存在已知的漏洞。因此，对于那些可能在使用C库的人来说，这非常有用，如果你在一家这样的公司工作。
- en: you have a problem where sometimes people ship really， old versions of OpenSSL
    and you want。 to have something to put in your continuous integration， to make
    sure that doesn't happen。 this is the tool for you， and it's super cool。 I'm not
    going to talk about it today。 because it doesn't help most Python programmers，
    but I will talk about a lot of things。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你会遇到一个问题，有时人们发布非常旧版本的OpenSSL，而你希望在持续集成中有一些东西，确保这种情况不会发生。这是为你准备的工具，而且超级酷。我今天不打算谈论它，因为它对大多数Python程序员没有帮助，但我会讨论很多其他事情。
- en: that I've learned in developing it。 And that just came out in February。 so you're
    not late in learning about it or anything。 So there's a bunch of different problems。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我在开发过程中学到的。这在二月刚发布，所以你并没有晚于其他人了解它。所以有很多不同的问题。
- en: '![](img/1b2c871c2097675236688dfc1f217728_8.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1b2c871c2097675236688dfc1f217728_8.png)'
- en: in security of differing levels of difficulty。 In theory。 the easiest one should
    be detecting things， that we already know are security vulnerabilities。 So they
    call these CVEs。 There's a huge database of them。 And when I say huge database，
    I really。 mean huge database。 Like it's not untractable to download。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在不同难度级别的安全性上。从理论上讲，最简单的应该是检测我们已经知道的安全漏洞。所以他们称这些为CVE。它们有一个庞大的数据库。而我说的庞大数据库，真的。非常庞大。下载并不是不可行的。
- en: but it has vulnerabilities of all software， forever， all， in one thing。 It's
    called the National Vulnerability Database， because it's based in the US。 but
    it's not national。 It's the international horror show of every bit of software。
    that's ever gone wrong。 And that wouldn't be such a problem。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 但它拥有所有软件的漏洞，永远在一个地方。这被称为国家漏洞数据库，因为它基于美国。但它并不是国家的。它是每个出错软件的国际灾难展览。而这本身并不是个问题。
- en: except that everyone wants that two-letter Python， pip install whatever package。
    And so we all use fairly simple names for a lot of things。 I went to the great
    talk on Cross Stitch yesterday， and the package is called IH。 And if you search
    for that in a database， with all known software vulnerabilities forever。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 除了每个人都想要那个两字母的Python，pip安装任何包。所以我们都为很多东西使用相对简单的名称。我昨天听了关于Cross Stitch的精彩演讲，这个包叫IH。如果你在数据库中搜索这个，所有已知的软件漏洞都是。
- en: you're going to get a lot of hits。 And that's kind of annoying。 But you think，
    well， OK， whatever。 I do that once， and it'll be fine。 It's annoying， but it's
    not intractable。 Except that you don't do it just once， because many Python packages
    have never， had a vulnerability。 and therefore， they're， not in the database yet。
    So every single time you want to check and see。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你会得到很多结果。这有点烦人。但你会想，好吧，随便。反正我做一次就好。这很烦人，但并不是无法解决的。除了你并不是只做一次，因为许多Python包从未有过漏洞。因此，每次你想检查时。
- en: whether they're new vulnerabilities， you're going to have to search for all
    of those generically。 named packages again and try to build new mappings。 And
    that's not great。 But then it gets worse。 because of course it does。 The mapping
    isn't quite as perfect as you would hope it would be。 So what we find is people
    are usually pretty good about it， but people are people。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 无论它们是新的漏洞，你都得再次搜索所有这些通用命名的包，并尝试建立新的映射。这并不好。但情况变得更糟，因为当然会这样。映射并不像你希望的那样完美。所以我们发现，人们通常对这件事相当不错，但毕竟人都是人。
- en: And so you go and you say， libjpeg is vulnerable to something， in all versions
    between 4。09。 And if you're lucky， that means that the database will， have 4。08，
    4。07， 4。06， and all the way down。 And it'll be really easy to query。 But that's
    not usually what you see。 What you sometimes see。 especially for smaller packages，
    is 4。08 is vulnerable， but nothing about the other ones。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 于是你去说，libjpeg在所有版本4.09之间是有漏洞的。如果你幸运的话，数据库会有4.08、4.07、4.06，一直到最早的版本。那样查询会非常简单。但这通常不是你看到的情况。你有时看到的情况，尤其是对于较小的包，4.08是有漏洞的，但其他的则没有。
- en: Or if you're especially unlucky， and this is one that we hit， it'll say 4。09
    is the latest version that's safe， but it'll show up as the vulnerable version。
    so you'll get this false positive， and it's completely annoying。 And we fix these
    as we find them。 I have definitely found bugs。 The NIST team that handles this
    is super responsive， and it's awesome。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 或者如果你特别不幸运，这正是我们遇到的情况，它会说4.09是最新的安全版本，但它会显示为有漏洞的版本。所以你会得到一个假阳性，这非常烦人。我们在发现这些问题时会修复它们。我确实发现了错误。处理这些问题的NIST团队反应非常迅速，真是太棒了。
- en: And they have ways to say and all previous versions。 but most people just grab
    the JSON and try to use it， and it doesn't have all that data in it。 So the mappings
    can be kind of bad if you do it naively。 and you just aren't aware that that's
    what they're like。 And then， in case that wasn't enough。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 他们有方法来说明和所有以前的版本。但大多数人只是抓取JSON并尝试使用它，而其中并没有所有数据。因此，如果你天真地这样做，映射可能会有些糟糕，而你对此并不知情。然后，如果这还不够。
- en: this is a database maintained by a bazillion people。 It was designed to be done
    by vendor。 so big software companies would each have someone， and they would do
    it。 But now we have open source software， and we have a bazillion people who。
    could anyone can volunteer to be a vendor now。 That was not always true。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个由无数人维护的数据库。它的设计是由厂商来完成的，因此大型软件公司会各自有一个人来做。但现在我们有开源软件，有无数人，任何人都可以自愿成为一个厂商。这并不总是如此。
- en: I don't know if any of you have ever， asked around， like， how do you file vulnerabilities。
    for your open source project？ But you may have learned that we owe a great debt
    of gratitude。 to the team at Red Hat， Red Hat Enterprise Linux files。 CVEs against
    all the packages that they maintain。 And so there's a huge pile of those。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我不知道你们中有没有人询问过，比如，如何为你的开源项目提交漏洞。但你可能了解到，我们对红帽团队有很大的感激之情，红帽企业版 Linux 为他们维护的所有包提交
    CVE。因此，存在一大堆这样的漏洞。
- en: but everyone else， it's sort of meh。 And then， even if we figure out-- so we
    don't know what sort。 of name they're going to use， like， if the first person
    to file a bug against your project calls。 it Python， dash， whatever， then that's
    fine。 But when you search for just the whatever。 you're not going to find it。
    It's a pain。 And then， while open source， thanks to Red Hat especially。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 但对其他人来说，这种情况就有些无所谓了。即使我们搞清楚了——我们不知道他们会使用什么样的名称，如果第一个提交漏洞的人称其为 Python，破折号，无论如何，那也没问题。但是当你只搜索那个时候，你是找不到的。这很麻烦。而且，感谢开源，尤其是红帽。
- en: has been really good about filing CVEs， that's not true everywhere。 If you're
    a small company。 sometimes， it's super uncomfortable to file a CVE against your
    project。 Sometimes your management will say， we can't admit that。 We're just going
    to solve it。 and it'll be quiet， and it'll happen。 Or if you're a small open source
    project。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在提交 CVE 方面做得非常好，但并不是所有地方都如此。如果你是一家小公司，有时候，提交一个 CVE 可能会让人感到非常不舒服。有时候你的管理层会说，我们不能承认这个。我们只会解决它，然后就安静了，事情就这样发生了。或者如果你是一个小型开源项目。
- en: you have no idea how to file a CV。 You don't even know that that's a thing。
    You don't even know that the bug you got was a security bug。 You just fix it，
    and you move on。 And so there's a lot of things that aren't even， in the database
    that we probably would like to know about。 that are real security bugs and maybe
    are known。 So putting it all up on one slide。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你完全不知道如何提交 CV。你甚至不知道这是一件事。你甚至不知道你遇到的漏洞是一个安全漏洞。你只是修复它，然后继续前进。因此，数据库中还有很多信息我们可能想知道，关于真正的安全漏洞，可能是已知的。所以把所有内容放在一张幻灯片上。
- en: so you can see in there， the mapping is bad， there's no canonicalization of
    names。 there's lots of packages that aren't in there， there's some bugs in the
    data that we have。 People fix things that probably qualify as CVEs， without ever
    doing that。 So if you're looking at all this and thinking， god， that's a lot of
    work， you're right。 Thankfully。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，映射很糟糕，没有名称的规范化。有很多包没有包含在内，我们的数据中也存在一些错误。人们修复了一些可能符合 CVE 的问题，但从未提交。因此，如果你看到这一切并觉得，天哪，这太多工作了，你是对的。值得庆幸的是。
- en: someone else has done it for us。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 别人已经为我们完成了这项工作。
- en: '![](img/1b2c871c2097675236688dfc1f217728_10.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1b2c871c2097675236688dfc1f217728_10.png)'
- en: So enter one of my favorite security tools ever， PiUp。io Safety。 It checks your
    dependencies for known vulnerabilities。 It's got a free database that's available
    and updated monthly。 or you can get a subscription to do it more real time。 They've
    recently changed their pricing。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我想介绍我最喜欢的安全工具之一，PiUp.io Safety。它会检查你的依赖项是否存在已知漏洞。它有一个免费且每月更新的数据库，或者你可以订阅以获得更实时的服务。他们最近改变了定价。
- en: but it's still really， really reasonable， for the amount of work that you're
    doing。 if you're talking about more than like five Python packages。 So I don't
    have any affiliation with this company。 but I definitely spend a lot of time recommending
    it。 to people because it's so much less work than doing it yourself。 And it's
    so much less error-prone。 And it's even more amazing than that， because not only
    have they figured out all the mappings。 and they've committed to finding new ones
    for everything in PIP。 Like if you've got it something in PIP， it can figure it
    out。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 但对于你所做的工作来说，这仍然是非常合理的，尤其是当你谈论超过五个 Python 包时。所以我和这家公司没有任何关系，但我确实花了很多时间向人们推荐它，因为这比自己做要轻松得多，出错的可能性也小得多。而且更令人惊讶的是，他们不仅找到了所有的映射，还承诺为
    PIP 中的每个内容找到新的映射。如果你在 PIP 中有东西，它都能搞定。
- en: They also go and read all those change logs， and see， hey。 that looks like it
    might have been a security issue。 And so you'll note that-- hopefully you can
    read that。 It's a little bit dark， but they have。 IDs that are not CVE numbers，
    and that's why， is because they have some vulnerabilities or potential。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 他们还会去阅读所有的变更日志，然后看到，嘿，这看起来可能是一个安全问题。因此你会注意到——希望你能看得清。这有点暗，但他们有一些不是CVE编号的ID，这就是原因，因为他们有一些漏洞或潜在问题。
- en: vulnerabilities that are not in there。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 漏洞并不在其中。
- en: '![](img/1b2c871c2097675236688dfc1f217728_12.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1b2c871c2097675236688dfc1f217728_12.png)'
- en: So on top of having a command line utility that works in。 you can just put it
    in your virtual M and say， go， tell me， everything in here that's scary。 They
    have the option to just take your requirements。txt， and throw it into this web
    interface。 and it'll give you a list。 And you can tell that I did this screenshot
    like a year ago。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 所以除了拥有一个可以工作的命令行工具外，你可以把它放在你的虚拟环境中，然后说，来吧，告诉我，这里所有可怕的东西。他们有一个选项可以直接拿你的requirements.txt，并把它扔到这个网页接口中，它会给你一个列表。而且你可以看到，我大约一年前截的这个屏幕。
- en: because that is not the latest version of Django， that you should be using。
    So do not take that as advice。 But you can see here the interface。 where there's
    no CVE associated with this， so it's showing you the change logs。 so you can go
    and see whether that particular issue might， impact your product or not。 Usually。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 因为那不是你应该使用的最新版本的Django。所以不要把那作为建议。但你可以在这里看到界面，其中没有与之关联的CVE，因此它向你展示变更日志，这样你可以查看那个特定问题是否会影响你的产品。通常。
- en: as a security person， I always recommend you just， update to the latest。 It's
    way less maintenance and hassle。 But depending on what you're doing。 sometimes
    you need to know whether this bug impacts you， and whether we have to do it right
    now。 or maybe we could wait until next release。 For those of you who might already
    be using PipMf。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个安全人员，我总是建议你直接更新到最新版本。这需要的维护和麻烦少得多。但根据你正在做的事情，有时你需要知道这个漏洞是否会影响你，以及我们是否必须现在解决它，或者我们是否可以等到下一个版本。如果你可能已经在使用PipMf。
- en: safety is not the only way you can do this check。 PipMf has a bunch of tools
    for managing your Python。 and it also does the equivalent of safety check。 And
    it looks-- again， this is probably a bit dark。 It looks like this。 This one gives
    you the short description of each CVE。 so you can see it right there。 It gives
    you the recommendations that you need。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性并不是你可以进行此检查的唯一方法。PipMf有一系列管理你Python的工具，它也能执行相当于安全检查的功能。而且看起来——再说一次，这可能有点暗。它看起来是这样的。这个给你每个CVE的简短描述，所以你可以直接看到。它提供了你所需的建议。
- en: And it gives you a little bit of extra information， about PEP508。 So why am
    I telling you about two？
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 并且它给你提供了一些额外的信息，关于PEP508。那么我为什么要告诉你这两个？
- en: Which one's better？ The answer is neither of them。 They're actually the same。
    They use the same database from the safety people。 It can even--。 PipMf can even
    use your subscription key if you have one。 So basically， try them both out。 See
    which one works best for your workflow。 Safety's got this nice GitHub CI。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 哪一个更好？答案是两个都不是。它们实际上是一样的。它们使用的是安全团队的相同数据库。甚至——如果你有订阅密钥，PipMf甚至可以使用它。所以基本上，试试它们两个。看看哪一个最适合你的工作流程。Safety有这个很好的GitHub
    CI。
- en: PipMf's got other stuff that you might already be using。 so it might be easier
    to integrate with you。 But seriously， use one of them。 It's amazing to me how
    many security vulnerabilities， we have that are just--。 we never upgraded this
    because we didn't think of it。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: PipMf还有其他一些你可能已经在使用的工具，因此与您集成可能会更容易。但说真的，使用其中一个。这让我惊讶的是，我们有这么多安全漏洞，都是因为我们没有升级这个，因为我们从未想到过。
- en: So assuming we have solved the known vulnerability problems， we need to go into
    the next problem。 What about actual quality of our code？ So let's go back to pilot。
    So the goal of pilot is code quality and consistency。 Sometimes you get security
    gains as a side effect。 The security value is not zero， but it's low。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 所以假设我们已经解决了已知的漏洞问题，我们需要进入下一个问题。我们的代码的实际质量怎么样？所以让我们回到pilot。pilot的目标是代码质量和一致性。有时你会因为副作用而获得安全收益。安全价值不是零，但很低。
- en: So that person who is recommending it， is the only tool you need has some wishful
    thinking going on。 But it's not zero。 And I don't have a great Python example，
    but this is the famous Apple go-to fail。 which is often held up， as an example
    of something that would be caught by a linter。 that is a security issue， even
    though it's also a code issue。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，那位推荐它的人认为这是你所需的唯一工具，有些不切实际。但它并不是零。我没有很好的**Python**示例，但这是著名的**Apple**故障，它常常被作为代码检查工具能够捕获的安全问题的例子，尽管这也是一个代码问题。
- en: So making your code clearer and easier to read， definitely has security implications
    that are good。 But those people who told you to use pilot， were just off by one。
    We're programmers。 off by what else。 So Bandit is the new kid on the block， not
    really new anymore。 But this is a tool that was written for OpenStack。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，使你的代码更清晰易读确实具有良好的安全隐患。但告诉你使用**Pilot**的人只是偏差了一点。我们是程序员，总是有一些偏差。所以**Bandit**是新来的，但现在不再新鲜。这是一个为**OpenStack**编写的工具。
- en: because the problem with designing your cloud infrastructure。 by committee is
    that not everyone has the same code， quality standards。 And so they worked on
    this tool to help people， work on their security standards。 And this was made
    part of Python's PyCQA， and it's kind of awesome。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 因为通过委员会设计你的云基础设施的问题在于，不是每个人都有相同的代码质量标准。因此，他们开发了这个工具来帮助人们提升安全标准。这成为了**Python**的**PyCQA**的一部分，真是太棒了。
- en: So Bandit's goal is to find security issues。 It includes Blacklist。 It has some
    linters for common mistakes。 It's not technically a linter。 It's actually more
    of a static analysis tool。 But it's fast enough that you can treat it like a linter。
    And if you don't really care too much about exactly what's， going on to the hood，
    that's fine。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 所以**Bandit**的目标是找出安全问题。它包括黑名单，拥有一些用于常见错误的代码检查工具。它并不严格算作代码检查工具，实际上更像是静态分析工具。但它足够快，你可以把它当作代码检查工具。如果你不太关心底层的具体情况，那也没关系。
- en: The security value here is high， and that's， a big difference from pilot。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的安全价值很高，这与**Pilot**有很大的不同。
- en: '![](img/1b2c871c2097675236688dfc1f217728_14.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1b2c871c2097675236688dfc1f217728_14.png)'
- en: So here's what the tail end of an output looks like。 You can see it gives you
    something telling you。 that it's Blacklisted， explaining why and what you should
    look at。 It gives you a little bit of code， so you can figure out where it is。
    And it gives you some summary information， about the issues that it's found。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是输出尾部的样子。你可以看到它告诉你这是被**列入黑名单**，并解释了原因以及你应该关注的内容。它给你提供了一小段代码，让你可以找出问题所在。它还给你一些关于发现问题的总结信息。
- en: I put up there showing you how to just get it。 I do recommend you run it in
    a virtual end。 It's easier。 If you're running in a virtual end， do not put your
    virtual end into the directory。 that you are running Bandit on。 Bandit hates virtual
    ends。 And your VM will trigger approximately 1。200， Bandit errors that are not
    your fault and not in your code。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我上面展示了如何获取它。我确实推荐你在虚拟环境中运行它，这样更容易。如果你在虚拟环境中运行，请不要将你的虚拟环境放入你运行**Bandit**的目录中。**Bandit**讨厌虚拟环境。你的虚拟机将会触发大约`1200`个不是你代码错误的**Bandit**错误。
- en: And every time I see someone do it at work， and they're like， oh， god， I'm doomed。
    My project's never going to ship。 So don't do that。 Put your virtual end somewhere
    else。 Scan just the code that you wrote。 It'll make your life a whole lot easier。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 每次我在工作中看到有人这样做，他们就会说，“哦，天哪，我完蛋了。我的项目永远无法交付。”所以不要这样做，把你的虚拟环境放在别的地方。只扫描你自己编写的代码。这样会让你的生活轻松很多。
- en: '![](img/1b2c871c2097675236688dfc1f217728_16.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1b2c871c2097675236688dfc1f217728_16.png)'
- en: But that's pretty much it。 PEP install Bandit。 Run it on your code。 You can
    do it right now in the audience if you want。 So Bandit has more rules than this。
    but here's an example of some of the rules， that you're looking at。 That first
    one came up for me last week， when scanning TensorFlow of all things。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 但这基本上就是全部。用`PEP install Bandit`安装它。在你的代码上运行它。如果你愿意，现在就在观众席上也可以。**Bandit**的规则比这要多，但这里是你需要关注的一些规则。上周我扫描**TensorFlow**时第一个就出现了。
- en: It's a reminder that a search in Python， as in most languages， actually。 gets
    compiled out by the optimizer， because it's meant to be a sort of emergency debug
    check。 and is not good for doing security validation。 So we found that in a lot
    of places in code at work。 and elsewhere where people are often just not aware，
    that the minute this gets compiled， it's gone。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这提醒我们，Python中的搜索，和大多数语言一样，实际上会被优化器编译掉，因为它是作为一种紧急调试检查而存在的，并不适合进行安全验证。因此我们发现，在工作代码的许多地方，以及其他地方，人们往往并不意识到，一旦这个被编译掉，它就消失了。
- en: So it's not super useful。 So it's really useful in your test cases， and not
    so useful elsewhere。 Some of the other ones， if you know anything about security，
    are sort of obvious。 The exact tends to be the whipping boy， of all scripting
    languages。 There's some stuff about cryptography and so on。 Pickle。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这并不是特别有用。因此在你的测试用例中真的很有用，而在其他地方则不那么有用。如果你了解安全性，其他的一些就显得有些显而易见。确切的情况往往是所有脚本语言的替罪羊。有一些关于密码学的东西等等。Pickle。
- en: It's worth if you're not familiar with why any of these things， are。 Bandit
    has a little description， including what the message means in short。 what the
    message means a little bit long， and often it has links back to the OpenStack
    wiki pages。 on how to resolve this and what to do better。 So it's actually pretty
    comprehensive on how it does that。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不熟悉这些东西的原因，值得一提。Bandit有一个简短的描述，包括消息的意思是什么，稍微长一点的消息意思，以及通常它有指向OpenStack wiki页面的链接，说明如何解决这个问题以及如何做得更好。所以它实际上在这方面非常全面。
- en: The other thing that I want to tell you about Bandit， other than don't put your
    virtual M。 in the directory you're scanning， is that sometimes you don't actually
    want。 to fix all your Bandit errors。 So if you're used to using other security
    tools。 you tend to try to drive everything to zero， that's not the way I would
    recommend you use Bandit。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Bandit，我想告诉你另一件事，除了不要把你的虚拟环境放在你正在扫描的目录中，有时你并不想修复所有Bandit错误。所以如果你习惯使用其他安全工具，通常会尝试将所有问题驱动到零，但这不是我推荐你使用Bandit的方式。
- en: Bandit is， again， it was designed originally for OpenStack。 and it calls out
    a lot of stuff that is dangerous， but not necessarily wrong。 So the one that hits
    me in the CVE binary tool， is calling out to system functions via subprocess。
    which is the right way to do things， but also potentially dangerous。 And in my
    case。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Bandit，重申一下，它最初是为OpenStack设计的，指出了许多危险但不一定错误的内容。因此在CVE二进制工具中让我注意到的是，通过subprocess调用系统功能，这是一种正确的做法，但也可能是危险的。在我的情况下。
- en: we call it to subprocess， in order to identify files， we use the Linux strings
    utility。 And we actually have a Google Summer of Code student。 who was investigating
    making our code run on systems， like Windows that don't necessarily have that。
    And so she put in a thing that does that parsing in Python。 And that was great。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们调用subprocess，来识别文件，我们使用Linux的strings工具。实际上我们有一个谷歌暑期代码的学生，她正在研究让我们的代码在一些不一定具备该功能的系统上运行，比如Windows。所以她在Python中做了一个解析功能。这非常好。
- en: except that the first thing I got was a email， from the Octo team saying， "Ah。
    your script used to run in 107 seconds。 It's been five minutes， and now I'm filing
    a bug。"。 And then 45 minutes later， another message saying， "It's been 45 minutes，
    and it's still going。 What did you do？"， So yeah， we want to use subprocess。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我收到的第一封邮件是来自Octo团队，说：“啊，你的脚本原本需要107秒运行。现在已经过去五分钟，我在提交一个错误报告。”然后45分钟后，又收到一条消息说：“已经过去45分钟，它还在运行。你做了什么？”所以是的，我们想使用subprocess。
- en: It's much more performant than our pure Python solution。 and that's not something
    I'm ever going to remove。 because it's sort of compiled like Y duplicate code。
    So using GENDON as a way to focus your code review， is a good thing to do。 As
    I said。 it's got information about each of the bugs， that you can look up on it，
    and that's super helpful。 What it doesn't have is it doesn't have sort of， a code
    review facility where you can say。 "This is not a bug，" or， "That I've checked
    this。"， If you want to add it though， it's open source。 I know I'd be interested
    in seeing it。 So what's the next step？ So these are things that are fast。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 它的性能远远超过我们的纯Python解决方案，这不是我会去删除的，因为它在某种程度上是编译的像Y重复代码。因此，使用GENDON来聚焦你的代码审查是一个好主意。正如我所说，它提供了有关每个错误的信息，你可以在上面查找，这非常有帮助。它缺乏的是那种代码审查功能，让你可以说：“这不是一个错误，”或者“我已经检查过这个。”不过如果你想添加，它是开源的。我知道我会对看到这个感兴趣。那么下一步是什么？这些是快速的事情。
- en: You can run it in your CI， you can run it on every single， commit。 and it's
    totally reasonable to do。 With Bandit， you don't want it to block your commits。
    You do have to be a little bit careful， about how you set it up。 There are a number
    of other tools。 with different heuristics available。 There's some open source
    ones like SonarCube。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的CI中运行它，可以在每一个提交中运行，这是完全合理的。使用Bandit时，你不希望它阻止你的提交。你确实需要对如何设置它小心一些。有很多其他工具，具有不同的启发式可用。有一些开源工具，比如SonarCube。
- en: The only one I'm going to mention here， just because there's so many， and they're
    very varied。 and I don't like all of them。 But one that is interesting to us，
    because it's being used。 by CPython， is scan。coverity。com， which is free for open
    source。 So if you have an open source project， and you want to see what coverity
    looks like。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我这里唯一要提到的，仅仅因为有太多种类，而且它们各不相同，我也不喜欢所有的。但有一个对我们很有趣，因为它被CPython使用的工具是scan.coverity.com，这是针对开源项目免费的。如果你有一个开源项目，想看看coverity的效果。
- en: you can sign up for that and do that。 I would show you screenshots， but I accidentally。
    broke my account by changing my email address。 So yeah， that was unfortunate。
    But it basically runs。 they have a commercial tool， and it basically runs about
    a version behind， sometimes two。 and gives you the full range of stuff。 And it's
    got a lot of good rules for Python。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以注册并参与。我本来想给你们展示屏幕截图，但我不小心通过更改我的电子邮件地址破坏了我的账户。所以，是的，这很不幸。但它基本上是运行的。他们有一个商业工具，基本上有时滞后一个版本，甚至两个版本，提供全方位的功能。并且它对Python有很多很好的规则。
- en: that we've found very useful for the open source， projects I use that use it。
    So let's go back to this。 But Python is inherently secure。 And it's all fine and
    good to say， OK。 here's how you focus your code review。 But what if you're working
    with a team of people， who just。 in their heart of hearts， believe Python is secure
    and are not， going to do much looking at it？
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发现这些工具对我使用的开源项目非常有用。所以让我们回到这个话题。但Python本质上是安全的。说“好的，这就是你如何集中注意力进行代码审查”是很好，但如果你和一个团队合作，他们在内心深处相信Python是安全的，并且不会太关注代码呢？
- en: So that's a problem。 It's worth noting， and I hope none of you。 were in here
    hoping I was going to tell you， about very specific Python security issues。 There
    are a few， but to be completely honest， most of the issues I see in Python are
    issues。 I see in other languages。 So as I said， obsolete dependencies， that's
    a huge problem。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这是一个问题。值得注意的是，我希望你们没有在这里等着我告诉你关于非常具体的Python安全问题。确实有一些，但老实说，我在Python中看到的大多数问题都是我在其他语言中看到的问题。正如我所说，过时的依赖关系，这是一个巨大的问题。
- en: Obsolete cryptography， if you run Bandit， and it tells you you're still using
    Pi Crypto。 please don't do that。 Secrets and code， people putting their keys，
    where they shouldn't be。 Not enough input validation。 And all of these things
    are the same things。 you see in the whole list of the top 25 software errors，
    that Sans puts out every couple of years。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 过时的加密，如果你运行Bandit，它告诉你你仍在使用Pi Crypto，请不要那样做。秘密和代码，人们把他们的密钥放在不该放的地方。输入验证不足。所有这些问题都是你在Sans每隔几年发布的前25个软件错误列表中看到的相同问题。
- en: We're basically only missing two， I think。 There's a buffer overflow one and
    then。 there's another related one。 Like all the integer arithmetic， we can still
    screw that up。 There's very little that there's nothing new under the sun， in
    security， unfortunately。 But if you have teams or you just， want to work on your
    own education。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我想我们基本上只缺少两个。有一个是缓冲区溢出的问题，还有一个是相关的问题。像所有的整数运算，我们仍然可能会搞砸。安全领域里几乎没有什么是新鲜事。不幸的是，但如果你有团队或者只是想提高自己的教育水平。
- en: you will find that it's actually kind of hard， because all of the security guides
    were written for C。 C++， Java， there's not very much written with Python examples，
    in mind。 So obviously Bandit does have some examples。 I like this one when I'm
    giving it out to new teams。 that haven't done security work on Python before，
    because it does have--。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现这实际上是有点困难，因为所有的安全指南都是为C、C++和Java编写的，针对Python的例子很少。所以显然，Bandit确实有一些例子。我喜欢在我给那些之前没有做过Python安全工作的新团队时使用这个，因为它确实有——。
- en: at the time I did the screenshot， I think it might have a couple more。 It does
    have Python examples for 109 different types， of security issue and explanation
    as to why。 Fortify does a number of other tools and fuzzing and stuff。 So they're
    very familiar and very knowledgeable。 So this is a great one if you'd need a place
    to start。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在我截屏的时候，我想可能还有更多内容。它确实有109种不同类型的安全问题的Python示例和解释。Fortify还提供其他工具、模糊测试等。所以他们非常熟悉，也非常有知识。这是一个很好的起点。
- en: So we have some tools。 Where should you be using them？ One， in your continuous
    integration。 That's too much of a pain。 Do it before you do code review。 If you
    don't do code review。 at least do it， before your release， please。 So this is
    what I really want to be the answer when you search。 for how do you secure Python。
    There are other things you can do。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们有一些工具。你应该在哪里使用它们？首先，在你的持续集成中。这太麻烦了。请在代码审查之前完成。如果你不进行代码审查，至少在发布之前要做，请。这样就是我希望你搜索时能得到的答案：如何保护Python。还有其他的事情可以做。
- en: I went to a great talk this morning earlier today， on type checking。 There's
    a bazillion other tools。 But this is the bare minimum that I want you to all please。
    take a picture of that， send it to your team， put it on Twitter， whatever。 Do
    your vulnerability checks。 You can do it in a couple of ways。 Do some code quality
    checks。
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 今天早上我参加了一场关于类型检查的精彩讲座。还有成千上万的其他工具。但这是我希望你们所有人请务必记住的最低限度。拍下这个，发给你的团队，发到Twitter，随便。进行漏洞检查。你可以用几种方式进行。做一些代码质量检查。
- en: Bandit is great。 Please learn to love it。 Maybe we can contribute some new things。
    to make it easier for people to use。 It's worth looking into other static analysis。
    if you have access to the budget for that， or are willing to suffer through the
    open source tools。 to get them up to what you want。 And do learn about how to
    do code reviews for Python。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Bandit很好。请学会喜欢它。也许我们可以贡献一些新东西，使其更易于使用。如果你有预算，可以考虑其他静态分析工具，或者愿意通过开源工具忍受一下，将它们提升到你想要的水平。并且要学习如何进行Python的代码审查。
- en: because they're the same as everything， but sometimes people just are so optimistic
    about our language。 that they don't realize that that's， the thing they need to
    know。 And we've got time for questions。 I will say that if you don't want to be
    that jerk who。 forms their question not in the form of a question。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 因为它们和所有工具一样，但有时人们对我们的语言过于乐观，以至于没有意识到这是他们需要知道的事情。我们有时间进行提问。我想说，如果你不想成为那个不以问题形式提问的家伙。
- en: but you do want to tell me about a really awesome tool， that I should have been
    talking about。 please send me an email。 I love knowing about tools。 I don't know
    that everyone in the room。 wants to hear us pontificate about them though。 So
    please raise your question in the form of question。 and I'm done。 Oh， and I should
    say， Intel is hiring。 If you think my job sounds cool， we。
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 但你确实想告诉我一个非常棒的工具，我应该早就提到过。请给我发封邮件。我喜欢了解工具。我不确定房间里的每个人都想听我们对此长篇大论。所以请以问题的形式提出你的问题，我就说到这里。哦，我还得说，英特尔正在招聘。如果你觉得我的工作很酷，我们。
- en: want a person just like me。 I would be happy to talk to you about it。 [APPLAUSE]，
    OK。 if anyone has questions， they， should come to the mic now or the one in the
    back， in the way。 So I didn't get that earlier when， it talked about safety versus
    pip-inf-check。 So we're running pip-inf-check， but we never， got a license from
    safety。
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 想要一个像我这样的人。我很乐意和你谈谈。 [掌声] 好的。如果有人有问题，应该现在来麦克风前或者后面的那个地方。我刚才没明白，关于安全与pip-inf-check的事情。所以我们在运行pip-inf-check，但从未获得安全的许可证。
- en: So you said they access the same database if you have--， Yeah。 you're probably
    using the free database。 If you want an even better database。 you can get a license
    to get that。 OK， so that has an extra。 And that's worth it。 Yeah。 It seems worth
    it to me， but I work with a lot of projects， at once， so it's a lot of big projects。
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你说如果你有——是的。你可能在使用免费的数据库。如果你想要一个更好的数据库，可以获得许可证。好的，那样就多了一些。这是值得的。是的。在我看来是值得的，但我同时处理很多项目，所以涉及很多大项目。
- en: So it may or may not be worth it to you。 All right， thanks。 Are you aware of
    any tools that automatically detect， security flaws and try to fix it。 kind of
    like refactoring？ You're likely two to three。 I haven't seen any good ones for
    Python。 I have seen them for other languages。 So no， basically， I guess is the
    answer。 It is possible。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这对你来说可能有价值，也可能没有。好的，谢谢。你是否知道任何自动检测安全漏洞并尝试修复的工具？有点像重构？你可能要两到三种。我没看到Python的好工具，但我见过其他语言的。所以基本上，我想答案是否定的。这是有可能的。
- en: There's a lot of really interesting academic work， in that area， really great
    papers。 If you're bored， USNIC security is coming up in a few months。 and they
    put all their papers out for free， and they're going to have a really cool research
    that。 will include stuff like that。 But usually people focus on C because that's
    scarier。 OK。
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在那个领域有很多非常有趣的学术工作，真的很棒的论文。如果你感到无聊，美国网络安全会议将在几个月后举行，他们会免费发布所有论文，并且会有很酷的研究，包含类似的内容。但通常人们会更关注C语言，因为那更让人害怕。好的。
- en: thank you very much。 [APPLAUSE]。
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 非常感谢。[掌声]。
- en: '![](img/1b2c871c2097675236688dfc1f217728_18.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1b2c871c2097675236688dfc1f217728_18.png)'
- en: (applause)。
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: （掌声）。
